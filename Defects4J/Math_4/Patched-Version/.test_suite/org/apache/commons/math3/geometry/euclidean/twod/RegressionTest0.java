package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = null;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine2 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(vector2D0, vector2D1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        org.apache.commons.math3.geometry.euclidean.twod.Segment segment0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine1 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(segment0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.apache.commons.math3.geometry.euclidean.threed.Segment segment0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine1 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(segment0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.euclidean.threed.Line line1 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane2 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList3 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet4 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList3);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint5 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane2, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet4);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D6 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean8 = vector1D6.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean16 = vector1D14.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = vector1D14.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D19 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double20 = vector1D18.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D19);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean24 = vector1D22.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = vector1D22.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D27 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D10, (double) 100, vector1D12, (double) (short) 0, vector1D19, (double) 'a', vector1D22);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D29 = vector1D22.scalarMultiply(4.605170185988092d);
        java.lang.String str30 = vector1D29.toString();
        double double31 = vector1D6.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D29);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = vector1D6.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location34 = intervalsSet4.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D6);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector35 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location36 = intervalsSet4.checkPoint(euclidean1DVector35);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine37 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line1, intervalsSet4);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine38 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.commons.math3.geometry.euclidean.twod.Segment> segmentList39 = subLine38.getSegments();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(vector1D26);
        org.junit.Assert.assertNotNull(vector1D29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{(NaN)}" + "'", str30, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector1D33);
        org.junit.Assert.assertTrue("'" + location34 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location34.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location36 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location36.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine5 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.commons.math3.geometry.euclidean.twod.Segment> segmentList6 = subLine5.getSegments();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D4 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean6 = vector1D4.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D8 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean12 = vector1D10.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = vector1D10.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double16 = vector1D14.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D4, 2.2250738585072014E-308d, vector1D8, 1.0000000000000002d, vector1D15);
        java.lang.String str18 = vector1D15.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location19 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space22 = vector1D21.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space25 = vector1D24.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D21, (double) 100L, vector1D24);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space29 = vector1D28.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D31 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space32 = vector1D31.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D28, (double) 100L, vector1D31);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = vector1D26.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.partitioning.Region.Location location35 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.euclidean.threed.Line line36 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet39 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean43 = vector1D41.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean49 = vector1D47.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = vector1D47.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double53 = vector1D51.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D41, 2.2250738585072014E-308d, vector1D45, 1.0000000000000002d, vector1D52);
        java.lang.String str55 = vector1D52.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location56 = intervalsSet39.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector57 = intervalsSet39.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine58 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line36, intervalsSet39);
        boolean boolean59 = intervalsSet2.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet39);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D63 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D65 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean67 = vector1D65.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = vector1D65.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D70 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double71 = vector1D69.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D70);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D73 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean75 = vector1D73.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D77 = vector1D73.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D78 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D61, (double) 100, vector1D63, (double) (short) 0, vector1D70, (double) 'a', vector1D73);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = vector1D73.scalarMultiply(4.605170185988092d);
        double double81 = vector1D80.getNorm1();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint83 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint(vector1D80, false);
        org.apache.commons.math3.geometry.partitioning.Side side84 = intervalsSet39.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint83);
        orientedPoint83.revertSelf();
        org.junit.Assert.assertNotNull(vector1D4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(vector1D8);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{(NaN)}" + "'", str18, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location19 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location19.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(space22);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(space25);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertNotNull(space29);
        org.junit.Assert.assertNotNull(vector1D31);
        org.junit.Assert.assertNotNull(space32);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertTrue("'" + location35 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location35.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{(NaN)}" + "'", str55, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location56 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location56.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(vector1D61);
        org.junit.Assert.assertNotNull(vector1D63);
        org.junit.Assert.assertNotNull(vector1D65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertNotNull(vector1D70);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(vector1D73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(vector1D77);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + side84 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.MINUS + "'", side84.equals(org.apache.commons.math3.geometry.partitioning.Side.MINUS));
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine5 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DTransform6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractSubHyperplane7 = subLine5.applyTransform(euclidean2DTransform6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine5 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DSplitSubHyperplane7 = subLine5.split(euclidean2DHyperplane6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.euclidean.threed.Line line1 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane2 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList3 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet4 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList3);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint5 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane2, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet4);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D6 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean8 = vector1D6.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean16 = vector1D14.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = vector1D14.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D19 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double20 = vector1D18.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D19);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean24 = vector1D22.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = vector1D22.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D27 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D10, (double) 100, vector1D12, (double) (short) 0, vector1D19, (double) 'a', vector1D22);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D29 = vector1D22.scalarMultiply(4.605170185988092d);
        java.lang.String str30 = vector1D29.toString();
        double double31 = vector1D6.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D29);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = vector1D6.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location34 = intervalsSet4.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D6);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector35 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location36 = intervalsSet4.checkPoint(euclidean1DVector35);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine37 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line1, intervalsSet4);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine38 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet4);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane39 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane40 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList41 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet42 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList41);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint43 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane40, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet42);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine44 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane39, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = subLine38.intersection(subLine44, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(vector1D26);
        org.junit.Assert.assertNotNull(vector1D29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{(NaN)}" + "'", str30, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector1D33);
        org.junit.Assert.assertTrue("'" + location34 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location34.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location36 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location36.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane0 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList1 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList1);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint3 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet2);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane4 = subOrientedPoint3.getHyperplane();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractSubHyperplane5 = subOrientedPoint3.copySelf();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet8 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean12 = vector1D10.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean18 = vector1D16.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D20 = vector1D16.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double22 = vector1D20.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D21);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D23 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D10, 2.2250738585072014E-308d, vector1D14, 1.0000000000000002d, vector1D21);
        java.lang.String str24 = vector1D21.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location25 = intervalsSet8.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D21);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D27 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space28 = vector1D27.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D30 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space31 = vector1D30.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D27, (double) 100L, vector1D30);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space35 = vector1D34.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D37 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space38 = vector1D37.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D39 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D34, (double) 100L, vector1D37);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D40 = vector1D32.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D34);
        org.apache.commons.math3.geometry.partitioning.Region.Location location41 = intervalsSet8.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D34);
        org.apache.commons.math3.geometry.euclidean.threed.Line line42 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet45 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean49 = vector1D47.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D53 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean55 = vector1D53.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D57 = vector1D53.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D58 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double59 = vector1D57.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D58);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D60 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D47, 2.2250738585072014E-308d, vector1D51, 1.0000000000000002d, vector1D58);
        java.lang.String str61 = vector1D58.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location62 = intervalsSet45.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D58);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector63 = intervalsSet45.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine64 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line42, intervalsSet45);
        boolean boolean65 = intervalsSet8.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet45);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D67 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D71 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean73 = vector1D71.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D75 = vector1D71.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D76 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double77 = vector1D75.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D76);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D79 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean81 = vector1D79.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D83 = vector1D79.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D84 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D67, (double) 100, vector1D69, (double) (short) 0, vector1D76, (double) 'a', vector1D79);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D86 = vector1D79.scalarMultiply(4.605170185988092d);
        double double87 = vector1D86.getNorm1();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint89 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint(vector1D86, false);
        org.apache.commons.math3.geometry.partitioning.Side side90 = intervalsSet45.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint89);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DSplitSubHyperplane91 = subOrientedPoint3.split((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(euclidean1DHyperplane4);
        org.junit.Assert.assertNotNull(euclidean1DAbstractSubHyperplane5);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(vector1D20);
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{(NaN)}" + "'", str24, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location25 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location25.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D27);
        org.junit.Assert.assertNotNull(space28);
        org.junit.Assert.assertNotNull(vector1D30);
        org.junit.Assert.assertNotNull(space31);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertNotNull(space35);
        org.junit.Assert.assertNotNull(vector1D37);
        org.junit.Assert.assertNotNull(space38);
        org.junit.Assert.assertNotNull(vector1D40);
        org.junit.Assert.assertTrue("'" + location41 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location41.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertNotNull(vector1D53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(vector1D57);
        org.junit.Assert.assertNotNull(vector1D58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{(NaN)}" + "'", str61, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location62 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location62.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(vector1D67);
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertNotNull(vector1D71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(vector1D75);
        org.junit.Assert.assertNotNull(vector1D76);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(vector1D79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(vector1D83);
        org.junit.Assert.assertNotNull(vector1D86);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue("'" + side90 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.MINUS + "'", side90.equals(org.apache.commons.math3.geometry.partitioning.Side.MINUS));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.apache.commons.math3.geometry.euclidean.threed.Line line0 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D5 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean7 = vector1D5.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D9 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean13 = vector1D11.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = vector1D11.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double17 = vector1D15.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D16);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D5, 2.2250738585072014E-308d, vector1D9, 1.0000000000000002d, vector1D16);
        java.lang.String str19 = vector1D16.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location20 = intervalsSet3.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D16);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector21 = intervalsSet3.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine22 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line0, intervalsSet3);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree23 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = intervalsSet3.isEmpty(euclidean1DBSPTree23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(vector1D9);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{(NaN)}" + "'", str19, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location20 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location20.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector21);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.apache.commons.math3.geometry.euclidean.threed.Line line0 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D5 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean7 = vector1D5.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D9 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean13 = vector1D11.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = vector1D11.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double17 = vector1D15.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D16);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D5, 2.2250738585072014E-308d, vector1D9, 1.0000000000000002d, vector1D16);
        java.lang.String str19 = vector1D16.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location20 = intervalsSet3.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D16);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space23 = vector1D22.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D25 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space26 = vector1D25.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D27 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D22, (double) 100L, vector1D25);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D29 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space30 = vector1D29.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space33 = vector1D32.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D29, (double) 100L, vector1D32);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D35 = vector1D27.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D29);
        org.apache.commons.math3.geometry.partitioning.Region.Location location36 = intervalsSet3.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D29);
        org.apache.commons.math3.geometry.euclidean.threed.Line line37 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet40 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D42 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean44 = vector1D42.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D46 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D48 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean50 = vector1D48.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = vector1D48.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D53 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double54 = vector1D52.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D53);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D55 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D42, 2.2250738585072014E-308d, vector1D46, 1.0000000000000002d, vector1D53);
        java.lang.String str56 = vector1D53.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location57 = intervalsSet40.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D53);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector58 = intervalsSet40.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine59 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line37, intervalsSet40);
        boolean boolean60 = intervalsSet3.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet40);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine61 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line0, intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D62, vector3D63);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double66 = vector3D62.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D65);
        double double67 = vector3D65.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double69 = vector3D65.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D70, vector3D71);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double74 = vector3D70.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D73);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D75, vector3D76);
        double double78 = vector3D75.getNorm1();
        double double79 = vector3D70.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D75);
        double double80 = vector3D70.getNormInf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D81, vector3D82);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double85 = vector3D84.getNorm();
        double double86 = vector3D84.getNorm();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.Space space88 = vector3D87.getSpace();
        double double89 = vector3D84.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D87);
        double double90 = vector3D82.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D87);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D91 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.Space space92 = vector3D91.getSpace();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector93 = vector3D87.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D91);
        boolean boolean94 = vector3D91.isNaN();
        double double95 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D70, vector3D91);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine96 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D65, vector3D70);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D98 = subLine61.intersection(subLine96, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(vector1D9);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{(NaN)}" + "'", str19, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location20 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location20.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertNotNull(space23);
        org.junit.Assert.assertNotNull(vector1D25);
        org.junit.Assert.assertNotNull(space26);
        org.junit.Assert.assertNotNull(vector1D29);
        org.junit.Assert.assertNotNull(space30);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertNotNull(space33);
        org.junit.Assert.assertNotNull(vector1D35);
        org.junit.Assert.assertTrue("'" + location36 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location36.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(vector1D46);
        org.junit.Assert.assertNotNull(vector1D48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertNotNull(vector1D53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{(NaN)}" + "'", str56, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location57 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location57.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + Double.POSITIVE_INFINITY + "'", double67 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + Double.POSITIVE_INFINITY + "'", double78 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + Double.POSITIVE_INFINITY + "'", double79 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + Double.POSITIVE_INFINITY + "'", double80 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + Double.POSITIVE_INFINITY + "'", double85 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + Double.POSITIVE_INFINITY + "'", double86 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(space88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + Double.POSITIVE_INFINITY + "'", double89 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + Double.POSITIVE_INFINITY + "'", double90 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(space92);
        org.junit.Assert.assertNotNull(euclidean3DVector93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + Double.POSITIVE_INFINITY + "'", double95 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D1);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double4 = vector3D0.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3);
        double double5 = vector3D3.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double7 = vector3D3.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D8, vector3D9);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double12 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D13, vector3D14);
        double double16 = vector3D13.getNorm1();
        double double17 = vector3D8.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double18 = vector3D8.getNormInf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D19, vector3D20);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double23 = vector3D22.getNorm();
        double double24 = vector3D22.getNorm();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.Space space26 = vector3D25.getSpace();
        double double27 = vector3D22.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        double double28 = vector3D20.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.Space space30 = vector3D29.getSpace();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector31 = vector3D25.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D29);
        boolean boolean32 = vector3D29.isNaN();
        double double33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D8, vector3D29);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine34 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D3, vector3D8);
        double double35 = vector3D3.getNormInf();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.POSITIVE_INFINITY + "'", double18 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + Double.POSITIVE_INFINITY + "'", double23 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(space26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + Double.POSITIVE_INFINITY + "'", double27 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + Double.POSITIVE_INFINITY + "'", double28 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(space30);
        org.junit.Assert.assertNotNull(euclidean3DVector31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = null;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D1, vector3D2);
        double double4 = vector3D1.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D5, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D6.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D9);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D11, vector3D12);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D12.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D15);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector17 = vector3D9.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D15);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine18 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D1, vector3D9);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.POSITIVE_INFINITY + "'", double4 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(euclidean3DVector17);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D4 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean6 = vector1D4.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D8 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean12 = vector1D10.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = vector1D10.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double16 = vector1D14.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D4, 2.2250738585072014E-308d, vector1D8, 1.0000000000000002d, vector1D15);
        java.lang.String str18 = vector1D15.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location19 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space22 = vector1D21.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space25 = vector1D24.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D21, (double) 100L, vector1D24);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space29 = vector1D28.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D31 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space32 = vector1D31.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D28, (double) 100L, vector1D31);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = vector1D26.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.partitioning.Region.Location location35 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.euclidean.threed.Line line36 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet39 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean43 = vector1D41.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean49 = vector1D47.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = vector1D47.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double53 = vector1D51.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D41, 2.2250738585072014E-308d, vector1D45, 1.0000000000000002d, vector1D52);
        java.lang.String str55 = vector1D52.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location56 = intervalsSet39.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector57 = intervalsSet39.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine58 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line36, intervalsSet39);
        boolean boolean59 = intervalsSet2.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet39);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree61 = intervalsSet39.getTree(false);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane62 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList63 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet64 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList63);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint65 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane62, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet64);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane66 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList67 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet68 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList67);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint69 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane66, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet68);
        double double70 = subOrientedPoint69.getSize();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractSubHyperplane71 = subOrientedPoint65.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) subOrientedPoint69);
        double double72 = euclidean1DAbstractSubHyperplane71.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DSubHyperplane73 = intervalsSet39.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) euclidean1DAbstractSubHyperplane71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(vector1D8);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{(NaN)}" + "'", str18, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location19 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location19.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(space22);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(space25);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertNotNull(space29);
        org.junit.Assert.assertNotNull(vector1D31);
        org.junit.Assert.assertNotNull(space32);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertTrue("'" + location35 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location35.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{(NaN)}" + "'", str55, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location56 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location56.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree61);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean1DAbstractSubHyperplane71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet5 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D7 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean9 = vector1D7.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D13 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean15 = vector1D13.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = vector1D13.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double19 = vector1D17.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D18);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D20 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D7, 2.2250738585072014E-308d, vector1D11, 1.0000000000000002d, vector1D18);
        java.lang.String str21 = vector1D18.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location22 = intervalsSet5.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D18);
        boolean boolean23 = intervalsSet2.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet5);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet26 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean30 = vector1D28.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean36 = vector1D34.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D38 = vector1D34.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D39 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double40 = vector1D38.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D39);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D28, 2.2250738585072014E-308d, vector1D32, 1.0000000000000002d, vector1D39);
        java.lang.String str42 = vector1D39.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location43 = intervalsSet26.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D39);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space46 = vector1D45.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D48 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space49 = vector1D48.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D50 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D45, (double) 100L, vector1D48);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space53 = vector1D52.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D55 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space56 = vector1D55.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D57 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D52, (double) 100L, vector1D55);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D58 = vector1D50.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.partitioning.Region.Location location59 = intervalsSet26.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.euclidean.threed.Line line60 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet63 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D65 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean67 = vector1D65.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D71 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean73 = vector1D71.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D75 = vector1D71.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D76 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double77 = vector1D75.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D76);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D78 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D65, 2.2250738585072014E-308d, vector1D69, 1.0000000000000002d, vector1D76);
        java.lang.String str79 = vector1D76.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location80 = intervalsSet63.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D76);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector81 = intervalsSet63.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine82 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line60, intervalsSet63);
        boolean boolean83 = intervalsSet26.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet63);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree85 = intervalsSet63.getTree(false);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion86 = intervalsSet2.buildNew(euclidean1DBSPTree85);
        boolean boolean87 = euclidean1DRegion86.isEmpty();
        org.junit.Assert.assertNotNull(vector1D7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertNotNull(vector1D13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(vector1D17);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{(NaN)}" + "'", str21, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location22 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location22.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(vector1D38);
        org.junit.Assert.assertNotNull(vector1D39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{(NaN)}" + "'", str42, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location43 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location43.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertNotNull(space46);
        org.junit.Assert.assertNotNull(vector1D48);
        org.junit.Assert.assertNotNull(space49);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertNotNull(space53);
        org.junit.Assert.assertNotNull(vector1D55);
        org.junit.Assert.assertNotNull(space56);
        org.junit.Assert.assertNotNull(vector1D58);
        org.junit.Assert.assertTrue("'" + location59 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location59.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertNotNull(vector1D71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(vector1D75);
        org.junit.Assert.assertNotNull(vector1D76);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "{(NaN)}" + "'", str79, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location80 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location80.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree85);
        org.junit.Assert.assertNotNull(euclidean1DRegion86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D67 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = vector2D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D68);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = vector2D70.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D71);
        double double73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D69, vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D75 = vector2D70.scalarMultiply((double) (-1.0f));
        double double76 = vector2D70.getNormInf();
        double double77 = line66.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine78 = line66.wholeHyperplane();
        line66.setOriginOffset((double) (byte) 100);
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector2D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(subLine78);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D1);
        double double3 = vector3D0.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D4, vector3D5);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D5.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D10, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D11.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D14);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector16 = vector3D8.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D14);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine17 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D0, vector3D8);
        java.util.List<org.apache.commons.math3.geometry.euclidean.threed.Segment> segmentList18 = subLine17.getSegments();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.POSITIVE_INFINITY + "'", double3 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(euclidean3DVector16);
        org.junit.Assert.assertNotNull(segmentList18);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D67 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = vector2D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D68);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = vector2D70.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D71);
        double double73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D69, vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D75 = vector2D70.scalarMultiply((double) (-1.0f));
        double double76 = vector2D70.getNormInf();
        double double77 = line66.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine78 = line66.wholeHyperplane();
        double double79 = subLine78.getSize();
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector2D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(subLine78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + Double.POSITIVE_INFINITY + "'", double79 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane0 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList1 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList1);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint3 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet2);
        boolean boolean4 = subOrientedPoint3.isEmpty();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractSubHyperplane5 = subOrientedPoint3.copySelf();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractSubHyperplane6 = subOrientedPoint3.copySelf();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet9 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean13 = vector1D11.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean19 = vector1D17.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = vector1D17.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double23 = vector1D21.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D22);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D11, 2.2250738585072014E-308d, vector1D15, 1.0000000000000002d, vector1D22);
        java.lang.String str25 = vector1D22.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location26 = intervalsSet9.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D22);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space29 = vector1D28.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D31 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space32 = vector1D31.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D28, (double) 100L, vector1D31);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D35 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space36 = vector1D35.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D38 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space39 = vector1D38.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D40 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D35, (double) 100L, vector1D38);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = vector1D33.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D35);
        org.apache.commons.math3.geometry.partitioning.Region.Location location42 = intervalsSet9.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D35);
        org.apache.commons.math3.geometry.euclidean.threed.Line line43 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet46 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D48 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean50 = vector1D48.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean56 = vector1D54.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D58 = vector1D54.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D59 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double60 = vector1D58.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D59);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D48, 2.2250738585072014E-308d, vector1D52, 1.0000000000000002d, vector1D59);
        java.lang.String str62 = vector1D59.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location63 = intervalsSet46.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D59);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector64 = intervalsSet46.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine65 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line43, intervalsSet46);
        boolean boolean66 = intervalsSet9.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet46);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D68 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D70 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D72 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean74 = vector1D72.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D76 = vector1D72.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D77 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double78 = vector1D76.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D77);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean82 = vector1D80.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D84 = vector1D80.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D85 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D68, (double) 100, vector1D70, (double) (short) 0, vector1D77, (double) 'a', vector1D80);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D87 = vector1D80.scalarMultiply(4.605170185988092d);
        double double88 = vector1D87.getNorm1();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint90 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint(vector1D87, false);
        org.apache.commons.math3.geometry.partitioning.Side side91 = intervalsSet46.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint90);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.Side side92 = subOrientedPoint3.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(euclidean1DAbstractSubHyperplane5);
        org.junit.Assert.assertNotNull(euclidean1DAbstractSubHyperplane6);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertNotNull(vector1D17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{(NaN)}" + "'", str25, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location26 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location26.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertNotNull(space29);
        org.junit.Assert.assertNotNull(vector1D31);
        org.junit.Assert.assertNotNull(space32);
        org.junit.Assert.assertNotNull(vector1D35);
        org.junit.Assert.assertNotNull(space36);
        org.junit.Assert.assertNotNull(vector1D38);
        org.junit.Assert.assertNotNull(space39);
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertTrue("'" + location42 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location42.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertNotNull(vector1D54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(vector1D58);
        org.junit.Assert.assertNotNull(vector1D59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{(NaN)}" + "'", str62, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location63 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location63.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(vector1D68);
        org.junit.Assert.assertNotNull(vector1D70);
        org.junit.Assert.assertNotNull(vector1D72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(vector1D76);
        org.junit.Assert.assertNotNull(vector1D77);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(vector1D84);
        org.junit.Assert.assertNotNull(vector1D87);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue("'" + side91 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.MINUS + "'", side91.equals(org.apache.commons.math3.geometry.partitioning.Side.MINUS));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.euclidean.threed.Line line1 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane2 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList3 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet4 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList3);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint5 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane2, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet4);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D6 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean8 = vector1D6.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean16 = vector1D14.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = vector1D14.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D19 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double20 = vector1D18.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D19);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean24 = vector1D22.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = vector1D22.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D27 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D10, (double) 100, vector1D12, (double) (short) 0, vector1D19, (double) 'a', vector1D22);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D29 = vector1D22.scalarMultiply(4.605170185988092d);
        java.lang.String str30 = vector1D29.toString();
        double double31 = vector1D6.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D29);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = vector1D6.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location34 = intervalsSet4.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D6);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector35 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location36 = intervalsSet4.checkPoint(euclidean1DVector35);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine37 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line1, intervalsSet4);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine38 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet4);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane39 = subLine38.getHyperplane();
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DTransform40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractSubHyperplane41 = subLine38.applyTransform(euclidean2DTransform40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(vector1D26);
        org.junit.Assert.assertNotNull(vector1D29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{(NaN)}" + "'", str30, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector1D33);
        org.junit.Assert.assertTrue("'" + location34 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location34.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location36 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location36.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertNull(euclidean2DHyperplane39);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine5 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane6 = null;
        org.apache.commons.math3.geometry.euclidean.threed.Line line7 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane8 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList9 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet10 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList9);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint11 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane8, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet10);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean14 = vector1D12.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D20 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean22 = vector1D20.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = vector1D20.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D25 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double26 = vector1D24.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D25);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean30 = vector1D28.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = vector1D28.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D16, (double) 100, vector1D18, (double) (short) 0, vector1D25, (double) 'a', vector1D28);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D35 = vector1D28.scalarMultiply(4.605170185988092d);
        java.lang.String str36 = vector1D35.toString();
        double double37 = vector1D12.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D35);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D39 = vector1D12.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location40 = intervalsSet10.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D12);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector41 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location42 = intervalsSet10.checkPoint(euclidean1DVector41);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine43 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line7, intervalsSet10);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine44 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane6, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet10);
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractSubHyperplane45 = subLine5.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) subLine44);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D47 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = vector2D46.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D47);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D49 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = vector2D49.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D50);
        double double52 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D48, vector2D49);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = vector2D49.scalarMultiply((double) (-1.0f));
        double double55 = vector2D49.getNormInf();
        double double56 = vector2D49.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D57 = vector2D49.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D59 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D60 = vector2D58.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D59);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = vector2D61.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D62);
        double double64 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D60, vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D66 = vector2D61.scalarMultiply((double) (-1.0f));
        double double67 = vector2D61.getNormInf();
        double double68 = vector2D61.getNorm();
        double double69 = vector2D49.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = vector2D61.negate();
        boolean boolean71 = vector2D61.isInfinite();
        org.apache.commons.math3.geometry.euclidean.twod.Line line73 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D61, 1033.0842172833732d);
        org.apache.commons.math3.geometry.euclidean.twod.Line line74 = new org.apache.commons.math3.geometry.euclidean.twod.Line(line73);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.Side side75 = subLine44.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(vector1D25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertNotNull(vector1D35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{(NaN)}" + "'", str36, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(vector1D39);
        org.junit.Assert.assertTrue("'" + location40 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location40.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location42 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location42.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertNotNull(euclidean2DAbstractSubHyperplane45);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D47);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D49);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + Double.POSITIVE_INFINITY + "'", double55 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + Double.POSITIVE_INFINITY + "'", double56 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D57);
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertNotNull(vector2D59);
        org.junit.Assert.assertNotNull(vector2D60);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertNotNull(vector2D63);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + Double.POSITIVE_INFINITY + "'", double67 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + Double.POSITIVE_INFINITY + "'", double68 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D1);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double4 = vector3D0.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D5, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double9 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double11 = vector3D10.getNorm();
        double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D5, vector3D10);
        double double13 = vector3D3.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D14, vector3D15);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D15.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        double double23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D22);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D24, vector3D25);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D25.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28);
        double double30 = vector3D22.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector31 = vector3D15.add((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D22);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D10.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D22);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D34, vector3D35);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double38 = vector3D34.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D37);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double40 = vector3D39.getNorm();
        double double41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D34, vector3D39);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D43, vector3D44);
        double double46 = vector3D43.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D48, vector3D49);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double52 = vector3D48.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D53, vector3D54);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double57 = vector3D53.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double59 = vector3D58.getNorm();
        double double60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D53, vector3D58);
        double double61 = vector3D51.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D58);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) 'a', vector3D39, (double) 6, vector3D43, (double) 10.0f, vector3D58, 0.0d, vector3D63);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = vector3D64.negate();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector67 = vector3D64.scalarMultiply((double) 10L);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D64.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine69 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D22, vector3D64);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + Double.POSITIVE_INFINITY + "'", double11 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean3DVector31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + Double.POSITIVE_INFINITY + "'", double40 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + Double.POSITIVE_INFINITY + "'", double46 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(euclidean3DVector67);
        org.junit.Assert.assertNotNull(vector3D68);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet0 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        double double1 = intervalsSet0.getSize();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D3 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space4 = vector1D3.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D6 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space7 = vector1D6.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D8 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D3, (double) 100L, vector1D6);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space11 = vector1D10.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D13 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space14 = vector1D13.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D10, (double) 100L, vector1D13);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = vector1D8.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D10);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean19 = vector1D17.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = vector1D17.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double23 = vector1D21.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D22);
        double double24 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.distance(vector1D16, vector1D21);
        org.apache.commons.math3.geometry.partitioning.Region.Location location25 = intervalsSet0.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D21);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion26 = intervalsSet0.copySelf();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet27 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        double double28 = intervalsSet27.getSize();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet31 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean35 = vector1D33.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D37 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D39 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean41 = vector1D39.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = vector1D39.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D44 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double45 = vector1D43.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D44);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D46 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D33, 2.2250738585072014E-308d, vector1D37, 1.0000000000000002d, vector1D44);
        java.lang.String str47 = vector1D44.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location48 = intervalsSet31.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D44);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D50 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space51 = vector1D50.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D53 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space54 = vector1D53.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D55 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D50, (double) 100L, vector1D53);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D57 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space58 = vector1D57.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D60 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space61 = vector1D60.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D62 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D57, (double) 100L, vector1D60);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D63 = vector1D55.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D57);
        org.apache.commons.math3.geometry.partitioning.Region.Location location64 = intervalsSet31.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D57);
        org.apache.commons.math3.geometry.euclidean.threed.Line line65 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet68 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D70 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean72 = vector1D70.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D74 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D76 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean78 = vector1D76.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = vector1D76.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D81 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double82 = vector1D80.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D81);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D83 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D70, 2.2250738585072014E-308d, vector1D74, 1.0000000000000002d, vector1D81);
        java.lang.String str84 = vector1D81.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location85 = intervalsSet68.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D81);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector86 = intervalsSet68.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine87 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line65, intervalsSet68);
        boolean boolean88 = intervalsSet31.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet68);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree90 = intervalsSet68.getTree(false);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion91 = intervalsSet27.buildNew(euclidean1DBSPTree90);
        boolean boolean92 = euclidean1DAbstractRegion26.isEmpty(euclidean1DBSPTree90);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector1D3);
        org.junit.Assert.assertNotNull(space4);
        org.junit.Assert.assertNotNull(vector1D6);
        org.junit.Assert.assertNotNull(space7);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertNotNull(space11);
        org.junit.Assert.assertNotNull(vector1D13);
        org.junit.Assert.assertNotNull(space14);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertNotNull(vector1D17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + location25 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location25.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + Double.POSITIVE_INFINITY + "'", double28 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector1D33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(vector1D37);
        org.junit.Assert.assertNotNull(vector1D39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(vector1D43);
        org.junit.Assert.assertNotNull(vector1D44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{(NaN)}" + "'", str47, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location48 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location48.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D50);
        org.junit.Assert.assertNotNull(space51);
        org.junit.Assert.assertNotNull(vector1D53);
        org.junit.Assert.assertNotNull(space54);
        org.junit.Assert.assertNotNull(vector1D57);
        org.junit.Assert.assertNotNull(space58);
        org.junit.Assert.assertNotNull(vector1D60);
        org.junit.Assert.assertNotNull(space61);
        org.junit.Assert.assertNotNull(vector1D63);
        org.junit.Assert.assertTrue("'" + location64 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location64.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(vector1D74);
        org.junit.Assert.assertNotNull(vector1D76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertNotNull(vector1D81);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "{(NaN)}" + "'", str84, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location85 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location85.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree90);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D8 = vector2D3.scalarMultiply((double) (-1.0f));
        double double9 = vector2D3.getNormInf();
        double double10 = vector2D3.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = vector2D3.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = vector2D12.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D17 = vector2D15.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D16);
        double double18 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D14, vector2D15);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = vector2D15.scalarMultiply((double) (-1.0f));
        double double21 = vector2D15.getNormInf();
        double double22 = vector2D15.getNorm();
        double double23 = vector2D3.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D15);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = vector2D15.negate();
        boolean boolean25 = vector2D15.isInfinite();
        org.apache.commons.math3.geometry.euclidean.twod.Line line27 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D15, 1033.0842172833732d);
        org.apache.commons.math3.geometry.euclidean.twod.Line line28 = new org.apache.commons.math3.geometry.euclidean.twod.Line(line27);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane29 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList30 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet31 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList30);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint32 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane29, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet31);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean35 = vector1D33.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D37 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D39 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean43 = vector1D41.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = vector1D41.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D46 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double47 = vector1D45.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D46);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D49 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean51 = vector1D49.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D53 = vector1D49.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D37, (double) 100, vector1D39, (double) (short) 0, vector1D46, (double) 'a', vector1D49);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D56 = vector1D49.scalarMultiply(4.605170185988092d);
        java.lang.String str57 = vector1D56.toString();
        double double58 = vector1D33.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D60 = vector1D33.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location61 = intervalsSet31.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D33);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector62 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location63 = intervalsSet31.checkPoint(euclidean1DVector62);
        boolean boolean64 = intervalsSet31.isEmpty();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree66 = intervalsSet31.getTree(false);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine67 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line27, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet31);
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertNotNull(vector2D16);
        org.junit.Assert.assertNotNull(vector2D17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + Double.POSITIVE_INFINITY + "'", double21 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(vector1D33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(vector1D37);
        org.junit.Assert.assertNotNull(vector1D39);
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertNotNull(vector1D46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(vector1D49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(vector1D53);
        org.junit.Assert.assertNotNull(vector1D56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{(NaN)}" + "'", str57, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(vector1D60);
        org.junit.Assert.assertTrue("'" + location61 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location61.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location63 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location63.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree66);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine5 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane6 = null;
        org.apache.commons.math3.geometry.euclidean.threed.Line line7 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane8 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList9 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet10 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList9);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint11 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane8, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet10);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean14 = vector1D12.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D20 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean22 = vector1D20.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = vector1D20.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D25 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double26 = vector1D24.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D25);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean30 = vector1D28.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = vector1D28.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D16, (double) 100, vector1D18, (double) (short) 0, vector1D25, (double) 'a', vector1D28);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D35 = vector1D28.scalarMultiply(4.605170185988092d);
        java.lang.String str36 = vector1D35.toString();
        double double37 = vector1D12.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D35);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D39 = vector1D12.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location40 = intervalsSet10.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D12);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector41 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location42 = intervalsSet10.checkPoint(euclidean1DVector41);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine43 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line7, intervalsSet10);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine44 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane6, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet10);
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractSubHyperplane45 = subLine5.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) subLine44);
        double double46 = subLine5.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.commons.math3.geometry.euclidean.twod.Segment> segmentList47 = subLine5.getSegments();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(vector1D25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertNotNull(vector1D35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{(NaN)}" + "'", str36, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(vector1D39);
        org.junit.Assert.assertTrue("'" + location40 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location40.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location42 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location42.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertNotNull(euclidean2DAbstractSubHyperplane45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + Double.POSITIVE_INFINITY + "'", double46 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion3 = intervalsSet2.copySelf();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet6 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet9 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean13 = vector1D11.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean19 = vector1D17.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = vector1D17.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double23 = vector1D21.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D22);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D11, 2.2250738585072014E-308d, vector1D15, 1.0000000000000002d, vector1D22);
        java.lang.String str25 = vector1D22.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location26 = intervalsSet9.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D22);
        boolean boolean27 = intervalsSet6.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet9);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet30 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean34 = vector1D32.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D36 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D38 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean40 = vector1D38.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D42 = vector1D38.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double44 = vector1D42.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D32, 2.2250738585072014E-308d, vector1D36, 1.0000000000000002d, vector1D43);
        java.lang.String str46 = vector1D43.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location47 = intervalsSet30.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D49 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space50 = vector1D49.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space53 = vector1D52.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D49, (double) 100L, vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D56 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space57 = vector1D56.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D59 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space60 = vector1D59.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D56, (double) 100L, vector1D59);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D62 = vector1D54.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.partitioning.Region.Location location63 = intervalsSet30.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.euclidean.threed.Line line64 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet67 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean71 = vector1D69.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D73 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D75 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean77 = vector1D75.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D79 = vector1D75.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double81 = vector1D79.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D82 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D69, 2.2250738585072014E-308d, vector1D73, 1.0000000000000002d, vector1D80);
        java.lang.String str83 = vector1D80.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location84 = intervalsSet67.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector85 = intervalsSet67.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine86 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line64, intervalsSet67);
        boolean boolean87 = intervalsSet30.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet67);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree89 = intervalsSet67.getTree(false);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion90 = intervalsSet6.buildNew(euclidean1DBSPTree89);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion91 = intervalsSet2.buildNew(euclidean1DBSPTree89);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = intervalsSet2.getBoundarySize();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion3);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertNotNull(vector1D17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{(NaN)}" + "'", str25, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location26 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location26.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector1D36);
        org.junit.Assert.assertNotNull(vector1D38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(vector1D42);
        org.junit.Assert.assertNotNull(vector1D43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{(NaN)}" + "'", str46, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location47 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location47.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D49);
        org.junit.Assert.assertNotNull(space50);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertNotNull(space53);
        org.junit.Assert.assertNotNull(vector1D56);
        org.junit.Assert.assertNotNull(space57);
        org.junit.Assert.assertNotNull(vector1D59);
        org.junit.Assert.assertNotNull(space60);
        org.junit.Assert.assertNotNull(vector1D62);
        org.junit.Assert.assertTrue("'" + location63 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location63.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(vector1D73);
        org.junit.Assert.assertNotNull(vector1D75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(vector1D79);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{(NaN)}" + "'", str83, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location84 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location84.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree89);
        org.junit.Assert.assertNotNull(euclidean1DRegion90);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion91);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet0 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        boolean boolean1 = intervalsSet0.isEmpty();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector2 = intervalsSet0.getBarycenter();
        double double3 = intervalsSet0.getSize();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet6 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        java.util.List<org.apache.commons.math3.geometry.euclidean.oned.Interval> intervalList7 = intervalsSet6.asList();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet10 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet13 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean17 = vector1D15.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D19 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean23 = vector1D21.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D25 = vector1D21.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double27 = vector1D25.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D26);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D15, 2.2250738585072014E-308d, vector1D19, 1.0000000000000002d, vector1D26);
        java.lang.String str29 = vector1D26.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location30 = intervalsSet13.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D26);
        boolean boolean31 = intervalsSet10.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet13);
        boolean boolean32 = intervalsSet6.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet13);
        boolean boolean33 = intervalsSet0.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet13);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DTransform34 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion35 = intervalsSet0.applyTransform(euclidean1DTransform34);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet38 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D40 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean42 = vector1D40.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D44 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D46 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean48 = vector1D46.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D50 = vector1D46.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double52 = vector1D50.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D51);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D53 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D40, 2.2250738585072014E-308d, vector1D44, 1.0000000000000002d, vector1D51);
        java.lang.String str54 = vector1D51.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location55 = intervalsSet38.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D51);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D57 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space58 = vector1D57.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D60 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space61 = vector1D60.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D62 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D57, (double) 100L, vector1D60);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D64 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space65 = vector1D64.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D67 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space68 = vector1D67.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D64, (double) 100L, vector1D67);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D70 = vector1D62.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D64);
        org.apache.commons.math3.geometry.partitioning.Region.Location location71 = intervalsSet38.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D64);
        org.apache.commons.math3.geometry.euclidean.threed.Line line72 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet75 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D77 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean79 = vector1D77.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D81 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D83 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean85 = vector1D83.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D87 = vector1D83.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D88 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double89 = vector1D87.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D88);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D90 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D77, 2.2250738585072014E-308d, vector1D81, 1.0000000000000002d, vector1D88);
        java.lang.String str91 = vector1D88.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location92 = intervalsSet75.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D88);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector93 = intervalsSet75.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine94 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line72, intervalsSet75);
        boolean boolean95 = intervalsSet38.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet75);
        boolean boolean96 = intervalsSet0.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet75);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(euclidean1DVector2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.POSITIVE_INFINITY + "'", double3 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(intervalList7);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(vector1D19);
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(vector1D25);
        org.junit.Assert.assertNotNull(vector1D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{(NaN)}" + "'", str29, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location30 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location30.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion35);
        org.junit.Assert.assertNotNull(vector1D40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(vector1D44);
        org.junit.Assert.assertNotNull(vector1D46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(vector1D50);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{(NaN)}" + "'", str54, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location55 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location55.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D57);
        org.junit.Assert.assertNotNull(space58);
        org.junit.Assert.assertNotNull(vector1D60);
        org.junit.Assert.assertNotNull(space61);
        org.junit.Assert.assertNotNull(vector1D64);
        org.junit.Assert.assertNotNull(space65);
        org.junit.Assert.assertNotNull(vector1D67);
        org.junit.Assert.assertNotNull(space68);
        org.junit.Assert.assertNotNull(vector1D70);
        org.junit.Assert.assertTrue("'" + location71 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location71.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(vector1D81);
        org.junit.Assert.assertNotNull(vector1D83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(vector1D87);
        org.junit.Assert.assertNotNull(vector1D88);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "{(NaN)}" + "'", str91, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location92 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location92.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D67 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = vector2D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D68);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = vector2D70.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D71);
        double double73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D69, vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D75 = vector2D70.scalarMultiply((double) (-1.0f));
        double double76 = vector2D70.getNormInf();
        double double77 = line66.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine78 = line66.wholeHyperplane();
        line66.setOriginOffset((double) (-1L));
        line66.revertSelf();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D82 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D84 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean86 = vector1D84.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D88 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D90 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean92 = vector1D90.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D94 = vector1D90.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D95 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double96 = vector1D94.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D95);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D97 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D84, 2.2250738585072014E-308d, vector1D88, 1.0000000000000002d, vector1D95);
        double double98 = vector1D82.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D84);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector99 = line66.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D82);
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector2D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(subLine78);
        org.junit.Assert.assertNotNull(vector1D82);
        org.junit.Assert.assertNotNull(vector1D84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(vector1D88);
        org.junit.Assert.assertNotNull(vector1D90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(vector1D94);
        org.junit.Assert.assertNotNull(vector1D95);
        org.junit.Assert.assertTrue(Double.isNaN(double96));
        org.junit.Assert.assertTrue(Double.isNaN(double98));
        org.junit.Assert.assertNotNull(euclidean2DVector99);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D67 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = vector2D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D68);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = vector2D70.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D71);
        double double73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D69, vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D75 = vector2D70.scalarMultiply((double) (-1.0f));
        double double76 = vector2D70.getNormInf();
        double double77 = line66.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine78 = line66.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.twod.Line line79 = line66.copySelf();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet80 = line66.wholeSpace();
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector2D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(subLine78);
        org.junit.Assert.assertNotNull(line79);
        org.junit.Assert.assertNotNull(polygonsSet80);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D1);
        double double3 = vector3D0.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D4, vector3D5);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D5.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D10, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D11.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D14);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector16 = vector3D8.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D14);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine17 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D0, vector3D8);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(vector3D8, vector3D18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.POSITIVE_INFINITY + "'", double3 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(euclidean3DVector16);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.euclidean.threed.Line line1 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane2 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList3 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet4 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList3);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint5 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane2, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet4);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D6 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean8 = vector1D6.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean16 = vector1D14.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = vector1D14.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D19 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double20 = vector1D18.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D19);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean24 = vector1D22.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = vector1D22.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D27 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D10, (double) 100, vector1D12, (double) (short) 0, vector1D19, (double) 'a', vector1D22);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D29 = vector1D22.scalarMultiply(4.605170185988092d);
        java.lang.String str30 = vector1D29.toString();
        double double31 = vector1D6.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D29);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = vector1D6.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location34 = intervalsSet4.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D6);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector35 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location36 = intervalsSet4.checkPoint(euclidean1DVector35);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine37 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line1, intervalsSet4);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine38 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet4);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane39 = subLine38.getHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion40 = subLine38.getRemainingRegion();
        org.junit.Assert.assertNotNull(vector1D6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(vector1D26);
        org.junit.Assert.assertNotNull(vector1D29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{(NaN)}" + "'", str30, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector1D33);
        org.junit.Assert.assertTrue("'" + location34 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location34.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location36 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location36.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertNull(euclidean2DHyperplane39);
        org.junit.Assert.assertNotNull(euclidean1DRegion40);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet0 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        boolean boolean5 = subOrientedPoint4.isEmpty();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractSubHyperplane6 = subOrientedPoint4.copySelf();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractSubHyperplane7 = subOrientedPoint4.copySelf();
        double double8 = subOrientedPoint4.getSize();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DSubHyperplane9 = intervalsSet0.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) subOrientedPoint4);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet12 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean16 = vector1D14.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D20 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean22 = vector1D20.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = vector1D20.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D25 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double26 = vector1D24.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D25);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D27 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D14, 2.2250738585072014E-308d, vector1D18, 1.0000000000000002d, vector1D25);
        java.lang.String str28 = vector1D25.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location29 = intervalsSet12.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D25);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D31 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space32 = vector1D31.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space35 = vector1D34.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D36 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D31, (double) 100L, vector1D34);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D38 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space39 = vector1D38.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space42 = vector1D41.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D38, (double) 100L, vector1D41);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D44 = vector1D36.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D38);
        org.apache.commons.math3.geometry.partitioning.Region.Location location45 = intervalsSet12.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D38);
        org.apache.commons.math3.geometry.euclidean.threed.Line line46 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet49 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean53 = vector1D51.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D55 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D57 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean59 = vector1D57.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = vector1D57.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D62 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double63 = vector1D61.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D62);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D64 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D51, 2.2250738585072014E-308d, vector1D55, 1.0000000000000002d, vector1D62);
        java.lang.String str65 = vector1D62.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location66 = intervalsSet49.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D62);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector67 = intervalsSet49.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine68 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line46, intervalsSet49);
        boolean boolean69 = intervalsSet12.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet49);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D71 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D73 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D75 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean77 = vector1D75.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D79 = vector1D75.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double81 = vector1D79.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D83 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean85 = vector1D83.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D87 = vector1D83.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D88 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D71, (double) 100, vector1D73, (double) (short) 0, vector1D80, (double) 'a', vector1D83);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D90 = vector1D83.scalarMultiply(4.605170185988092d);
        double double91 = vector1D90.getNorm1();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint93 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint(vector1D90, false);
        org.apache.commons.math3.geometry.partitioning.Side side94 = intervalsSet49.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint93);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DSplitSubHyperplane95 = euclidean1DSubHyperplane9.split((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(euclidean1DAbstractSubHyperplane6);
        org.junit.Assert.assertNotNull(euclidean1DAbstractSubHyperplane7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean1DSubHyperplane9);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(vector1D25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{(NaN)}" + "'", str28, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location29 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location29.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D31);
        org.junit.Assert.assertNotNull(space32);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertNotNull(space35);
        org.junit.Assert.assertNotNull(vector1D38);
        org.junit.Assert.assertNotNull(space39);
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertNotNull(space42);
        org.junit.Assert.assertNotNull(vector1D44);
        org.junit.Assert.assertTrue("'" + location45 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location45.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(vector1D55);
        org.junit.Assert.assertNotNull(vector1D57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(vector1D61);
        org.junit.Assert.assertNotNull(vector1D62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{(NaN)}" + "'", str65, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location66 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location66.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(vector1D71);
        org.junit.Assert.assertNotNull(vector1D73);
        org.junit.Assert.assertNotNull(vector1D75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(vector1D79);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(vector1D83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(vector1D87);
        org.junit.Assert.assertNotNull(vector1D90);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue("'" + side94 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.MINUS + "'", side94.equals(org.apache.commons.math3.geometry.partitioning.Side.MINUS));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D4 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean6 = vector1D4.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D8 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean12 = vector1D10.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = vector1D10.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double16 = vector1D14.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D4, 2.2250738585072014E-308d, vector1D8, 1.0000000000000002d, vector1D15);
        java.lang.String str18 = vector1D15.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location19 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space22 = vector1D21.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space25 = vector1D24.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D21, (double) 100L, vector1D24);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space29 = vector1D28.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D31 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space32 = vector1D31.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D28, (double) 100L, vector1D31);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = vector1D26.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.partitioning.Region.Location location35 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.euclidean.threed.Line line36 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet39 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean43 = vector1D41.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean49 = vector1D47.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = vector1D47.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double53 = vector1D51.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D41, 2.2250738585072014E-308d, vector1D45, 1.0000000000000002d, vector1D52);
        java.lang.String str55 = vector1D52.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location56 = intervalsSet39.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector57 = intervalsSet39.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine58 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line36, intervalsSet39);
        boolean boolean59 = intervalsSet2.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet39);
        java.util.List<org.apache.commons.math3.geometry.euclidean.oned.Interval> intervalList60 = intervalsSet39.asList();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D62 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D64 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D66 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean68 = vector1D66.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D70 = vector1D66.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D71 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double72 = vector1D70.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D71);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D74 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean76 = vector1D74.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D78 = vector1D74.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D79 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D62, (double) 100, vector1D64, (double) (short) 0, vector1D71, (double) 'a', vector1D74);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D81 = vector1D74.scalarMultiply(4.605170185988092d);
        double double82 = vector1D81.getNorm1();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint84 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint(vector1D81, false);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D85 = orientedPoint84.getLocation();
        org.apache.commons.math3.geometry.partitioning.Side side86 = intervalsSet39.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint84);
        org.junit.Assert.assertNotNull(vector1D4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(vector1D8);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{(NaN)}" + "'", str18, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location19 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location19.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(space22);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(space25);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertNotNull(space29);
        org.junit.Assert.assertNotNull(vector1D31);
        org.junit.Assert.assertNotNull(space32);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertTrue("'" + location35 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location35.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{(NaN)}" + "'", str55, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location56 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location56.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(intervalList60);
        org.junit.Assert.assertNotNull(vector1D62);
        org.junit.Assert.assertNotNull(vector1D64);
        org.junit.Assert.assertNotNull(vector1D66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(vector1D70);
        org.junit.Assert.assertNotNull(vector1D71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(vector1D74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(vector1D78);
        org.junit.Assert.assertNotNull(vector1D81);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(vector1D85);
        org.junit.Assert.assertTrue("'" + side86 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.MINUS + "'", side86.equals(org.apache.commons.math3.geometry.partitioning.Side.MINUS));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D1);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double4 = vector3D0.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3);
        double double5 = vector3D3.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double7 = vector3D3.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D8, vector3D9);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double12 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D13, vector3D14);
        double double16 = vector3D13.getNorm1();
        double double17 = vector3D8.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double18 = vector3D8.getNormInf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D19, vector3D20);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double23 = vector3D22.getNorm();
        double double24 = vector3D22.getNorm();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.Space space26 = vector3D25.getSpace();
        double double27 = vector3D22.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        double double28 = vector3D20.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.Space space30 = vector3D29.getSpace();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector31 = vector3D25.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D29);
        boolean boolean32 = vector3D29.isNaN();
        double double33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D8, vector3D29);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine34 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D3, vector3D8);
        double double35 = vector3D8.getZ();
        double double36 = vector3D8.getNorm1();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.POSITIVE_INFINITY + "'", double18 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + Double.POSITIVE_INFINITY + "'", double23 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(space26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + Double.POSITIVE_INFINITY + "'", double27 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + Double.POSITIVE_INFINITY + "'", double28 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(space30);
        org.junit.Assert.assertNotNull(euclidean3DVector31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.NEGATIVE_INFINITY + "'", double35 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + Double.POSITIVE_INFINITY + "'", double36 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet0 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree1 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = intervalsSet0.buildNew(euclidean1DBSPTree1);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector3 = intervalsSet0.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet6 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet9 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean13 = vector1D11.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean19 = vector1D17.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = vector1D17.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double23 = vector1D21.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D22);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D11, 2.2250738585072014E-308d, vector1D15, 1.0000000000000002d, vector1D22);
        java.lang.String str25 = vector1D22.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location26 = intervalsSet9.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D22);
        boolean boolean27 = intervalsSet6.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet9);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet30 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean34 = vector1D32.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D36 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D38 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean40 = vector1D38.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D42 = vector1D38.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double44 = vector1D42.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D32, 2.2250738585072014E-308d, vector1D36, 1.0000000000000002d, vector1D43);
        java.lang.String str46 = vector1D43.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location47 = intervalsSet30.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D49 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space50 = vector1D49.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space53 = vector1D52.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D49, (double) 100L, vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D56 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space57 = vector1D56.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D59 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space60 = vector1D59.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D56, (double) 100L, vector1D59);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D62 = vector1D54.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.partitioning.Region.Location location63 = intervalsSet30.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.euclidean.threed.Line line64 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet67 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean71 = vector1D69.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D73 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D75 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean77 = vector1D75.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D79 = vector1D75.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double81 = vector1D79.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D82 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D69, 2.2250738585072014E-308d, vector1D73, 1.0000000000000002d, vector1D80);
        java.lang.String str83 = vector1D80.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location84 = intervalsSet67.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector85 = intervalsSet67.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine86 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line64, intervalsSet67);
        boolean boolean87 = intervalsSet30.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet67);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree89 = intervalsSet67.getTree(false);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion90 = intervalsSet6.buildNew(euclidean1DBSPTree89);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion91 = intervalsSet0.buildNew(euclidean1DBSPTree89);
        org.junit.Assert.assertNotNull(intervalsSet2);
        org.junit.Assert.assertNotNull(euclidean1DVector3);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertNotNull(vector1D17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{(NaN)}" + "'", str25, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location26 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location26.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector1D36);
        org.junit.Assert.assertNotNull(vector1D38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(vector1D42);
        org.junit.Assert.assertNotNull(vector1D43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{(NaN)}" + "'", str46, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location47 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location47.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D49);
        org.junit.Assert.assertNotNull(space50);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertNotNull(space53);
        org.junit.Assert.assertNotNull(vector1D56);
        org.junit.Assert.assertNotNull(space57);
        org.junit.Assert.assertNotNull(vector1D59);
        org.junit.Assert.assertNotNull(space60);
        org.junit.Assert.assertNotNull(vector1D62);
        org.junit.Assert.assertTrue("'" + location63 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location63.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(vector1D73);
        org.junit.Assert.assertNotNull(vector1D75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(vector1D79);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{(NaN)}" + "'", str83, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location84 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location84.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree89);
        org.junit.Assert.assertNotNull(euclidean1DRegion90);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion91);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion3 = intervalsSet2.copySelf();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet6 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet9 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean13 = vector1D11.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean19 = vector1D17.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = vector1D17.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double23 = vector1D21.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D22);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D11, 2.2250738585072014E-308d, vector1D15, 1.0000000000000002d, vector1D22);
        java.lang.String str25 = vector1D22.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location26 = intervalsSet9.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D22);
        boolean boolean27 = intervalsSet6.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet9);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet30 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean34 = vector1D32.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D36 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D38 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean40 = vector1D38.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D42 = vector1D38.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double44 = vector1D42.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D32, 2.2250738585072014E-308d, vector1D36, 1.0000000000000002d, vector1D43);
        java.lang.String str46 = vector1D43.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location47 = intervalsSet30.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D49 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space50 = vector1D49.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space53 = vector1D52.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D49, (double) 100L, vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D56 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space57 = vector1D56.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D59 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space60 = vector1D59.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D56, (double) 100L, vector1D59);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D62 = vector1D54.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.partitioning.Region.Location location63 = intervalsSet30.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.euclidean.threed.Line line64 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet67 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean71 = vector1D69.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D73 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D75 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean77 = vector1D75.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D79 = vector1D75.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double81 = vector1D79.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D82 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D69, 2.2250738585072014E-308d, vector1D73, 1.0000000000000002d, vector1D80);
        java.lang.String str83 = vector1D80.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location84 = intervalsSet67.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector85 = intervalsSet67.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine86 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line64, intervalsSet67);
        boolean boolean87 = intervalsSet30.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet67);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree89 = intervalsSet67.getTree(false);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion90 = intervalsSet6.buildNew(euclidean1DBSPTree89);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion91 = intervalsSet2.buildNew(euclidean1DBSPTree89);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet92 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(euclidean1DBSPTree89);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion93 = intervalsSet92.copySelf();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D94 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space95 = vector1D94.getSpace();
        org.apache.commons.math3.geometry.partitioning.Region.Location location96 = euclidean1DAbstractRegion93.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D94);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.Side side98 = euclidean1DAbstractRegion93.side(euclidean1DHyperplane97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion3);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertNotNull(vector1D17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{(NaN)}" + "'", str25, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location26 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location26.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector1D36);
        org.junit.Assert.assertNotNull(vector1D38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(vector1D42);
        org.junit.Assert.assertNotNull(vector1D43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{(NaN)}" + "'", str46, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location47 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location47.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D49);
        org.junit.Assert.assertNotNull(space50);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertNotNull(space53);
        org.junit.Assert.assertNotNull(vector1D56);
        org.junit.Assert.assertNotNull(space57);
        org.junit.Assert.assertNotNull(vector1D59);
        org.junit.Assert.assertNotNull(space60);
        org.junit.Assert.assertNotNull(vector1D62);
        org.junit.Assert.assertTrue("'" + location63 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location63.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(vector1D73);
        org.junit.Assert.assertNotNull(vector1D75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(vector1D79);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{(NaN)}" + "'", str83, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location84 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location84.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree89);
        org.junit.Assert.assertNotNull(euclidean1DRegion90);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion91);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion93);
        org.junit.Assert.assertNotNull(vector1D94);
        org.junit.Assert.assertNotNull(space95);
        org.junit.Assert.assertTrue("'" + location96 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location96.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D4 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean6 = vector1D4.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D8 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean12 = vector1D10.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = vector1D10.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double16 = vector1D14.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D4, 2.2250738585072014E-308d, vector1D8, 1.0000000000000002d, vector1D15);
        java.lang.String str18 = vector1D15.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location19 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space22 = vector1D21.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space25 = vector1D24.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D21, (double) 100L, vector1D24);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space29 = vector1D28.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D31 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space32 = vector1D31.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D28, (double) 100L, vector1D31);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = vector1D26.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.partitioning.Region.Location location35 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.euclidean.threed.Line line36 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet39 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean43 = vector1D41.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean49 = vector1D47.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = vector1D47.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double53 = vector1D51.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D41, 2.2250738585072014E-308d, vector1D45, 1.0000000000000002d, vector1D52);
        java.lang.String str55 = vector1D52.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location56 = intervalsSet39.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector57 = intervalsSet39.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine58 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line36, intervalsSet39);
        boolean boolean59 = intervalsSet2.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet39);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = intervalsSet39.getBoundarySize();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(vector1D8);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{(NaN)}" + "'", str18, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location19 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location19.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(space22);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(space25);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertNotNull(space29);
        org.junit.Assert.assertNotNull(vector1D31);
        org.junit.Assert.assertNotNull(space32);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertTrue("'" + location35 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location35.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{(NaN)}" + "'", str55, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location56 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location56.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane0 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList1 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList1);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint3 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet2);
        boolean boolean4 = subOrientedPoint3.isEmpty();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractSubHyperplane5 = subOrientedPoint3.copySelf();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractSubHyperplane6 = subOrientedPoint3.copySelf();
        double double7 = subOrientedPoint3.getSize();
        boolean boolean8 = subOrientedPoint3.isEmpty();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractSubHyperplane9 = subOrientedPoint3.copySelf();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane10 = null;
        org.apache.commons.math3.geometry.euclidean.threed.Line line11 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane12 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList13 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet14 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList13);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint15 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane12, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet14);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean18 = vector1D16.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D20 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean26 = vector1D24.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = vector1D24.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D29 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double30 = vector1D28.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D29);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean34 = vector1D32.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D36 = vector1D32.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D37 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D20, (double) 100, vector1D22, (double) (short) 0, vector1D29, (double) 'a', vector1D32);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D39 = vector1D32.scalarMultiply(4.605170185988092d);
        java.lang.String str40 = vector1D39.toString();
        double double41 = vector1D16.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D39);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = vector1D16.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location44 = intervalsSet14.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D16);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector45 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location46 = intervalsSet14.checkPoint(euclidean1DVector45);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine47 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line11, intervalsSet14);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine48 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane10, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet14);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane49 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList50 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet51 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList50);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint52 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane49, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet51);
        boolean boolean53 = subOrientedPoint52.isEmpty();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractSubHyperplane54 = subOrientedPoint52.copySelf();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DSubHyperplane55 = intervalsSet14.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) euclidean1DAbstractSubHyperplane54);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DSubHyperplane56 = euclidean1DAbstractSubHyperplane9.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) euclidean1DAbstractSubHyperplane54);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet57 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D59 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D63 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean65 = vector1D63.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D67 = vector1D63.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D68 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double69 = vector1D67.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D68);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D71 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean73 = vector1D71.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D75 = vector1D71.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D76 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D59, (double) 100, vector1D61, (double) (short) 0, vector1D68, (double) 'a', vector1D71);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D78 = vector1D71.scalarMultiply(4.605170185988092d);
        double double79 = vector1D78.getNorm1();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint81 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint(vector1D78, false);
        org.apache.commons.math3.geometry.partitioning.Side side82 = intervalsSet57.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint81);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D83 = orientedPoint81.getLocation();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion84 = orientedPoint81.wholeSpace();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DSplitSubHyperplane85 = euclidean1DAbstractSubHyperplane54.split((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(euclidean1DAbstractSubHyperplane5);
        org.junit.Assert.assertNotNull(euclidean1DAbstractSubHyperplane6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(euclidean1DAbstractSubHyperplane9);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(vector1D20);
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertNotNull(vector1D29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector1D36);
        org.junit.Assert.assertNotNull(vector1D39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{(NaN)}" + "'", str40, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector1D43);
        org.junit.Assert.assertTrue("'" + location44 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location44.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location46 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location46.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(euclidean1DAbstractSubHyperplane54);
        org.junit.Assert.assertNotNull(euclidean1DSubHyperplane55);
        org.junit.Assert.assertNotNull(euclidean1DSubHyperplane56);
        org.junit.Assert.assertNotNull(vector1D59);
        org.junit.Assert.assertNotNull(vector1D61);
        org.junit.Assert.assertNotNull(vector1D63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(vector1D67);
        org.junit.Assert.assertNotNull(vector1D68);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(vector1D71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(vector1D75);
        org.junit.Assert.assertNotNull(vector1D78);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + side82 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side82.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
        org.junit.Assert.assertNotNull(vector1D83);
        org.junit.Assert.assertNotNull(euclidean1DRegion84);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D67 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = vector2D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D68);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = vector2D70.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D71);
        double double73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D69, vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D75 = vector2D70.scalarMultiply((double) (-1.0f));
        double double76 = vector2D70.getNormInf();
        double double77 = line66.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine78 = line66.wholeHyperplane();
        line66.setOriginOffset((double) (-1L));
        line66.setOriginOffset(Double.NEGATIVE_INFINITY);
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet83 = line66.wholeSpace();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet84 = line66.wholeSpace();
        line66.setOriginOffset((-1023.0d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D88 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space89 = vector1D88.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D91 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space92 = vector1D91.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D93 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D88, (double) 100L, vector1D91);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector94 = line66.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D88);
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector2D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(subLine78);
        org.junit.Assert.assertNotNull(polygonsSet83);
        org.junit.Assert.assertNotNull(polygonsSet84);
        org.junit.Assert.assertNotNull(vector1D88);
        org.junit.Assert.assertNotNull(space89);
        org.junit.Assert.assertNotNull(vector1D91);
        org.junit.Assert.assertNotNull(space92);
        org.junit.Assert.assertNotNull(euclidean2DVector94);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D4 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean6 = vector1D4.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D8 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean12 = vector1D10.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = vector1D10.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double16 = vector1D14.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D4, 2.2250738585072014E-308d, vector1D8, 1.0000000000000002d, vector1D15);
        java.lang.String str18 = vector1D15.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location19 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space22 = vector1D21.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space25 = vector1D24.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D21, (double) 100L, vector1D24);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space29 = vector1D28.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D31 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space32 = vector1D31.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D28, (double) 100L, vector1D31);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = vector1D26.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.partitioning.Region.Location location35 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.euclidean.threed.Line line36 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet39 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean43 = vector1D41.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean49 = vector1D47.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = vector1D47.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double53 = vector1D51.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D41, 2.2250738585072014E-308d, vector1D45, 1.0000000000000002d, vector1D52);
        java.lang.String str55 = vector1D52.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location56 = intervalsSet39.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector57 = intervalsSet39.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine58 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line36, intervalsSet39);
        boolean boolean59 = intervalsSet2.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet39);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree61 = intervalsSet39.getTree(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree63 = intervalsSet39.getTree(true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(vector1D8);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{(NaN)}" + "'", str18, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location19 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location19.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(space22);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(space25);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertNotNull(space29);
        org.junit.Assert.assertNotNull(vector1D31);
        org.junit.Assert.assertNotNull(space32);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertTrue("'" + location35 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location35.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{(NaN)}" + "'", str55, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location56 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location56.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree61);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D1);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double4 = vector3D0.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double6 = vector3D5.getNorm();
        double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D5);
        double double8 = vector3D5.getNorm();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        double double11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D9, vector3D10);
        double double12 = vector3D10.getDelta();
        double double13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D5, vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D14, vector3D15);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double18 = vector3D14.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D17);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector20 = vector3D17.scalarMultiply((double) (byte) 100);
        double double21 = vector3D17.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D22, vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double26 = vector3D22.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.Space space27 = vector3D22.getSpace();
        double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D17, vector3D22);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D30, vector3D31);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double34 = vector3D30.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector35 = vector3D22.add(3327.9999999999995d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine36 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D5, vector3D33);
        java.util.List<org.apache.commons.math3.geometry.euclidean.threed.Segment> segmentList37 = subLine36.getSegments();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + Double.POSITIVE_INFINITY + "'", double13 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(euclidean3DVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + Double.POSITIVE_INFINITY + "'", double21 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(space27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(euclidean3DVector35);
        org.junit.Assert.assertNotNull(segmentList37);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D67 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = vector2D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D68);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = vector2D70.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D71);
        double double73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D69, vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D75 = vector2D70.scalarMultiply((double) (-1.0f));
        double double76 = vector2D70.getNormInf();
        double double77 = line66.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine78 = line66.wholeHyperplane();
        line66.setOriginOffset((double) (-1L));
        line66.revertSelf();
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine82 = line66.wholeHyperplane();
        double double83 = line66.getOriginOffset();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D84 = null;
        // The following exception was thrown during execution in test generation
        try {
            line66.reset(vector2D84, 1.4091650134812035d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector2D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(subLine78);
        org.junit.Assert.assertNotNull(subLine82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.euclidean.threed.Line line1 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane2 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList3 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet4 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList3);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint5 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane2, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet4);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D6 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean8 = vector1D6.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean16 = vector1D14.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = vector1D14.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D19 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double20 = vector1D18.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D19);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean24 = vector1D22.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = vector1D22.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D27 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D10, (double) 100, vector1D12, (double) (short) 0, vector1D19, (double) 'a', vector1D22);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D29 = vector1D22.scalarMultiply(4.605170185988092d);
        java.lang.String str30 = vector1D29.toString();
        double double31 = vector1D6.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D29);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = vector1D6.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location34 = intervalsSet4.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D6);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector35 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location36 = intervalsSet4.checkPoint(euclidean1DVector35);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine37 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line1, intervalsSet4);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine38 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet4);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane39 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane40 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList41 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet42 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList41);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint43 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane40, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet42);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine44 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane39, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet42);
        boolean boolean45 = subLine44.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D47 = subLine38.intersection(subLine44, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(vector1D26);
        org.junit.Assert.assertNotNull(vector1D29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{(NaN)}" + "'", str30, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector1D33);
        org.junit.Assert.assertTrue("'" + location34 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location34.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location36 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location36.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D1);
        double double3 = vector3D0.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D4, vector3D5);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D5.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D10, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D11.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D14);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector16 = vector3D8.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D14);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine17 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D0, vector3D8);
        double double18 = vector3D8.getX();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D20, vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double24 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D23);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector26 = vector3D23.scalarMultiply((double) (byte) 100);
        double double27 = vector3D23.getNorm1();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector28 = vector3D8.add(7.714230945550557d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D30, vector3D31);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double34 = vector3D30.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double36 = vector3D35.getNorm();
        double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D30, vector3D35);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D38, vector3D39);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D39.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D42);
        double double44 = vector3D30.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D43);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D43.scalarMultiply(Double.NaN);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = vector3D43.negate();
        double double48 = vector3D29.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D47);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D50, vector3D51);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double57 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D55, vector3D56);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double59 = vector3D55.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D58);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double61 = vector3D60.getNorm();
        double double62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D55, vector3D60);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D64, vector3D65);
        double double67 = vector3D64.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D69, vector3D70);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double73 = vector3D69.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D72);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double76 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D74, vector3D75);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double78 = vector3D74.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D77);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double80 = vector3D79.getNorm();
        double double81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D74, vector3D79);
        double double82 = vector3D72.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D79);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) 'a', vector3D60, (double) 6, vector3D64, (double) 10.0f, vector3D79, 0.0d, vector3D84);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = vector3D85.negate();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector88 = vector3D85.scalarMultiply((double) 10L);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D89 = vector3D85.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D90 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(3.970291913552122d, vector3D50, 22025.465794806718d, vector3D85);
        double double91 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(vector3D47, vector3D90);
        double double92 = vector3D23.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D47);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.POSITIVE_INFINITY + "'", double3 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(euclidean3DVector16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.NEGATIVE_INFINITY + "'", double18 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(euclidean3DVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + Double.POSITIVE_INFINITY + "'", double27 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean3DVector28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + Double.POSITIVE_INFINITY + "'", double36 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + Double.POSITIVE_INFINITY + "'", double48 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + Double.POSITIVE_INFINITY + "'", double61 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + Double.POSITIVE_INFINITY + "'", double67 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + Double.POSITIVE_INFINITY + "'", double80 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(euclidean3DVector88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + Double.POSITIVE_INFINITY + "'", double92 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet1 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList0);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet4 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion5 = intervalsSet4.copySelf();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet8 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet11 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D13 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean15 = vector1D13.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D19 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean21 = vector1D19.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D23 = vector1D19.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double25 = vector1D23.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D24);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D13, 2.2250738585072014E-308d, vector1D17, 1.0000000000000002d, vector1D24);
        java.lang.String str27 = vector1D24.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location28 = intervalsSet11.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D24);
        boolean boolean29 = intervalsSet8.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet11);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet32 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean36 = vector1D34.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D38 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D40 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean42 = vector1D40.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D44 = vector1D40.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double46 = vector1D44.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D45);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D34, 2.2250738585072014E-308d, vector1D38, 1.0000000000000002d, vector1D45);
        java.lang.String str48 = vector1D45.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location49 = intervalsSet32.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D45);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space52 = vector1D51.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space55 = vector1D54.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D56 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D51, (double) 100L, vector1D54);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D58 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space59 = vector1D58.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space62 = vector1D61.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D63 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D58, (double) 100L, vector1D61);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D64 = vector1D56.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D58);
        org.apache.commons.math3.geometry.partitioning.Region.Location location65 = intervalsSet32.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D58);
        org.apache.commons.math3.geometry.euclidean.threed.Line line66 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet69 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D71 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean73 = vector1D71.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D75 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D77 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean79 = vector1D77.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D81 = vector1D77.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D82 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double83 = vector1D81.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D82);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D84 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D71, 2.2250738585072014E-308d, vector1D75, 1.0000000000000002d, vector1D82);
        java.lang.String str85 = vector1D82.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location86 = intervalsSet69.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D82);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector87 = intervalsSet69.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine88 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line66, intervalsSet69);
        boolean boolean89 = intervalsSet32.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet69);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree91 = intervalsSet69.getTree(false);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion92 = intervalsSet8.buildNew(euclidean1DBSPTree91);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion93 = intervalsSet4.buildNew(euclidean1DBSPTree91);
        boolean boolean94 = intervalsSet1.isEmpty(euclidean1DBSPTree91);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion5);
        org.junit.Assert.assertNotNull(vector1D13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(vector1D17);
        org.junit.Assert.assertNotNull(vector1D19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(vector1D23);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{(NaN)}" + "'", str27, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location28 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location28.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(vector1D38);
        org.junit.Assert.assertNotNull(vector1D40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(vector1D44);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{(NaN)}" + "'", str48, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location49 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location49.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertNotNull(space52);
        org.junit.Assert.assertNotNull(vector1D54);
        org.junit.Assert.assertNotNull(space55);
        org.junit.Assert.assertNotNull(vector1D58);
        org.junit.Assert.assertNotNull(space59);
        org.junit.Assert.assertNotNull(vector1D61);
        org.junit.Assert.assertNotNull(space62);
        org.junit.Assert.assertNotNull(vector1D64);
        org.junit.Assert.assertTrue("'" + location65 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location65.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(vector1D75);
        org.junit.Assert.assertNotNull(vector1D77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(vector1D81);
        org.junit.Assert.assertNotNull(vector1D82);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "{(NaN)}" + "'", str85, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location86 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location86.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree91);
        org.junit.Assert.assertNotNull(euclidean1DRegion92);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D67 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = vector2D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D68);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = vector2D70.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D71);
        double double73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D69, vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D75 = vector2D70.scalarMultiply((double) (-1.0f));
        double double76 = vector2D70.getNormInf();
        double double77 = line66.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine78 = line66.wholeHyperplane();
        line66.setOriginOffset((double) (-1L));
        line66.setOriginOffset(Double.NEGATIVE_INFINITY);
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet83 = line66.wholeSpace();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet84 = line66.wholeSpace();
        line66.setOriginOffset((-1023.0d));
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector88 = line66.toSubSpace(euclidean2DVector87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector2D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(subLine78);
        org.junit.Assert.assertNotNull(polygonsSet83);
        org.junit.Assert.assertNotNull(polygonsSet84);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D4 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean6 = vector1D4.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D8 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean12 = vector1D10.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = vector1D10.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double16 = vector1D14.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D4, 2.2250738585072014E-308d, vector1D8, 1.0000000000000002d, vector1D15);
        java.lang.String str18 = vector1D15.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location19 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space22 = vector1D21.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space25 = vector1D24.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D21, (double) 100L, vector1D24);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space29 = vector1D28.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D31 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space32 = vector1D31.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D28, (double) 100L, vector1D31);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = vector1D26.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.partitioning.Region.Location location35 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.euclidean.threed.Line line36 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet39 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean43 = vector1D41.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean49 = vector1D47.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = vector1D47.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double53 = vector1D51.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D41, 2.2250738585072014E-308d, vector1D45, 1.0000000000000002d, vector1D52);
        java.lang.String str55 = vector1D52.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location56 = intervalsSet39.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector57 = intervalsSet39.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine58 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line36, intervalsSet39);
        boolean boolean59 = intervalsSet2.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet39);
        java.util.List<org.apache.commons.math3.geometry.euclidean.oned.Interval> intervalList60 = intervalsSet39.asList();
        double double61 = intervalsSet39.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree63 = intervalsSet39.getTree(true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(vector1D8);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{(NaN)}" + "'", str18, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location19 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location19.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(space22);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(space25);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertNotNull(space29);
        org.junit.Assert.assertNotNull(vector1D31);
        org.junit.Assert.assertNotNull(space32);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertTrue("'" + location35 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location35.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{(NaN)}" + "'", str55, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location56 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location56.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(intervalList60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.16092847092354756d + "'", double61 == 0.16092847092354756d);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion3 = intervalsSet2.copySelf();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet6 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet9 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean13 = vector1D11.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean19 = vector1D17.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = vector1D17.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double23 = vector1D21.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D22);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D11, 2.2250738585072014E-308d, vector1D15, 1.0000000000000002d, vector1D22);
        java.lang.String str25 = vector1D22.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location26 = intervalsSet9.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D22);
        boolean boolean27 = intervalsSet6.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet9);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet30 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean34 = vector1D32.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D36 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D38 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean40 = vector1D38.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D42 = vector1D38.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double44 = vector1D42.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D32, 2.2250738585072014E-308d, vector1D36, 1.0000000000000002d, vector1D43);
        java.lang.String str46 = vector1D43.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location47 = intervalsSet30.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D49 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space50 = vector1D49.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space53 = vector1D52.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D49, (double) 100L, vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D56 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space57 = vector1D56.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D59 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space60 = vector1D59.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D56, (double) 100L, vector1D59);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D62 = vector1D54.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.partitioning.Region.Location location63 = intervalsSet30.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.euclidean.threed.Line line64 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet67 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean71 = vector1D69.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D73 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D75 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean77 = vector1D75.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D79 = vector1D75.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double81 = vector1D79.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D82 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D69, 2.2250738585072014E-308d, vector1D73, 1.0000000000000002d, vector1D80);
        java.lang.String str83 = vector1D80.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location84 = intervalsSet67.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector85 = intervalsSet67.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine86 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line64, intervalsSet67);
        boolean boolean87 = intervalsSet30.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet67);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree89 = intervalsSet67.getTree(false);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion90 = intervalsSet6.buildNew(euclidean1DBSPTree89);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion91 = intervalsSet2.buildNew(euclidean1DBSPTree89);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DTransform92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion93 = euclidean1DAbstractRegion91.applyTransform(euclidean1DTransform92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion3);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertNotNull(vector1D17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{(NaN)}" + "'", str25, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location26 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location26.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector1D36);
        org.junit.Assert.assertNotNull(vector1D38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(vector1D42);
        org.junit.Assert.assertNotNull(vector1D43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{(NaN)}" + "'", str46, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location47 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location47.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D49);
        org.junit.Assert.assertNotNull(space50);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertNotNull(space53);
        org.junit.Assert.assertNotNull(vector1D56);
        org.junit.Assert.assertNotNull(space57);
        org.junit.Assert.assertNotNull(vector1D59);
        org.junit.Assert.assertNotNull(space60);
        org.junit.Assert.assertNotNull(vector1D62);
        org.junit.Assert.assertTrue("'" + location63 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location63.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(vector1D73);
        org.junit.Assert.assertNotNull(vector1D75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(vector1D79);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{(NaN)}" + "'", str83, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location84 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location84.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree89);
        org.junit.Assert.assertNotNull(euclidean1DRegion90);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion91);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D8 = vector2D3.scalarMultiply((double) (-1.0f));
        double double9 = vector2D3.getNormInf();
        double double10 = vector2D3.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = vector2D3.normalize();
        double double12 = vector2D3.getNorm1();
        double double13 = vector2D3.getNormSq();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D17 = vector2D15.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D16);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D19 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = vector2D18.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D19);
        double double21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D17, vector2D18);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D18.scalarMultiply((double) (-1.0f));
        double double24 = vector2D18.getNormInf();
        double double25 = vector2D18.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D18.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D28 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D27.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D28);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D30 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D31 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D32 = vector2D30.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D31);
        double double33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D29, vector2D30);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = vector2D30.scalarMultiply((double) (-1.0f));
        double double36 = vector2D30.getNormInf();
        double double37 = vector2D30.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = vector2D30.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D42 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D44 = vector2D42.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D43);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D45 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D47 = vector2D45.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        double double48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D44, vector2D45);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = vector2D45.scalarMultiply((double) (-1.0f));
        double double51 = vector2D45.getNormInf();
        double double52 = vector2D45.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = vector2D40.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D45);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = vector2D38.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D56 = vector2D53.scalarMultiply((double) 10L);
        double double57 = vector2D26.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D56);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D3.subtract(0.0d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D26);
        java.lang.String str59 = vector2D3.toString();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine61 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(vector2D3, vector2D60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + Double.POSITIVE_INFINITY + "'", double13 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertNotNull(vector2D16);
        org.junit.Assert.assertNotNull(vector2D17);
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D19);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + Double.POSITIVE_INFINITY + "'", double25 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertNotNull(vector2D27);
        org.junit.Assert.assertNotNull(vector2D28);
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertNotNull(vector2D30);
        org.junit.Assert.assertNotNull(vector2D31);
        org.junit.Assert.assertNotNull(vector2D32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + Double.POSITIVE_INFINITY + "'", double36 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + Double.POSITIVE_INFINITY + "'", double37 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertNotNull(vector2D42);
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertNotNull(vector2D44);
        org.junit.Assert.assertNotNull(vector2D45);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + Double.POSITIVE_INFINITY + "'", double51 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + Double.POSITIVE_INFINITY + "'", double52 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D56);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{(Infinity); (Infinity)}" + "'", str59, "{(Infinity); (Infinity)}");
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet0 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        boolean boolean1 = intervalsSet0.isEmpty();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector2 = intervalsSet0.getBarycenter();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree3 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet4 = intervalsSet0.buildNew(euclidean1DBSPTree3);
        double double5 = intervalsSet0.getSize();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet6 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector7 = intervalsSet6.getBarycenter();
        double double8 = intervalsSet6.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet11 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet14 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean18 = vector1D16.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D20 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean24 = vector1D22.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = vector1D22.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D27 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double28 = vector1D26.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D27);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D29 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D16, 2.2250738585072014E-308d, vector1D20, 1.0000000000000002d, vector1D27);
        java.lang.String str30 = vector1D27.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location31 = intervalsSet14.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D27);
        boolean boolean32 = intervalsSet11.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet14);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet35 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D37 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean39 = vector1D37.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean45 = vector1D43.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = vector1D43.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D48 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double49 = vector1D47.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D48);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D50 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D37, 2.2250738585072014E-308d, vector1D41, 1.0000000000000002d, vector1D48);
        java.lang.String str51 = vector1D48.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location52 = intervalsSet35.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D48);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space55 = vector1D54.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D57 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space58 = vector1D57.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D59 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D54, (double) 100L, vector1D57);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space62 = vector1D61.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D64 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space65 = vector1D64.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D66 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D61, (double) 100L, vector1D64);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D67 = vector1D59.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D61);
        org.apache.commons.math3.geometry.partitioning.Region.Location location68 = intervalsSet35.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D61);
        org.apache.commons.math3.geometry.euclidean.threed.Line line69 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet72 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D74 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean76 = vector1D74.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D78 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean82 = vector1D80.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D84 = vector1D80.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D85 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double86 = vector1D84.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D85);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D87 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D74, 2.2250738585072014E-308d, vector1D78, 1.0000000000000002d, vector1D85);
        java.lang.String str88 = vector1D85.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location89 = intervalsSet72.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D85);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector90 = intervalsSet72.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine91 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line69, intervalsSet72);
        boolean boolean92 = intervalsSet35.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet72);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree94 = intervalsSet72.getTree(false);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion95 = intervalsSet11.buildNew(euclidean1DBSPTree94);
        boolean boolean96 = intervalsSet6.isEmpty(euclidean1DBSPTree94);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion97 = intervalsSet0.buildNew(euclidean1DBSPTree94);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(euclidean1DVector2);
        org.junit.Assert.assertNotNull(intervalsSet4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean1DVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(vector1D20);
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(vector1D26);
        org.junit.Assert.assertNotNull(vector1D27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{(NaN)}" + "'", str30, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location31 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location31.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(vector1D37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertNotNull(vector1D43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertNotNull(vector1D48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{(NaN)}" + "'", str51, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location52 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location52.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D54);
        org.junit.Assert.assertNotNull(space55);
        org.junit.Assert.assertNotNull(vector1D57);
        org.junit.Assert.assertNotNull(space58);
        org.junit.Assert.assertNotNull(vector1D61);
        org.junit.Assert.assertNotNull(space62);
        org.junit.Assert.assertNotNull(vector1D64);
        org.junit.Assert.assertNotNull(space65);
        org.junit.Assert.assertNotNull(vector1D67);
        org.junit.Assert.assertTrue("'" + location68 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location68.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(vector1D78);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(vector1D84);
        org.junit.Assert.assertNotNull(vector1D85);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "{(NaN)}" + "'", str88, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location89 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location89.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree94);
        org.junit.Assert.assertNotNull(euclidean1DRegion95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(euclidean1DRegion97);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine5 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        boolean boolean6 = subLine5.isEmpty();
        boolean boolean7 = subLine5.isEmpty();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane8 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane9 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList10 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet11 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList10);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint12 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane9, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet11);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine13 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane8, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet11);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane14 = null;
        org.apache.commons.math3.geometry.euclidean.threed.Line line15 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane16 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList17 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet18 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList17);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint19 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane16, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet18);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D20 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean22 = vector1D20.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean30 = vector1D28.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = vector1D28.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double34 = vector1D32.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D33);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D36 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean38 = vector1D36.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D40 = vector1D36.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D24, (double) 100, vector1D26, (double) (short) 0, vector1D33, (double) 'a', vector1D36);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = vector1D36.scalarMultiply(4.605170185988092d);
        java.lang.String str44 = vector1D43.toString();
        double double45 = vector1D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = vector1D20.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location48 = intervalsSet18.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D20);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector49 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location50 = intervalsSet18.checkPoint(euclidean1DVector49);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine51 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line15, intervalsSet18);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine52 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane14, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet18);
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractSubHyperplane53 = subLine13.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) subLine52);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = subLine5.intersection(subLine13, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(vector1D20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(vector1D26);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertNotNull(vector1D33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(vector1D36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(vector1D40);
        org.junit.Assert.assertNotNull(vector1D43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{(NaN)}" + "'", str44, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertTrue("'" + location48 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location48.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location50 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location50.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertNotNull(euclidean2DAbstractSubHyperplane53);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.apache.commons.math3.geometry.euclidean.threed.Line line0 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D5 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean7 = vector1D5.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D9 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean13 = vector1D11.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = vector1D11.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double17 = vector1D15.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D16);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D5, 2.2250738585072014E-308d, vector1D9, 1.0000000000000002d, vector1D16);
        java.lang.String str19 = vector1D16.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location20 = intervalsSet3.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D16);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector21 = intervalsSet3.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine22 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line0, intervalsSet3);
        double double23 = intervalsSet3.getSize();
        double double24 = intervalsSet3.getSize();
        org.junit.Assert.assertNotNull(vector1D5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(vector1D9);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{(NaN)}" + "'", str19, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location20 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location20.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.16092847092354756d + "'", double23 == 0.16092847092354756d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.16092847092354756d + "'", double24 == 0.16092847092354756d);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine5 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane6 = null;
        org.apache.commons.math3.geometry.euclidean.threed.Line line7 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane8 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList9 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet10 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList9);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint11 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane8, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet10);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean14 = vector1D12.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D20 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean22 = vector1D20.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = vector1D20.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D25 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double26 = vector1D24.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D25);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean30 = vector1D28.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = vector1D28.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D16, (double) 100, vector1D18, (double) (short) 0, vector1D25, (double) 'a', vector1D28);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D35 = vector1D28.scalarMultiply(4.605170185988092d);
        java.lang.String str36 = vector1D35.toString();
        double double37 = vector1D12.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D35);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D39 = vector1D12.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location40 = intervalsSet10.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D12);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector41 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location42 = intervalsSet10.checkPoint(euclidean1DVector41);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine43 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line7, intervalsSet10);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine44 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane6, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet10);
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractSubHyperplane45 = subLine5.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) subLine44);
        double double46 = euclidean2DAbstractSubHyperplane45.getSize();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane47 = euclidean2DAbstractSubHyperplane45.getHyperplane();
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(vector1D25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertNotNull(vector1D35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{(NaN)}" + "'", str36, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(vector1D39);
        org.junit.Assert.assertTrue("'" + location40 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location40.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location42 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location42.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertNotNull(euclidean2DAbstractSubHyperplane45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + Double.POSITIVE_INFINITY + "'", double46 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNull(euclidean2DHyperplane47);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine5 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D8 = vector2D6.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D9 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = vector2D9.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D10);
        double double12 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D8, vector2D9);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D8, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D17 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D16.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D17);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D19 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = vector2D19.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D20);
        double double22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D18, vector2D19);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = vector2D19.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D28 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D27.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D28);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D30 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D31 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D32 = vector2D30.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D31);
        double double33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D29, vector2D30);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = vector2D30.scalarMultiply((double) (-1.0f));
        double double36 = vector2D30.getNormInf();
        double double37 = vector2D26.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D30);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D42 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D41.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D42);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D44 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D45 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D45);
        double double47 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D43, vector2D44);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D49 = vector2D44.scalarMultiply((double) (-1.0f));
        double double50 = vector2D44.getNormInf();
        double double51 = vector2D44.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D44.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D57 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D56.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D57);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D59 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D60 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D59.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D60);
        double double62 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D58, vector2D59);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D64 = vector2D59.scalarMultiply((double) (-1.0f));
        double double65 = vector2D59.getNormInf();
        double double66 = vector2D59.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D67 = vector2D54.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D59);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = vector2D52.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D67);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D24, (double) '#', vector2D30, (double) (-1023), vector2D39, 0.0d, vector2D52);
        double double70 = vector2D13.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D52);
        org.apache.commons.math3.geometry.euclidean.twod.Line line72 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D52, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine73 = line72.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractSubHyperplane74 = subLine5.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) subLine73);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion75 = subLine5.getRemainingRegion();
        org.junit.Assert.assertNotNull(vector2D6);
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertNotNull(vector2D8);
        org.junit.Assert.assertNotNull(vector2D9);
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(vector2D16);
        org.junit.Assert.assertNotNull(vector2D17);
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D19);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertNotNull(vector2D27);
        org.junit.Assert.assertNotNull(vector2D28);
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertNotNull(vector2D30);
        org.junit.Assert.assertNotNull(vector2D31);
        org.junit.Assert.assertNotNull(vector2D32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + Double.POSITIVE_INFINITY + "'", double36 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D41);
        org.junit.Assert.assertNotNull(vector2D42);
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertNotNull(vector2D44);
        org.junit.Assert.assertNotNull(vector2D45);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(vector2D49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + Double.POSITIVE_INFINITY + "'", double50 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + Double.POSITIVE_INFINITY + "'", double51 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D56);
        org.junit.Assert.assertNotNull(vector2D57);
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertNotNull(vector2D59);
        org.junit.Assert.assertNotNull(vector2D60);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(vector2D64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + Double.POSITIVE_INFINITY + "'", double65 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + Double.POSITIVE_INFINITY + "'", double66 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(subLine73);
        org.junit.Assert.assertNotNull(euclidean2DAbstractSubHyperplane74);
        org.junit.Assert.assertNotNull(euclidean1DRegion75);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D67 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = vector2D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D68);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = vector2D70.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D71);
        double double73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D69, vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D75 = vector2D70.scalarMultiply((double) (-1.0f));
        double double76 = vector2D70.getNormInf();
        double double77 = line66.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine78 = line66.wholeHyperplane();
        line66.setOriginOffset((double) (-1L));
        line66.setOriginOffset(Double.NEGATIVE_INFINITY);
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet83 = line66.wholeSpace();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D85 = line66.toSpace(euclidean1DVector84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector2D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(subLine78);
        org.junit.Assert.assertNotNull(polygonsSet83);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet0 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector1 = intervalsSet0.getBarycenter();
        double double2 = intervalsSet0.getInf();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet5 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion6 = intervalsSet5.copySelf();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet9 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet12 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean16 = vector1D14.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D20 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean22 = vector1D20.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = vector1D20.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D25 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double26 = vector1D24.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D25);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D27 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D14, 2.2250738585072014E-308d, vector1D18, 1.0000000000000002d, vector1D25);
        java.lang.String str28 = vector1D25.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location29 = intervalsSet12.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D25);
        boolean boolean30 = intervalsSet9.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet12);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet33 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D35 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean37 = vector1D35.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D39 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean43 = vector1D41.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = vector1D41.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D46 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double47 = vector1D45.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D46);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D48 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D35, 2.2250738585072014E-308d, vector1D39, 1.0000000000000002d, vector1D46);
        java.lang.String str49 = vector1D46.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location50 = intervalsSet33.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D46);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space53 = vector1D52.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D55 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space56 = vector1D55.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D57 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D52, (double) 100L, vector1D55);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D59 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space60 = vector1D59.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D62 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space63 = vector1D62.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D64 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D59, (double) 100L, vector1D62);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D65 = vector1D57.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D59);
        org.apache.commons.math3.geometry.partitioning.Region.Location location66 = intervalsSet33.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D59);
        org.apache.commons.math3.geometry.euclidean.threed.Line line67 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet70 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D72 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean74 = vector1D72.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D76 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D78 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean80 = vector1D78.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D82 = vector1D78.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D83 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double84 = vector1D82.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D83);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D85 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D72, 2.2250738585072014E-308d, vector1D76, 1.0000000000000002d, vector1D83);
        java.lang.String str86 = vector1D83.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location87 = intervalsSet70.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D83);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector88 = intervalsSet70.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine89 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line67, intervalsSet70);
        boolean boolean90 = intervalsSet33.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet70);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree92 = intervalsSet70.getTree(false);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion93 = intervalsSet9.buildNew(euclidean1DBSPTree92);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion94 = intervalsSet5.buildNew(euclidean1DBSPTree92);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet95 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(euclidean1DBSPTree92);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet96 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(euclidean1DBSPTree92);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet97 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(euclidean1DBSPTree92);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet98 = intervalsSet0.buildNew(euclidean1DBSPTree92);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet99 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(euclidean1DBSPTree92);
        org.junit.Assert.assertNotNull(euclidean1DVector1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.NEGATIVE_INFINITY + "'", double2 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion6);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(vector1D25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{(NaN)}" + "'", str28, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location29 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location29.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(vector1D35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(vector1D39);
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertNotNull(vector1D46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{(NaN)}" + "'", str49, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location50 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location50.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertNotNull(space53);
        org.junit.Assert.assertNotNull(vector1D55);
        org.junit.Assert.assertNotNull(space56);
        org.junit.Assert.assertNotNull(vector1D59);
        org.junit.Assert.assertNotNull(space60);
        org.junit.Assert.assertNotNull(vector1D62);
        org.junit.Assert.assertNotNull(space63);
        org.junit.Assert.assertNotNull(vector1D65);
        org.junit.Assert.assertTrue("'" + location66 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location66.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(vector1D76);
        org.junit.Assert.assertNotNull(vector1D78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(vector1D82);
        org.junit.Assert.assertNotNull(vector1D83);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "{(NaN)}" + "'", str86, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location87 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location87.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree92);
        org.junit.Assert.assertNotNull(euclidean1DRegion93);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion94);
        org.junit.Assert.assertNotNull(intervalsSet98);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D67 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = vector2D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D68);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = vector2D70.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D71);
        double double73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D69, vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D75 = vector2D70.scalarMultiply((double) (-1.0f));
        double double76 = vector2D70.getNormInf();
        double double77 = line66.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine78 = line66.wholeHyperplane();
        line66.setOriginOffset((double) (-1L));
        line66.setOriginOffset(Double.NEGATIVE_INFINITY);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D83 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D84 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D85 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D86 = vector2D84.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D85);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D87 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D88 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D89 = vector2D87.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D88);
        double double90 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D86, vector2D87);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D92 = vector2D87.scalarMultiply((double) (-1.0f));
        double double93 = vector2D87.getNormInf();
        double double94 = vector2D87.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D95 = vector2D87.normalize();
        double double96 = vector2D87.getNorm1();
        double double97 = vector2D87.getNormSq();
        double double98 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceInf(vector2D83, vector2D87);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D99 = line66.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D87);
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector2D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(subLine78);
        org.junit.Assert.assertNotNull(vector2D83);
        org.junit.Assert.assertNotNull(vector2D84);
        org.junit.Assert.assertNotNull(vector2D85);
        org.junit.Assert.assertNotNull(vector2D86);
        org.junit.Assert.assertNotNull(vector2D87);
        org.junit.Assert.assertNotNull(vector2D88);
        org.junit.Assert.assertNotNull(vector2D89);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertNotNull(vector2D92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + Double.POSITIVE_INFINITY + "'", double93 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + Double.POSITIVE_INFINITY + "'", double94 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + Double.POSITIVE_INFINITY + "'", double96 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + Double.POSITIVE_INFINITY + "'", double97 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double98));
        org.junit.Assert.assertNotNull(vector1D99);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = vector2D2.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = vector2D5.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D6);
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D4, vector2D5);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = vector2D5.scalarMultiply((double) (-1.0f));
        double double11 = vector2D5.getNormInf();
        double double12 = vector2D5.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = vector2D0.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D5);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D17 = vector2D15.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D16);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D19 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = vector2D18.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D19);
        double double21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D17, vector2D18);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D18.scalarMultiply((double) (-1.0f));
        double double24 = vector2D18.getNormInf();
        double double25 = vector2D18.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D18.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D28 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D30 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D31 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D32 = vector2D30.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D31);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D34 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = vector2D33.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D34);
        double double36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D32, vector2D33);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = vector2D33.scalarMultiply((double) (-1.0f));
        double double39 = vector2D33.getNormInf();
        double double40 = vector2D33.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D41 = vector2D28.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D33);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D42 = vector2D26.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D41);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D44 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D45 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D47 = vector2D45.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D49 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = vector2D48.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D49);
        double double51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D47, vector2D48);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = vector2D48.scalarMultiply((double) (-1.0f));
        double double54 = vector2D48.getNormInf();
        double double55 = vector2D44.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D48);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D56 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) '4', vector2D26, 5.65685424949238d, vector2D44);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine57 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(vector2D5, vector2D44);
        boolean boolean58 = subLine57.isEmpty();
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertNotNull(vector2D6);
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + Double.POSITIVE_INFINITY + "'", double11 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertNotNull(vector2D16);
        org.junit.Assert.assertNotNull(vector2D17);
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D19);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + Double.POSITIVE_INFINITY + "'", double25 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertNotNull(vector2D28);
        org.junit.Assert.assertNotNull(vector2D30);
        org.junit.Assert.assertNotNull(vector2D31);
        org.junit.Assert.assertNotNull(vector2D32);
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D34);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + Double.POSITIVE_INFINITY + "'", double39 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + Double.POSITIVE_INFINITY + "'", double40 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D41);
        org.junit.Assert.assertNotNull(vector2D42);
        org.junit.Assert.assertNotNull(vector2D44);
        org.junit.Assert.assertNotNull(vector2D45);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D47);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D49);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + Double.POSITIVE_INFINITY + "'", double54 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.apache.commons.math3.geometry.euclidean.threed.Line line0 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D5 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean7 = vector1D5.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D9 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D13 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean15 = vector1D13.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = vector1D13.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double19 = vector1D17.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D18);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean23 = vector1D21.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D25 = vector1D21.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D9, (double) 100, vector1D11, (double) (short) 0, vector1D18, (double) 'a', vector1D21);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = vector1D21.scalarMultiply(4.605170185988092d);
        java.lang.String str29 = vector1D28.toString();
        double double30 = vector1D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = vector1D5.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location33 = intervalsSet3.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D5);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector34 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location35 = intervalsSet3.checkPoint(euclidean1DVector34);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine36 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line0, intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.threed.Line line37 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane38 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList39 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet40 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList39);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint41 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane38, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet40);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D42 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean44 = vector1D42.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D46 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D48 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D50 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean52 = vector1D50.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = vector1D50.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D55 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double56 = vector1D54.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D55);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D58 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean60 = vector1D58.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D62 = vector1D58.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D63 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D46, (double) 100, vector1D48, (double) (short) 0, vector1D55, (double) 'a', vector1D58);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D65 = vector1D58.scalarMultiply(4.605170185988092d);
        java.lang.String str66 = vector1D65.toString();
        double double67 = vector1D42.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D65);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = vector1D42.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location70 = intervalsSet40.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D42);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector71 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location72 = intervalsSet40.checkPoint(euclidean1DVector71);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine73 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line37, intervalsSet40);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = subLine36.intersection(subLine73, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(vector1D9);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertNotNull(vector1D13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(vector1D17);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(vector1D25);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{(NaN)}" + "'", str29, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertTrue("'" + location33 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location33.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location35 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location35.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertNotNull(vector1D42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(vector1D46);
        org.junit.Assert.assertNotNull(vector1D48);
        org.junit.Assert.assertNotNull(vector1D50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(vector1D54);
        org.junit.Assert.assertNotNull(vector1D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector1D58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(vector1D62);
        org.junit.Assert.assertNotNull(vector1D65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "{(NaN)}" + "'", str66, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertTrue("'" + location70 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location70.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location72 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location72.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D1);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double4 = vector3D0.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3);
        double double5 = vector3D3.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double7 = vector3D3.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D8, vector3D9);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double12 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D13, vector3D14);
        double double16 = vector3D13.getNorm1();
        double double17 = vector3D8.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double18 = vector3D8.getNormInf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D19, vector3D20);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double23 = vector3D22.getNorm();
        double double24 = vector3D22.getNorm();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.Space space26 = vector3D25.getSpace();
        double double27 = vector3D22.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        double double28 = vector3D20.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.Space space30 = vector3D29.getSpace();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector31 = vector3D25.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D29);
        boolean boolean32 = vector3D29.isNaN();
        double double33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D8, vector3D29);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine34 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D3, vector3D8);
        java.util.List<org.apache.commons.math3.geometry.euclidean.threed.Segment> segmentList35 = subLine34.getSegments();
        org.apache.commons.math3.geometry.euclidean.threed.Line line36 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet39 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean43 = vector1D41.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean49 = vector1D47.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = vector1D47.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double53 = vector1D51.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D41, 2.2250738585072014E-308d, vector1D45, 1.0000000000000002d, vector1D52);
        java.lang.String str55 = vector1D52.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location56 = intervalsSet39.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector57 = intervalsSet39.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine58 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line36, intervalsSet39);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = subLine34.intersection(subLine58, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.POSITIVE_INFINITY + "'", double18 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + Double.POSITIVE_INFINITY + "'", double23 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(space26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + Double.POSITIVE_INFINITY + "'", double27 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + Double.POSITIVE_INFINITY + "'", double28 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(space30);
        org.junit.Assert.assertNotNull(euclidean3DVector31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(segmentList35);
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{(NaN)}" + "'", str55, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location56 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location56.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector57);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.apache.commons.math3.geometry.euclidean.threed.Line line0 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D5 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean7 = vector1D5.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D9 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D13 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean15 = vector1D13.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = vector1D13.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double19 = vector1D17.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D18);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean23 = vector1D21.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D25 = vector1D21.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D9, (double) 100, vector1D11, (double) (short) 0, vector1D18, (double) 'a', vector1D21);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = vector1D21.scalarMultiply(4.605170185988092d);
        java.lang.String str29 = vector1D28.toString();
        double double30 = vector1D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = vector1D5.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location33 = intervalsSet3.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D5);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector34 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location35 = intervalsSet3.checkPoint(euclidean1DVector34);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine36 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line0, intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D37, vector3D38);
        double double40 = vector3D37.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D41, vector3D42);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D42.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D47, vector3D48);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = vector3D48.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector53 = vector3D45.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine54 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D37, vector3D45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = subLine36.intersection(subLine54, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(vector1D9);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertNotNull(vector1D13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(vector1D17);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(vector1D25);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{(NaN)}" + "'", str29, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertTrue("'" + location33 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location33.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location35 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location35.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + Double.POSITIVE_INFINITY + "'", double40 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(euclidean3DVector53);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet0 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D2 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D4 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D6 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean8 = vector1D6.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = vector1D6.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double12 = vector1D10.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D11);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean16 = vector1D14.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = vector1D14.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D19 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D2, (double) 100, vector1D4, (double) (short) 0, vector1D11, (double) 'a', vector1D14);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = vector1D14.scalarMultiply(4.605170185988092d);
        double double22 = vector1D21.getNorm1();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint24 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint(vector1D21, false);
        org.apache.commons.math3.geometry.partitioning.Side side25 = intervalsSet0.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint24);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet26 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        double double27 = intervalsSet26.getSize();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet30 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean34 = vector1D32.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D36 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D38 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean40 = vector1D38.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D42 = vector1D38.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double44 = vector1D42.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D32, 2.2250738585072014E-308d, vector1D36, 1.0000000000000002d, vector1D43);
        java.lang.String str46 = vector1D43.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location47 = intervalsSet30.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D49 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space50 = vector1D49.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space53 = vector1D52.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D49, (double) 100L, vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D56 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space57 = vector1D56.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D59 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space60 = vector1D59.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D56, (double) 100L, vector1D59);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D62 = vector1D54.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.partitioning.Region.Location location63 = intervalsSet30.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.euclidean.threed.Line line64 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet67 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean71 = vector1D69.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D73 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D75 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean77 = vector1D75.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D79 = vector1D75.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double81 = vector1D79.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D82 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D69, 2.2250738585072014E-308d, vector1D73, 1.0000000000000002d, vector1D80);
        java.lang.String str83 = vector1D80.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location84 = intervalsSet67.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector85 = intervalsSet67.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine86 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line64, intervalsSet67);
        boolean boolean87 = intervalsSet30.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet67);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree89 = intervalsSet67.getTree(false);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion90 = intervalsSet26.buildNew(euclidean1DBSPTree89);
        boolean boolean91 = intervalsSet0.isEmpty(euclidean1DBSPTree89);
        double double92 = intervalsSet0.getBoundarySize();
        org.junit.Assert.assertNotNull(vector1D2);
        org.junit.Assert.assertNotNull(vector1D4);
        org.junit.Assert.assertNotNull(vector1D6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + side25 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side25.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + Double.POSITIVE_INFINITY + "'", double27 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector1D36);
        org.junit.Assert.assertNotNull(vector1D38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(vector1D42);
        org.junit.Assert.assertNotNull(vector1D43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{(NaN)}" + "'", str46, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location47 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location47.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D49);
        org.junit.Assert.assertNotNull(space50);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertNotNull(space53);
        org.junit.Assert.assertNotNull(vector1D56);
        org.junit.Assert.assertNotNull(space57);
        org.junit.Assert.assertNotNull(vector1D59);
        org.junit.Assert.assertNotNull(space60);
        org.junit.Assert.assertNotNull(vector1D62);
        org.junit.Assert.assertTrue("'" + location63 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location63.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(vector1D73);
        org.junit.Assert.assertNotNull(vector1D75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(vector1D79);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{(NaN)}" + "'", str83, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location84 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location84.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree89);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D1);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double4 = vector3D0.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3);
        boolean boolean5 = vector3D0.isNaN();
        double double6 = vector3D0.getNormSq();
        double[] doubleArray7 = vector3D0.toArray();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(doubleArray7);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(doubleArray7);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D14, vector3D15);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double18 = vector3D14.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D17);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double20 = vector3D19.getNorm();
        double double21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D14, vector3D19);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D23, vector3D24);
        double double26 = vector3D23.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D28, vector3D29);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double32 = vector3D28.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D31);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D33, vector3D34);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double37 = vector3D33.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double39 = vector3D38.getNorm();
        double double40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D33, vector3D38);
        double double41 = vector3D31.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) 'a', vector3D19, (double) 6, vector3D23, (double) 10.0f, vector3D38, 0.0d, vector3D43);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.negate();
        double double46 = vector3D45.getDelta();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J;
        double double48 = vector3D45.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D47);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((-1.5574077246549023d), vector3D11, (double) 99.99999f, vector3D45);
        double double50 = vector3D11.getDelta();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector51 = vector3D9.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D53, vector3D54);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double57 = vector3D53.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double59 = vector3D58.getNorm();
        double double60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D53, vector3D58);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D62, vector3D63);
        double double65 = vector3D62.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D67, vector3D68);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double71 = vector3D67.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D72, vector3D73);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double76 = vector3D72.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D75);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double78 = vector3D77.getNorm();
        double double79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D72, vector3D77);
        double double80 = vector3D70.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D77);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) 'a', vector3D58, (double) 6, vector3D62, (double) 10.0f, vector3D77, 0.0d, vector3D82);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = vector3D62.scalarMultiply((double) (-1L));
        double double86 = vector3D62.getDelta();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine87 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D11, vector3D62);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-Infinity, -Infinity, -Infinity]");
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + Double.POSITIVE_INFINITY + "'", double20 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + Double.POSITIVE_INFINITY + "'", double26 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + Double.POSITIVE_INFINITY + "'", double39 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.5707963267948966d) + "'", double50 == (-1.5707963267948966d));
        org.junit.Assert.assertNotNull(euclidean3DVector51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + Double.POSITIVE_INFINITY + "'", double65 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + Double.POSITIVE_INFINITY + "'", double78 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet0 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D2 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D4 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D6 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean8 = vector1D6.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = vector1D6.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double12 = vector1D10.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D11);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean16 = vector1D14.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = vector1D14.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D19 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D2, (double) 100, vector1D4, (double) (short) 0, vector1D11, (double) 'a', vector1D14);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = vector1D14.scalarMultiply(4.605170185988092d);
        double double22 = vector1D21.getNorm1();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint24 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint(vector1D21, false);
        org.apache.commons.math3.geometry.partitioning.Side side25 = intervalsSet0.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint24);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet26 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        double double27 = intervalsSet26.getSize();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet30 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean34 = vector1D32.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D36 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D38 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean40 = vector1D38.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D42 = vector1D38.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double44 = vector1D42.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D32, 2.2250738585072014E-308d, vector1D36, 1.0000000000000002d, vector1D43);
        java.lang.String str46 = vector1D43.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location47 = intervalsSet30.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D49 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space50 = vector1D49.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space53 = vector1D52.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D49, (double) 100L, vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D56 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space57 = vector1D56.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D59 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space60 = vector1D59.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D56, (double) 100L, vector1D59);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D62 = vector1D54.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.partitioning.Region.Location location63 = intervalsSet30.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.euclidean.threed.Line line64 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet67 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean71 = vector1D69.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D73 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D75 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean77 = vector1D75.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D79 = vector1D75.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double81 = vector1D79.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D82 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D69, 2.2250738585072014E-308d, vector1D73, 1.0000000000000002d, vector1D80);
        java.lang.String str83 = vector1D80.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location84 = intervalsSet67.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector85 = intervalsSet67.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine86 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line64, intervalsSet67);
        boolean boolean87 = intervalsSet30.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet67);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree89 = intervalsSet67.getTree(false);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion90 = intervalsSet26.buildNew(euclidean1DBSPTree89);
        boolean boolean91 = intervalsSet0.isEmpty(euclidean1DBSPTree89);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet94 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion95 = intervalsSet94.copySelf();
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion96 = euclidean1DAbstractRegion95.copySelf();
        boolean boolean97 = intervalsSet0.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) euclidean1DAbstractRegion95);
        org.junit.Assert.assertNotNull(vector1D2);
        org.junit.Assert.assertNotNull(vector1D4);
        org.junit.Assert.assertNotNull(vector1D6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + side25 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side25.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + Double.POSITIVE_INFINITY + "'", double27 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector1D36);
        org.junit.Assert.assertNotNull(vector1D38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(vector1D42);
        org.junit.Assert.assertNotNull(vector1D43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{(NaN)}" + "'", str46, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location47 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location47.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D49);
        org.junit.Assert.assertNotNull(space50);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertNotNull(space53);
        org.junit.Assert.assertNotNull(vector1D56);
        org.junit.Assert.assertNotNull(space57);
        org.junit.Assert.assertNotNull(vector1D59);
        org.junit.Assert.assertNotNull(space60);
        org.junit.Assert.assertNotNull(vector1D62);
        org.junit.Assert.assertTrue("'" + location63 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location63.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(vector1D73);
        org.junit.Assert.assertNotNull(vector1D75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(vector1D79);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{(NaN)}" + "'", str83, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location84 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location84.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree89);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion95);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane0 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList1 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList1);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint3 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet2);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane4 = subOrientedPoint3.getHyperplane();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractSubHyperplane5 = subOrientedPoint3.copySelf();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet8 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean12 = vector1D10.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean18 = vector1D16.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D20 = vector1D16.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double22 = vector1D20.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D21);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D23 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D10, 2.2250738585072014E-308d, vector1D14, 1.0000000000000002d, vector1D21);
        java.lang.String str24 = vector1D21.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location25 = intervalsSet8.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D21);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D27 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space28 = vector1D27.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D30 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space31 = vector1D30.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D27, (double) 100L, vector1D30);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space35 = vector1D34.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D37 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space38 = vector1D37.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D39 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D34, (double) 100L, vector1D37);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D40 = vector1D32.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D34);
        org.apache.commons.math3.geometry.partitioning.Region.Location location41 = intervalsSet8.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D34);
        org.apache.commons.math3.geometry.euclidean.threed.Line line42 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet45 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean49 = vector1D47.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D53 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean55 = vector1D53.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D57 = vector1D53.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D58 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double59 = vector1D57.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D58);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D60 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D47, 2.2250738585072014E-308d, vector1D51, 1.0000000000000002d, vector1D58);
        java.lang.String str61 = vector1D58.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location62 = intervalsSet45.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D58);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector63 = intervalsSet45.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine64 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line42, intervalsSet45);
        boolean boolean65 = intervalsSet8.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet45);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D67 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D71 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean73 = vector1D71.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D75 = vector1D71.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D76 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double77 = vector1D75.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D76);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D79 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean81 = vector1D79.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D83 = vector1D79.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D84 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D67, (double) 100, vector1D69, (double) (short) 0, vector1D76, (double) 'a', vector1D79);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D86 = vector1D79.scalarMultiply(4.605170185988092d);
        double double87 = vector1D86.getNorm1();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint89 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint(vector1D86, false);
        org.apache.commons.math3.geometry.partitioning.Side side90 = intervalsSet45.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint89);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D91 = orientedPoint89.getLocation();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.Side side92 = euclidean1DAbstractSubHyperplane5.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(euclidean1DHyperplane4);
        org.junit.Assert.assertNotNull(euclidean1DAbstractSubHyperplane5);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(vector1D20);
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{(NaN)}" + "'", str24, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location25 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location25.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D27);
        org.junit.Assert.assertNotNull(space28);
        org.junit.Assert.assertNotNull(vector1D30);
        org.junit.Assert.assertNotNull(space31);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertNotNull(space35);
        org.junit.Assert.assertNotNull(vector1D37);
        org.junit.Assert.assertNotNull(space38);
        org.junit.Assert.assertNotNull(vector1D40);
        org.junit.Assert.assertTrue("'" + location41 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location41.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertNotNull(vector1D53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(vector1D57);
        org.junit.Assert.assertNotNull(vector1D58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{(NaN)}" + "'", str61, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location62 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location62.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(vector1D67);
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertNotNull(vector1D71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(vector1D75);
        org.junit.Assert.assertNotNull(vector1D76);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(vector1D79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(vector1D83);
        org.junit.Assert.assertNotNull(vector1D86);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue("'" + side90 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.MINUS + "'", side90.equals(org.apache.commons.math3.geometry.partitioning.Side.MINUS));
        org.junit.Assert.assertNotNull(vector1D91);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet0 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        double double1 = intervalsSet0.getSize();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet4 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D6 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean8 = vector1D6.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean14 = vector1D12.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = vector1D12.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double18 = vector1D16.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D17);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D19 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D6, 2.2250738585072014E-308d, vector1D10, 1.0000000000000002d, vector1D17);
        java.lang.String str20 = vector1D17.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location21 = intervalsSet4.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D17);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D23 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space24 = vector1D23.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space27 = vector1D26.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D23, (double) 100L, vector1D26);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D30 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space31 = vector1D30.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space34 = vector1D33.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D35 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D30, (double) 100L, vector1D33);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D36 = vector1D28.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D30);
        org.apache.commons.math3.geometry.partitioning.Region.Location location37 = intervalsSet4.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D30);
        org.apache.commons.math3.geometry.euclidean.threed.Line line38 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet41 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean45 = vector1D43.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D49 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean51 = vector1D49.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D53 = vector1D49.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double55 = vector1D53.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D54);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D56 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D43, 2.2250738585072014E-308d, vector1D47, 1.0000000000000002d, vector1D54);
        java.lang.String str57 = vector1D54.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location58 = intervalsSet41.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D54);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector59 = intervalsSet41.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine60 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line38, intervalsSet41);
        boolean boolean61 = intervalsSet4.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet41);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree63 = intervalsSet41.getTree(false);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion64 = intervalsSet0.buildNew(euclidean1DBSPTree63);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet65 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D67 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D71 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean73 = vector1D71.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D75 = vector1D71.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D76 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double77 = vector1D75.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D76);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D79 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean81 = vector1D79.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D83 = vector1D79.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D84 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D67, (double) 100, vector1D69, (double) (short) 0, vector1D76, (double) 'a', vector1D79);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D86 = vector1D79.scalarMultiply(4.605170185988092d);
        double double87 = vector1D86.getNorm1();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint89 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint(vector1D86, false);
        org.apache.commons.math3.geometry.partitioning.Side side90 = intervalsSet65.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint89);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D91 = orientedPoint89.getLocation();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion92 = orientedPoint89.wholeSpace();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion93 = orientedPoint89.wholeSpace();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint94 = orientedPoint89.copySelf();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion95 = orientedPoint89.wholeSpace();
        org.apache.commons.math3.geometry.partitioning.Side side96 = intervalsSet0.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint89);
        double double97 = intervalsSet0.getSize();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector1D6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertNotNull(vector1D17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{(NaN)}" + "'", str20, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location21 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location21.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D23);
        org.junit.Assert.assertNotNull(space24);
        org.junit.Assert.assertNotNull(vector1D26);
        org.junit.Assert.assertNotNull(space27);
        org.junit.Assert.assertNotNull(vector1D30);
        org.junit.Assert.assertNotNull(space31);
        org.junit.Assert.assertNotNull(vector1D33);
        org.junit.Assert.assertNotNull(space34);
        org.junit.Assert.assertNotNull(vector1D36);
        org.junit.Assert.assertTrue("'" + location37 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location37.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertNotNull(vector1D49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(vector1D53);
        org.junit.Assert.assertNotNull(vector1D54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{(NaN)}" + "'", str57, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location58 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location58.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree63);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion64);
        org.junit.Assert.assertNotNull(vector1D67);
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertNotNull(vector1D71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(vector1D75);
        org.junit.Assert.assertNotNull(vector1D76);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(vector1D79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(vector1D83);
        org.junit.Assert.assertNotNull(vector1D86);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue("'" + side90 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side90.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
        org.junit.Assert.assertNotNull(vector1D91);
        org.junit.Assert.assertNotNull(euclidean1DRegion92);
        org.junit.Assert.assertNotNull(euclidean1DRegion93);
        org.junit.Assert.assertNotNull(orientedPoint94);
        org.junit.Assert.assertNotNull(euclidean1DRegion95);
        org.junit.Assert.assertTrue("'" + side96 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side96.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + Double.POSITIVE_INFINITY + "'", double97 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D4 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean6 = vector1D4.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D8 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean12 = vector1D10.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = vector1D10.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double16 = vector1D14.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D4, 2.2250738585072014E-308d, vector1D8, 1.0000000000000002d, vector1D15);
        java.lang.String str18 = vector1D15.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location19 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space22 = vector1D21.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space25 = vector1D24.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D21, (double) 100L, vector1D24);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space29 = vector1D28.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D31 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space32 = vector1D31.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D28, (double) 100L, vector1D31);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = vector1D26.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.partitioning.Region.Location location35 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.euclidean.threed.Line line36 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet39 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean43 = vector1D41.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean49 = vector1D47.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = vector1D47.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double53 = vector1D51.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D41, 2.2250738585072014E-308d, vector1D45, 1.0000000000000002d, vector1D52);
        java.lang.String str55 = vector1D52.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location56 = intervalsSet39.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector57 = intervalsSet39.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine58 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line36, intervalsSet39);
        boolean boolean59 = intervalsSet2.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet39);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DSubHyperplane60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DSubHyperplane61 = intervalsSet39.intersection(euclidean1DSubHyperplane60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(vector1D8);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{(NaN)}" + "'", str18, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location19 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location19.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(space22);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(space25);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertNotNull(space29);
        org.junit.Assert.assertNotNull(vector1D31);
        org.junit.Assert.assertNotNull(space32);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertTrue("'" + location35 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location35.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{(NaN)}" + "'", str55, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location56 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location56.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D4 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean6 = vector1D4.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D8 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean12 = vector1D10.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = vector1D10.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double16 = vector1D14.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D4, 2.2250738585072014E-308d, vector1D8, 1.0000000000000002d, vector1D15);
        java.lang.String str18 = vector1D15.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location19 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space22 = vector1D21.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space25 = vector1D24.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D21, (double) 100L, vector1D24);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space29 = vector1D28.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D31 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space32 = vector1D31.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D28, (double) 100L, vector1D31);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = vector1D26.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.partitioning.Region.Location location35 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.euclidean.threed.Line line36 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet39 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean43 = vector1D41.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean49 = vector1D47.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = vector1D47.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double53 = vector1D51.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D41, 2.2250738585072014E-308d, vector1D45, 1.0000000000000002d, vector1D52);
        java.lang.String str55 = vector1D52.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location56 = intervalsSet39.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector57 = intervalsSet39.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine58 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line36, intervalsSet39);
        boolean boolean59 = intervalsSet2.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet39);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D63 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D65 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean67 = vector1D65.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = vector1D65.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D70 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double71 = vector1D69.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D70);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D73 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean75 = vector1D73.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D77 = vector1D73.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D78 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D61, (double) 100, vector1D63, (double) (short) 0, vector1D70, (double) 'a', vector1D73);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = vector1D73.scalarMultiply(4.605170185988092d);
        double double81 = vector1D80.getNorm1();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint83 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint(vector1D80, false);
        org.apache.commons.math3.geometry.partitioning.Side side84 = intervalsSet39.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint83);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D85 = orientedPoint83.getLocation();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion86 = orientedPoint83.wholeSpace();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion87 = orientedPoint83.wholeSpace();
        org.junit.Assert.assertNotNull(vector1D4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(vector1D8);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{(NaN)}" + "'", str18, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location19 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location19.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(space22);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(space25);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertNotNull(space29);
        org.junit.Assert.assertNotNull(vector1D31);
        org.junit.Assert.assertNotNull(space32);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertTrue("'" + location35 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location35.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{(NaN)}" + "'", str55, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location56 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location56.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(vector1D61);
        org.junit.Assert.assertNotNull(vector1D63);
        org.junit.Assert.assertNotNull(vector1D65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertNotNull(vector1D70);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(vector1D73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(vector1D77);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + side84 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.MINUS + "'", side84.equals(org.apache.commons.math3.geometry.partitioning.Side.MINUS));
        org.junit.Assert.assertNotNull(vector1D85);
        org.junit.Assert.assertNotNull(euclidean1DRegion86);
        org.junit.Assert.assertNotNull(euclidean1DRegion87);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine5 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        double double6 = subLine5.getSize();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractSubHyperplane7 = subLine5.copySelf();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean2DAbstractSubHyperplane7);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D1);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D5, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double9 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D10, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double14 = vector3D10.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double16 = vector3D15.getNorm();
        double double17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D10, vector3D15);
        double double18 = vector3D8.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D15);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D19, vector3D20);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D20.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D26, vector3D27);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D29, vector3D30);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D30.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        double double35 = vector3D27.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D30);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector36 = vector3D20.add((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D15.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27);
        java.text.NumberFormat numberFormat38 = null;
        java.lang.String str39 = vector3D37.toString(numberFormat38);
        org.apache.commons.math3.geometry.euclidean.threed.Line line40 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D0, vector3D37);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D41, vector3D42);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D41, vector3D44);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D46, vector3D47);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double50 = vector3D46.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D49);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D51, vector3D52);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double55 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double57 = vector3D56.getNorm();
        double double58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D51, vector3D56);
        double double59 = vector3D49.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D60, vector3D61);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = vector3D61.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D64);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        double double69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D67, vector3D68);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D70, vector3D71);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = vector3D71.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D74);
        double double76 = vector3D68.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector77 = vector3D61.add((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = vector3D56.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68);
        java.text.NumberFormat numberFormat79 = null;
        java.lang.String str80 = vector3D78.toString(numberFormat79);
        org.apache.commons.math3.geometry.euclidean.threed.Line line81 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D41, vector3D78);
        double double82 = line40.distance(line81);
        org.apache.commons.math3.geometry.euclidean.threed.Line line83 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line81);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = line83.getDirection();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine85 = line83.wholeLine();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = line83.pointAt(0.0d);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean3DVector36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{(-Infinity); (-Infinity); (-Infinity)}" + "'", str39, "{(-Infinity); (-Infinity); (-Infinity)}");
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + Double.POSITIVE_INFINITY + "'", double57 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean3DVector77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "{(-Infinity); (-Infinity); (-Infinity)}" + "'", str80, "{(-Infinity); (-Infinity); (-Infinity)}");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(subLine85);
        org.junit.Assert.assertNotNull(vector3D87);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.math3.geometry.euclidean.threed.Line line0 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D5 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean7 = vector1D5.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D9 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean13 = vector1D11.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = vector1D11.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double17 = vector1D15.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D16);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D5, 2.2250738585072014E-308d, vector1D9, 1.0000000000000002d, vector1D16);
        java.lang.String str19 = vector1D16.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location20 = intervalsSet3.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D16);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector21 = intervalsSet3.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine22 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line0, intervalsSet3);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree24 = intervalsSet3.getTree(false);
        org.junit.Assert.assertNotNull(vector1D5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(vector1D9);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{(NaN)}" + "'", str19, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location20 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location20.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector21);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree24);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D4 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean6 = vector1D4.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D8 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean12 = vector1D10.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = vector1D10.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double16 = vector1D14.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D4, 2.2250738585072014E-308d, vector1D8, 1.0000000000000002d, vector1D15);
        java.lang.String str18 = vector1D15.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location19 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space22 = vector1D21.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space25 = vector1D24.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D21, (double) 100L, vector1D24);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space29 = vector1D28.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D31 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space32 = vector1D31.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D28, (double) 100L, vector1D31);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = vector1D26.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.partitioning.Region.Location location35 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.euclidean.threed.Line line36 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet39 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean43 = vector1D41.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean49 = vector1D47.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = vector1D47.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double53 = vector1D51.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D41, 2.2250738585072014E-308d, vector1D45, 1.0000000000000002d, vector1D52);
        java.lang.String str55 = vector1D52.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location56 = intervalsSet39.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector57 = intervalsSet39.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine58 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line36, intervalsSet39);
        boolean boolean59 = intervalsSet2.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet39);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D63 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D65 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean67 = vector1D65.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = vector1D65.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D70 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double71 = vector1D69.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D70);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D73 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean75 = vector1D73.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D77 = vector1D73.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D78 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D61, (double) 100, vector1D63, (double) (short) 0, vector1D70, (double) 'a', vector1D73);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = vector1D73.scalarMultiply(4.605170185988092d);
        double double81 = vector1D80.getNorm1();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint83 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint(vector1D80, false);
        org.apache.commons.math3.geometry.partitioning.Side side84 = intervalsSet39.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint83);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = intervalsSet39.getBoundarySize();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(vector1D8);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{(NaN)}" + "'", str18, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location19 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location19.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(space22);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(space25);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertNotNull(space29);
        org.junit.Assert.assertNotNull(vector1D31);
        org.junit.Assert.assertNotNull(space32);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertTrue("'" + location35 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location35.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{(NaN)}" + "'", str55, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location56 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location56.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(vector1D61);
        org.junit.Assert.assertNotNull(vector1D63);
        org.junit.Assert.assertNotNull(vector1D65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertNotNull(vector1D70);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(vector1D73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(vector1D77);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + side84 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.MINUS + "'", side84.equals(org.apache.commons.math3.geometry.partitioning.Side.MINUS));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D8 = vector2D3.scalarMultiply((double) (-1.0f));
        double double9 = vector2D3.getNormInf();
        double double10 = vector2D3.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = vector2D3.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = vector2D12.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D17 = vector2D15.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D16);
        double double18 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D14, vector2D15);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = vector2D15.scalarMultiply((double) (-1.0f));
        double double21 = vector2D15.getNormInf();
        double double22 = vector2D15.getNorm();
        double double23 = vector2D3.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D15);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = vector2D15.negate();
        boolean boolean25 = vector2D15.isInfinite();
        org.apache.commons.math3.geometry.euclidean.twod.Line line27 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D15, 1033.0842172833732d);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet28 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        double double29 = intervalsSet28.getSize();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D31 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space32 = vector1D31.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space35 = vector1D34.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D36 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D31, (double) 100L, vector1D34);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D38 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space39 = vector1D38.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space42 = vector1D41.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D38, (double) 100L, vector1D41);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D44 = vector1D36.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D38);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean47 = vector1D45.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D49 = vector1D45.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D50 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double51 = vector1D49.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D50);
        double double52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.distance(vector1D44, vector1D49);
        org.apache.commons.math3.geometry.partitioning.Region.Location location53 = intervalsSet28.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D49);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion54 = intervalsSet28.copySelf();
        double double55 = euclidean1DAbstractRegion54.getSize();
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine56 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line27, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) euclidean1DAbstractRegion54);
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertNotNull(vector2D16);
        org.junit.Assert.assertNotNull(vector2D17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + Double.POSITIVE_INFINITY + "'", double21 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + Double.POSITIVE_INFINITY + "'", double29 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector1D31);
        org.junit.Assert.assertNotNull(space32);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertNotNull(space35);
        org.junit.Assert.assertNotNull(vector1D38);
        org.junit.Assert.assertNotNull(space39);
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertNotNull(space42);
        org.junit.Assert.assertNotNull(vector1D44);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(vector1D49);
        org.junit.Assert.assertNotNull(vector1D50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + location53 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location53.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + Double.POSITIVE_INFINITY + "'", double55 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet1 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList0);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList0);
        double double3 = intervalsSet2.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet6 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D8 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean10 = vector1D8.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean16 = vector1D14.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = vector1D14.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D19 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double20 = vector1D18.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D19);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D8, 2.2250738585072014E-308d, vector1D12, 1.0000000000000002d, vector1D19);
        java.lang.String str22 = vector1D19.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location23 = intervalsSet6.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D19);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D25 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space26 = vector1D25.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space29 = vector1D28.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D30 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D25, (double) 100L, vector1D28);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space33 = vector1D32.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D35 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space36 = vector1D35.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D37 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D32, (double) 100L, vector1D35);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D38 = vector1D30.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D32);
        org.apache.commons.math3.geometry.partitioning.Region.Location location39 = intervalsSet6.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D32);
        org.apache.commons.math3.geometry.euclidean.threed.Line line40 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet43 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean47 = vector1D45.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D49 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean53 = vector1D51.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D55 = vector1D51.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D56 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double57 = vector1D55.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D58 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D45, 2.2250738585072014E-308d, vector1D49, 1.0000000000000002d, vector1D56);
        java.lang.String str59 = vector1D56.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location60 = intervalsSet43.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector61 = intervalsSet43.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine62 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line40, intervalsSet43);
        boolean boolean63 = intervalsSet6.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D65 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D67 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean71 = vector1D69.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D73 = vector1D69.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D74 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double75 = vector1D73.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D74);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D77 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean79 = vector1D77.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D81 = vector1D77.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D82 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D65, (double) 100, vector1D67, (double) (short) 0, vector1D74, (double) 'a', vector1D77);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D84 = vector1D77.scalarMultiply(4.605170185988092d);
        double double85 = vector1D84.getNorm1();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint87 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint(vector1D84, false);
        org.apache.commons.math3.geometry.partitioning.Side side88 = intervalsSet43.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint87);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree90 = intervalsSet43.getTree(false);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet91 = intervalsSet2.buildNew(euclidean1DBSPTree90);
        boolean boolean92 = intervalsSet2.isEmpty();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(vector1D8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{(NaN)}" + "'", str22, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location23 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location23.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D25);
        org.junit.Assert.assertNotNull(space26);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertNotNull(space29);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertNotNull(space33);
        org.junit.Assert.assertNotNull(vector1D35);
        org.junit.Assert.assertNotNull(space36);
        org.junit.Assert.assertNotNull(vector1D38);
        org.junit.Assert.assertTrue("'" + location39 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location39.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(vector1D49);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(vector1D55);
        org.junit.Assert.assertNotNull(vector1D56);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{(NaN)}" + "'", str59, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location60 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location60.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(vector1D65);
        org.junit.Assert.assertNotNull(vector1D67);
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(vector1D73);
        org.junit.Assert.assertNotNull(vector1D74);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(vector1D77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(vector1D81);
        org.junit.Assert.assertNotNull(vector1D84);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + side88 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.MINUS + "'", side88.equals(org.apache.commons.math3.geometry.partitioning.Side.MINUS));
        org.junit.Assert.assertNotNull(euclidean1DBSPTree90);
        org.junit.Assert.assertNotNull(intervalsSet91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D1);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double4 = vector3D0.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double6 = vector3D5.getNorm();
        double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D5);
        double double8 = vector3D5.getNorm();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        double double11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D9, vector3D10);
        double double12 = vector3D10.getDelta();
        double double13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D5, vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D14, vector3D15);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double18 = vector3D14.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D17);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector20 = vector3D17.scalarMultiply((double) (byte) 100);
        double double21 = vector3D17.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D22, vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double26 = vector3D22.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.Space space27 = vector3D22.getSpace();
        double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D17, vector3D22);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D30, vector3D31);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double34 = vector3D30.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector35 = vector3D22.add(3327.9999999999995d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine36 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D5, vector3D33);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = subLine36.intersection(subLine37, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + Double.POSITIVE_INFINITY + "'", double13 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(euclidean3DVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + Double.POSITIVE_INFINITY + "'", double21 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(space27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(euclidean3DVector35);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D1);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D5, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double9 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D10, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double14 = vector3D10.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double16 = vector3D15.getNorm();
        double double17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D10, vector3D15);
        double double18 = vector3D8.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D15);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D19, vector3D20);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D20.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D26, vector3D27);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D29, vector3D30);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D30.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        double double35 = vector3D27.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D30);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector36 = vector3D20.add((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D15.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27);
        java.text.NumberFormat numberFormat38 = null;
        java.lang.String str39 = vector3D37.toString(numberFormat38);
        org.apache.commons.math3.geometry.euclidean.threed.Line line40 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D0, vector3D37);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D41, vector3D42);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D41, vector3D44);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D46, vector3D47);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double50 = vector3D46.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D49);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D51, vector3D52);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double55 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double57 = vector3D56.getNorm();
        double double58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D51, vector3D56);
        double double59 = vector3D49.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D60, vector3D61);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = vector3D61.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D64);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        double double69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D67, vector3D68);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D70, vector3D71);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = vector3D71.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D74);
        double double76 = vector3D68.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector77 = vector3D61.add((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = vector3D56.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68);
        java.text.NumberFormat numberFormat79 = null;
        java.lang.String str80 = vector3D78.toString(numberFormat79);
        org.apache.commons.math3.geometry.euclidean.threed.Line line81 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D41, vector3D78);
        double double82 = line40.distance(line81);
        org.apache.commons.math3.geometry.euclidean.threed.Line line83 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line81);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = line83.getDirection();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine85 = line83.wholeLine();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = line83.getDirection();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine87 = line83.wholeLine();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean3DVector36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{(-Infinity); (-Infinity); (-Infinity)}" + "'", str39, "{(-Infinity); (-Infinity); (-Infinity)}");
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + Double.POSITIVE_INFINITY + "'", double57 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean3DVector77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "{(-Infinity); (-Infinity); (-Infinity)}" + "'", str80, "{(-Infinity); (-Infinity); (-Infinity)}");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(subLine85);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(subLine87);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine5 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane6 = null;
        org.apache.commons.math3.geometry.euclidean.threed.Line line7 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane8 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList9 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet10 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList9);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint11 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane8, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet10);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean14 = vector1D12.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D20 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean22 = vector1D20.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = vector1D20.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D25 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double26 = vector1D24.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D25);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean30 = vector1D28.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = vector1D28.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D16, (double) 100, vector1D18, (double) (short) 0, vector1D25, (double) 'a', vector1D28);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D35 = vector1D28.scalarMultiply(4.605170185988092d);
        java.lang.String str36 = vector1D35.toString();
        double double37 = vector1D12.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D35);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D39 = vector1D12.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location40 = intervalsSet10.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D12);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector41 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location42 = intervalsSet10.checkPoint(euclidean1DVector41);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine43 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line7, intervalsSet10);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine44 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane6, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet10);
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractSubHyperplane45 = subLine5.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) subLine44);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion46 = euclidean2DAbstractSubHyperplane45.getRemainingRegion();
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(vector1D25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertNotNull(vector1D35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{(NaN)}" + "'", str36, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(vector1D39);
        org.junit.Assert.assertTrue("'" + location40 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location40.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location42 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location42.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertNotNull(euclidean2DAbstractSubHyperplane45);
        org.junit.Assert.assertNotNull(euclidean1DRegion46);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D8 = vector2D6.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D7);
        double double9 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D5, vector2D6);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = vector2D6.scalarMultiply((double) (-1.0f));
        double double12 = vector2D6.getNormInf();
        double double13 = vector2D6.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = vector2D1.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D6);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D17 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D16.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D17);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D19 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = vector2D19.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D20);
        double double22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D18, vector2D19);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = vector2D19.scalarMultiply((double) (-1.0f));
        double double25 = vector2D19.getNormInf();
        double double26 = vector2D19.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D27 = vector2D19.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D31 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D32 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = vector2D31.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D32);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D34 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = vector2D34.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D35);
        double double37 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D33, vector2D34);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = vector2D34.scalarMultiply((double) (-1.0f));
        double double40 = vector2D34.getNormInf();
        double double41 = vector2D34.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D42 = vector2D29.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D34);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D27.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D42);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D45 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D47 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = vector2D46.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D47);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D49 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = vector2D49.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D50);
        double double52 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D48, vector2D49);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = vector2D49.scalarMultiply((double) (-1.0f));
        double double55 = vector2D49.getNormInf();
        double double56 = vector2D45.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D49);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D57 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) '4', vector2D27, 5.65685424949238d, vector2D45);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine58 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(vector2D6, vector2D45);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D59 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(0.0d, vector2D45);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D60 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double61 = vector2D60.getNormInf();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D45.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D60);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertNotNull(vector2D6);
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertNotNull(vector2D8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + Double.POSITIVE_INFINITY + "'", double13 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D16);
        org.junit.Assert.assertNotNull(vector2D17);
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D19);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + Double.POSITIVE_INFINITY + "'", double25 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + Double.POSITIVE_INFINITY + "'", double26 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D27);
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertNotNull(vector2D31);
        org.junit.Assert.assertNotNull(vector2D32);
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D34);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + Double.POSITIVE_INFINITY + "'", double40 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + Double.POSITIVE_INFINITY + "'", double41 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D42);
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertNotNull(vector2D45);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D47);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D49);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + Double.POSITIVE_INFINITY + "'", double55 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + Double.POSITIVE_INFINITY + "'", double61 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D62);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D67 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = vector2D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D68);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = vector2D70.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D71);
        double double73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D69, vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D75 = vector2D70.scalarMultiply((double) (-1.0f));
        double double76 = vector2D70.getNormInf();
        double double77 = line66.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine78 = line66.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.twod.Line line79 = line66.copySelf();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D80 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D81 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D82 = vector2D80.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D81);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D83 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D84 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D85 = vector2D83.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D84);
        double double86 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D82, vector2D83);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D88 = vector2D83.scalarMultiply((double) (-1.0f));
        double double89 = vector2D83.getNormInf();
        double double90 = vector2D83.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D91 = null;
        // The following exception was thrown during execution in test generation
        try {
            line66.reset(vector2D83, vector2D91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector2D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(subLine78);
        org.junit.Assert.assertNotNull(line79);
        org.junit.Assert.assertNotNull(vector2D80);
        org.junit.Assert.assertNotNull(vector2D81);
        org.junit.Assert.assertNotNull(vector2D82);
        org.junit.Assert.assertNotNull(vector2D83);
        org.junit.Assert.assertNotNull(vector2D84);
        org.junit.Assert.assertNotNull(vector2D85);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(vector2D88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + Double.POSITIVE_INFINITY + "'", double89 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + Double.POSITIVE_INFINITY + "'", double90 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet0 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        boolean boolean1 = intervalsSet0.isEmpty();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector3 = intervalsSet2.getBarycenter();
        double double4 = intervalsSet2.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet7 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet10 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean14 = vector1D12.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean20 = vector1D18.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = vector1D18.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D23 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double24 = vector1D22.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D23);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D25 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D12, 2.2250738585072014E-308d, vector1D16, 1.0000000000000002d, vector1D23);
        java.lang.String str26 = vector1D23.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location27 = intervalsSet10.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D23);
        boolean boolean28 = intervalsSet7.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet10);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet31 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean35 = vector1D33.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D37 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D39 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean41 = vector1D39.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = vector1D39.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D44 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double45 = vector1D43.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D44);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D46 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D33, 2.2250738585072014E-308d, vector1D37, 1.0000000000000002d, vector1D44);
        java.lang.String str47 = vector1D44.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location48 = intervalsSet31.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D44);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D50 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space51 = vector1D50.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D53 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space54 = vector1D53.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D55 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D50, (double) 100L, vector1D53);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D57 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space58 = vector1D57.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D60 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space61 = vector1D60.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D62 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D57, (double) 100L, vector1D60);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D63 = vector1D55.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D57);
        org.apache.commons.math3.geometry.partitioning.Region.Location location64 = intervalsSet31.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D57);
        org.apache.commons.math3.geometry.euclidean.threed.Line line65 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet68 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D70 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean72 = vector1D70.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D74 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D76 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean78 = vector1D76.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = vector1D76.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D81 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double82 = vector1D80.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D81);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D83 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D70, 2.2250738585072014E-308d, vector1D74, 1.0000000000000002d, vector1D81);
        java.lang.String str84 = vector1D81.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location85 = intervalsSet68.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D81);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector86 = intervalsSet68.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine87 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line65, intervalsSet68);
        boolean boolean88 = intervalsSet31.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet68);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree90 = intervalsSet68.getTree(false);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion91 = intervalsSet7.buildNew(euclidean1DBSPTree90);
        boolean boolean92 = intervalsSet2.isEmpty(euclidean1DBSPTree90);
        boolean boolean93 = intervalsSet0.isEmpty(euclidean1DBSPTree90);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(euclidean1DVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertNotNull(vector1D23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{(NaN)}" + "'", str26, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location27 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location27.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(vector1D33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(vector1D37);
        org.junit.Assert.assertNotNull(vector1D39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(vector1D43);
        org.junit.Assert.assertNotNull(vector1D44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{(NaN)}" + "'", str47, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location48 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location48.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D50);
        org.junit.Assert.assertNotNull(space51);
        org.junit.Assert.assertNotNull(vector1D53);
        org.junit.Assert.assertNotNull(space54);
        org.junit.Assert.assertNotNull(vector1D57);
        org.junit.Assert.assertNotNull(space58);
        org.junit.Assert.assertNotNull(vector1D60);
        org.junit.Assert.assertNotNull(space61);
        org.junit.Assert.assertNotNull(vector1D63);
        org.junit.Assert.assertTrue("'" + location64 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location64.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(vector1D74);
        org.junit.Assert.assertNotNull(vector1D76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertNotNull(vector1D81);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "{(NaN)}" + "'", str84, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location85 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location85.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree90);
        org.junit.Assert.assertNotNull(euclidean1DRegion91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double1 = vector3D0.getNorm();
        double double2 = vector3D0.getNorm();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D0.negate();
        boolean boolean4 = vector3D0.isNaN();
        double[] doubleArray5 = vector3D0.toArray();
        double double6 = vector3D0.getNorm();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D7, vector3D8);
        double double10 = vector3D7.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D11, vector3D12);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D12.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D15);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D17, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = vector3D18.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector23 = vector3D15.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine24 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D7, vector3D15);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D0, vector3D15);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D15, vector3D26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean3DVector3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-Infinity, -Infinity, -Infinity]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(euclidean3DVector23);
        org.junit.Assert.assertNotNull(vector3D25);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D4 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean6 = vector1D4.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D8 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean12 = vector1D10.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = vector1D10.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double16 = vector1D14.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D4, 2.2250738585072014E-308d, vector1D8, 1.0000000000000002d, vector1D15);
        java.lang.String str18 = vector1D15.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location19 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space22 = vector1D21.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space25 = vector1D24.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D21, (double) 100L, vector1D24);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space29 = vector1D28.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D31 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space32 = vector1D31.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D28, (double) 100L, vector1D31);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = vector1D26.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.partitioning.Region.Location location35 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.euclidean.threed.Line line36 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet39 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean43 = vector1D41.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean49 = vector1D47.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = vector1D47.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double53 = vector1D51.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D41, 2.2250738585072014E-308d, vector1D45, 1.0000000000000002d, vector1D52);
        java.lang.String str55 = vector1D52.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location56 = intervalsSet39.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector57 = intervalsSet39.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine58 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line36, intervalsSet39);
        boolean boolean59 = intervalsSet2.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet39);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D63 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D65 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean67 = vector1D65.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = vector1D65.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D70 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double71 = vector1D69.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D70);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D73 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean75 = vector1D73.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D77 = vector1D73.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D78 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D61, (double) 100, vector1D63, (double) (short) 0, vector1D70, (double) 'a', vector1D73);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = vector1D73.scalarMultiply(4.605170185988092d);
        double double81 = vector1D80.getNorm1();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint83 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint(vector1D80, false);
        org.apache.commons.math3.geometry.partitioning.Side side84 = intervalsSet39.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint83);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree86 = intervalsSet39.getTree(false);
        java.util.List<org.apache.commons.math3.geometry.euclidean.oned.Interval> intervalList87 = intervalsSet39.asList();
        org.junit.Assert.assertNotNull(vector1D4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(vector1D8);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{(NaN)}" + "'", str18, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location19 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location19.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(space22);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(space25);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertNotNull(space29);
        org.junit.Assert.assertNotNull(vector1D31);
        org.junit.Assert.assertNotNull(space32);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertTrue("'" + location35 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location35.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{(NaN)}" + "'", str55, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location56 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location56.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(vector1D61);
        org.junit.Assert.assertNotNull(vector1D63);
        org.junit.Assert.assertNotNull(vector1D65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertNotNull(vector1D70);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(vector1D73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(vector1D77);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + side84 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.MINUS + "'", side84.equals(org.apache.commons.math3.geometry.partitioning.Side.MINUS));
        org.junit.Assert.assertNotNull(euclidean1DBSPTree86);
        org.junit.Assert.assertNotNull(intervalList87);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet1 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList0);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList0);
        double double3 = intervalsSet2.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet6 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D8 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean10 = vector1D8.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean16 = vector1D14.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = vector1D14.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D19 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double20 = vector1D18.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D19);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D8, 2.2250738585072014E-308d, vector1D12, 1.0000000000000002d, vector1D19);
        java.lang.String str22 = vector1D19.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location23 = intervalsSet6.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D19);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D25 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space26 = vector1D25.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space29 = vector1D28.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D30 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D25, (double) 100L, vector1D28);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space33 = vector1D32.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D35 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space36 = vector1D35.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D37 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D32, (double) 100L, vector1D35);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D38 = vector1D30.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D32);
        org.apache.commons.math3.geometry.partitioning.Region.Location location39 = intervalsSet6.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D32);
        org.apache.commons.math3.geometry.euclidean.threed.Line line40 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet43 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean47 = vector1D45.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D49 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean53 = vector1D51.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D55 = vector1D51.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D56 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double57 = vector1D55.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D58 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D45, 2.2250738585072014E-308d, vector1D49, 1.0000000000000002d, vector1D56);
        java.lang.String str59 = vector1D56.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location60 = intervalsSet43.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector61 = intervalsSet43.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine62 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line40, intervalsSet43);
        boolean boolean63 = intervalsSet6.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D65 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D67 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean71 = vector1D69.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D73 = vector1D69.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D74 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double75 = vector1D73.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D74);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D77 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean79 = vector1D77.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D81 = vector1D77.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D82 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D65, (double) 100, vector1D67, (double) (short) 0, vector1D74, (double) 'a', vector1D77);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D84 = vector1D77.scalarMultiply(4.605170185988092d);
        double double85 = vector1D84.getNorm1();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint87 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint(vector1D84, false);
        org.apache.commons.math3.geometry.partitioning.Side side88 = intervalsSet43.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint87);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree90 = intervalsSet43.getTree(false);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet91 = intervalsSet2.buildNew(euclidean1DBSPTree90);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet92 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(euclidean1DBSPTree90);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet93 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(euclidean1DBSPTree90);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(vector1D8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{(NaN)}" + "'", str22, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location23 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location23.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D25);
        org.junit.Assert.assertNotNull(space26);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertNotNull(space29);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertNotNull(space33);
        org.junit.Assert.assertNotNull(vector1D35);
        org.junit.Assert.assertNotNull(space36);
        org.junit.Assert.assertNotNull(vector1D38);
        org.junit.Assert.assertTrue("'" + location39 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location39.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(vector1D49);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(vector1D55);
        org.junit.Assert.assertNotNull(vector1D56);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{(NaN)}" + "'", str59, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location60 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location60.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(vector1D65);
        org.junit.Assert.assertNotNull(vector1D67);
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(vector1D73);
        org.junit.Assert.assertNotNull(vector1D74);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(vector1D77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(vector1D81);
        org.junit.Assert.assertNotNull(vector1D84);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + side88 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.MINUS + "'", side88.equals(org.apache.commons.math3.geometry.partitioning.Side.MINUS));
        org.junit.Assert.assertNotNull(euclidean1DBSPTree90);
        org.junit.Assert.assertNotNull(intervalsSet91);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion3 = intervalsSet2.copySelf();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet6 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet9 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean13 = vector1D11.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean19 = vector1D17.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = vector1D17.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double23 = vector1D21.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D22);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D11, 2.2250738585072014E-308d, vector1D15, 1.0000000000000002d, vector1D22);
        java.lang.String str25 = vector1D22.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location26 = intervalsSet9.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D22);
        boolean boolean27 = intervalsSet6.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet9);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet30 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean34 = vector1D32.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D36 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D38 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean40 = vector1D38.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D42 = vector1D38.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double44 = vector1D42.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D32, 2.2250738585072014E-308d, vector1D36, 1.0000000000000002d, vector1D43);
        java.lang.String str46 = vector1D43.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location47 = intervalsSet30.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D49 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space50 = vector1D49.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space53 = vector1D52.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D49, (double) 100L, vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D56 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space57 = vector1D56.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D59 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space60 = vector1D59.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D56, (double) 100L, vector1D59);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D62 = vector1D54.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.partitioning.Region.Location location63 = intervalsSet30.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.euclidean.threed.Line line64 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet67 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean71 = vector1D69.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D73 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D75 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean77 = vector1D75.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D79 = vector1D75.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double81 = vector1D79.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D82 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D69, 2.2250738585072014E-308d, vector1D73, 1.0000000000000002d, vector1D80);
        java.lang.String str83 = vector1D80.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location84 = intervalsSet67.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector85 = intervalsSet67.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine86 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line64, intervalsSet67);
        boolean boolean87 = intervalsSet30.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet67);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree89 = intervalsSet67.getTree(false);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion90 = intervalsSet6.buildNew(euclidean1DBSPTree89);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion91 = intervalsSet2.buildNew(euclidean1DBSPTree89);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet92 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(euclidean1DBSPTree89);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet93 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(euclidean1DBSPTree89);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet94 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(euclidean1DBSPTree89);
        double double95 = intervalsSet94.getSup();
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DTransform96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion97 = intervalsSet94.applyTransform(euclidean1DTransform96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion3);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertNotNull(vector1D17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{(NaN)}" + "'", str25, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location26 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location26.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector1D36);
        org.junit.Assert.assertNotNull(vector1D38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(vector1D42);
        org.junit.Assert.assertNotNull(vector1D43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{(NaN)}" + "'", str46, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location47 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location47.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D49);
        org.junit.Assert.assertNotNull(space50);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertNotNull(space53);
        org.junit.Assert.assertNotNull(vector1D56);
        org.junit.Assert.assertNotNull(space57);
        org.junit.Assert.assertNotNull(vector1D59);
        org.junit.Assert.assertNotNull(space60);
        org.junit.Assert.assertNotNull(vector1D62);
        org.junit.Assert.assertTrue("'" + location63 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location63.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(vector1D73);
        org.junit.Assert.assertNotNull(vector1D75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(vector1D79);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{(NaN)}" + "'", str83, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location84 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location84.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree89);
        org.junit.Assert.assertNotNull(euclidean1DRegion90);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion91);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + (-0.8390715290764524d) + "'", double95 == (-0.8390715290764524d));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D4 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean6 = vector1D4.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D8 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean12 = vector1D10.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = vector1D10.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double16 = vector1D14.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D4, 2.2250738585072014E-308d, vector1D8, 1.0000000000000002d, vector1D15);
        java.lang.String str18 = vector1D15.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location19 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space22 = vector1D21.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space25 = vector1D24.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D21, (double) 100L, vector1D24);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space29 = vector1D28.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D31 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space32 = vector1D31.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D28, (double) 100L, vector1D31);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = vector1D26.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.partitioning.Region.Location location35 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.euclidean.threed.Line line36 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet39 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean43 = vector1D41.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean49 = vector1D47.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = vector1D47.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double53 = vector1D51.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D41, 2.2250738585072014E-308d, vector1D45, 1.0000000000000002d, vector1D52);
        java.lang.String str55 = vector1D52.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location56 = intervalsSet39.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector57 = intervalsSet39.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine58 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line36, intervalsSet39);
        boolean boolean59 = intervalsSet2.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet39);
        java.util.List<org.apache.commons.math3.geometry.euclidean.oned.Interval> intervalList60 = intervalsSet39.asList();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane61 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane62 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList63 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet64 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList63);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet65 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList63);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint66 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane62, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet65);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint67 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane61, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet65);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane68 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList69 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet70 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList69);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint71 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane68, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet70);
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractSubHyperplane72 = subOrientedPoint67.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) subOrientedPoint71);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DSubHyperplane73 = intervalsSet39.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) subOrientedPoint67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(vector1D8);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{(NaN)}" + "'", str18, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location19 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location19.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(space22);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(space25);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertNotNull(space29);
        org.junit.Assert.assertNotNull(vector1D31);
        org.junit.Assert.assertNotNull(space32);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertTrue("'" + location35 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location35.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{(NaN)}" + "'", str55, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location56 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location56.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(intervalList60);
        org.junit.Assert.assertNotNull(euclidean1DAbstractSubHyperplane72);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine67 = line66.wholeHyperplane();
        line66.revertSelf();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet69 = line66.wholeSpace();
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(subLine67);
        org.junit.Assert.assertNotNull(polygonsSet69);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = vector2D2.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = vector2D5.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D6);
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D4, vector2D5);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = vector2D5.scalarMultiply((double) (-1.0f));
        double double11 = vector2D5.getNormInf();
        double double12 = vector2D5.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = vector2D0.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D5);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D17 = vector2D15.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D16);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D19 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = vector2D18.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D19);
        double double21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D17, vector2D18);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D18.scalarMultiply((double) (-1.0f));
        double double24 = vector2D18.getNormInf();
        double double25 = vector2D18.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D18.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D28 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D30 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D31 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D32 = vector2D30.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D31);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D34 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = vector2D33.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D34);
        double double36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D32, vector2D33);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = vector2D33.scalarMultiply((double) (-1.0f));
        double double39 = vector2D33.getNormInf();
        double double40 = vector2D33.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D41 = vector2D28.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D33);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D42 = vector2D26.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D41);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D44 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D45 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D47 = vector2D45.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D49 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = vector2D48.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D49);
        double double51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D47, vector2D48);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = vector2D48.scalarMultiply((double) (-1.0f));
        double double54 = vector2D48.getNormInf();
        double double55 = vector2D44.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D48);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D56 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) '4', vector2D26, 5.65685424949238d, vector2D44);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine57 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(vector2D5, vector2D44);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine59 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(vector2D44, vector2D58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertNotNull(vector2D6);
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + Double.POSITIVE_INFINITY + "'", double11 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertNotNull(vector2D16);
        org.junit.Assert.assertNotNull(vector2D17);
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D19);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + Double.POSITIVE_INFINITY + "'", double25 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertNotNull(vector2D28);
        org.junit.Assert.assertNotNull(vector2D30);
        org.junit.Assert.assertNotNull(vector2D31);
        org.junit.Assert.assertNotNull(vector2D32);
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D34);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + Double.POSITIVE_INFINITY + "'", double39 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + Double.POSITIVE_INFINITY + "'", double40 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D41);
        org.junit.Assert.assertNotNull(vector2D42);
        org.junit.Assert.assertNotNull(vector2D44);
        org.junit.Assert.assertNotNull(vector2D45);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D47);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D49);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + Double.POSITIVE_INFINITY + "'", double54 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.apache.commons.math3.geometry.euclidean.threed.Line line0 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D5 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean7 = vector1D5.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D9 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean13 = vector1D11.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = vector1D11.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double17 = vector1D15.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D16);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D5, 2.2250738585072014E-308d, vector1D9, 1.0000000000000002d, vector1D16);
        java.lang.String str19 = vector1D16.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location20 = intervalsSet3.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D16);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector21 = intervalsSet3.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine22 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line0, intervalsSet3);
        double double23 = intervalsSet3.getSize();
        double double24 = intervalsSet3.getSup();
        org.junit.Assert.assertNotNull(vector1D5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(vector1D9);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{(NaN)}" + "'", str19, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location20 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location20.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.16092847092354756d + "'", double23 == 0.16092847092354756d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.8390715290764524d) + "'", double24 == (-0.8390715290764524d));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D1);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D5, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double9 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D10, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double14 = vector3D10.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double16 = vector3D15.getNorm();
        double double17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D10, vector3D15);
        double double18 = vector3D8.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D15);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D19, vector3D20);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D20.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D26, vector3D27);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D29, vector3D30);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D30.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        double double35 = vector3D27.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D30);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector36 = vector3D20.add((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D15.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27);
        java.text.NumberFormat numberFormat38 = null;
        java.lang.String str39 = vector3D37.toString(numberFormat38);
        org.apache.commons.math3.geometry.euclidean.threed.Line line40 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D0, vector3D37);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D41, vector3D42);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D41, vector3D44);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D46, vector3D47);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double50 = vector3D46.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D49);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D51, vector3D52);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double55 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double57 = vector3D56.getNorm();
        double double58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D51, vector3D56);
        double double59 = vector3D49.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D60, vector3D61);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = vector3D61.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D64);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        double double69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D67, vector3D68);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D70, vector3D71);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = vector3D71.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D74);
        double double76 = vector3D68.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector77 = vector3D61.add((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = vector3D56.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68);
        java.text.NumberFormat numberFormat79 = null;
        java.lang.String str80 = vector3D78.toString(numberFormat79);
        org.apache.commons.math3.geometry.euclidean.threed.Line line81 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D41, vector3D78);
        double double82 = line40.distance(line81);
        org.apache.commons.math3.geometry.euclidean.threed.Line line83 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line81);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = line83.getDirection();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine85 = line83.wholeLine();
        org.apache.commons.math3.geometry.euclidean.threed.Line line86 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double87 = line83.distance(line86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean3DVector36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{(-Infinity); (-Infinity); (-Infinity)}" + "'", str39, "{(-Infinity); (-Infinity); (-Infinity)}");
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + Double.POSITIVE_INFINITY + "'", double57 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean3DVector77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "{(-Infinity); (-Infinity); (-Infinity)}" + "'", str80, "{(-Infinity); (-Infinity); (-Infinity)}");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(subLine85);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet0 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        double double1 = intervalsSet0.getSize();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet4 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D6 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean8 = vector1D6.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean14 = vector1D12.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = vector1D12.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double18 = vector1D16.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D17);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D19 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D6, 2.2250738585072014E-308d, vector1D10, 1.0000000000000002d, vector1D17);
        java.lang.String str20 = vector1D17.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location21 = intervalsSet4.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D17);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D23 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space24 = vector1D23.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space27 = vector1D26.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D23, (double) 100L, vector1D26);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D30 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space31 = vector1D30.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space34 = vector1D33.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D35 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D30, (double) 100L, vector1D33);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D36 = vector1D28.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D30);
        org.apache.commons.math3.geometry.partitioning.Region.Location location37 = intervalsSet4.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D30);
        org.apache.commons.math3.geometry.euclidean.threed.Line line38 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet41 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean45 = vector1D43.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D49 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean51 = vector1D49.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D53 = vector1D49.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double55 = vector1D53.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D54);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D56 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D43, 2.2250738585072014E-308d, vector1D47, 1.0000000000000002d, vector1D54);
        java.lang.String str57 = vector1D54.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location58 = intervalsSet41.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D54);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector59 = intervalsSet41.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine60 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line38, intervalsSet41);
        boolean boolean61 = intervalsSet4.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet41);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree63 = intervalsSet41.getTree(false);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion64 = intervalsSet0.buildNew(euclidean1DBSPTree63);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DTransform65 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion66 = intervalsSet0.applyTransform(euclidean1DTransform65);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector1D6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertNotNull(vector1D17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{(NaN)}" + "'", str20, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location21 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location21.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D23);
        org.junit.Assert.assertNotNull(space24);
        org.junit.Assert.assertNotNull(vector1D26);
        org.junit.Assert.assertNotNull(space27);
        org.junit.Assert.assertNotNull(vector1D30);
        org.junit.Assert.assertNotNull(space31);
        org.junit.Assert.assertNotNull(vector1D33);
        org.junit.Assert.assertNotNull(space34);
        org.junit.Assert.assertNotNull(vector1D36);
        org.junit.Assert.assertTrue("'" + location37 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location37.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertNotNull(vector1D49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(vector1D53);
        org.junit.Assert.assertNotNull(vector1D54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{(NaN)}" + "'", str57, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location58 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location58.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree63);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion64);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion66);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.euclidean.threed.Line line1 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane2 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList3 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet4 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList3);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint5 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane2, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet4);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D6 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean8 = vector1D6.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean16 = vector1D14.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = vector1D14.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D19 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double20 = vector1D18.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D19);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean24 = vector1D22.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = vector1D22.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D27 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D10, (double) 100, vector1D12, (double) (short) 0, vector1D19, (double) 'a', vector1D22);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D29 = vector1D22.scalarMultiply(4.605170185988092d);
        java.lang.String str30 = vector1D29.toString();
        double double31 = vector1D6.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D29);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = vector1D6.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location34 = intervalsSet4.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D6);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector35 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location36 = intervalsSet4.checkPoint(euclidean1DVector35);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine37 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line1, intervalsSet4);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine38 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet4);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane39 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList40 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet41 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList40);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint42 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane39, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet41);
        boolean boolean43 = subOrientedPoint42.isEmpty();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractSubHyperplane44 = subOrientedPoint42.copySelf();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DSubHyperplane45 = intervalsSet4.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) euclidean1DAbstractSubHyperplane44);
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractSubHyperplane46 = euclidean1DAbstractSubHyperplane44.copySelf();
        java.lang.Class<?> wildcardClass47 = euclidean1DAbstractSubHyperplane44.getClass();
        org.junit.Assert.assertNotNull(vector1D6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(vector1D26);
        org.junit.Assert.assertNotNull(vector1D29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{(NaN)}" + "'", str30, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector1D33);
        org.junit.Assert.assertTrue("'" + location34 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location34.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location36 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location36.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(euclidean1DAbstractSubHyperplane44);
        org.junit.Assert.assertNotNull(euclidean1DSubHyperplane45);
        org.junit.Assert.assertNotNull(euclidean1DAbstractSubHyperplane46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D4 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean6 = vector1D4.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D8 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean12 = vector1D10.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = vector1D10.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double16 = vector1D14.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D4, 2.2250738585072014E-308d, vector1D8, 1.0000000000000002d, vector1D15);
        java.lang.String str18 = vector1D15.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location19 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space22 = vector1D21.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space25 = vector1D24.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D21, (double) 100L, vector1D24);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space29 = vector1D28.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D31 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space32 = vector1D31.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D28, (double) 100L, vector1D31);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = vector1D26.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.partitioning.Region.Location location35 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.euclidean.threed.Line line36 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet39 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean43 = vector1D41.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean49 = vector1D47.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = vector1D47.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double53 = vector1D51.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D41, 2.2250738585072014E-308d, vector1D45, 1.0000000000000002d, vector1D52);
        java.lang.String str55 = vector1D52.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location56 = intervalsSet39.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector57 = intervalsSet39.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine58 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line36, intervalsSet39);
        boolean boolean59 = intervalsSet2.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet39);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D63 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D65 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean67 = vector1D65.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = vector1D65.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D70 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double71 = vector1D69.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D70);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D73 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean75 = vector1D73.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D77 = vector1D73.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D78 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D61, (double) 100, vector1D63, (double) (short) 0, vector1D70, (double) 'a', vector1D73);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = vector1D73.scalarMultiply(4.605170185988092d);
        double double81 = vector1D80.getNorm1();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint83 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint(vector1D80, false);
        org.apache.commons.math3.geometry.partitioning.Side side84 = intervalsSet39.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint83);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D85 = orientedPoint83.getLocation();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion86 = orientedPoint83.wholeSpace();
        orientedPoint83.revertSelf();
        org.junit.Assert.assertNotNull(vector1D4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(vector1D8);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{(NaN)}" + "'", str18, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location19 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location19.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(space22);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(space25);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertNotNull(space29);
        org.junit.Assert.assertNotNull(vector1D31);
        org.junit.Assert.assertNotNull(space32);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertTrue("'" + location35 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location35.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{(NaN)}" + "'", str55, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location56 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location56.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(vector1D61);
        org.junit.Assert.assertNotNull(vector1D63);
        org.junit.Assert.assertNotNull(vector1D65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertNotNull(vector1D70);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(vector1D73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(vector1D77);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + side84 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.MINUS + "'", side84.equals(org.apache.commons.math3.geometry.partitioning.Side.MINUS));
        org.junit.Assert.assertNotNull(vector1D85);
        org.junit.Assert.assertNotNull(euclidean1DRegion86);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine5 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane6 = null;
        org.apache.commons.math3.geometry.euclidean.threed.Line line7 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane8 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList9 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet10 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList9);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint11 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane8, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet10);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean14 = vector1D12.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D20 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean22 = vector1D20.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = vector1D20.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D25 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double26 = vector1D24.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D25);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean30 = vector1D28.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = vector1D28.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D16, (double) 100, vector1D18, (double) (short) 0, vector1D25, (double) 'a', vector1D28);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D35 = vector1D28.scalarMultiply(4.605170185988092d);
        java.lang.String str36 = vector1D35.toString();
        double double37 = vector1D12.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D35);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D39 = vector1D12.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location40 = intervalsSet10.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D12);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector41 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location42 = intervalsSet10.checkPoint(euclidean1DVector41);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine43 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line7, intervalsSet10);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine44 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane6, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet10);
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractSubHyperplane45 = subLine5.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) subLine44);
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractSubHyperplane46 = euclidean2DAbstractSubHyperplane45.copySelf();
        double double47 = euclidean2DAbstractSubHyperplane46.getSize();
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DTransform48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractSubHyperplane49 = euclidean2DAbstractSubHyperplane46.applyTransform(euclidean2DTransform48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(vector1D25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertNotNull(vector1D35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{(NaN)}" + "'", str36, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(vector1D39);
        org.junit.Assert.assertTrue("'" + location40 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location40.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location42 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location42.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertNotNull(euclidean2DAbstractSubHyperplane45);
        org.junit.Assert.assertNotNull(euclidean2DAbstractSubHyperplane46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + Double.POSITIVE_INFINITY + "'", double47 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet0 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        double double1 = intervalsSet0.getSize();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet4 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D6 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean8 = vector1D6.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean14 = vector1D12.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = vector1D12.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double18 = vector1D16.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D17);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D19 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D6, 2.2250738585072014E-308d, vector1D10, 1.0000000000000002d, vector1D17);
        java.lang.String str20 = vector1D17.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location21 = intervalsSet4.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D17);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D23 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space24 = vector1D23.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space27 = vector1D26.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D23, (double) 100L, vector1D26);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D30 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space31 = vector1D30.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space34 = vector1D33.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D35 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D30, (double) 100L, vector1D33);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D36 = vector1D28.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D30);
        org.apache.commons.math3.geometry.partitioning.Region.Location location37 = intervalsSet4.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D30);
        org.apache.commons.math3.geometry.euclidean.threed.Line line38 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet41 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean45 = vector1D43.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D49 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean51 = vector1D49.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D53 = vector1D49.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double55 = vector1D53.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D54);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D56 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D43, 2.2250738585072014E-308d, vector1D47, 1.0000000000000002d, vector1D54);
        java.lang.String str57 = vector1D54.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location58 = intervalsSet41.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D54);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector59 = intervalsSet41.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine60 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line38, intervalsSet41);
        boolean boolean61 = intervalsSet4.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet41);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree63 = intervalsSet41.getTree(false);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion64 = intervalsSet0.buildNew(euclidean1DBSPTree63);
        // The following exception was thrown during execution in test generation
        try {
            double double65 = euclidean1DAbstractRegion64.getBoundarySize();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector1D6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertNotNull(vector1D17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{(NaN)}" + "'", str20, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location21 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location21.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D23);
        org.junit.Assert.assertNotNull(space24);
        org.junit.Assert.assertNotNull(vector1D26);
        org.junit.Assert.assertNotNull(space27);
        org.junit.Assert.assertNotNull(vector1D30);
        org.junit.Assert.assertNotNull(space31);
        org.junit.Assert.assertNotNull(vector1D33);
        org.junit.Assert.assertNotNull(space34);
        org.junit.Assert.assertNotNull(vector1D36);
        org.junit.Assert.assertTrue("'" + location37 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location37.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertNotNull(vector1D49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(vector1D53);
        org.junit.Assert.assertNotNull(vector1D54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{(NaN)}" + "'", str57, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location58 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location58.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree63);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion64);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D1);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D5, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double9 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D10, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double14 = vector3D10.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double16 = vector3D15.getNorm();
        double double17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D10, vector3D15);
        double double18 = vector3D8.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D15);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D19, vector3D20);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D20.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D26, vector3D27);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D29, vector3D30);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D30.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        double double35 = vector3D27.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D30);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector36 = vector3D20.add((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D15.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27);
        java.text.NumberFormat numberFormat38 = null;
        java.lang.String str39 = vector3D37.toString(numberFormat38);
        org.apache.commons.math3.geometry.euclidean.threed.Line line40 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D0, vector3D37);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D41, vector3D42);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D41, vector3D44);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D46, vector3D47);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double50 = vector3D46.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D49);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D51, vector3D52);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double55 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double57 = vector3D56.getNorm();
        double double58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D51, vector3D56);
        double double59 = vector3D49.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D60, vector3D61);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = vector3D61.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D64);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        double double69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D67, vector3D68);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D70, vector3D71);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = vector3D71.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D74);
        double double76 = vector3D68.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector77 = vector3D61.add((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = vector3D56.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68);
        java.text.NumberFormat numberFormat79 = null;
        java.lang.String str80 = vector3D78.toString(numberFormat79);
        org.apache.commons.math3.geometry.euclidean.threed.Line line81 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D41, vector3D78);
        double double82 = line40.distance(line81);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double84 = vector3D83.getNorm();
        double double85 = vector3D83.getNorm();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector86 = vector3D83.negate();
        boolean boolean87 = vector3D83.isNaN();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D88 = line40.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D83);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D89 = line40.getDirection();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet90 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet();
        boolean boolean91 = intervalsSet90.isEmpty();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector92 = intervalsSet90.getBarycenter();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree93 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet94 = intervalsSet90.buildNew(euclidean1DBSPTree93);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine95 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line40, intervalsSet90);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean3DVector36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{(-Infinity); (-Infinity); (-Infinity)}" + "'", str39, "{(-Infinity); (-Infinity); (-Infinity)}");
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + Double.POSITIVE_INFINITY + "'", double57 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean3DVector77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "{(-Infinity); (-Infinity); (-Infinity)}" + "'", str80, "{(-Infinity); (-Infinity); (-Infinity)}");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + Double.POSITIVE_INFINITY + "'", double84 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + Double.POSITIVE_INFINITY + "'", double85 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean3DVector86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(vector1D88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(euclidean1DVector92);
        org.junit.Assert.assertNotNull(intervalsSet94);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D67 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = vector2D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D68);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = vector2D70.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D71);
        double double73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D69, vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D75 = vector2D70.scalarMultiply((double) (-1.0f));
        double double76 = vector2D70.getNormInf();
        double double77 = line66.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine78 = line66.wholeHyperplane();
        line66.setOriginOffset((double) (-1L));
        line66.setOriginOffset(Double.NEGATIVE_INFINITY);
        line66.setAngle((double) (byte) 1);
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector2D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(subLine78);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine67 = line66.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = vector2D68.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D69);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D73 = vector2D71.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D72);
        double double74 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D70, vector2D71);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D76 = vector2D71.scalarMultiply((double) (-1.0f));
        double double77 = vector2D71.getNormInf();
        double double78 = vector2D71.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D79 = vector2D71.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D81 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D83 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D84 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D85 = vector2D83.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D84);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D86 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D87 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D88 = vector2D86.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D87);
        double double89 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D85, vector2D86);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D91 = vector2D86.scalarMultiply((double) (-1.0f));
        double double92 = vector2D86.getNormInf();
        double double93 = vector2D86.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D94 = vector2D81.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D86);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D95 = vector2D79.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D94);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D96 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO;
        org.apache.commons.math3.geometry.Space space97 = vector2D96.getSpace();
        double double98 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceInf(vector2D95, vector2D96);
        double double99 = line66.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D95);
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(subLine67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
        org.junit.Assert.assertNotNull(vector2D73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(vector2D76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + Double.POSITIVE_INFINITY + "'", double77 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + Double.POSITIVE_INFINITY + "'", double78 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D79);
        org.junit.Assert.assertNotNull(vector2D81);
        org.junit.Assert.assertNotNull(vector2D83);
        org.junit.Assert.assertNotNull(vector2D84);
        org.junit.Assert.assertNotNull(vector2D85);
        org.junit.Assert.assertNotNull(vector2D86);
        org.junit.Assert.assertNotNull(vector2D87);
        org.junit.Assert.assertNotNull(vector2D88);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(vector2D91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + Double.POSITIVE_INFINITY + "'", double92 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + Double.POSITIVE_INFINITY + "'", double93 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D94);
        org.junit.Assert.assertNotNull(vector2D95);
        org.junit.Assert.assertNotNull(vector2D96);
        org.junit.Assert.assertNotNull(space97);
        org.junit.Assert.assertTrue(Double.isNaN(double98));
        org.junit.Assert.assertTrue(Double.isNaN(double99));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D4 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean6 = vector1D4.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D8 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean12 = vector1D10.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = vector1D10.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double16 = vector1D14.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D4, 2.2250738585072014E-308d, vector1D8, 1.0000000000000002d, vector1D15);
        java.lang.String str18 = vector1D15.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location19 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D15);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space22 = vector1D21.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space25 = vector1D24.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D21, (double) 100L, vector1D24);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space29 = vector1D28.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D31 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space32 = vector1D31.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D28, (double) 100L, vector1D31);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = vector1D26.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.partitioning.Region.Location location35 = intervalsSet2.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.euclidean.threed.Line line36 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet39 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D41 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean43 = vector1D41.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D47 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean49 = vector1D47.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D51 = vector1D47.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double53 = vector1D51.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D41, 2.2250738585072014E-308d, vector1D45, 1.0000000000000002d, vector1D52);
        java.lang.String str55 = vector1D52.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location56 = intervalsSet39.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D52);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector57 = intervalsSet39.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine58 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line36, intervalsSet39);
        boolean boolean59 = intervalsSet2.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet39);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D63 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D65 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean67 = vector1D65.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = vector1D65.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D70 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double71 = vector1D69.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D70);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D73 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean75 = vector1D73.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D77 = vector1D73.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D78 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D61, (double) 100, vector1D63, (double) (short) 0, vector1D70, (double) 'a', vector1D73);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = vector1D73.scalarMultiply(4.605170185988092d);
        double double81 = vector1D80.getNorm1();
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint orientedPoint83 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint(vector1D80, false);
        org.apache.commons.math3.geometry.partitioning.Side side84 = intervalsSet39.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) orientedPoint83);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D85 = orientedPoint83.getLocation();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DSubHyperplane86 = orientedPoint83.wholeHyperplane();
        org.junit.Assert.assertNotNull(vector1D4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(vector1D8);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{(NaN)}" + "'", str18, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location19 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location19.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(space22);
        org.junit.Assert.assertNotNull(vector1D24);
        org.junit.Assert.assertNotNull(space25);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertNotNull(space29);
        org.junit.Assert.assertNotNull(vector1D31);
        org.junit.Assert.assertNotNull(space32);
        org.junit.Assert.assertNotNull(vector1D34);
        org.junit.Assert.assertTrue("'" + location35 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location35.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vector1D45);
        org.junit.Assert.assertNotNull(vector1D47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(vector1D51);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{(NaN)}" + "'", str55, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location56 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location56.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(vector1D61);
        org.junit.Assert.assertNotNull(vector1D63);
        org.junit.Assert.assertNotNull(vector1D65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertNotNull(vector1D70);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(vector1D73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(vector1D77);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + side84 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.MINUS + "'", side84.equals(org.apache.commons.math3.geometry.partitioning.Side.MINUS));
        org.junit.Assert.assertNotNull(vector1D85);
        org.junit.Assert.assertNotNull(euclidean1DSubHyperplane86);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine5 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        double double6 = subLine5.getSize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D9 = vector2D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D8);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        double double13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D9, vector2D10);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double15 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D9, vector2D14);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D17 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D19 = vector2D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D18);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = vector2D20.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D21);
        double double23 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D19, vector2D20);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = vector2D20.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D28 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D30 = vector2D28.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D29);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D31 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D32 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = vector2D31.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D32);
        double double34 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D30, vector2D31);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = vector2D31.scalarMultiply((double) (-1.0f));
        double double37 = vector2D31.getNormInf();
        double double38 = vector2D27.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D31);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D42 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D44 = vector2D42.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D43);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D45 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D47 = vector2D45.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        double double48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D44, vector2D45);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = vector2D45.scalarMultiply((double) (-1.0f));
        double double51 = vector2D45.getNormInf();
        double double52 = vector2D45.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = vector2D45.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D57 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D59 = vector2D57.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D58);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D60 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D60.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        double double63 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D59, vector2D60);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D65 = vector2D60.scalarMultiply((double) (-1.0f));
        double double66 = vector2D60.getNormInf();
        double double67 = vector2D60.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = vector2D55.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D60);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = vector2D53.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D68);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D25, (double) '#', vector2D31, (double) (-1023), vector2D40, 0.0d, vector2D53);
        double double71 = vector2D14.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Line line73 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D53, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D74 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D75 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D76 = vector2D74.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D75);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D77 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D78 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D79 = vector2D77.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D78);
        double double80 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D76, vector2D77);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D82 = vector2D77.scalarMultiply((double) (-1.0f));
        double double83 = vector2D77.getNormInf();
        double double84 = line73.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D77);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.Side side85 = subLine5.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertNotNull(vector2D8);
        org.junit.Assert.assertNotNull(vector2D9);
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(vector2D17);
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D19);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D27);
        org.junit.Assert.assertNotNull(vector2D28);
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertNotNull(vector2D30);
        org.junit.Assert.assertNotNull(vector2D31);
        org.junit.Assert.assertNotNull(vector2D32);
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + Double.POSITIVE_INFINITY + "'", double37 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertNotNull(vector2D42);
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertNotNull(vector2D44);
        org.junit.Assert.assertNotNull(vector2D45);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + Double.POSITIVE_INFINITY + "'", double51 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + Double.POSITIVE_INFINITY + "'", double52 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertNotNull(vector2D57);
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertNotNull(vector2D59);
        org.junit.Assert.assertNotNull(vector2D60);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(vector2D65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + Double.POSITIVE_INFINITY + "'", double66 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + Double.POSITIVE_INFINITY + "'", double67 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(vector2D74);
        org.junit.Assert.assertNotNull(vector2D75);
        org.junit.Assert.assertNotNull(vector2D76);
        org.junit.Assert.assertNotNull(vector2D77);
        org.junit.Assert.assertNotNull(vector2D78);
        org.junit.Assert.assertNotNull(vector2D79);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(vector2D82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + Double.POSITIVE_INFINITY + "'", double83 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = vector2D2.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = vector2D5.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D6);
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D4, vector2D5);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = vector2D5.scalarMultiply((double) (-1.0f));
        double double11 = vector2D5.getNormInf();
        double double12 = vector2D5.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = vector2D0.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D5);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D17 = vector2D15.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D16);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D19 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = vector2D18.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D19);
        double double21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D17, vector2D18);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D18.scalarMultiply((double) (-1.0f));
        double double24 = vector2D18.getNormInf();
        double double25 = vector2D18.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D18.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D28 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D30 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D31 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D32 = vector2D30.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D31);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D34 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = vector2D33.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D34);
        double double36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D32, vector2D33);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = vector2D33.scalarMultiply((double) (-1.0f));
        double double39 = vector2D33.getNormInf();
        double double40 = vector2D33.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D41 = vector2D28.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D33);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D42 = vector2D26.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D41);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D44 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D45 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D47 = vector2D45.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D49 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = vector2D48.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D49);
        double double51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D47, vector2D48);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = vector2D48.scalarMultiply((double) (-1.0f));
        double double54 = vector2D48.getNormInf();
        double double55 = vector2D44.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D48);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D56 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) '4', vector2D26, 5.65685424949238d, vector2D44);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine57 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(vector2D5, vector2D44);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D59 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D60 = vector2D58.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D59);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = vector2D61.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D62);
        double double64 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D60, vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D66 = vector2D61.scalarMultiply((double) (-1.0f));
        double double67 = vector2D61.getNormInf();
        double double68 = vector2D61.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = vector2D61.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D74 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D75 = vector2D73.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D74);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D76 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D77 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D78 = vector2D76.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D77);
        double double79 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D75, vector2D76);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D81 = vector2D76.scalarMultiply((double) (-1.0f));
        double double82 = vector2D76.getNormInf();
        double double83 = vector2D76.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D84 = vector2D71.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D76);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D85 = vector2D69.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D84);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D86 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO;
        org.apache.commons.math3.geometry.Space space87 = vector2D86.getSpace();
        double double88 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceInf(vector2D85, vector2D86);
        double double89 = vector2D5.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D86);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector90 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double91 = vector2D86.dotProduct(euclidean2DVector90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertNotNull(vector2D6);
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + Double.POSITIVE_INFINITY + "'", double11 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertNotNull(vector2D16);
        org.junit.Assert.assertNotNull(vector2D17);
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D19);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + Double.POSITIVE_INFINITY + "'", double25 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertNotNull(vector2D28);
        org.junit.Assert.assertNotNull(vector2D30);
        org.junit.Assert.assertNotNull(vector2D31);
        org.junit.Assert.assertNotNull(vector2D32);
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D34);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + Double.POSITIVE_INFINITY + "'", double39 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + Double.POSITIVE_INFINITY + "'", double40 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D41);
        org.junit.Assert.assertNotNull(vector2D42);
        org.junit.Assert.assertNotNull(vector2D44);
        org.junit.Assert.assertNotNull(vector2D45);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D47);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D49);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + Double.POSITIVE_INFINITY + "'", double54 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertNotNull(vector2D59);
        org.junit.Assert.assertNotNull(vector2D60);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertNotNull(vector2D63);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + Double.POSITIVE_INFINITY + "'", double67 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + Double.POSITIVE_INFINITY + "'", double68 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D73);
        org.junit.Assert.assertNotNull(vector2D74);
        org.junit.Assert.assertNotNull(vector2D75);
        org.junit.Assert.assertNotNull(vector2D76);
        org.junit.Assert.assertNotNull(vector2D77);
        org.junit.Assert.assertNotNull(vector2D78);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(vector2D81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + Double.POSITIVE_INFINITY + "'", double82 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + Double.POSITIVE_INFINITY + "'", double83 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D84);
        org.junit.Assert.assertNotNull(vector2D85);
        org.junit.Assert.assertNotNull(vector2D86);
        org.junit.Assert.assertNotNull(space87);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + Double.POSITIVE_INFINITY + "'", double89 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine67 = line66.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane68 = subLine67.getHyperplane();
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(subLine67);
        org.junit.Assert.assertNotNull(euclidean2DHyperplane68);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.apache.commons.math3.geometry.euclidean.threed.Line line0 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D5 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean7 = vector1D5.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D9 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D13 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean15 = vector1D13.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = vector1D13.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double19 = vector1D17.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D18);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean23 = vector1D21.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D25 = vector1D21.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D9, (double) 100, vector1D11, (double) (short) 0, vector1D18, (double) 'a', vector1D21);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D28 = vector1D21.scalarMultiply(4.605170185988092d);
        java.lang.String str29 = vector1D28.toString();
        double double30 = vector1D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D28);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = vector1D5.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location33 = intervalsSet3.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D5);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector34 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location35 = intervalsSet3.checkPoint(euclidean1DVector34);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine36 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line0, intervalsSet3);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion37 = intervalsSet3.copySelf();
        org.junit.Assert.assertNotNull(vector1D5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(vector1D9);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertNotNull(vector1D13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(vector1D17);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(vector1D25);
        org.junit.Assert.assertNotNull(vector1D28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{(NaN)}" + "'", str29, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertTrue("'" + location33 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location33.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location35 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location35.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertNotNull(euclidean1DRegion37);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D67 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = vector2D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D68);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = vector2D70.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D71);
        double double73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D69, vector2D70);
        line66.translateToPoint(vector2D69);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D76 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean78 = vector1D76.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D82 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean84 = vector1D82.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D86 = vector1D82.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D87 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double88 = vector1D86.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D87);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D89 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D76, 2.2250738585072014E-308d, vector1D80, 1.0000000000000002d, vector1D87);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector90 = line66.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine91 = line66.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DTransform92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractSubHyperplane93 = subLine91.applyTransform(euclidean2DTransform92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector1D76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertNotNull(vector1D82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(vector1D86);
        org.junit.Assert.assertNotNull(vector1D87);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertNotNull(euclidean2DVector90);
        org.junit.Assert.assertNotNull(subLine91);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.apache.commons.math3.geometry.euclidean.threed.Line line0 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D5 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean7 = vector1D5.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D9 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean13 = vector1D11.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = vector1D11.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D16 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double17 = vector1D15.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D16);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D5, 2.2250738585072014E-308d, vector1D9, 1.0000000000000002d, vector1D16);
        java.lang.String str19 = vector1D16.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location20 = intervalsSet3.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D16);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space23 = vector1D22.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D25 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space26 = vector1D25.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D27 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D22, (double) 100L, vector1D25);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D29 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space30 = vector1D29.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space33 = vector1D32.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D34 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D29, (double) 100L, vector1D32);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D35 = vector1D27.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D29);
        org.apache.commons.math3.geometry.partitioning.Region.Location location36 = intervalsSet3.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D29);
        org.apache.commons.math3.geometry.euclidean.threed.Line line37 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet40 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D42 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean44 = vector1D42.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D46 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D48 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean50 = vector1D48.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = vector1D48.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D53 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double54 = vector1D52.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D53);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D55 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D42, 2.2250738585072014E-308d, vector1D46, 1.0000000000000002d, vector1D53);
        java.lang.String str56 = vector1D53.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location57 = intervalsSet40.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D53);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector58 = intervalsSet40.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine59 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line37, intervalsSet40);
        boolean boolean60 = intervalsSet3.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet40);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine61 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line0, intervalsSet3);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector62 = intervalsSet3.getBarycenter();
        org.junit.Assert.assertNotNull(vector1D5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(vector1D9);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertNotNull(vector1D16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{(NaN)}" + "'", str19, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location20 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location20.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertNotNull(space23);
        org.junit.Assert.assertNotNull(vector1D25);
        org.junit.Assert.assertNotNull(space26);
        org.junit.Assert.assertNotNull(vector1D29);
        org.junit.Assert.assertNotNull(space30);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertNotNull(space33);
        org.junit.Assert.assertNotNull(vector1D35);
        org.junit.Assert.assertTrue("'" + location36 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location36.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(vector1D46);
        org.junit.Assert.assertNotNull(vector1D48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertNotNull(vector1D53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{(NaN)}" + "'", str56, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location57 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location57.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(euclidean1DVector62);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D67 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = vector2D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D68);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = vector2D70.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D71);
        double double73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D69, vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D75 = vector2D70.scalarMultiply((double) (-1.0f));
        double double76 = vector2D70.getNormInf();
        double double77 = line66.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine78 = line66.wholeHyperplane();
        line66.setOriginOffset((double) (-1L));
        line66.setOriginOffset(Double.NEGATIVE_INFINITY);
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet83 = line66.wholeSpace();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet84 = line66.wholeSpace();
        org.apache.commons.math3.geometry.euclidean.twod.Line line85 = line66.copySelf();
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector2D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(subLine78);
        org.junit.Assert.assertNotNull(polygonsSet83);
        org.junit.Assert.assertNotNull(polygonsSet84);
        org.junit.Assert.assertNotNull(line85);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine5 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        boolean boolean6 = subLine5.isEmpty();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane7 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane8 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList9 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet10 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList9);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint11 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane8, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet10);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine12 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane7, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet10);
        boolean boolean13 = subLine12.isEmpty();
        boolean boolean14 = subLine12.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = subLine5.intersection(subLine12, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane1 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList2 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList2);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint4 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane1, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine5 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D8 = vector2D6.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D9 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = vector2D9.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D10);
        double double12 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D8, vector2D9);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D8, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D17 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D16.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D17);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D19 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = vector2D19.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D20);
        double double22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D18, vector2D19);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = vector2D19.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D28 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D27.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D28);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D30 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D31 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D32 = vector2D30.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D31);
        double double33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D29, vector2D30);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = vector2D30.scalarMultiply((double) (-1.0f));
        double double36 = vector2D30.getNormInf();
        double double37 = vector2D26.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D30);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D42 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D41.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D42);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D44 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D45 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D45);
        double double47 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D43, vector2D44);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D49 = vector2D44.scalarMultiply((double) (-1.0f));
        double double50 = vector2D44.getNormInf();
        double double51 = vector2D44.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D44.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D57 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D56.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D57);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D59 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D60 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D59.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D60);
        double double62 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D58, vector2D59);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D64 = vector2D59.scalarMultiply((double) (-1.0f));
        double double65 = vector2D59.getNormInf();
        double double66 = vector2D59.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D67 = vector2D54.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D59);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = vector2D52.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D67);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D24, (double) '#', vector2D30, (double) (-1023), vector2D39, 0.0d, vector2D52);
        double double70 = vector2D13.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D52);
        org.apache.commons.math3.geometry.euclidean.twod.Line line72 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D52, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D74 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D75 = vector2D73.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D74);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D76 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D77 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D78 = vector2D76.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D77);
        double double79 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D75, vector2D76);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D81 = vector2D76.scalarMultiply((double) (-1.0f));
        double double82 = vector2D76.getNormInf();
        double double83 = line72.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D76);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine84 = line72.wholeHyperplane();
        line72.setOriginOffset((double) (-1L));
        line72.revertSelf();
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine88 = line72.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.twod.Line line89 = line72.copySelf();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.Side side90 = subLine5.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2D6);
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertNotNull(vector2D8);
        org.junit.Assert.assertNotNull(vector2D9);
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(vector2D16);
        org.junit.Assert.assertNotNull(vector2D17);
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D19);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertNotNull(vector2D27);
        org.junit.Assert.assertNotNull(vector2D28);
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertNotNull(vector2D30);
        org.junit.Assert.assertNotNull(vector2D31);
        org.junit.Assert.assertNotNull(vector2D32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + Double.POSITIVE_INFINITY + "'", double36 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D41);
        org.junit.Assert.assertNotNull(vector2D42);
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertNotNull(vector2D44);
        org.junit.Assert.assertNotNull(vector2D45);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(vector2D49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + Double.POSITIVE_INFINITY + "'", double50 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + Double.POSITIVE_INFINITY + "'", double51 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D56);
        org.junit.Assert.assertNotNull(vector2D57);
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertNotNull(vector2D59);
        org.junit.Assert.assertNotNull(vector2D60);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(vector2D64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + Double.POSITIVE_INFINITY + "'", double65 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + Double.POSITIVE_INFINITY + "'", double66 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(vector2D73);
        org.junit.Assert.assertNotNull(vector2D74);
        org.junit.Assert.assertNotNull(vector2D75);
        org.junit.Assert.assertNotNull(vector2D76);
        org.junit.Assert.assertNotNull(vector2D77);
        org.junit.Assert.assertNotNull(vector2D78);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(vector2D81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + Double.POSITIVE_INFINITY + "'", double82 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(subLine84);
        org.junit.Assert.assertNotNull(subLine88);
        org.junit.Assert.assertNotNull(line89);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D67 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = vector2D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D68);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = vector2D70.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D71);
        double double73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D69, vector2D70);
        line66.translateToPoint(vector2D69);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D76 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean78 = vector1D76.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D82 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean84 = vector1D82.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D86 = vector1D82.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D87 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double88 = vector1D86.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D87);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D89 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D76, 2.2250738585072014E-308d, vector1D80, 1.0000000000000002d, vector1D87);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector90 = line66.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine91 = line66.wholeHyperplane();
        boolean boolean92 = subLine91.isEmpty();
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector1D76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertNotNull(vector1D82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(vector1D86);
        org.junit.Assert.assertNotNull(vector1D87);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertNotNull(euclidean2DVector90);
        org.junit.Assert.assertNotNull(subLine91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = vector2D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D2);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D6 = vector2D4.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D5);
        double double7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D3, vector2D4);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D9 = vector2D4.scalarMultiply((double) (-1.0f));
        double double10 = vector2D4.getNormInf();
        double double11 = vector2D0.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        boolean boolean12 = vector2D4.isNaN();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D17 = vector2D15.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D16);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D19 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = vector2D18.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D19);
        double double21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D17, vector2D18);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D18.scalarMultiply((double) (-1.0f));
        double double24 = vector2D18.getNormInf();
        double double25 = vector2D18.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D13.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D18);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D28 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D30 = vector2D28.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D29);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D31 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D32 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = vector2D31.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D32);
        double double34 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D30, vector2D31);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = vector2D31.scalarMultiply((double) (-1.0f));
        double double37 = vector2D31.getNormInf();
        double double38 = vector2D31.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = vector2D31.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D44 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D45 = vector2D43.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D44);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D47 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = vector2D46.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D47);
        double double49 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D45, vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = vector2D46.scalarMultiply((double) (-1.0f));
        double double52 = vector2D46.getNormInf();
        double double53 = vector2D46.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = vector2D41.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D39.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D57 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D59 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D60 = vector2D58.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D59);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = vector2D61.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D62);
        double double64 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D60, vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D66 = vector2D61.scalarMultiply((double) (-1.0f));
        double double67 = vector2D61.getNormInf();
        double double68 = vector2D57.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) '4', vector2D39, 5.65685424949238d, vector2D57);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine70 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(vector2D18, vector2D57);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = vector2D4.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D18);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = vector2D71.negate();
        org.apache.commons.math3.geometry.euclidean.twod.Line line74 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D72, 0.0d);
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertNotNull(vector2D6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(vector2D9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertNotNull(vector2D16);
        org.junit.Assert.assertNotNull(vector2D17);
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D19);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + Double.POSITIVE_INFINITY + "'", double25 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertNotNull(vector2D28);
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertNotNull(vector2D30);
        org.junit.Assert.assertNotNull(vector2D31);
        org.junit.Assert.assertNotNull(vector2D32);
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + Double.POSITIVE_INFINITY + "'", double37 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + Double.POSITIVE_INFINITY + "'", double38 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D41);
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertNotNull(vector2D44);
        org.junit.Assert.assertNotNull(vector2D45);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D47);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + Double.POSITIVE_INFINITY + "'", double52 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + Double.POSITIVE_INFINITY + "'", double53 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertNotNull(vector2D57);
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertNotNull(vector2D59);
        org.junit.Assert.assertNotNull(vector2D60);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertNotNull(vector2D63);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + Double.POSITIVE_INFINITY + "'", double67 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion3 = intervalsSet2.copySelf();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet6 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet(4.605170185988092d, (double) 5);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet9 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D11 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean13 = vector1D11.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D15 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D17 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean19 = vector1D17.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D21 = vector1D17.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double23 = vector1D21.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D22);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D24 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D11, 2.2250738585072014E-308d, vector1D15, 1.0000000000000002d, vector1D22);
        java.lang.String str25 = vector1D22.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location26 = intervalsSet9.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D22);
        boolean boolean27 = intervalsSet6.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet9);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet30 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D32 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean34 = vector1D32.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D36 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D38 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean40 = vector1D38.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D42 = vector1D38.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D43 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double44 = vector1D42.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D45 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D32, 2.2250738585072014E-308d, vector1D36, 1.0000000000000002d, vector1D43);
        java.lang.String str46 = vector1D43.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location47 = intervalsSet30.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D43);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D49 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space50 = vector1D49.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D52 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space53 = vector1D52.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D54 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D49, (double) 100L, vector1D52);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D56 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space57 = vector1D56.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D59 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.Space space60 = vector1D59.getSpace();
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D61 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (byte) 100, vector1D56, (double) 100L, vector1D59);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D62 = vector1D54.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.partitioning.Region.Location location63 = intervalsSet30.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D56);
        org.apache.commons.math3.geometry.euclidean.threed.Line line64 = null;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet67 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((double) (-1L), (-0.8390715290764524d));
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D69 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean71 = vector1D69.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D73 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D75 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean77 = vector1D75.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D79 = vector1D75.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double81 = vector1D79.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D82 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (-1), vector1D69, 2.2250738585072014E-308d, vector1D73, 1.0000000000000002d, vector1D80);
        java.lang.String str83 = vector1D80.toString();
        org.apache.commons.math3.geometry.partitioning.Region.Location location84 = intervalsSet67.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D80);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector85 = intervalsSet67.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine86 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line64, intervalsSet67);
        boolean boolean87 = intervalsSet30.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet67);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DBSPTree89 = intervalsSet67.getTree(false);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DRegion90 = intervalsSet6.buildNew(euclidean1DBSPTree89);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractRegion91 = intervalsSet2.buildNew(euclidean1DBSPTree89);
        double double92 = intervalsSet2.getSize();
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion3);
        org.junit.Assert.assertNotNull(vector1D11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(vector1D15);
        org.junit.Assert.assertNotNull(vector1D17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vector1D21);
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{(NaN)}" + "'", str25, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location26 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location26.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(vector1D32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector1D36);
        org.junit.Assert.assertNotNull(vector1D38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(vector1D42);
        org.junit.Assert.assertNotNull(vector1D43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{(NaN)}" + "'", str46, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location47 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location47.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D49);
        org.junit.Assert.assertNotNull(space50);
        org.junit.Assert.assertNotNull(vector1D52);
        org.junit.Assert.assertNotNull(space53);
        org.junit.Assert.assertNotNull(vector1D56);
        org.junit.Assert.assertNotNull(space57);
        org.junit.Assert.assertNotNull(vector1D59);
        org.junit.Assert.assertNotNull(space60);
        org.junit.Assert.assertNotNull(vector1D62);
        org.junit.Assert.assertTrue("'" + location63 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location63.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(vector1D69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(vector1D73);
        org.junit.Assert.assertNotNull(vector1D75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(vector1D79);
        org.junit.Assert.assertNotNull(vector1D80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{(NaN)}" + "'", str83, "{(NaN)}");
        org.junit.Assert.assertTrue("'" + location84 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE + "'", location84.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.OUTSIDE));
        org.junit.Assert.assertNotNull(euclidean1DVector85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(euclidean1DBSPTree89);
        org.junit.Assert.assertNotNull(euclidean1DRegion90);
        org.junit.Assert.assertNotNull(euclidean1DAbstractRegion91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.3948298140119082d + "'", double92 == 0.3948298140119082d);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double1 = vector3D0.getNorm();
        double double2 = vector3D0.getNorm();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D0.negate();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D5, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double9 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D10, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double14 = vector3D10.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double16 = vector3D15.getNorm();
        double double17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D10, vector3D15);
        double double18 = vector3D8.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D15);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D20, vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double24 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double26 = vector3D25.getNorm();
        double double27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D20, vector3D25);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D28, vector3D29);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = vector3D29.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D32);
        double double34 = vector3D20.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D33.scalarMultiply(Double.NaN);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D38, vector3D39);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D39.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D42);
        boolean boolean44 = vector3D39.isInfinite();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) (-1.0f), vector3D15, (-0.052645272016449085d), vector3D33, (double) 1.0f, vector3D39);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D15.getZero();
        double double47 = euclidean3DVector3.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D48, vector3D49);
        double double51 = vector3D48.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D52, vector3D53);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = vector3D53.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D58, vector3D59);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = vector3D59.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D62);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D56.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D62);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine65 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D48, vector3D56);
        double double66 = vector3D56.getX();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D68, vector3D69);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double72 = vector3D68.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector74 = vector3D71.scalarMultiply((double) (byte) 100);
        double double75 = vector3D71.getNorm1();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector76 = vector3D56.add(7.714230945550557d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71);
        double double77 = vector3D46.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean3DVector3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + Double.POSITIVE_INFINITY + "'", double26 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + Double.POSITIVE_INFINITY + "'", double47 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + Double.POSITIVE_INFINITY + "'", double51 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(euclidean3DVector64);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + Double.NEGATIVE_INFINITY + "'", double66 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(euclidean3DVector74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + Double.POSITIVE_INFINITY + "'", double75 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean3DVector76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + Double.POSITIVE_INFINITY + "'", double77 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D8 = vector2D3.scalarMultiply((double) (-1.0f));
        double double9 = vector2D8.getNormSq();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = vector2D11.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D12);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = vector2D14.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D15);
        double double17 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D13, vector2D14);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D19 = vector2D14.scalarMultiply((double) (-1.0f));
        double double20 = vector2D14.getNormInf();
        double double21 = vector2D14.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = vector2D14.normalize();
        double double23 = vector2D14.getNorm1();
        double double24 = vector2D14.getNormSq();
        boolean boolean25 = vector2D14.isInfinite();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D8.subtract(5.656854249492381d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D27 = vector2D26.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D28, vector3D29);
        double double31 = vector3D28.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D32, vector3D33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D33.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36);
        double double38 = vector3D28.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D37);
        boolean boolean39 = vector2D27.equals((java.lang.Object) vector3D37);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.ZERO;
        org.apache.commons.math3.geometry.Space space41 = vector2D40.getSpace();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D40.scalarMultiply((double) (short) 10);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D44 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D45 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D45);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D47 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D49 = vector2D47.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D48);
        double double50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D46, vector2D47);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D47.scalarMultiply((double) (-1.0f));
        double double53 = vector2D52.getNormSq();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D57 = vector2D55.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D56);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D59 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D60 = vector2D58.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D59);
        double double61 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D57, vector2D58);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = vector2D58.scalarMultiply((double) (-1.0f));
        double double64 = vector2D58.getNormInf();
        double double65 = vector2D58.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D66 = vector2D58.normalize();
        double double67 = vector2D58.getNorm1();
        double double68 = vector2D58.getNormSq();
        boolean boolean69 = vector2D58.isInfinite();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = vector2D52.subtract(5.656854249492381d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D58);
        double double71 = vector2D40.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D52);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine72 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(vector2D27, vector2D40);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D74 = vector2D40.scalarMultiply(0.10471975511965978d);
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertNotNull(vector2D16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(vector2D19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + Double.POSITIVE_INFINITY + "'", double20 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + Double.POSITIVE_INFINITY + "'", double21 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + Double.POSITIVE_INFINITY + "'", double23 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertNotNull(vector2D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + Double.POSITIVE_INFINITY + "'", double31 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertNotNull(space41);
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertNotNull(vector2D44);
        org.junit.Assert.assertNotNull(vector2D45);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D47);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + Double.POSITIVE_INFINITY + "'", double53 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertNotNull(vector2D56);
        org.junit.Assert.assertNotNull(vector2D57);
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertNotNull(vector2D59);
        org.junit.Assert.assertNotNull(vector2D60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(vector2D63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + Double.POSITIVE_INFINITY + "'", double64 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + Double.POSITIVE_INFINITY + "'", double65 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + Double.POSITIVE_INFINITY + "'", double67 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + Double.POSITIVE_INFINITY + "'", double68 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D74);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D1, vector3D2);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D6, vector3D7);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double10 = vector3D6.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D9);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double12 = vector3D11.getNorm();
        double double13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D6, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D15, vector3D16);
        double double18 = vector3D15.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D20, vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double24 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D25, vector3D26);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double29 = vector3D25.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double31 = vector3D30.getNorm();
        double double32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D25, vector3D30);
        double double33 = vector3D23.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D30);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) 'a', vector3D11, (double) 6, vector3D15, (double) 10.0f, vector3D30, 0.0d, vector3D35);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.negate();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector39 = vector3D36.scalarMultiply((double) 10L);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(3.970291913552122d, vector3D1, 22025.465794806718d, vector3D36);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D42, vector3D43);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double46 = vector3D42.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        boolean boolean47 = vector3D42.isNaN();
        double double48 = vector3D42.getNormSq();
        double[] doubleArray49 = vector3D42.toArray();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(doubleArray49);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(doubleArray49);
        org.apache.commons.math3.geometry.euclidean.threed.Line line52 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D36, vector3D51);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = line52.getDirection();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double55 = vector3D54.getNorm();
        double double56 = vector3D54.getNorm();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector57 = vector3D54.negate();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) (short) 10, (double) 100.0f, (double) 3328.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        double double64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D62, vector3D63);
        double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector66 = vector3D63.normalize();
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine67 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D54, vector3D63);
        double double68 = line52.distance(vector3D63);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.POSITIVE_INFINITY + "'", double18 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + Double.POSITIVE_INFINITY + "'", double31 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(euclidean3DVector39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + Double.POSITIVE_INFINITY + "'", double48 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-Infinity, -Infinity, -Infinity]");
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + Double.POSITIVE_INFINITY + "'", double55 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + Double.POSITIVE_INFINITY + "'", double56 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean3DVector57);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.5677928837165518d + "'", double65 == 1.5677928837165518d);
        org.junit.Assert.assertNotNull(euclidean3DVector66);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D67 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = vector2D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D68);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = vector2D70.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D71);
        double double73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D69, vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D75 = vector2D70.scalarMultiply((double) (-1.0f));
        double double76 = vector2D70.getNormInf();
        double double77 = line66.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine78 = line66.wholeHyperplane();
        boolean boolean79 = subLine78.isEmpty();
        java.util.List<org.apache.commons.math3.geometry.euclidean.twod.Segment> segmentList80 = subLine78.getSegments();
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(vector2D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector2D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(subLine78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(segmentList80);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D1);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double4 = vector3D0.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double6 = vector3D5.getNorm();
        double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D0, vector3D5);
        double double8 = vector3D5.getNorm();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        double double11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D9, vector3D10);
        double double12 = vector3D10.getDelta();
        double double13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D5, vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D14, vector3D15);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double18 = vector3D14.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D17);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector20 = vector3D17.scalarMultiply((double) (byte) 100);
        double double21 = vector3D17.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D22, vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double26 = vector3D22.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.Space space27 = vector3D22.getSpace();
        double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D17, vector3D22);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D30, vector3D31);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double34 = vector3D30.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector35 = vector3D22.add(3327.9999999999995d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine36 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D5, vector3D33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D37, vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D38.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D44, vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double48 = vector3D44.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D47);
        double double49 = vector3D47.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = vector3D47.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D51, vector3D52);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double55 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54);
        double double56 = vector3D54.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = vector3D54.getZero();
        double double58 = vector3D50.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D57);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector59 = vector3D42.subtract(1.0d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D57);
        double double60 = vector3D57.getNormSq();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D61, vector3D62);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double65 = vector3D64.getNorm();
        double double66 = vector3D64.getNorm();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.Space space68 = vector3D67.getSpace();
        double double69 = vector3D64.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D67);
        double double70 = vector3D62.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D67);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.Space space72 = vector3D71.getSpace();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector73 = vector3D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double76 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D74, vector3D75);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = vector3D75.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D78);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D81, vector3D82);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D84, vector3D85);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D89 = vector3D85.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D88);
        double double90 = vector3D82.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D85);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector91 = vector3D75.add((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D82);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector92 = vector3D67.subtract(euclidean3DVector91);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine93 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D57, vector3D67);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D95 = subLine36.intersection(subLine93, true);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + Double.POSITIVE_INFINITY + "'", double13 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(euclidean3DVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + Double.POSITIVE_INFINITY + "'", double21 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(space27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(euclidean3DVector35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + Double.POSITIVE_INFINITY + "'", double49 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + Double.POSITIVE_INFINITY + "'", double56 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + Double.POSITIVE_INFINITY + "'", double65 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + Double.POSITIVE_INFINITY + "'", double66 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(space68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + Double.POSITIVE_INFINITY + "'", double69 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + Double.POSITIVE_INFINITY + "'", double70 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(space72);
        org.junit.Assert.assertNotNull(euclidean3DVector73);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + Double.POSITIVE_INFINITY + "'", double90 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean3DVector91);
        org.junit.Assert.assertNotNull(euclidean3DVector92);
        org.junit.Assert.assertNull(vector3D95);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.Space> spaceBSPTree0 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.Space>();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.Space> spaceSubHyperplane1 = spaceBSPTree0.getCut();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = vector2D2.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = vector2D5.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D6);
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D4, vector2D5);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D9 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D4, vector2D9);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = vector2D12.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D17 = vector2D15.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D16);
        double double18 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D14, vector2D15);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = vector2D15.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = vector2D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D28 = vector2D26.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D27);
        double double29 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D25, vector2D26);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D31 = vector2D26.scalarMultiply((double) (-1.0f));
        double double32 = vector2D26.getNormInf();
        double double33 = vector2D22.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D26);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = vector2D37.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D42 = vector2D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D41);
        double double43 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D39, vector2D40);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D45 = vector2D40.scalarMultiply((double) (-1.0f));
        double double46 = vector2D40.getNormInf();
        double double47 = vector2D40.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = vector2D40.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = vector2D52.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D57 = vector2D55.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D56);
        double double58 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D54, vector2D55);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D60 = vector2D55.scalarMultiply((double) (-1.0f));
        double double61 = vector2D55.getNormInf();
        double double62 = vector2D55.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = vector2D50.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D55);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D64 = vector2D48.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D63);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D65 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D20, (double) '#', vector2D26, (double) (-1023), vector2D35, 0.0d, vector2D48);
        double double66 = vector2D9.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D48);
        org.apache.commons.math3.geometry.euclidean.twod.Line line68 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D48, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D70 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D71 = vector2D69.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D70);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D72 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D73 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D74 = vector2D72.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D73);
        double double75 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D71, vector2D72);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D77 = vector2D72.scalarMultiply((double) (-1.0f));
        double double78 = vector2D72.getNormInf();
        double double79 = line68.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D72);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine80 = line68.wholeHyperplane();
        line68.setOriginOffset((double) (-1L));
        spaceBSPTree0.setAttribute((java.lang.Object) line68);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.Space> spaceSubHyperplane84 = null;
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.Space> spaceBSPTree85 = spaceBSPTree0.split(spaceSubHyperplane84);
        org.junit.Assert.assertNull(spaceSubHyperplane1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertNotNull(vector2D6);
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertNotNull(vector2D16);
        org.junit.Assert.assertNotNull(vector2D17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertNotNull(vector2D27);
        org.junit.Assert.assertNotNull(vector2D28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(vector2D31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + Double.POSITIVE_INFINITY + "'", double32 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertNotNull(vector2D41);
        org.junit.Assert.assertNotNull(vector2D42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(vector2D45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + Double.POSITIVE_INFINITY + "'", double46 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + Double.POSITIVE_INFINITY + "'", double47 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertNotNull(vector2D56);
        org.junit.Assert.assertNotNull(vector2D57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(vector2D60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + Double.POSITIVE_INFINITY + "'", double61 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + Double.POSITIVE_INFINITY + "'", double62 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D63);
        org.junit.Assert.assertNotNull(vector2D64);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertNotNull(vector2D70);
        org.junit.Assert.assertNotNull(vector2D71);
        org.junit.Assert.assertNotNull(vector2D72);
        org.junit.Assert.assertNotNull(vector2D73);
        org.junit.Assert.assertNotNull(vector2D74);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(vector2D77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + Double.POSITIVE_INFINITY + "'", double78 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(subLine80);
        org.junit.Assert.assertNotNull(spaceBSPTree85);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D1, vector3D2);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double5 = vector3D1.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D4);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double7 = vector3D6.getNorm();
        double double8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D1, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D10, vector3D11);
        double double13 = vector3D10.getNorm1();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D15, vector3D16);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double19 = vector3D15.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D20, vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double24 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double26 = vector3D25.getNorm();
        double double27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D20, vector3D25);
        double double28 = vector3D18.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) 'a', vector3D6, (double) 6, vector3D10, (double) 10.0f, vector3D25, 0.0d, vector3D30);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.negate();
        double double33 = vector3D32.getDelta();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J;
        double double35 = vector3D32.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D37, vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double41 = vector3D37.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D40);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector43 = vector3D40.scalarMultiply((double) (byte) 100);
        double double44 = vector3D40.getX();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double47 = vector3D46.getNorm();
        double double48 = vector3D46.getNorm();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.Space space50 = vector3D49.getSpace();
        double double51 = vector3D46.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D49);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = vector3D46.negate();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D54, vector3D55);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D55.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D58);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D60, vector3D61);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = vector3D61.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D64);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector66 = vector3D58.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D64);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0.0d, vector3D40, Double.POSITIVE_INFINITY, vector3D46, (double) (short) -1, vector3D64);
        double double68 = vector3D32.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D67);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D69, vector3D70);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double73 = vector3D69.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D72);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double75 = vector3D74.getNorm();
        double double76 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D69, vector3D74);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D77, vector3D78);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = vector3D78.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D81);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        double double86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D84, vector3D85);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        double double89 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D87, vector3D88);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D91 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D92 = vector3D88.add((double) (byte) 100, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D91);
        double double93 = vector3D85.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D88);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector94 = vector3D78.add((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D85);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector95 = vector3D69.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D78);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine96 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(vector3D32, vector3D69);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + Double.POSITIVE_INFINITY + "'", double7 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + Double.POSITIVE_INFINITY + "'", double13 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + Double.POSITIVE_INFINITY + "'", double26 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(euclidean3DVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.NEGATIVE_INFINITY + "'", double44 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + Double.POSITIVE_INFINITY + "'", double47 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + Double.POSITIVE_INFINITY + "'", double48 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(space50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + Double.POSITIVE_INFINITY + "'", double51 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(euclidean3DVector66);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + Double.POSITIVE_INFINITY + "'", double75 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + Double.POSITIVE_INFINITY + "'", double93 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean3DVector94);
        org.junit.Assert.assertNotNull(euclidean3DVector95);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane0 = null;
        org.apache.commons.math3.geometry.euclidean.threed.Line line1 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane2 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList3 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet4 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList3);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint5 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane2, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet4);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D6 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean8 = vector1D6.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D10 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ONE;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D12 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D14 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean16 = vector1D14.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D18 = vector1D14.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D19 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        double double20 = vector1D18.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D19);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D22 = org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN;
        boolean boolean24 = vector1D22.equals((java.lang.Object) 10L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D26 = vector1D22.scalarMultiply((double) 1L);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D27 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D((double) (short) 100, vector1D10, (double) 100, vector1D12, (double) (short) 0, vector1D19, (double) 'a', vector1D22);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D29 = vector1D22.scalarMultiply(4.605170185988092d);
        java.lang.String str30 = vector1D29.toString();
        double double31 = vector1D6.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D29);
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D33 = vector1D6.scalarMultiply(0.0d);
        org.apache.commons.math3.geometry.partitioning.Region.Location location34 = intervalsSet4.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) vector1D6);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector35 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location36 = intervalsSet4.checkPoint(euclidean1DVector35);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine37 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine(line1, intervalsSet4);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine38 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine(euclidean2DHyperplane0, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet4);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane39 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList40 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet41 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList40);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint42 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane39, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet41);
        boolean boolean43 = subOrientedPoint42.isEmpty();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractSubHyperplane44 = subOrientedPoint42.copySelf();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DSubHyperplane45 = intervalsSet4.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) euclidean1DAbstractSubHyperplane44);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane46 = null;
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DHyperplane47 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>> euclidean1DSubHyperplaneList48 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>();
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet49 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList48);
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet intervalsSet50 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>>) euclidean1DSubHyperplaneList48);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint51 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane47, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet50);
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint subOrientedPoint52 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint(euclidean1DHyperplane46, (org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) intervalsSet50);
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DAbstractSubHyperplane53 = euclidean1DAbstractSubHyperplane44.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>) subOrientedPoint52);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DSubHyperplane54 = euclidean1DAbstractSubHyperplane44.copySelf();
        org.junit.Assert.assertNotNull(vector1D6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vector1D10);
        org.junit.Assert.assertNotNull(vector1D12);
        org.junit.Assert.assertNotNull(vector1D14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vector1D18);
        org.junit.Assert.assertNotNull(vector1D19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(vector1D22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(vector1D26);
        org.junit.Assert.assertNotNull(vector1D29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{(NaN)}" + "'", str30, "{(NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector1D33);
        org.junit.Assert.assertTrue("'" + location34 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location34.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + location36 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location36.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(euclidean1DAbstractSubHyperplane44);
        org.junit.Assert.assertNotNull(euclidean1DSubHyperplane45);
        org.junit.Assert.assertNotNull(euclidean1DAbstractSubHyperplane53);
        org.junit.Assert.assertNotNull(euclidean1DSubHyperplane54);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D1 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = vector2D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D1);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D3 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = vector2D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        double double6 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        double double8 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D2, vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = vector2D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D11);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D14 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = vector2D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D14);
        double double16 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D12, vector2D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = vector2D13.scalarMultiply((double) (-1.0f));
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = vector2D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = vector2D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        double double27 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D23, vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D29 = vector2D24.scalarMultiply((double) (-1.0f));
        double double30 = vector2D24.getNormInf();
        double double31 = vector2D20.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D33 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D36 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D37 = vector2D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D36);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D39 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D40 = vector2D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D39);
        double double41 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D37, vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D43 = vector2D38.scalarMultiply((double) (-1.0f));
        double double44 = vector2D38.getNormInf();
        double double45 = vector2D38.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = vector2D38.normalize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D48 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D50 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D52 = vector2D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D54 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.POSITIVE_INFINITY;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = vector2D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D54);
        double double56 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(vector2D52, vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D58 = vector2D53.scalarMultiply((double) (-1.0f));
        double double59 = vector2D53.getNormInf();
        double double60 = vector2D53.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D61 = vector2D48.add((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = vector2D46.subtract(Double.NaN, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D61);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 1.4E-45f, vector2D18, (double) '#', vector2D24, (double) (-1023), vector2D33, 0.0d, vector2D46);
        double double64 = vector2D7.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Line line66 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) (byte) 0);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine67 = line66.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.twod.Line line68 = new org.apache.commons.math3.geometry.euclidean.twod.Line(line66);
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet69 = line68.wholeSpace();
        line68.setAngle(1.571417816910565E-5d);
        line68.setAngle(5.916079460698845d);
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertNotNull(vector2D1);
        org.junit.Assert.assertNotNull(vector2D2);
        org.junit.Assert.assertNotNull(vector2D3);
        org.junit.Assert.assertNotNull(vector2D4);
        org.junit.Assert.assertNotNull(vector2D5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector2D7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(vector2D10);
        org.junit.Assert.assertNotNull(vector2D11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertNotNull(vector2D13);
        org.junit.Assert.assertNotNull(vector2D14);
        org.junit.Assert.assertNotNull(vector2D15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(vector2D18);
        org.junit.Assert.assertNotNull(vector2D20);
        org.junit.Assert.assertNotNull(vector2D21);
        org.junit.Assert.assertNotNull(vector2D22);
        org.junit.Assert.assertNotNull(vector2D23);
        org.junit.Assert.assertNotNull(vector2D24);
        org.junit.Assert.assertNotNull(vector2D25);
        org.junit.Assert.assertNotNull(vector2D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector2D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector2D33);
        org.junit.Assert.assertNotNull(vector2D35);
        org.junit.Assert.assertNotNull(vector2D36);
        org.junit.Assert.assertNotNull(vector2D37);
        org.junit.Assert.assertNotNull(vector2D38);
        org.junit.Assert.assertNotNull(vector2D39);
        org.junit.Assert.assertNotNull(vector2D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector2D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D46);
        org.junit.Assert.assertNotNull(vector2D48);
        org.junit.Assert.assertNotNull(vector2D50);
        org.junit.Assert.assertNotNull(vector2D51);
        org.junit.Assert.assertNotNull(vector2D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertNotNull(vector2D54);
        org.junit.Assert.assertNotNull(vector2D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(vector2D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(subLine67);
        org.junit.Assert.assertNotNull(polygonsSet69);
    }
}

