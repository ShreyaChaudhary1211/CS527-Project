package org.apache.commons.collections4.trie;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedMap<java.lang.String, java.io.Serializable> strMap4 = serializableMap0.subMap("hi!", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey > toKey");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = serializableMap0.firstKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable5 = serializableMap0.get((java.lang.Object) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Long cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable2 = strItor1.getValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry5 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry8 = serializableMap1.nextEntryImpl(strTrieEntry5, strTrieEntry6, strTrieEntry7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap6 = serializableMap1.headMap("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap7.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap7.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = serializableMap1.containsKey((java.lang.Object) strItor9);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strItor9);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        int int5 = serializableMap0.bitsPerElement();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry7 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry9 = serializableMap0.nextEntryImpl(strTrieEntry6, strTrieEntry7, strTrieEntry8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap3 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor4 = serializableMap3.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable5 = strItor2.setValue((java.io.Serializable) serializableMap3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor4);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        boolean boolean1 = org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey((int) (short) 100);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = serializableMap0.containsKey((java.lang.Object) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Float cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedMap<java.lang.String, java.io.Serializable> strMap3 = serializableMap0.subMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey > toKey");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = serializableMap0.lastKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedMap<java.lang.String, java.io.Serializable> strMap6 = serializableMap0.subMap("hi!", "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey > toKey");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = serializableMap0.firstKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        int int0 = org.apache.commons.collections4.trie.KeyAnalyzer.EQUAL_BIT_KEY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + (-2) + "'", int0 == (-2));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            strItor6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        boolean boolean3 = strItor2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable4 = strItor2.getValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry7 = serializableMap0.getNearestEntryForKey("", (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = serializableMap0.containsKey((java.lang.Object) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Character cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strTrieEntry7);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        boolean boolean1 = org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        int int0 = org.apache.commons.collections4.trie.KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + (-3) + "'", int0 == (-3));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            strItor6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        boolean boolean1 = org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex((int) (short) 100);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            strItor6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        boolean boolean23 = serializableMap18.containsKey((java.lang.Object) "hi!");
        java.util.Set set24 = serializableMap18.keySet();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable25 = serializableMap1.remove((java.lang.Object) set24);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(set24);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Map<java.lang.String, java.io.Serializable> strMap3 = null;
        // The following exception was thrown during execution in test generation
        try {
            serializableMap0.putAll(strMap3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        int int7 = serializableMap0.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        java.util.Set set11 = serializableMap8.keySet();
        boolean boolean13 = serializableMap8.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap8.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap16 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap16.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap16.mapIterator();
        serializableMap15.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap16);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry21 = serializableMap16.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap23.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap23.mapIterator();
        serializableMap22.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap23);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry29 = serializableMap22.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry30 = serializableMap16.nextEntry(strTrieEntry29);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap32.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap32.mapIterator();
        serializableMap31.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap32);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry37 = serializableMap32.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap38 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap39 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor40 = serializableMap39.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap39.mapIterator();
        serializableMap38.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap39);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry45 = serializableMap38.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry46 = serializableMap32.nextEntry(strTrieEntry45);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap47 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap48 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap48.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor50 = serializableMap48.mapIterator();
        serializableMap47.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap48);
        java.lang.String str53 = serializableMap47.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap54 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor55 = serializableMap54.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor56 = serializableMap54.mapIterator();
        java.util.Set set57 = serializableMap54.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap59 = serializableMap54.tailMap("hi!");
        java.io.Serializable serializable61 = serializableMap54.selectValue("");
        boolean boolean64 = serializableMap54.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable65 = serializableMap47.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap66 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap67 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor68 = serializableMap67.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor69 = serializableMap67.mapIterator();
        serializableMap66.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap67);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry73 = serializableMap66.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry74 = serializableMap47.nextEntry(strTrieEntry73);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry75 = serializableMap8.nextEntryImpl(strTrieEntry29, strTrieEntry46, strTrieEntry73);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable76 = serializableMap0.removeEntry(strTrieEntry75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(set11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNull(strTrieEntry21);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strTrieEntry29);
        org.junit.Assert.assertNull(strTrieEntry30);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNull(strTrieEntry37);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(strTrieEntry45);
        org.junit.Assert.assertNull(strTrieEntry46);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strItor55);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(set57);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNull(serializable61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(serializable65);
        org.junit.Assert.assertNotNull(strItor68);
        org.junit.Assert.assertNotNull(strItor69);
        org.junit.Assert.assertNotNull(strTrieEntry73);
        org.junit.Assert.assertNull(strTrieEntry74);
        org.junit.Assert.assertNull(strTrieEntry75);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = strItor1.getKey();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry9 = serializableMap0.subtree("hi!", 16, 0);
        java.util.Comparator comparator10 = serializableMap0.comparator();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strTrieEntry9);
        org.junit.Assert.assertNotNull(comparator10);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        int int0 = org.apache.commons.collections4.trie.KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + (-3) + "'", int0 == (-3));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        boolean boolean1 = org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey((int) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.io.Serializable serializable4 = serializableMap0.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.lang.String str6 = serializableMap0.previousKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNull(serializable4);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection7 = serializableMap0.values();
        java.lang.String str9 = serializableMap0.previousKey("hi!");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(serializableCollection7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap7.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap7.mapIterator();
        java.util.Set set10 = serializableMap7.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap12 = serializableMap7.tailMap("hi!");
        java.io.Serializable serializable14 = serializableMap7.selectValue("");
        boolean boolean17 = serializableMap7.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable18 = serializableMap0.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        serializableMap19.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap20);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry26 = serializableMap19.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap0.nextEntry(strTrieEntry26);
        java.io.Serializable serializable29 = serializableMap0.selectValue("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(set10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(serializable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(serializable18);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strTrieEntry26);
        org.junit.Assert.assertNull(strTrieEntry27);
        org.junit.Assert.assertNull(serializable29);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap6 = serializableMap1.headMap("hi!");
        int int7 = serializableMap1.size();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry7 = serializableMap0.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        serializableMap8.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap9);
        int int13 = serializableMap8.bitsPerElement();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable14 = serializableMap0.remove((java.lang.Object) serializableMap8);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strTrieEntry7);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            strItor1.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = strItor6.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        java.util.Set set25 = serializableMap22.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap27 = serializableMap22.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap22.mapIterator();
        int int29 = serializableMap22.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap32 = serializableMap22.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable33 = serializableMap10.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap34.mapIterator();
        java.util.Set set37 = serializableMap34.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap39 = serializableMap34.tailMap("hi!");
        java.io.Serializable serializable41 = serializableMap34.selectValue("");
        boolean boolean42 = serializableMap34.isEmpty();
        serializableMap34.clear();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry47 = serializableMap34.subtree("", 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable48 = serializableMap10.remove((java.lang.Object) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(serializable33);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(set37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNull(serializable41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(strTrieEntry47);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap0.ceilingEntry("hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = serializableMap0.lastKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        int int5 = serializableMap0.bitsPerElement();
        java.io.Serializable serializable8 = serializableMap0.replace("hi!", (java.io.Serializable) (-1.0d));
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        serializableMap9.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap10);
        int int14 = serializableMap9.bitsPerElement();
        java.io.Serializable serializable17 = serializableMap9.replace("hi!", (java.io.Serializable) (-1.0d));
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable18 = serializableMap0.get((java.lang.Object) (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNull(serializable8);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
        org.junit.Assert.assertNull(serializable17);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        boolean boolean20 = serializableMap1.compareKeys("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap21 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        java.util.Set set25 = serializableMap22.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry27 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap21, set25, (int) ' ');
        java.lang.String str28 = strMapTrieEntry27.toString();
        strMapTrieEntry27.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap31.mapIterator();
        java.util.Set set34 = serializableMap31.keySet();
        boolean boolean36 = serializableMap31.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap31.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap38 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor39 = serializableMap38.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection40 = serializableMap38.values();
        java.util.Set<java.lang.String> strSet41 = serializableMap38.keySet();
        java.util.Set set42 = strMapTrieEntry27.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap31, (java.util.Set) strSet41);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable43 = serializableMap1.remove((java.lang.Object) serializableMap31);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str28, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(set34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(serializableCollection40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(set42);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap7.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap7.mapIterator();
        java.util.Set set10 = serializableMap7.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap12 = serializableMap7.tailMap("hi!");
        java.io.Serializable serializable14 = serializableMap7.selectValue("");
        boolean boolean17 = serializableMap7.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable18 = serializableMap0.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        serializableMap19.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap20);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry26 = serializableMap19.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap0.nextEntry(strTrieEntry26);
        java.util.Collection collection28 = serializableMap0.values();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap29 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap29.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection31 = serializableMap29.values();
        int int32 = serializableMap29.modCount;
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable33 = serializableMap0.remove((java.lang.Object) serializableMap29);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(set10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(serializable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(serializable18);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strTrieEntry26);
        org.junit.Assert.assertNull(strTrieEntry27);
        org.junit.Assert.assertNotNull(collection28);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(serializableCollection31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry19 = serializableMap1.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        java.util.Set set23 = serializableMap20.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap25 = serializableMap20.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap20.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj27 = serializableMap1.get((java.lang.Object) strItor26);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertNull(strEntry19);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(set23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strItor26);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        java.util.Set<java.lang.String> strSet3 = serializableMap0.keySet();
        java.util.Set<java.lang.String> strSet4 = serializableMap0.keySet();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.apache.commons.collections4.trie.PatriciaTrie<java.util.Set> setMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.util.Set>();
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap0.ceilingEntry("hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry9 = serializableMap0.getNearestEntryForKey("hi!", (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = serializableMap0.firstKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strTrieEntry9);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        int int5 = serializableMap0.bitsPerElement();
        serializableMap0.modCount = 10;
        boolean boolean8 = serializableMap0.isEmpty();
        java.lang.Class<?> wildcardClass9 = serializableMap0.getClass();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry9 = serializableMap0.subtree("hi!", 16, 0);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        serializableMap10.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap11);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap10.getNearestEntryForKey("", (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable18 = serializableMap0.remove((java.lang.Object) strTrieEntry17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strTrieEntry9);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(strTrieEntry17);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasNext();
        boolean boolean8 = strItor6.hasNext();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry9 = serializableMap0.subtree("hi!", 16, 0);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry11 = serializableMap0.lowerEntry("");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strTrieEntry9);
        org.junit.Assert.assertNull(strTrieEntry11);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = strItor6.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap0.lowerEntry("");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.Collection<java.io.Serializable> serializableCollection5 = serializableMap0.values();
        java.lang.String str7 = serializableMap0.previousKey("hi!");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet8 = serializableMap0.entrySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap9 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry15 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap9, set13, (int) ' ');
        java.lang.String str16 = strMapTrieEntry15.toString();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry23 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap17, set21, (int) ' ');
        java.lang.String str24 = strMapTrieEntry23.toString();
        strMapTrieEntry23.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        boolean boolean32 = serializableMap27.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap27.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection36 = serializableMap34.values();
        java.util.Set<java.lang.String> strSet37 = serializableMap34.keySet();
        java.util.Set set38 = strMapTrieEntry23.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap27, (java.util.Set) strSet37);
        strMapTrieEntry15.predecessor = strMapTrieEntry23;
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable40 = serializableMap0.remove((java.lang.Object) strMapTrieEntry15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(serializableCollection5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strEntrySet8);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str16, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str24, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(serializableCollection36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(set38);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        int int8 = serializableMap6.modCount;
        serializableMap6.clear();
        java.io.Serializable serializable10 = serializableMap0.replace("", (java.io.Serializable) serializableMap6);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        int int13 = serializableMap11.size();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable14 = serializableMap6.remove((java.lang.Object) serializableMap11);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(serializable10);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.apache.commons.collections4.trie.PatriciaTrie<java.lang.String> strMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.lang.String>();
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        java.util.Set<java.lang.String> strSet3 = serializableMap0.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet4 = serializableMap0.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet5 = serializableMap0.entrySet();
        java.lang.Class<?> wildcardClass6 = serializableMap0.getClass();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strEntrySet4);
        org.junit.Assert.assertNotNull(strEntrySet5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        boolean boolean3 = strItor2.hasNext();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        int int8 = serializableMap6.modCount;
        serializableMap6.clear();
        java.io.Serializable serializable10 = serializableMap0.replace("", (java.io.Serializable) serializableMap6);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap12.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap12.mapIterator();
        serializableMap11.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap12);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry18 = serializableMap11.getNearestEntryForKey("", (int) ' ');
        java.lang.String str20 = serializableMap11.previousKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap21.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap21.mapIterator();
        java.util.Set set24 = serializableMap21.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap26 = serializableMap21.tailMap("hi!");
        serializableMap11.putAll((java.util.Map<java.lang.String, java.io.Serializable>) strMap26);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap28 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap28.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap28.mapIterator();
        java.util.Set set31 = serializableMap28.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap33 = serializableMap28.tailMap("hi!");
        java.util.Comparator<? super java.lang.String> wildcardComparator34 = serializableMap28.comparator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = serializableMap6.remove((java.lang.Object) strMap26, (java.lang.Object) serializableMap28);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(serializable10);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strTrieEntry18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(set24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(set31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(wildcardComparator34);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        java.util.Set set15 = serializableMap9.keySet();
        java.util.Set set16 = strMapTrieEntry6.setValue(set15);
        strMapTrieEntry6.bitIndex = (byte) 100;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(set15);
        org.junit.Assert.assertNotNull(set16);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        boolean boolean6 = serializableMap1.equals((java.lang.Object) (-1.0f));
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap1.headMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        serializableMap10.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap11);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry16 = serializableMap10.ceilingEntry("hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry19 = serializableMap10.getNearestEntryForKey("hi!", (int) (short) 10);
        java.io.Serializable serializable20 = serializableMap1.put("", (java.io.Serializable) (short) 10);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNull(strTrieEntry16);
        org.junit.Assert.assertNotNull(strTrieEntry19);
        org.junit.Assert.assertNull(serializable20);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry7 = serializableMap0.getNearestEntryForKey("", (int) ' ');
        java.lang.String str9 = serializableMap0.previousKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = serializableMap0.firstKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strTrieEntry7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        java.util.Set set6 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap7 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        java.util.Set set11 = serializableMap8.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry13 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap7, set11, (int) ' ');
        java.lang.String str14 = strMapTrieEntry13.toString();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap15 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap16 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap16.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap16.mapIterator();
        java.util.Set set19 = serializableMap16.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry21 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap15, set19, (int) ' ');
        java.lang.String str22 = strMapTrieEntry21.toString();
        strMapTrieEntry21.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor27 = serializableMap25.mapIterator();
        java.util.Set set28 = serializableMap25.keySet();
        boolean boolean30 = serializableMap25.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap25.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap32.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection34 = serializableMap32.values();
        java.util.Set<java.lang.String> strSet35 = serializableMap32.keySet();
        java.util.Set set36 = strMapTrieEntry21.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap25, (java.util.Set) strSet35);
        strMapTrieEntry13.predecessor = strMapTrieEntry21;
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable38 = serializableMap0.get((java.lang.Object) strMapTrieEntry13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(set6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(set11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str14, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(set19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str22, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(set28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(serializableCollection34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(set36);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        java.lang.Object obj22 = null;
        boolean boolean23 = serializableMap10.containsKey(obj22);
        int int24 = serializableMap10.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap26 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor27 = serializableMap26.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap26.mapIterator();
        serializableMap25.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap26);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry32 = serializableMap25.getNearestEntryForKey("", (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = serializableMap10.containsKey((java.lang.Object) serializableMap25);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strTrieEntry32);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.io.Serializable serializable4 = serializableMap0.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        int int6 = serializableMap0.lengthInBits("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap7.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection9 = serializableMap7.values();
        int int10 = serializableMap7.modCount;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry12 = serializableMap7.ceilingEntry("");
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable13 = serializableMap0.remove((java.lang.Object) serializableMap7);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNull(serializable4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(serializableCollection9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(strTrieEntry12);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        java.lang.String str10 = strMapTrieEntry6.toString();
        int int11 = strMapTrieEntry6.bitIndex;
        int int12 = strMapTrieEntry6.bitIndex;
        java.lang.String str13 = strMapTrieEntry6.toString();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])" + "'", str10, "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])" + "'", str13, "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasNext();
        boolean boolean8 = strItor6.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = strItor6.getKey();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable3 = strItor1.setValue((java.io.Serializable) false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        java.util.Set set14 = serializableMap11.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry16 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap10, set14, (int) ' ');
        java.lang.String str17 = strMapTrieEntry16.toString();
        strMapTrieEntry16.bitIndex = 0;
        java.lang.String str20 = strMapTrieEntry16.toString();
        strMapTrieEntry6.predecessor = strMapTrieEntry16;
        boolean boolean22 = strMapTrieEntry6.isExternalNode();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(set14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str17, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])" + "'", str20, "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        boolean boolean2 = strItor1.hasPrevious();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap3 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor4 = serializableMap3.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection5 = serializableMap3.values();
        java.util.Set<java.lang.String> strSet6 = serializableMap3.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet7 = serializableMap3.entrySet();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable8 = strItor1.setValue((java.io.Serializable) serializableMap3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(serializableCollection5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strEntrySet7);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        java.util.Set<java.lang.String> strSet16 = serializableMap1.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry23 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap17, set21, (int) ' ');
        java.lang.String str24 = strMapTrieEntry23.toString();
        strMapTrieEntry23.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        boolean boolean32 = serializableMap27.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap27.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection36 = serializableMap34.values();
        java.util.Set<java.lang.String> strSet37 = serializableMap34.keySet();
        java.util.Set set38 = strMapTrieEntry23.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap27, (java.util.Set) strSet37);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry40 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap27, (int) '4');
        boolean boolean42 = serializableMap27.equals((java.lang.Object) 10L);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str24, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(serializableCollection36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(set38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap0.prefixMap("hi!");
        java.util.Collection<java.io.Serializable> serializableCollection9 = serializableMap0.values();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(serializableCollection9);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.io.Serializable serializable4 = serializableMap0.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        int int6 = serializableMap0.lengthInBits("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = serializableMap0.firstKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNull(serializable4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap6.mapIterator();
        java.util.Set set9 = serializableMap6.keySet();
        boolean boolean11 = serializableMap6.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap6.mapIterator();
        java.util.Set<java.lang.String> strSet13 = serializableMap6.keySet();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap15.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap15.mapIterator();
        serializableMap14.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap15);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry20 = serializableMap15.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        serializableMap21.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap22);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry28 = serializableMap21.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry29 = serializableMap15.nextEntry(strTrieEntry28);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry30 = serializableMap6.previousEntry(strTrieEntry28);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap32.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap32.mapIterator();
        serializableMap31.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap32);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry37 = serializableMap32.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap38 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap39 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor40 = serializableMap39.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap39.mapIterator();
        serializableMap38.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap39);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry45 = serializableMap38.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry46 = serializableMap32.nextEntry(strTrieEntry45);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap47 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap48 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap48.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor50 = serializableMap48.mapIterator();
        serializableMap47.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap48);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry54 = serializableMap47.getNearestEntryForKey("", (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry55 = serializableMap0.nextEntryImpl(strTrieEntry30, strTrieEntry46, strTrieEntry54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(set9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNull(strTrieEntry20);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strTrieEntry28);
        org.junit.Assert.assertNull(strTrieEntry29);
        org.junit.Assert.assertNull(strTrieEntry30);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNull(strTrieEntry37);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(strTrieEntry45);
        org.junit.Assert.assertNull(strTrieEntry46);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertNotNull(strTrieEntry54);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.Collection<java.io.Serializable> serializableCollection5 = serializableMap0.values();
        boolean boolean9 = serializableMap0.isBitSet("hi!", (-1), (int) (short) 100);
        java.util.Set set10 = serializableMap0.keySet();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable12 = serializableMap0.get((java.lang.Object) 1456);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(serializableCollection5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(set10);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap18 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        java.util.Set set22 = serializableMap19.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry24 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap18, set22, (int) ' ');
        java.lang.String str25 = strMapTrieEntry24.toString();
        strMapTrieEntry24.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap28 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap28.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap28.mapIterator();
        java.util.Set set31 = serializableMap28.keySet();
        boolean boolean33 = serializableMap28.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap28.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap35.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection37 = serializableMap35.values();
        java.util.Set<java.lang.String> strSet38 = serializableMap35.keySet();
        java.util.Set set39 = strMapTrieEntry24.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap28, (java.util.Set) strSet38);
        boolean boolean40 = strMapTrieEntry24.isInternalNode();
        java.io.Serializable serializable41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable42 = serializableMap1.getOrDefault((java.lang.Object) boolean40, serializable41);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(set22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str25, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(set31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(serializableCollection37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(set39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        boolean boolean6 = serializableMap1.equals((java.lang.Object) (-1.0f));
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap7.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap7.mapIterator();
        java.io.Serializable serializable11 = serializableMap7.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap12.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap12.mapIterator();
        java.util.Set set15 = serializableMap12.keySet();
        boolean boolean17 = serializableMap12.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap12.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        serializableMap19.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap20);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry25 = serializableMap20.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap26 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        serializableMap26.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap27);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry33 = serializableMap26.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry34 = serializableMap20.nextEntry(strTrieEntry33);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap36.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap36.mapIterator();
        serializableMap35.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap36);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry41 = serializableMap36.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap42 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap43 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap43.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor45 = serializableMap43.mapIterator();
        serializableMap42.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap43);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry49 = serializableMap42.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry50 = serializableMap36.nextEntry(strTrieEntry49);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap51 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap52 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor53 = serializableMap52.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor54 = serializableMap52.mapIterator();
        serializableMap51.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap52);
        java.lang.String str57 = serializableMap51.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap58 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor59 = serializableMap58.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor60 = serializableMap58.mapIterator();
        java.util.Set set61 = serializableMap58.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap63 = serializableMap58.tailMap("hi!");
        java.io.Serializable serializable65 = serializableMap58.selectValue("");
        boolean boolean68 = serializableMap58.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable69 = serializableMap51.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap70 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap71 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor72 = serializableMap71.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor73 = serializableMap71.mapIterator();
        serializableMap70.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap71);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry77 = serializableMap70.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry78 = serializableMap51.nextEntry(strTrieEntry77);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry79 = serializableMap12.nextEntryImpl(strTrieEntry33, strTrieEntry50, strTrieEntry77);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry80 = serializableMap7.followRight(strTrieEntry77);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap82 = serializableMap7.headMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean83 = serializableMap1.containsKey((java.lang.Object) serializableMap7);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNull(serializable11);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(set15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNull(strTrieEntry25);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(strTrieEntry33);
        org.junit.Assert.assertNull(strTrieEntry34);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNull(strTrieEntry41);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertNotNull(strTrieEntry49);
        org.junit.Assert.assertNull(strTrieEntry50);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(strItor59);
        org.junit.Assert.assertNotNull(strItor60);
        org.junit.Assert.assertNotNull(set61);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNull(serializable65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(serializable69);
        org.junit.Assert.assertNotNull(strItor72);
        org.junit.Assert.assertNotNull(strItor73);
        org.junit.Assert.assertNotNull(strTrieEntry77);
        org.junit.Assert.assertNull(strTrieEntry78);
        org.junit.Assert.assertNull(strTrieEntry79);
        org.junit.Assert.assertNull(strTrieEntry80);
        org.junit.Assert.assertNotNull(strMap82);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.io.Serializable serializable4 = serializableMap0.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        int int6 = serializableMap0.lengthInBits("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry13 = serializableMap7.ceilingEntry("hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry16 = serializableMap7.getNearestEntryForKey("hi!", (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = serializableMap0.containsKey((java.lang.Object) serializableMap7);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNull(serializable4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(strTrieEntry13);
        org.junit.Assert.assertNotNull(strTrieEntry16);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        int int0 = org.apache.commons.collections4.trie.KeyAnalyzer.NULL_BIT_KEY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + (-1) + "'", int0 == (-1));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap7.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap7.mapIterator();
        java.util.Set set10 = serializableMap7.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap12 = serializableMap7.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap7.mapIterator();
        int int14 = serializableMap7.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = serializableMap0.containsKey((java.lang.Object) serializableMap7);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(set10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.io.Serializable serializable19 = null;
        boolean boolean21 = serializableMap1.replace("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", serializable19, (java.io.Serializable) (-1.0d));
        int int22 = serializableMap1.size();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry23 = serializableMap1.firstEntry();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(strTrieEntry23);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("hi!", (int) (short) 1, 10);
        boolean boolean8 = stringKeyAnalyzer0.isBitSet("", (-1), (-3));
        // The following exception was thrown during execution in test generation
        try {
            int int15 = stringKeyAnalyzer0.bitIndex("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", (-2), 0, "Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])", 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The offsets and lengths must be at Character boundaries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.util.Comparator<? super java.lang.String> wildcardComparator6 = serializableMap0.comparator();
        int int7 = serializableMap0.size();
        boolean boolean11 = serializableMap0.isBitSet("hi!", (int) (byte) 1, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(wildcardComparator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasNext();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry14 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap8, set12, (int) ' ');
        java.lang.String str15 = strMapTrieEntry14.toString();
        strMapTrieEntry14.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        boolean boolean23 = serializableMap18.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap18.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap25.values();
        java.util.Set<java.lang.String> strSet28 = serializableMap25.keySet();
        java.util.Set set29 = strMapTrieEntry14.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap18, (java.util.Set) strSet28);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable30 = strItor6.setValue((java.io.Serializable) strMapTrieEntry14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str15, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(set29);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        java.util.Set set25 = serializableMap22.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap27 = serializableMap22.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap22.mapIterator();
        int int29 = serializableMap22.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap32 = serializableMap22.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable33 = serializableMap10.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        serializableMap10.clear();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap36 = serializableMap10.prefixMap("hi!");
        java.util.Set<java.lang.String> strSet37 = strMap36.keySet();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(serializable33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strSet37);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator22 = serializableMap10.mapIterator();
        java.lang.Object obj23 = null;
        java.io.Serializable serializable24 = serializableMap10.get(obj23);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(orderedMapIterator22);
        org.junit.Assert.assertNull(serializable24);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.modCount;
        serializableMap0.clear();
        org.apache.commons.collections4.trie.KeyAnalyzer<? super java.lang.String> wildcardKeyAnalyzer4 = serializableMap0.getKeyAnalyzer();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = wildcardKeyAnalyzer4.isPrefix("", (-1), (int) (byte) 0, "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot determine prefix outside of Character boundaries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(wildcardKeyAnalyzer4);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("hi!", (int) (short) 1, 10);
        int int7 = stringKeyAnalyzer0.compare("", "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        // The following exception was thrown during execution in test generation
        try {
            int int14 = stringKeyAnalyzer0.bitIndex("Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])", (-94), (int) 'a', "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", (-94), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The offsets and lengths must be at Character boundaries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-94) + "'", int7 == (-94));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        serializableMap0.clear();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap6.mapIterator();
        serializableMap5.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap6);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry12 = serializableMap5.getNearestEntryForKey("", (int) ' ');
        boolean boolean13 = serializableMap0.equals((java.lang.Object) "");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap0.subtree("", (int) (byte) 1, (int) (short) 0);
        serializableMap0.clear();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strTrieEntry12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strTrieEntry17);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        int int5 = serializableMap0.bitsPerElement();
        serializableMap0.modCount = 10;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = serializableMap0.lastKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.lang.String str3 = serializableMap0.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        int int7 = serializableMap5.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        int int10 = serializableMap8.modCount;
        serializableMap8.clear();
        org.apache.commons.collections4.trie.KeyAnalyzer<? super java.lang.String> wildcardKeyAnalyzer12 = serializableMap8.getKeyAnalyzer();
        boolean boolean13 = serializableMap0.replace("hi!", (java.io.Serializable) serializableMap5, (java.io.Serializable) serializableMap8);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap15.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap15.mapIterator();
        serializableMap14.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap15);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry20 = serializableMap15.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        serializableMap21.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap22);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry28 = serializableMap21.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry29 = serializableMap15.nextEntry(strTrieEntry28);
        java.util.Set<java.lang.String> strSet30 = serializableMap15.keySet();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj31 = serializableMap8.remove((java.lang.Object) strSet30);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardKeyAnalyzer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNull(strTrieEntry20);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strTrieEntry28);
        org.junit.Assert.assertNull(strTrieEntry29);
        org.junit.Assert.assertNotNull(strSet30);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry22 = strMapTrieEntry6.parent;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap23 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap24.mapIterator();
        java.util.Set set27 = serializableMap24.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry29 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap23, set27, (int) ' ');
        java.lang.String str30 = strMapTrieEntry29.toString();
        boolean boolean31 = strMapTrieEntry29.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap32.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap32.mapIterator();
        java.util.Set set35 = serializableMap32.keySet();
        boolean boolean37 = serializableMap32.containsKey((java.lang.Object) "hi!");
        java.util.Set set38 = serializableMap32.keySet();
        java.util.Set set39 = strMapTrieEntry29.setValue(set38);
        // The following exception was thrown during execution in test generation
        try {
            strMapTrieEntry22.left = strMapTrieEntry29;
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNull(strMapTrieEntry22);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(set27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str30, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(set35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(set38);
        org.junit.Assert.assertNotNull(set39);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.util.Set<java.lang.String> strSet6 = serializableMap0.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry8 = serializableMap0.previousEntry(strTrieEntry7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry7 = serializableMap0.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        int int10 = serializableMap8.modCount;
        serializableMap8.clear();
        java.lang.Object obj12 = null;
        boolean boolean13 = serializableMap8.containsKey(obj12);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap15.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap15.mapIterator();
        serializableMap14.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap15);
        java.lang.String str20 = serializableMap14.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap21.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap21.mapIterator();
        java.util.Set set24 = serializableMap21.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap26 = serializableMap21.tailMap("hi!");
        java.io.Serializable serializable28 = serializableMap21.selectValue("");
        boolean boolean31 = serializableMap21.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable32 = serializableMap14.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap33 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap34.mapIterator();
        serializableMap33.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap34);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry40 = serializableMap33.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry41 = serializableMap14.nextEntry(strTrieEntry40);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry42 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry43 = serializableMap8.nextEntryInSubtree(strTrieEntry40, strTrieEntry42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry44 = serializableMap0.followRight(strTrieEntry42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strTrieEntry7);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(set24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(serializable28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(serializable32);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strTrieEntry40);
        org.junit.Assert.assertNull(strTrieEntry41);
        org.junit.Assert.assertNull(strTrieEntry43);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("hi!", (int) (short) 1, 10);
        int int7 = stringKeyAnalyzer0.compare("", "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = stringKeyAnalyzer0.isPrefix("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", (int) (short) -1, 0, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot determine prefix outside of Character boundaries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-94) + "'", int7 == (-94));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        java.util.Set set25 = serializableMap22.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap27 = serializableMap22.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap22.mapIterator();
        int int29 = serializableMap22.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap32 = serializableMap22.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable33 = serializableMap10.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        serializableMap10.clear();
        serializableMap10.clear();
        int int36 = serializableMap10.modCount;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(serializable33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        java.util.Set<java.lang.String> strSet3 = serializableMap0.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet4 = serializableMap0.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet5 = serializableMap0.entrySet();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        int int8 = serializableMap6.modCount;
        serializableMap6.clear();
        java.lang.Object obj10 = null;
        boolean boolean11 = serializableMap6.containsKey(obj10);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap13.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap13.mapIterator();
        serializableMap12.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap13);
        java.lang.String str18 = serializableMap12.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        java.util.Set set22 = serializableMap19.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap24 = serializableMap19.tailMap("hi!");
        java.io.Serializable serializable26 = serializableMap19.selectValue("");
        boolean boolean29 = serializableMap19.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable30 = serializableMap12.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap32.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap32.mapIterator();
        serializableMap31.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap32);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry38 = serializableMap31.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry39 = serializableMap12.nextEntry(strTrieEntry38);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry40 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry41 = serializableMap6.nextEntryInSubtree(strTrieEntry38, strTrieEntry40);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable42 = serializableMap0.removeEntry(strTrieEntry40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strEntrySet4);
        org.junit.Assert.assertNotNull(strEntrySet5);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(set22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(serializable26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(serializable30);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(strTrieEntry38);
        org.junit.Assert.assertNull(strTrieEntry39);
        org.junit.Assert.assertNull(strTrieEntry41);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = strItor6.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        boolean boolean3 = strItor2.hasNext();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap4 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap5.mapIterator();
        serializableMap4.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap5);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry10 = serializableMap5.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap12.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap12.mapIterator();
        serializableMap11.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap12);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry18 = serializableMap11.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry19 = serializableMap5.nextEntry(strTrieEntry18);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry21 = serializableMap5.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        int int23 = serializableMap5.lengthInBits("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable24 = strItor2.setValue((java.io.Serializable) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNull(strTrieEntry10);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strTrieEntry18);
        org.junit.Assert.assertNull(strTrieEntry19);
        org.junit.Assert.assertNull(strTrieEntry21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1456 + "'", int23 == 1456);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.Collection<java.io.Serializable> serializableCollection5 = serializableMap0.values();
        java.lang.String str7 = serializableMap0.previousKey("hi!");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet8 = serializableMap0.entrySet();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        java.lang.String str12 = serializableMap9.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap14.mapIterator();
        int int16 = serializableMap14.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        int int19 = serializableMap17.modCount;
        serializableMap17.clear();
        org.apache.commons.collections4.trie.KeyAnalyzer<? super java.lang.String> wildcardKeyAnalyzer21 = serializableMap17.getKeyAnalyzer();
        boolean boolean22 = serializableMap9.replace("hi!", (java.io.Serializable) serializableMap14, (java.io.Serializable) serializableMap17);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable23 = serializableMap0.remove((java.lang.Object) boolean22);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(serializableCollection5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strEntrySet8);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardKeyAnalyzer21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        java.util.Collection collection22 = serializableMap10.values();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(collection22);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        java.util.Set<java.lang.String> strSet7 = serializableMap0.keySet();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        serializableMap8.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap9);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap9.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap16 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap16.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap16.mapIterator();
        serializableMap15.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap16);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry22 = serializableMap15.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry23 = serializableMap9.nextEntry(strTrieEntry22);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry24 = serializableMap0.previousEntry(strTrieEntry22);
        serializableMap0.clear();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNull(strTrieEntry14);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(strTrieEntry22);
        org.junit.Assert.assertNull(strTrieEntry23);
        org.junit.Assert.assertNull(strTrieEntry24);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap9 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry15 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap9, set13, (int) ' ');
        java.lang.String str16 = strMapTrieEntry15.toString();
        strMapTrieEntry15.bitIndex = 0;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap19 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        java.util.Set set23 = serializableMap20.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry25 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap19, set23, (int) ' ');
        java.lang.String str26 = strMapTrieEntry25.toString();
        strMapTrieEntry25.bitIndex = 0;
        java.lang.String str29 = strMapTrieEntry25.toString();
        strMapTrieEntry15.predecessor = strMapTrieEntry25;
        strMapTrieEntry6.predecessor = strMapTrieEntry15;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str16, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(set23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str26, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])" + "'", str29, "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.io.Serializable serializable4 = serializableMap0.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        int int6 = serializableMap0.lengthInBits("");
        serializableMap0.clear();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNull(serializable4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.io.Serializable serializable4 = serializableMap0.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap5.mapIterator();
        java.util.Set set8 = serializableMap5.keySet();
        boolean boolean10 = serializableMap5.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap5.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap13.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap13.mapIterator();
        serializableMap12.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap13);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry18 = serializableMap13.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        serializableMap19.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap20);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry26 = serializableMap19.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap13.nextEntry(strTrieEntry26);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap28 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap29 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap29.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap29.mapIterator();
        serializableMap28.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap29);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry34 = serializableMap29.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap36.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap36.mapIterator();
        serializableMap35.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap36);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry42 = serializableMap35.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry43 = serializableMap29.nextEntry(strTrieEntry42);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap44 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap45 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor46 = serializableMap45.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap45.mapIterator();
        serializableMap44.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap45);
        java.lang.String str50 = serializableMap44.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap51 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor52 = serializableMap51.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor53 = serializableMap51.mapIterator();
        java.util.Set set54 = serializableMap51.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap56 = serializableMap51.tailMap("hi!");
        java.io.Serializable serializable58 = serializableMap51.selectValue("");
        boolean boolean61 = serializableMap51.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable62 = serializableMap44.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap63 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap64 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor65 = serializableMap64.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor66 = serializableMap64.mapIterator();
        serializableMap63.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap64);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry70 = serializableMap63.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry71 = serializableMap44.nextEntry(strTrieEntry70);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry72 = serializableMap5.nextEntryImpl(strTrieEntry26, strTrieEntry43, strTrieEntry70);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry73 = serializableMap0.followRight(strTrieEntry70);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap75 = serializableMap0.headMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.Set set76 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry78 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap75, set76, (int) (short) 1);
        java.lang.String str79 = strMapTrieEntry78.toString();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry80 = strMapTrieEntry78.right;
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNull(serializable4);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(set8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNull(strTrieEntry18);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strTrieEntry26);
        org.junit.Assert.assertNull(strTrieEntry27);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNull(strTrieEntry34);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strTrieEntry42);
        org.junit.Assert.assertNull(strTrieEntry43);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertNotNull(set54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNull(serializable58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(serializable62);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertNotNull(strTrieEntry70);
        org.junit.Assert.assertNull(strTrieEntry71);
        org.junit.Assert.assertNull(strTrieEntry72);
        org.junit.Assert.assertNull(strTrieEntry73);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])" + "'", str79, "Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])");
        org.junit.Assert.assertNull(strMapTrieEntry80);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        boolean boolean1 = org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey(2);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap2 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap3 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor4 = serializableMap3.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap3.mapIterator();
        serializableMap2.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap3);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable7 = strItor1.setValue((java.io.Serializable) serializableMap3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(strItor5);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("hi!", (int) (short) 1, 10);
        boolean boolean8 = stringKeyAnalyzer0.isBitSet("", (-1), (-3));
        int int9 = stringKeyAnalyzer0.bitsPerElement();
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap4 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap4.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection6 = serializableMap4.values();
        int int7 = serializableMap4.modCount;
        boolean boolean8 = serializableMap4.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap14 = serializableMap9.tailMap("hi!");
        java.io.Serializable serializable16 = serializableMap9.selectValue("");
        boolean boolean17 = serializableMap9.isEmpty();
        serializableMap9.clear();
        boolean boolean19 = org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare((java.lang.Object) boolean8, (java.lang.Object) serializableMap9);
        java.io.Serializable serializable20 = serializableMap0.put("", (java.io.Serializable) boolean8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = serializableMap0.lastKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(serializableCollection6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(serializable16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(serializable20);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("hi!", (int) (short) 1, 10);
        int int6 = stringKeyAnalyzer0.lengthInBits("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = stringKeyAnalyzer0.isPrefix("", 10, 48, "Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot determine prefix outside of Character boundaries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1456 + "'", int6 == 1456);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        boolean boolean22 = strMapTrieEntry6.isInternalNode();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap24.mapIterator();
        serializableMap23.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap24);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry30 = serializableMap23.getNearestEntryForKey("", (int) ' ');
        java.lang.String str32 = serializableMap23.previousKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap33 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap33.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap33.mapIterator();
        java.util.Set set36 = serializableMap33.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap38 = serializableMap33.tailMap("hi!");
        serializableMap23.putAll((java.util.Map<java.lang.String, java.io.Serializable>) strMap38);
        java.util.Set set40 = null;
        java.util.Set set41 = strMapTrieEntry6.setKeyValue(strMap38, set40);
        boolean boolean42 = strMapTrieEntry6.isExternalNode();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strTrieEntry30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(set36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(set41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.apache.commons.collections4.trie.PatriciaTrie<java.lang.reflect.AnnotatedElement> annotatedElementMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.lang.reflect.AnnotatedElement>();
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasNext();
        boolean boolean8 = strItor6.hasPrevious();
        boolean boolean9 = strItor6.hasNext();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry5 = serializableMap0.ceilingEntry("");
        java.util.Set set6 = serializableMap0.entrySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry14 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap8, set12, (int) ' ');
        java.lang.String str15 = strMapTrieEntry14.toString();
        strMapTrieEntry14.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        boolean boolean23 = serializableMap18.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap18.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap25.values();
        java.util.Set<java.lang.String> strSet28 = serializableMap25.keySet();
        java.util.Set set29 = strMapTrieEntry14.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap18, (java.util.Set) strSet28);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry30 = strMapTrieEntry14.parent;
        java.io.Serializable serializable31 = serializableMap0.put("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", (java.io.Serializable) strMapTrieEntry30);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap33 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap33.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap33.mapIterator();
        java.util.Set set36 = serializableMap33.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap38 = serializableMap33.tailMap("hi!");
        java.io.Serializable serializable40 = serializableMap33.selectValue("");
        boolean boolean41 = serializableMap33.isEmpty();
        serializableMap33.clear();
        java.lang.String str44 = serializableMap33.nextKey("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap45 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor46 = serializableMap45.mapIterator();
        int int47 = serializableMap45.modCount;
        serializableMap33.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap45);
        java.util.Collection<java.io.Serializable> serializableCollection49 = serializableMap45.values();
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry51 = serializableMap45.select("Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])");
        java.io.Serializable serializable52 = serializableMap0.putIfAbsent("", (java.io.Serializable) "Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strTrieEntry5);
        org.junit.Assert.assertNotNull(set6);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str15, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(set29);
        org.junit.Assert.assertNull(strMapTrieEntry30);
        org.junit.Assert.assertNull(serializable31);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(set36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNull(serializable40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(serializableCollection49);
        org.junit.Assert.assertNull(strEntry51);
        org.junit.Assert.assertNull(serializable52);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.Collection<java.io.Serializable> serializableCollection5 = serializableMap0.values();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry7 = serializableMap0.floorEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        boolean boolean11 = serializableMap0.isBitSet("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", 0, 0);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(serializableCollection5);
        org.junit.Assert.assertNull(strTrieEntry7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.Collection<java.io.Serializable> serializableCollection5 = serializableMap0.values();
        java.lang.String str7 = serializableMap0.previousKey("hi!");
        java.lang.Object obj8 = null;
        java.io.Serializable serializable9 = serializableMap0.remove(obj8);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        java.util.Set set14 = serializableMap11.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry16 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap10, set14, (int) ' ');
        java.lang.String str17 = strMapTrieEntry16.toString();
        strMapTrieEntry16.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        java.util.Set set23 = serializableMap20.keySet();
        boolean boolean25 = serializableMap20.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap20.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection29 = serializableMap27.values();
        java.util.Set<java.lang.String> strSet30 = serializableMap27.keySet();
        java.util.Set set31 = strMapTrieEntry16.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap20, (java.util.Set) strSet30);
        boolean boolean32 = strMapTrieEntry16.isInternalNode();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap33 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap34.mapIterator();
        serializableMap33.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap34);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry40 = serializableMap33.getNearestEntryForKey("", (int) ' ');
        java.lang.String str42 = serializableMap33.previousKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap43 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap43.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor45 = serializableMap43.mapIterator();
        java.util.Set set46 = serializableMap43.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap48 = serializableMap43.tailMap("hi!");
        serializableMap33.putAll((java.util.Map<java.lang.String, java.io.Serializable>) strMap48);
        java.util.Set set50 = null;
        java.util.Set set51 = strMapTrieEntry16.setKeyValue(strMap48, set50);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap52 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor53 = serializableMap52.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = serializableMap0.remove((java.lang.Object) strMapTrieEntry16, (java.lang.Object) strItor53);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(serializableCollection5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(serializable9);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(set14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str17, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(set23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(serializableCollection29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(set31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strTrieEntry40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertNotNull(set46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(set51);
        org.junit.Assert.assertNotNull(strItor53);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        int int3 = serializableMap0.modCount;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry5 = serializableMap0.lowerEntry("Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strTrieEntry5);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        boolean boolean1 = org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey((-2));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap0.prefixMap("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap9.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap16 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap17.mapIterator();
        serializableMap16.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap17);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry22 = serializableMap17.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap24.mapIterator();
        serializableMap23.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap24);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry30 = serializableMap23.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry31 = serializableMap17.nextEntry(strTrieEntry30);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap33 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap33.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap33.mapIterator();
        serializableMap32.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap33);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry38 = serializableMap33.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap39 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap40 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap40.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap40.mapIterator();
        serializableMap39.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap40);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry46 = serializableMap39.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry47 = serializableMap33.nextEntry(strTrieEntry46);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap48 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap49 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor50 = serializableMap49.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor51 = serializableMap49.mapIterator();
        serializableMap48.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap49);
        java.lang.String str54 = serializableMap48.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap55 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor56 = serializableMap55.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor57 = serializableMap55.mapIterator();
        java.util.Set set58 = serializableMap55.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap60 = serializableMap55.tailMap("hi!");
        java.io.Serializable serializable62 = serializableMap55.selectValue("");
        boolean boolean65 = serializableMap55.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable66 = serializableMap48.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap67 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap68 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor69 = serializableMap68.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor70 = serializableMap68.mapIterator();
        serializableMap67.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap68);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry74 = serializableMap67.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry75 = serializableMap48.nextEntry(strTrieEntry74);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry76 = serializableMap9.nextEntryImpl(strTrieEntry30, strTrieEntry47, strTrieEntry74);
        java.lang.String str77 = serializableMap0.castKey((java.lang.Object) strTrieEntry76);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = serializableMap0.lastKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNull(strTrieEntry22);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strTrieEntry30);
        org.junit.Assert.assertNull(strTrieEntry31);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNull(strTrieEntry38);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strTrieEntry46);
        org.junit.Assert.assertNull(strTrieEntry47);
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(set58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNull(serializable62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(serializable66);
        org.junit.Assert.assertNotNull(strItor69);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertNotNull(strTrieEntry74);
        org.junit.Assert.assertNull(strTrieEntry75);
        org.junit.Assert.assertNull(strTrieEntry76);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        int int7 = serializableMap0.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = serializableMap0.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Comparator<? super java.lang.String> wildcardComparator11 = strMap10.comparator();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(wildcardComparator11);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.lang.String str3 = serializableMap0.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        int int7 = serializableMap5.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        int int10 = serializableMap8.modCount;
        serializableMap8.clear();
        org.apache.commons.collections4.trie.KeyAnalyzer<? super java.lang.String> wildcardKeyAnalyzer12 = serializableMap8.getKeyAnalyzer();
        boolean boolean13 = serializableMap0.replace("hi!", (java.io.Serializable) serializableMap5, (java.io.Serializable) serializableMap8);
        java.util.Set<java.lang.String> strSet14 = serializableMap0.keySet();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardKeyAnalyzer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        boolean boolean1 = org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex((int) 'a');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        java.lang.String str12 = serializableMap9.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap13 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap14.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap14.mapIterator();
        java.util.Set set17 = serializableMap14.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry19 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap13, set17, (int) ' ');
        java.lang.String str20 = strMapTrieEntry19.toString();
        strMapTrieEntry19.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap23.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap23.mapIterator();
        java.util.Set set26 = serializableMap23.keySet();
        boolean boolean28 = serializableMap23.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap23.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap30 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap30.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection32 = serializableMap30.values();
        java.util.Set<java.lang.String> strSet33 = serializableMap30.keySet();
        java.util.Set set34 = strMapTrieEntry19.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap23, (java.util.Set) strSet33);
        boolean boolean35 = serializableMap9.containsValue((java.lang.Object) strSet33);
        strMapTrieEntry6.value = strSet33;
        int int37 = strMapTrieEntry6.bitIndex;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap38 = strMapTrieEntry6.key;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(set17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str20, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(set26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(serializableCollection32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(set34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 32 + "'", int37 == 32);
        org.junit.Assert.assertNull(strMap38);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasNext();
        boolean boolean8 = strItor6.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = strItor6.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.io.Serializable serializable4 = serializableMap0.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap5.mapIterator();
        java.util.Set set8 = serializableMap5.keySet();
        boolean boolean10 = serializableMap5.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap5.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap13.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap13.mapIterator();
        serializableMap12.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap13);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry18 = serializableMap13.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        serializableMap19.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap20);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry26 = serializableMap19.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap13.nextEntry(strTrieEntry26);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap28 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap29 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap29.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap29.mapIterator();
        serializableMap28.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap29);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry34 = serializableMap29.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap36.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap36.mapIterator();
        serializableMap35.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap36);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry42 = serializableMap35.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry43 = serializableMap29.nextEntry(strTrieEntry42);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap44 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap45 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor46 = serializableMap45.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap45.mapIterator();
        serializableMap44.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap45);
        java.lang.String str50 = serializableMap44.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap51 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor52 = serializableMap51.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor53 = serializableMap51.mapIterator();
        java.util.Set set54 = serializableMap51.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap56 = serializableMap51.tailMap("hi!");
        java.io.Serializable serializable58 = serializableMap51.selectValue("");
        boolean boolean61 = serializableMap51.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable62 = serializableMap44.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap63 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap64 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor65 = serializableMap64.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor66 = serializableMap64.mapIterator();
        serializableMap63.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap64);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry70 = serializableMap63.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry71 = serializableMap44.nextEntry(strTrieEntry70);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry72 = serializableMap5.nextEntryImpl(strTrieEntry26, strTrieEntry43, strTrieEntry70);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry73 = serializableMap0.followRight(strTrieEntry70);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap75 = serializableMap0.headMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap76 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor77 = serializableMap76.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor78 = serializableMap76.mapIterator();
        int int79 = serializableMap76.modCount;
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet80 = serializableMap76.entrySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap81 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap82 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor83 = serializableMap82.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor84 = serializableMap82.mapIterator();
        java.util.Set set85 = serializableMap82.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry87 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap81, set85, (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry89 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap76, set85, (-3));
        boolean boolean90 = serializableMap0.equals((java.lang.Object) (-3));
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap91 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor92 = serializableMap91.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor93 = serializableMap91.mapIterator();
        java.util.Set set94 = serializableMap91.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap96 = serializableMap91.tailMap("hi!");
        java.util.Set<java.lang.String> strSet97 = serializableMap91.keySet();
        java.util.Set<java.lang.String> strSet98 = serializableMap91.keySet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry99 = serializableMap0.getEntry((java.lang.Object) strSet98);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNull(serializable4);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(set8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNull(strTrieEntry18);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strTrieEntry26);
        org.junit.Assert.assertNull(strTrieEntry27);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNull(strTrieEntry34);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strTrieEntry42);
        org.junit.Assert.assertNull(strTrieEntry43);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertNotNull(set54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNull(serializable58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(serializable62);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertNotNull(strTrieEntry70);
        org.junit.Assert.assertNull(strTrieEntry71);
        org.junit.Assert.assertNull(strTrieEntry72);
        org.junit.Assert.assertNull(strTrieEntry73);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(strItor77);
        org.junit.Assert.assertNotNull(strItor78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(strEntrySet80);
        org.junit.Assert.assertNotNull(strItor83);
        org.junit.Assert.assertNotNull(strItor84);
        org.junit.Assert.assertNotNull(set85);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strItor92);
        org.junit.Assert.assertNotNull(strItor93);
        org.junit.Assert.assertNotNull(set94);
        org.junit.Assert.assertNotNull(strMap96);
        org.junit.Assert.assertNotNull(strSet97);
        org.junit.Assert.assertNotNull(strSet98);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry5 = serializableMap0.ceilingEntry("");
        java.util.Set set6 = serializableMap0.entrySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry14 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap8, set12, (int) ' ');
        java.lang.String str15 = strMapTrieEntry14.toString();
        strMapTrieEntry14.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        boolean boolean23 = serializableMap18.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap18.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap25.values();
        java.util.Set<java.lang.String> strSet28 = serializableMap25.keySet();
        java.util.Set set29 = strMapTrieEntry14.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap18, (java.util.Set) strSet28);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry30 = strMapTrieEntry14.parent;
        java.io.Serializable serializable31 = serializableMap0.put("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", (java.io.Serializable) strMapTrieEntry30);
        serializableMap0.incrementSize();
        java.lang.String str33 = serializableMap0.firstKey();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strTrieEntry5);
        org.junit.Assert.assertNotNull(set6);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str15, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(set29);
        org.junit.Assert.assertNull(strMapTrieEntry30);
        org.junit.Assert.assertNull(serializable31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str33, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        serializableMap0.clear();
        java.lang.String str11 = serializableMap0.nextKey("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap12.mapIterator();
        int int14 = serializableMap12.modCount;
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap12);
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry17 = serializableMap0.select("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        java.util.Set set22 = serializableMap19.keySet();
        serializableMap19.clear();
        org.apache.commons.collections4.trie.KeyAnalyzer<? super java.lang.String> wildcardKeyAnalyzer24 = serializableMap19.getKeyAnalyzer();
        java.lang.Object obj25 = serializableMap0.put("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", (java.io.Serializable) serializableMap19);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(strEntry17);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(set22);
        org.junit.Assert.assertNotNull(wildcardKeyAnalyzer24);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap0.prefixMap("hi!");
        java.util.Set set9 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry11 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap8, set9, (int) (short) 100);
        java.util.Set set12 = strMapTrieEntry11.value;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry13 = strMapTrieEntry11.predecessor;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap14 = strMapTrieEntry11.getKey();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(set12);
        org.junit.Assert.assertNotNull(strMapTrieEntry13);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        serializableMap18.clear();
        java.util.Set<java.lang.String> strSet20 = serializableMap18.keySet();
        java.lang.String str22 = serializableMap18.previousKey("Trie[0]={\n}\n");
        boolean boolean23 = serializableMap1.equals((java.lang.Object) "Trie[0]={\n}\n");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        java.util.Set set25 = serializableMap22.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap27 = serializableMap22.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap22.mapIterator();
        int int29 = serializableMap22.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap32 = serializableMap22.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable33 = serializableMap10.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        serializableMap10.clear();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap35.mapIterator();
        int int37 = serializableMap35.modCount;
        serializableMap35.clear();
        org.apache.commons.collections4.trie.KeyAnalyzer<? super java.lang.String> wildcardKeyAnalyzer39 = serializableMap35.getKeyAnalyzer();
        java.util.Set<java.lang.String> strSet40 = serializableMap35.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry42 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet40, 100);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(serializable33);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(wildcardKeyAnalyzer39);
        org.junit.Assert.assertNotNull(strSet40);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        serializableMap0.clear();
        java.lang.String str11 = serializableMap0.nextKey("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap12.mapIterator();
        int int14 = serializableMap12.modCount;
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap12);
        java.util.Collection<java.io.Serializable> serializableCollection16 = serializableMap12.values();
        java.util.Comparator<? super java.lang.String> wildcardComparator17 = serializableMap12.comparator();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap19 = serializableMap12.prefixMap("");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(serializableCollection16);
        org.junit.Assert.assertNotNull(wildcardComparator17);
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasNext();
        boolean boolean8 = strItor6.hasPrevious();
        boolean boolean9 = strItor6.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = strItor6.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.Collection<java.io.Serializable> serializableCollection5 = serializableMap0.values();
        boolean boolean9 = serializableMap0.isBitSet("hi!", (-1), (int) (short) 100);
        java.util.Set set10 = serializableMap0.keySet();
        boolean boolean13 = serializableMap0.compareKeys("hi!", "Trie[0]={\n}\n");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(serializableCollection5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(set10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator22 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap23.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap23.mapIterator();
        java.io.Serializable serializable27 = serializableMap23.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap28 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap28.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap28.mapIterator();
        java.util.Set set31 = serializableMap28.keySet();
        boolean boolean33 = serializableMap28.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap28.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap36.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap36.mapIterator();
        serializableMap35.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap36);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry41 = serializableMap36.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap42 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap43 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap43.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor45 = serializableMap43.mapIterator();
        serializableMap42.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap43);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry49 = serializableMap42.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry50 = serializableMap36.nextEntry(strTrieEntry49);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap51 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap52 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor53 = serializableMap52.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor54 = serializableMap52.mapIterator();
        serializableMap51.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap52);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry57 = serializableMap52.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap58 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap59 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor60 = serializableMap59.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor61 = serializableMap59.mapIterator();
        serializableMap58.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap59);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry65 = serializableMap58.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry66 = serializableMap52.nextEntry(strTrieEntry65);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap67 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap68 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor69 = serializableMap68.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor70 = serializableMap68.mapIterator();
        serializableMap67.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap68);
        java.lang.String str73 = serializableMap67.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap74 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor75 = serializableMap74.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor76 = serializableMap74.mapIterator();
        java.util.Set set77 = serializableMap74.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap79 = serializableMap74.tailMap("hi!");
        java.io.Serializable serializable81 = serializableMap74.selectValue("");
        boolean boolean84 = serializableMap74.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable85 = serializableMap67.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap86 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap87 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor88 = serializableMap87.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor89 = serializableMap87.mapIterator();
        serializableMap86.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap87);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry93 = serializableMap86.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry94 = serializableMap67.nextEntry(strTrieEntry93);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry95 = serializableMap28.nextEntryImpl(strTrieEntry49, strTrieEntry66, strTrieEntry93);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry96 = serializableMap23.followRight(strTrieEntry93);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet97 = serializableMap23.entrySet();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = serializableMap10.containsKey((java.lang.Object) serializableMap23);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(orderedMapIterator22);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNull(serializable27);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(set31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNull(strTrieEntry41);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertNotNull(strTrieEntry49);
        org.junit.Assert.assertNull(strTrieEntry50);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertNull(strTrieEntry57);
        org.junit.Assert.assertNotNull(strItor60);
        org.junit.Assert.assertNotNull(strItor61);
        org.junit.Assert.assertNotNull(strTrieEntry65);
        org.junit.Assert.assertNull(strTrieEntry66);
        org.junit.Assert.assertNotNull(strItor69);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strItor75);
        org.junit.Assert.assertNotNull(strItor76);
        org.junit.Assert.assertNotNull(set77);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNull(serializable81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(serializable85);
        org.junit.Assert.assertNotNull(strItor88);
        org.junit.Assert.assertNotNull(strItor89);
        org.junit.Assert.assertNotNull(strTrieEntry93);
        org.junit.Assert.assertNull(strTrieEntry94);
        org.junit.Assert.assertNull(strTrieEntry95);
        org.junit.Assert.assertNull(strTrieEntry96);
        org.junit.Assert.assertNotNull(strEntrySet97);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        int int8 = serializableMap6.modCount;
        serializableMap6.clear();
        java.io.Serializable serializable10 = serializableMap0.replace("", (java.io.Serializable) serializableMap6);
        java.lang.String str12 = serializableMap0.selectKey("");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(serializable10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        int int8 = serializableMap6.modCount;
        serializableMap6.clear();
        java.io.Serializable serializable10 = serializableMap0.replace("", (java.io.Serializable) serializableMap6);
        int int11 = serializableMap0.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap13.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap13.mapIterator();
        serializableMap12.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap13);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        int int20 = serializableMap18.modCount;
        serializableMap18.clear();
        java.io.Serializable serializable22 = serializableMap12.replace("", (java.io.Serializable) serializableMap18);
        java.io.Serializable serializable23 = serializableMap0.get((java.lang.Object) serializable22);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap25 = serializableMap0.tailMap("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(serializable10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(serializable22);
        org.junit.Assert.assertNull(serializable23);
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        serializableMap0.clear();
        java.lang.String str6 = serializableMap0.selectKey("");
        java.lang.String str8 = serializableMap0.nextKey("");
        java.util.Comparator<? super java.lang.String> wildcardComparator9 = serializableMap0.comparator();
        serializableMap0.clear();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(wildcardComparator9);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap0.prefixMap("hi!");
        java.util.Set set9 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry11 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap8, set9, (int) (short) 100);
        java.util.Set set12 = strMapTrieEntry11.value;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry13 = strMapTrieEntry11.predecessor;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap14 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap15.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap15.mapIterator();
        java.util.Set set18 = serializableMap15.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry20 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap14, set18, (int) ' ');
        java.lang.String str21 = strMapTrieEntry20.toString();
        strMapTrieEntry20.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap24.mapIterator();
        java.util.Set set27 = serializableMap24.keySet();
        boolean boolean29 = serializableMap24.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap24.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection33 = serializableMap31.values();
        java.util.Set<java.lang.String> strSet34 = serializableMap31.keySet();
        java.util.Set set35 = strMapTrieEntry20.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap24, (java.util.Set) strSet34);
        boolean boolean36 = strMapTrieEntry20.isInternalNode();
        strMapTrieEntry13.predecessor = strMapTrieEntry20;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap38 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor39 = serializableMap38.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor40 = serializableMap38.mapIterator();
        java.util.Set set41 = serializableMap38.keySet();
        boolean boolean42 = serializableMap38.isEmpty();
        java.util.Set set43 = null;
        java.util.Set set44 = strMapTrieEntry20.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap38, set43);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry46 = serializableMap38.lowerEntry("");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(set12);
        org.junit.Assert.assertNotNull(strMapTrieEntry13);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(set18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str21, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(set27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(serializableCollection33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(set35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(set41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(set44);
        org.junit.Assert.assertNull(strTrieEntry46);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        java.io.Serializable serializable24 = serializableMap10.put("hi!", (java.io.Serializable) "");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap25 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap26 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor27 = serializableMap26.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap26.mapIterator();
        java.util.Set set29 = serializableMap26.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry31 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap25, set29, (int) ' ');
        boolean boolean32 = strMapTrieEntry31.isEmpty();
        boolean boolean33 = serializableMap10.equals((java.lang.Object) strMapTrieEntry31);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNull(serializable24);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(set29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        java.util.Set<java.lang.String> strSet16 = serializableMap1.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry23 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap17, set21, (int) ' ');
        java.lang.String str24 = strMapTrieEntry23.toString();
        strMapTrieEntry23.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        boolean boolean32 = serializableMap27.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap27.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection36 = serializableMap34.values();
        java.util.Set<java.lang.String> strSet37 = serializableMap34.keySet();
        java.util.Set set38 = strMapTrieEntry23.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap27, (java.util.Set) strSet37);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry40 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap27, (int) '4');
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap41.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap41.mapIterator();
        int int44 = serializableMap41.modCount;
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet45 = serializableMap41.entrySet();
        boolean boolean46 = serializableMap1.containsValue((java.lang.Object) strEntrySet45);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable48 = serializableMap1.get((java.lang.Object) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str24, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(serializableCollection36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(set38);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(strEntrySet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        java.util.Set<java.lang.String> strSet3 = serializableMap0.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet4 = serializableMap0.entrySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap7 = serializableMap0.subMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", "hi!");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer8 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean12 = stringKeyAnalyzer8.isBitSet("hi!", (int) (short) 1, 10);
        int int15 = stringKeyAnalyzer8.compare("", "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable16 = strMap7.remove((java.lang.Object) int15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String cannot be cast to java.lang.Integer");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strEntrySet4);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(stringKeyAnalyzer8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-94) + "'", int15 == (-94));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        serializableMap0.clear();
        org.apache.commons.collections4.trie.KeyAnalyzer<? super java.lang.String> wildcardKeyAnalyzer5 = serializableMap0.getKeyAnalyzer();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = wildcardKeyAnalyzer5.bitIndex("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])", (int) (byte) 100, 2, "hi!", (-91), (-94));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The offsets and lengths must be at Character boundaries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(wildcardKeyAnalyzer5);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap6 = serializableMap1.headMap("hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = serializableMap1.lastKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("", (int) (short) 1, (-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = stringKeyAnalyzer0.isBitSet("Trie[0]={\n}\n", (-26), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry13 = serializableMap8.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap15.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap15.mapIterator();
        serializableMap14.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap15);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry21 = serializableMap14.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry22 = serializableMap8.nextEntry(strTrieEntry21);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap24.mapIterator();
        serializableMap23.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap24);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry29 = serializableMap24.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap30 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap31.mapIterator();
        serializableMap30.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap31);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry37 = serializableMap30.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry38 = serializableMap24.nextEntry(strTrieEntry37);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap39 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap40 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap40.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap40.mapIterator();
        serializableMap39.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap40);
        java.lang.String str45 = serializableMap39.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap46 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap46.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor48 = serializableMap46.mapIterator();
        java.util.Set set49 = serializableMap46.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap51 = serializableMap46.tailMap("hi!");
        java.io.Serializable serializable53 = serializableMap46.selectValue("");
        boolean boolean56 = serializableMap46.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable57 = serializableMap39.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap58 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap59 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor60 = serializableMap59.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor61 = serializableMap59.mapIterator();
        serializableMap58.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap59);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry65 = serializableMap58.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry66 = serializableMap39.nextEntry(strTrieEntry65);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry67 = serializableMap0.nextEntryImpl(strTrieEntry21, strTrieEntry38, strTrieEntry65);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap68 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap69 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor70 = serializableMap69.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor71 = serializableMap69.mapIterator();
        serializableMap68.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap69);
        java.util.Collection<java.io.Serializable> serializableCollection73 = serializableMap68.values();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry75 = serializableMap68.floorEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry76 = serializableMap0.getEntry((java.lang.Object) strTrieEntry75);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(strTrieEntry13);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(strTrieEntry21);
        org.junit.Assert.assertNull(strTrieEntry22);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNull(strTrieEntry29);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strTrieEntry37);
        org.junit.Assert.assertNull(strTrieEntry38);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(set49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(serializable53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(serializable57);
        org.junit.Assert.assertNotNull(strItor60);
        org.junit.Assert.assertNotNull(strItor61);
        org.junit.Assert.assertNotNull(strTrieEntry65);
        org.junit.Assert.assertNull(strTrieEntry66);
        org.junit.Assert.assertNull(strTrieEntry67);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertNotNull(strItor71);
        org.junit.Assert.assertNotNull(serializableCollection73);
        org.junit.Assert.assertNull(strTrieEntry75);
        org.junit.Assert.assertNull(strTrieEntry76);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        boolean boolean3 = strItor2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = strItor2.getKey();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.io.Serializable serializable19 = null;
        boolean boolean21 = serializableMap1.replace("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", serializable19, (java.io.Serializable) (-1.0d));
        int int22 = serializableMap1.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap23 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap24.mapIterator();
        java.util.Set set27 = serializableMap24.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry29 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap23, set27, (int) ' ');
        java.lang.String str30 = strMapTrieEntry29.toString();
        boolean boolean31 = strMapTrieEntry29.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap32.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap32.mapIterator();
        java.util.Set set35 = serializableMap32.keySet();
        boolean boolean37 = serializableMap32.containsKey((java.lang.Object) "hi!");
        java.util.Set set38 = serializableMap32.keySet();
        java.util.Set set39 = strMapTrieEntry29.setValue(set38);
        boolean boolean40 = strMapTrieEntry29.isExternalNode();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap42 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap42.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap42.mapIterator();
        serializableMap41.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap42);
        java.lang.String str47 = serializableMap41.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap48 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap48.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection50 = serializableMap48.values();
        java.util.Set<java.lang.String> strSet51 = serializableMap48.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet52 = serializableMap48.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet53 = serializableMap48.entrySet();
        java.util.Set set54 = strMapTrieEntry29.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap41, (java.util.Set) strEntrySet53);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap55 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap56 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor57 = serializableMap56.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor58 = serializableMap56.mapIterator();
        serializableMap55.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap56);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry61 = serializableMap56.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap62 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap63 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor64 = serializableMap63.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor65 = serializableMap63.mapIterator();
        serializableMap62.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap63);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry69 = serializableMap62.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry70 = serializableMap56.nextEntry(strTrieEntry69);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry72 = serializableMap56.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        boolean boolean75 = serializableMap56.compareKeys("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set<java.lang.String> strSet76 = serializableMap56.keySet();
        strMapTrieEntry29.key = serializableMap56;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj78 = serializableMap1.remove((java.lang.Object) serializableMap56);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(set27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str30, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(set35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(set38);
        org.junit.Assert.assertNotNull(set39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(serializableCollection50);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(strEntrySet52);
        org.junit.Assert.assertNotNull(strEntrySet53);
        org.junit.Assert.assertNotNull(set54);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(strItor58);
        org.junit.Assert.assertNull(strTrieEntry61);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNotNull(strTrieEntry69);
        org.junit.Assert.assertNull(strTrieEntry70);
        org.junit.Assert.assertNull(strTrieEntry72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strSet76);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        java.util.Set set15 = serializableMap9.keySet();
        java.util.Set set16 = strMapTrieEntry6.setValue(set15);
        boolean boolean17 = strMapTrieEntry6.isExternalNode();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        serializableMap18.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap19);
        java.lang.String str24 = serializableMap18.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap25.values();
        java.util.Set<java.lang.String> strSet28 = serializableMap25.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet29 = serializableMap25.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet30 = serializableMap25.entrySet();
        java.util.Set set31 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap18, (java.util.Set) strEntrySet30);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry32 = strMapTrieEntry6.left;
        boolean boolean33 = strMapTrieEntry6.isExternalNode();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(set15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strEntrySet29);
        org.junit.Assert.assertNotNull(strEntrySet30);
        org.junit.Assert.assertNotNull(set31);
        org.junit.Assert.assertNotNull(strMapTrieEntry32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        java.lang.String str9 = strMapTrieEntry6.toString();
        java.lang.String str10 = strMapTrieEntry6.toString();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str9, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str10, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        int int5 = serializableMap0.bitsPerElement();
        serializableMap0.clear();
        boolean boolean7 = serializableMap0.isEmpty();
        int int8 = serializableMap0.bitsPerElement();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        java.util.Set<java.lang.String> strSet16 = serializableMap1.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry23 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap17, set21, (int) ' ');
        java.lang.String str24 = strMapTrieEntry23.toString();
        strMapTrieEntry23.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        boolean boolean32 = serializableMap27.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap27.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection36 = serializableMap34.values();
        java.util.Set<java.lang.String> strSet37 = serializableMap34.keySet();
        java.util.Set set38 = strMapTrieEntry23.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap27, (java.util.Set) strSet37);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry40 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap27, (int) '4');
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap41.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap41.mapIterator();
        int int44 = serializableMap41.modCount;
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet45 = serializableMap41.entrySet();
        boolean boolean46 = serializableMap1.containsValue((java.lang.Object) strEntrySet45);
        java.util.Collection<java.io.Serializable> serializableCollection47 = serializableMap1.values();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str24, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(serializableCollection36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(set38);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(strEntrySet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(serializableCollection47);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap0.prefixMap("hi!");
        java.util.Set set9 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry11 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap8, set9, (int) (short) 100);
        java.util.Set set12 = strMapTrieEntry11.value;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry13 = strMapTrieEntry11.predecessor;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry14 = strMapTrieEntry11.parent;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(set12);
        org.junit.Assert.assertNotNull(strMapTrieEntry13);
        org.junit.Assert.assertNull(strMapTrieEntry14);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        java.util.Set<java.lang.String> strSet16 = serializableMap1.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry23 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap17, set21, (int) ' ');
        java.lang.String str24 = strMapTrieEntry23.toString();
        strMapTrieEntry23.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        boolean boolean32 = serializableMap27.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap27.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection36 = serializableMap34.values();
        java.util.Set<java.lang.String> strSet37 = serializableMap34.keySet();
        java.util.Set set38 = strMapTrieEntry23.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap27, (java.util.Set) strSet37);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry40 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap27, (int) '4');
        java.lang.String str42 = serializableMap1.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        int int43 = serializableMap1.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap44 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap45 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor46 = serializableMap45.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap45.mapIterator();
        serializableMap44.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap45);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry50 = serializableMap45.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap51 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap52 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor53 = serializableMap52.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor54 = serializableMap52.mapIterator();
        serializableMap51.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap52);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry58 = serializableMap51.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry59 = serializableMap45.nextEntry(strTrieEntry58);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry61 = serializableMap45.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry63 = serializableMap45.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        int int64 = serializableMap45.size();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry65 = serializableMap1.getEntry((java.lang.Object) int64);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str24, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(serializableCollection36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(set38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNull(strTrieEntry50);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertNotNull(strTrieEntry58);
        org.junit.Assert.assertNull(strTrieEntry59);
        org.junit.Assert.assertNull(strTrieEntry61);
        org.junit.Assert.assertNull(strEntry63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        serializableMap0.clear();
        java.util.Set<java.lang.String> strSet2 = serializableMap0.keySet();
        java.lang.String str4 = serializableMap0.previousKey("Trie[0]={\n}\n");
        java.util.Collection<java.io.Serializable> serializableCollection5 = serializableMap0.values();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(serializableCollection5);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        boolean boolean6 = serializableMap1.equals((java.lang.Object) (-1.0f));
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap1.headMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = serializableMap1.tailMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap12.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap12.mapIterator();
        serializableMap11.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap12);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap12.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        serializableMap18.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap19);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry25 = serializableMap18.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry26 = serializableMap12.nextEntry(strTrieEntry25);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry28 = serializableMap12.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap12.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = serializableMap1.containsKey((java.lang.Object) strItor29);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strTrieEntry25);
        org.junit.Assert.assertNull(strTrieEntry26);
        org.junit.Assert.assertNull(strTrieEntry28);
        org.junit.Assert.assertNotNull(strItor29);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.Collection<java.io.Serializable> serializableCollection5 = serializableMap0.values();
        java.lang.String str7 = serializableMap0.previousKey("hi!");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet8 = serializableMap0.entrySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry10 = serializableMap0.lowerEntry("Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap12.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap12.mapIterator();
        serializableMap11.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap12);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap12.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        serializableMap18.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap19);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry25 = serializableMap18.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry26 = serializableMap12.nextEntry(strTrieEntry25);
        java.util.Set<java.lang.String> strSet27 = serializableMap12.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap28 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap29 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap29.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap29.mapIterator();
        java.util.Set set32 = serializableMap29.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry34 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap28, set32, (int) ' ');
        java.lang.String str35 = strMapTrieEntry34.toString();
        strMapTrieEntry34.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap38 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor39 = serializableMap38.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor40 = serializableMap38.mapIterator();
        java.util.Set set41 = serializableMap38.keySet();
        boolean boolean43 = serializableMap38.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap38.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap45 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor46 = serializableMap45.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection47 = serializableMap45.values();
        java.util.Set<java.lang.String> strSet48 = serializableMap45.keySet();
        java.util.Set set49 = strMapTrieEntry34.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap38, (java.util.Set) strSet48);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry51 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap12, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap38, (int) '4');
        java.util.Set set52 = serializableMap38.keySet();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = serializableMap0.castKey((java.lang.Object) serializableMap38);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Cannot cast org.apache.commons.collections4.trie.PatriciaTrie to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(serializableCollection5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strEntrySet8);
        org.junit.Assert.assertNull(strTrieEntry10);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strTrieEntry25);
        org.junit.Assert.assertNull(strTrieEntry26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(set32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str35, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(set41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertNotNull(serializableCollection47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(set49);
        org.junit.Assert.assertNotNull(set52);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.io.Serializable serializable19 = null;
        boolean boolean21 = serializableMap1.replace("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", serializable19, (java.io.Serializable) (-1.0d));
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap23.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap23.mapIterator();
        serializableMap22.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap23);
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap22.values();
        java.lang.String str29 = serializableMap22.previousKey("hi!");
        boolean boolean30 = serializableMap1.equals((java.lang.Object) serializableMap22);
        java.util.Collection<java.io.Serializable> serializableCollection31 = serializableMap1.values();
        java.util.Set<java.lang.String> strSet32 = serializableMap1.keySet();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(serializableCollection31);
        org.junit.Assert.assertNotNull(strSet32);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap4 = serializableMap0.prefixMap("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap5.mapIterator();
        java.util.Set set8 = serializableMap5.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = serializableMap5.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap5.mapIterator();
        int int12 = serializableMap5.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap15 = serializableMap5.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = serializableMap5.prefixMap("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.io.Serializable serializable22 = serializableMap18.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap23.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap23.mapIterator();
        java.util.Set set26 = serializableMap23.keySet();
        boolean boolean28 = serializableMap23.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap23.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap30 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap31.mapIterator();
        serializableMap30.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap31);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry36 = serializableMap31.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap37 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap38 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor39 = serializableMap38.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor40 = serializableMap38.mapIterator();
        serializableMap37.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap38);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry44 = serializableMap37.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry45 = serializableMap31.nextEntry(strTrieEntry44);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap46 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap47 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor48 = serializableMap47.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap47.mapIterator();
        serializableMap46.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap47);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry52 = serializableMap47.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap53 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap54 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor55 = serializableMap54.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor56 = serializableMap54.mapIterator();
        serializableMap53.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap54);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry60 = serializableMap53.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry61 = serializableMap47.nextEntry(strTrieEntry60);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap62 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap63 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor64 = serializableMap63.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor65 = serializableMap63.mapIterator();
        serializableMap62.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap63);
        java.lang.String str68 = serializableMap62.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap69 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor70 = serializableMap69.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor71 = serializableMap69.mapIterator();
        java.util.Set set72 = serializableMap69.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap74 = serializableMap69.tailMap("hi!");
        java.io.Serializable serializable76 = serializableMap69.selectValue("");
        boolean boolean79 = serializableMap69.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable80 = serializableMap62.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap81 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap82 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor83 = serializableMap82.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor84 = serializableMap82.mapIterator();
        serializableMap81.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap82);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry88 = serializableMap81.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry89 = serializableMap62.nextEntry(strTrieEntry88);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry90 = serializableMap23.nextEntryImpl(strTrieEntry44, strTrieEntry61, strTrieEntry88);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry91 = serializableMap18.followRight(strTrieEntry88);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry92 = serializableMap5.previousEntry(strTrieEntry88);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry93 = serializableMap0.followLeft(strTrieEntry92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(set8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNull(serializable22);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(set26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNull(strTrieEntry36);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(strTrieEntry44);
        org.junit.Assert.assertNull(strTrieEntry45);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNull(strTrieEntry52);
        org.junit.Assert.assertNotNull(strItor55);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(strTrieEntry60);
        org.junit.Assert.assertNull(strTrieEntry61);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertNotNull(strItor71);
        org.junit.Assert.assertNotNull(set72);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNull(serializable76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(serializable80);
        org.junit.Assert.assertNotNull(strItor83);
        org.junit.Assert.assertNotNull(strItor84);
        org.junit.Assert.assertNotNull(strTrieEntry88);
        org.junit.Assert.assertNull(strTrieEntry89);
        org.junit.Assert.assertNull(strTrieEntry90);
        org.junit.Assert.assertNull(strTrieEntry91);
        org.junit.Assert.assertNull(strTrieEntry92);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        serializableMap0.clear();
        java.lang.String str11 = serializableMap0.nextKey("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap12.mapIterator();
        int int14 = serializableMap12.modCount;
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap12);
        int int18 = serializableMap12.bitIndex("Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])", "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 171 + "'", int18 == 171);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        serializableMap0.clear();
        java.lang.String str11 = serializableMap0.nextKey("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap12.mapIterator();
        int int14 = serializableMap12.modCount;
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap12);
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry17 = serializableMap0.select("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = serializableMap0.lastKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(strEntry17);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry6 = serializableMap0.select("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = serializableMap0.firstKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strEntry6);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection24 = serializableMap22.values();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap26 = serializableMap22.prefixMap("hi!");
        java.util.Set<java.lang.String> strSet27 = strMap26.keySet();
        strMapTrieEntry6.value = strSet27;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(serializableCollection24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strSet27);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasNext();
        boolean boolean8 = strItor6.hasPrevious();
        boolean boolean9 = strItor6.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = strItor6.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.Collection<java.io.Serializable> serializableCollection5 = serializableMap0.values();
        java.lang.String str7 = serializableMap0.previousKey("hi!");
        java.lang.Object obj8 = null;
        java.io.Serializable serializable9 = serializableMap0.remove(obj8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry10 = serializableMap0.firstEntry();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection13 = serializableMap11.values();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap15 = serializableMap11.prefixMap("hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj16 = serializableMap0.get((java.lang.Object) serializableMap11);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(serializableCollection5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(serializable9);
        org.junit.Assert.assertNull(strTrieEntry10);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(serializableCollection13);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry14 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap8, set12, (int) ' ');
        java.lang.String str15 = strMapTrieEntry14.toString();
        strMapTrieEntry14.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        boolean boolean23 = serializableMap18.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap18.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap25.values();
        java.util.Set<java.lang.String> strSet28 = serializableMap25.keySet();
        java.util.Set set29 = strMapTrieEntry14.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap18, (java.util.Set) strSet28);
        strMapTrieEntry6.predecessor = strMapTrieEntry14;
        java.lang.String str31 = strMapTrieEntry6.toString();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str15, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(set29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=Trie[0]={\n}\n [0])" + "'", str31, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=Trie[0]={\n}\n [0])");
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable8 = strItor6.getValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        java.util.Set set25 = serializableMap22.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap27 = serializableMap22.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap22.mapIterator();
        int int29 = serializableMap22.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap32 = serializableMap22.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable33 = serializableMap10.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        serializableMap10.clear();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap36 = serializableMap10.prefixMap("hi!");
        java.lang.String str38 = serializableMap10.previousKey("Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(serializable33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap1.mapIterator();
        serializableMap1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = serializableMap1.lastKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertNotNull(strItor18);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        boolean boolean20 = serializableMap1.compareKeys("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap21.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap21.mapIterator();
        java.util.Set set24 = serializableMap21.keySet();
        boolean boolean26 = serializableMap21.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry30 = serializableMap21.subtree("hi!", 16, 0);
        java.io.Serializable serializable31 = serializableMap1.remove((java.lang.Object) strTrieEntry30);
        boolean boolean32 = serializableMap1.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap33 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap34.mapIterator();
        serializableMap33.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap34);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap39 = serializableMap34.headMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator40 = serializableMap34.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = serializableMap1.containsKey((java.lang.Object) orderedMapIterator40);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(set24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(strTrieEntry30);
        org.junit.Assert.assertNull(serializable31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(orderedMapIterator40);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        java.lang.String str3 = serializableMap0.toString();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Trie[0]={\n}\n" + "'", str3, "Trie[0]={\n}\n");
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap0.prefixMap("hi!");
        java.util.Set set9 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry11 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap8, set9, (int) (short) 100);
        java.util.Set set12 = strMapTrieEntry11.value;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry13 = strMapTrieEntry11.predecessor;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap14 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap15.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap15.mapIterator();
        java.util.Set set18 = serializableMap15.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry20 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap14, set18, (int) ' ');
        java.lang.String str21 = strMapTrieEntry20.toString();
        strMapTrieEntry20.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap24.mapIterator();
        java.util.Set set27 = serializableMap24.keySet();
        boolean boolean29 = serializableMap24.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap24.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection33 = serializableMap31.values();
        java.util.Set<java.lang.String> strSet34 = serializableMap31.keySet();
        java.util.Set set35 = strMapTrieEntry20.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap24, (java.util.Set) strSet34);
        boolean boolean36 = strMapTrieEntry20.isInternalNode();
        strMapTrieEntry13.predecessor = strMapTrieEntry20;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap38 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor39 = serializableMap38.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor40 = serializableMap38.mapIterator();
        java.util.Set set41 = serializableMap38.keySet();
        boolean boolean42 = serializableMap38.isEmpty();
        java.util.Set set43 = null;
        java.util.Set set44 = strMapTrieEntry20.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap38, set43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = serializableMap38.lastKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(set12);
        org.junit.Assert.assertNotNull(strMapTrieEntry13);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(set18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str21, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(set27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(serializableCollection33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(set35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(set41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(set44);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        java.util.Set<java.lang.String> strSet16 = serializableMap1.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry23 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap17, set21, (int) ' ');
        java.lang.String str24 = strMapTrieEntry23.toString();
        strMapTrieEntry23.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        boolean boolean32 = serializableMap27.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap27.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection36 = serializableMap34.values();
        java.util.Set<java.lang.String> strSet37 = serializableMap34.keySet();
        java.util.Set set38 = strMapTrieEntry23.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap27, (java.util.Set) strSet37);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry40 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap27, (int) '4');
        java.util.Set set41 = serializableMap27.keySet();
        int int43 = serializableMap27.lengthInBits("");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str24, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(serializableCollection36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(set38);
        org.junit.Assert.assertNotNull(set41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        int int8 = serializableMap6.modCount;
        serializableMap6.clear();
        java.io.Serializable serializable10 = serializableMap0.replace("", (java.io.Serializable) serializableMap6);
        java.lang.String str12 = serializableMap6.selectKey("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.lang.Object obj13 = null;
        java.io.Serializable serializable14 = serializableMap6.get(obj13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = serializableMap6.firstKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(serializable10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(serializable14);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        java.util.Set set15 = serializableMap9.keySet();
        java.util.Set set16 = strMapTrieEntry6.setValue(set15);
        boolean boolean17 = strMapTrieEntry6.isExternalNode();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        serializableMap18.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap19);
        java.lang.String str24 = serializableMap18.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap25.values();
        java.util.Set<java.lang.String> strSet28 = serializableMap25.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet29 = serializableMap25.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet30 = serializableMap25.entrySet();
        java.util.Set set31 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap18, (java.util.Set) strEntrySet30);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap33 = serializableMap18.tailMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(set15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strEntrySet29);
        org.junit.Assert.assertNotNull(strEntrySet30);
        org.junit.Assert.assertNotNull(set31);
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.modCount;
        serializableMap0.clear();
        java.lang.Object obj4 = null;
        boolean boolean5 = serializableMap0.containsKey(obj4);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap6.mapIterator();
        java.util.Set set9 = serializableMap6.keySet();
        boolean boolean11 = serializableMap6.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap6.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap14.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap14.mapIterator();
        serializableMap13.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry19 = serializableMap14.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap21.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap21.mapIterator();
        serializableMap20.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap21);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap20.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry28 = serializableMap14.nextEntry(strTrieEntry27);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap29 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap30 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap30.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap30.mapIterator();
        serializableMap29.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap30);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry35 = serializableMap30.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap37 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap37.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor39 = serializableMap37.mapIterator();
        serializableMap36.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap37);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry43 = serializableMap36.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry44 = serializableMap30.nextEntry(strTrieEntry43);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap45 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap46 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap46.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor48 = serializableMap46.mapIterator();
        serializableMap45.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap46);
        java.lang.String str51 = serializableMap45.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap52 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor53 = serializableMap52.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor54 = serializableMap52.mapIterator();
        java.util.Set set55 = serializableMap52.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap57 = serializableMap52.tailMap("hi!");
        java.io.Serializable serializable59 = serializableMap52.selectValue("");
        boolean boolean62 = serializableMap52.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable63 = serializableMap45.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap64 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap65 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor66 = serializableMap65.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor67 = serializableMap65.mapIterator();
        serializableMap64.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap65);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry71 = serializableMap64.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry72 = serializableMap45.nextEntry(strTrieEntry71);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry73 = serializableMap6.nextEntryImpl(strTrieEntry27, strTrieEntry44, strTrieEntry71);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry74 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry76 = serializableMap0.nextEntryImpl(strTrieEntry73, strTrieEntry74, strTrieEntry75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(set9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNull(strTrieEntry19);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strTrieEntry27);
        org.junit.Assert.assertNull(strTrieEntry28);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNull(strTrieEntry35);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(strTrieEntry43);
        org.junit.Assert.assertNull(strTrieEntry44);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertNotNull(set55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNull(serializable59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(serializable63);
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertNotNull(strItor67);
        org.junit.Assert.assertNotNull(strTrieEntry71);
        org.junit.Assert.assertNull(strTrieEntry72);
        org.junit.Assert.assertNull(strTrieEntry73);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = strItor6.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        int int7 = serializableMap0.size();
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry9 = serializableMap0.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.lang.Class<?> wildcardClass10 = serializableMap0.getClass();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        java.util.Set set25 = serializableMap22.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap27 = serializableMap22.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap22.mapIterator();
        int int29 = serializableMap22.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap32 = serializableMap22.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable33 = serializableMap10.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        serializableMap10.clear();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap36.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap36.mapIterator();
        serializableMap35.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap36);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap40 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap41.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap41.mapIterator();
        serializableMap40.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap41);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry47 = serializableMap40.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry48 = serializableMap36.followRight(strTrieEntry47);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry50 = serializableMap10.addEntry(strTrieEntry47, (-94));
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap52 = serializableMap10.tailMap("Trie[0]={\n}\n");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap54 = serializableMap10.headMap("Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        boolean boolean55 = serializableMap10.isEmpty();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(serializable33);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(strTrieEntry47);
        org.junit.Assert.assertNull(strTrieEntry48);
        org.junit.Assert.assertNotNull(strTrieEntry50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        java.util.Set set14 = serializableMap11.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry16 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap10, set14, (int) ' ');
        java.lang.String str17 = strMapTrieEntry16.toString();
        boolean boolean18 = strMapTrieEntry16.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        java.util.Set set22 = serializableMap19.keySet();
        boolean boolean24 = serializableMap19.containsKey((java.lang.Object) "hi!");
        java.util.Set set25 = serializableMap19.keySet();
        java.util.Set set26 = strMapTrieEntry16.setValue(set25);
        strMapTrieEntry6.right = strMapTrieEntry16;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap28 = strMapTrieEntry6.key;
        java.lang.String str29 = strMapTrieEntry6.toString();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(set14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str17, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(set22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(set26);
        org.junit.Assert.assertNull(strMap28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Entry(key=null [0], value=[], parent=null, left=null [0], right=null [32], predecessor=null [0])" + "'", str29, "Entry(key=null [0], value=[], parent=null, left=null [0], right=null [32], predecessor=null [0])");
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.io.Serializable serializable4 = serializableMap0.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap5.mapIterator();
        java.util.Set set8 = serializableMap5.keySet();
        boolean boolean10 = serializableMap5.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap5.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap13.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap13.mapIterator();
        serializableMap12.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap13);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry18 = serializableMap13.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        serializableMap19.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap20);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry26 = serializableMap19.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap13.nextEntry(strTrieEntry26);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap28 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap29 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap29.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap29.mapIterator();
        serializableMap28.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap29);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry34 = serializableMap29.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap36.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap36.mapIterator();
        serializableMap35.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap36);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry42 = serializableMap35.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry43 = serializableMap29.nextEntry(strTrieEntry42);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap44 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap45 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor46 = serializableMap45.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap45.mapIterator();
        serializableMap44.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap45);
        java.lang.String str50 = serializableMap44.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap51 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor52 = serializableMap51.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor53 = serializableMap51.mapIterator();
        java.util.Set set54 = serializableMap51.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap56 = serializableMap51.tailMap("hi!");
        java.io.Serializable serializable58 = serializableMap51.selectValue("");
        boolean boolean61 = serializableMap51.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable62 = serializableMap44.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap63 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap64 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor65 = serializableMap64.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor66 = serializableMap64.mapIterator();
        serializableMap63.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap64);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry70 = serializableMap63.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry71 = serializableMap44.nextEntry(strTrieEntry70);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry72 = serializableMap5.nextEntryImpl(strTrieEntry26, strTrieEntry43, strTrieEntry70);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry73 = serializableMap0.followRight(strTrieEntry70);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet74 = serializableMap0.entrySet();
        java.util.Collection<java.io.Serializable> serializableCollection75 = serializableMap0.values();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap76 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap77 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor78 = serializableMap77.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor79 = serializableMap77.mapIterator();
        serializableMap76.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap77);
        int int81 = serializableMap76.bitsPerElement();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap76);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNull(serializable4);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(set8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNull(strTrieEntry18);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strTrieEntry26);
        org.junit.Assert.assertNull(strTrieEntry27);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNull(strTrieEntry34);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strTrieEntry42);
        org.junit.Assert.assertNull(strTrieEntry43);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertNotNull(set54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNull(serializable58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(serializable62);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertNotNull(strTrieEntry70);
        org.junit.Assert.assertNull(strTrieEntry71);
        org.junit.Assert.assertNull(strTrieEntry72);
        org.junit.Assert.assertNull(strTrieEntry73);
        org.junit.Assert.assertNotNull(strEntrySet74);
        org.junit.Assert.assertNotNull(serializableCollection75);
        org.junit.Assert.assertNotNull(strItor78);
        org.junit.Assert.assertNotNull(strItor79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 16 + "'", int81 == 16);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.io.Serializable serializable19 = null;
        boolean boolean21 = serializableMap1.replace("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", serializable19, (java.io.Serializable) (-1.0d));
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap23.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap23.mapIterator();
        serializableMap22.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap23);
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap22.values();
        java.lang.String str29 = serializableMap22.previousKey("hi!");
        boolean boolean30 = serializableMap1.equals((java.lang.Object) serializableMap22);
        java.util.Collection<java.io.Serializable> serializableCollection31 = serializableMap1.values();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap32.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap32.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj35 = serializableMap1.remove((java.lang.Object) serializableMap32);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(serializableCollection31);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor34);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        java.util.Set set15 = serializableMap9.keySet();
        java.util.Set set16 = strMapTrieEntry6.setValue(set15);
        boolean boolean17 = strMapTrieEntry6.isExternalNode();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        serializableMap18.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap19);
        java.lang.String str24 = serializableMap18.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap25.values();
        java.util.Set<java.lang.String> strSet28 = serializableMap25.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet29 = serializableMap25.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet30 = serializableMap25.entrySet();
        java.util.Set set31 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap18, (java.util.Set) strEntrySet30);
        boolean boolean34 = serializableMap18.compareKeys("hi!", "");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap18.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = strItor35.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(set15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strEntrySet29);
        org.junit.Assert.assertNotNull(strEntrySet30);
        org.junit.Assert.assertNotNull(set31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strItor35);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        int int5 = serializableMap0.bitsPerElement();
        java.io.Serializable serializable8 = serializableMap0.replace("hi!", (java.io.Serializable) (-1.0d));
        int int9 = serializableMap0.size();
        java.lang.Object obj10 = null;
        java.io.Serializable serializable11 = serializableMap0.remove(obj10);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNull(serializable8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(serializable11);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        boolean boolean4 = serializableMap0.isEmpty();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap0.mapIterator();
        java.util.Comparator comparator6 = serializableMap0.comparator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        int int12 = serializableMap7.bitsPerElement();
        serializableMap7.modCount = 10;
        boolean boolean15 = serializableMap7.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap16 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap7);
        java.util.Collection collection17 = serializableMap7.values();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = serializableMap0.remove((java.lang.Object) serializableMap7);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(comparator6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(collection17);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        java.lang.String str8 = serializableMap1.selectKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry10 = serializableMap1.higherEntry("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strTrieEntry10);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.io.Serializable serializable4 = serializableMap0.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        serializableMap0.clear();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        java.lang.String str9 = serializableMap6.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        java.util.Set set14 = serializableMap11.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry16 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap10, set14, (int) ' ');
        java.lang.String str17 = strMapTrieEntry16.toString();
        strMapTrieEntry16.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        java.util.Set set23 = serializableMap20.keySet();
        boolean boolean25 = serializableMap20.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap20.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection29 = serializableMap27.values();
        java.util.Set<java.lang.String> strSet30 = serializableMap27.keySet();
        java.util.Set set31 = strMapTrieEntry16.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap20, (java.util.Set) strSet30);
        boolean boolean32 = serializableMap6.containsValue((java.lang.Object) strSet30);
        java.lang.String str34 = serializableMap6.nextKey("hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable35 = serializableMap0.get((java.lang.Object) serializableMap6);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNull(serializable4);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(set14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str17, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(set23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(serializableCollection29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(set31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        int int3 = serializableMap0.modCount;
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet4 = serializableMap0.entrySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap6.mapIterator();
        java.util.Set set9 = serializableMap6.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry11 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap5, set9, (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry13 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap0, set9, (-3));
        strMapTrieEntry13.bitIndex = '#';
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strEntrySet4);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(set9);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        java.util.Set<java.lang.String> strSet7 = serializableMap0.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry8 = serializableMap0.lastEntry();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(strTrieEntry8);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        java.util.Set<java.lang.String> strSet3 = serializableMap0.keySet();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap4 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap4.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap4.mapIterator();
        java.util.Set set7 = serializableMap4.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap9 = serializableMap4.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap4.mapIterator();
        int int11 = serializableMap4.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap14 = serializableMap4.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap16 = serializableMap4.prefixMap("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap17.mapIterator();
        java.io.Serializable serializable21 = serializableMap17.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        java.util.Set set25 = serializableMap22.keySet();
        boolean boolean27 = serializableMap22.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap22.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap29 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap30 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap30.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap30.mapIterator();
        serializableMap29.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap30);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry35 = serializableMap30.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap37 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap37.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor39 = serializableMap37.mapIterator();
        serializableMap36.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap37);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry43 = serializableMap36.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry44 = serializableMap30.nextEntry(strTrieEntry43);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap45 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap46 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap46.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor48 = serializableMap46.mapIterator();
        serializableMap45.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap46);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry51 = serializableMap46.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap52 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap53 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor54 = serializableMap53.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor55 = serializableMap53.mapIterator();
        serializableMap52.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap53);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry59 = serializableMap52.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry60 = serializableMap46.nextEntry(strTrieEntry59);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap61 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap62 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor63 = serializableMap62.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor64 = serializableMap62.mapIterator();
        serializableMap61.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap62);
        java.lang.String str67 = serializableMap61.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap68 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor69 = serializableMap68.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor70 = serializableMap68.mapIterator();
        java.util.Set set71 = serializableMap68.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap73 = serializableMap68.tailMap("hi!");
        java.io.Serializable serializable75 = serializableMap68.selectValue("");
        boolean boolean78 = serializableMap68.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable79 = serializableMap61.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap80 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap81 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor82 = serializableMap81.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor83 = serializableMap81.mapIterator();
        serializableMap80.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap81);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry87 = serializableMap80.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry88 = serializableMap61.nextEntry(strTrieEntry87);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry89 = serializableMap22.nextEntryImpl(strTrieEntry43, strTrieEntry60, strTrieEntry87);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry90 = serializableMap17.followRight(strTrieEntry87);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry91 = serializableMap4.previousEntry(strTrieEntry87);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry92 = serializableMap0.nextEntry(strTrieEntry91);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(set7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNull(serializable21);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNull(strTrieEntry35);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(strTrieEntry43);
        org.junit.Assert.assertNull(strTrieEntry44);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNull(strTrieEntry51);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertNotNull(strItor55);
        org.junit.Assert.assertNotNull(strTrieEntry59);
        org.junit.Assert.assertNull(strTrieEntry60);
        org.junit.Assert.assertNotNull(strItor63);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strItor69);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertNotNull(set71);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNull(serializable75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(serializable79);
        org.junit.Assert.assertNotNull(strItor82);
        org.junit.Assert.assertNotNull(strItor83);
        org.junit.Assert.assertNotNull(strTrieEntry87);
        org.junit.Assert.assertNull(strTrieEntry88);
        org.junit.Assert.assertNull(strTrieEntry89);
        org.junit.Assert.assertNull(strTrieEntry90);
        org.junit.Assert.assertNull(strTrieEntry91);
        org.junit.Assert.assertNull(strTrieEntry92);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.io.Serializable serializable4 = serializableMap0.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap5.mapIterator();
        java.util.Set set8 = serializableMap5.keySet();
        boolean boolean10 = serializableMap5.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap5.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap13.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap13.mapIterator();
        serializableMap12.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap13);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry18 = serializableMap13.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        serializableMap19.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap20);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry26 = serializableMap19.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap13.nextEntry(strTrieEntry26);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap28 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap29 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap29.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap29.mapIterator();
        serializableMap28.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap29);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry34 = serializableMap29.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap36.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap36.mapIterator();
        serializableMap35.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap36);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry42 = serializableMap35.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry43 = serializableMap29.nextEntry(strTrieEntry42);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap44 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap45 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor46 = serializableMap45.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap45.mapIterator();
        serializableMap44.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap45);
        java.lang.String str50 = serializableMap44.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap51 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor52 = serializableMap51.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor53 = serializableMap51.mapIterator();
        java.util.Set set54 = serializableMap51.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap56 = serializableMap51.tailMap("hi!");
        java.io.Serializable serializable58 = serializableMap51.selectValue("");
        boolean boolean61 = serializableMap51.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable62 = serializableMap44.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap63 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap64 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor65 = serializableMap64.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor66 = serializableMap64.mapIterator();
        serializableMap63.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap64);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry70 = serializableMap63.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry71 = serializableMap44.nextEntry(strTrieEntry70);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry72 = serializableMap5.nextEntryImpl(strTrieEntry26, strTrieEntry43, strTrieEntry70);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry73 = serializableMap0.followRight(strTrieEntry70);
        java.util.Set<java.lang.String> strSet74 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap76 = serializableMap0.prefixMap("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = serializableMap0.firstKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNull(serializable4);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(set8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNull(strTrieEntry18);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strTrieEntry26);
        org.junit.Assert.assertNull(strTrieEntry27);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNull(strTrieEntry34);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strTrieEntry42);
        org.junit.Assert.assertNull(strTrieEntry43);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertNotNull(set54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNull(serializable58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(serializable62);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertNotNull(strTrieEntry70);
        org.junit.Assert.assertNull(strTrieEntry71);
        org.junit.Assert.assertNull(strTrieEntry72);
        org.junit.Assert.assertNull(strTrieEntry73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(strMap76);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        java.util.Set set25 = serializableMap22.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap27 = serializableMap22.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap22.mapIterator();
        int int29 = serializableMap22.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap32 = serializableMap22.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable33 = serializableMap10.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        serializableMap10.clear();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap36.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap36.mapIterator();
        serializableMap35.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap36);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap40 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap41.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap41.mapIterator();
        serializableMap40.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap41);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry47 = serializableMap40.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry48 = serializableMap36.followRight(strTrieEntry47);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry50 = serializableMap10.addEntry(strTrieEntry47, (-94));
        java.util.Collection collection51 = serializableMap10.values();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(serializable33);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(strTrieEntry47);
        org.junit.Assert.assertNull(strTrieEntry48);
        org.junit.Assert.assertNotNull(strTrieEntry50);
        org.junit.Assert.assertNotNull(collection51);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        int int5 = serializableMap0.bitsPerElement();
        serializableMap0.modCount = 10;
        boolean boolean8 = serializableMap0.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap0);
        java.lang.String str11 = serializableMap9.previousKey("Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.modCount;
        serializableMap0.clear();
        java.lang.Object obj4 = null;
        boolean boolean5 = serializableMap0.containsKey(obj4);
        serializableMap0.incrementSize();
        java.lang.String str8 = serializableMap0.selectKey("hi!");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        java.util.Set<java.lang.String> strSet16 = serializableMap1.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry23 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap17, set21, (int) ' ');
        java.lang.String str24 = strMapTrieEntry23.toString();
        strMapTrieEntry23.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        boolean boolean32 = serializableMap27.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap27.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection36 = serializableMap34.values();
        java.util.Set<java.lang.String> strSet37 = serializableMap34.keySet();
        java.util.Set set38 = strMapTrieEntry23.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap27, (java.util.Set) strSet37);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry40 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap27, (int) '4');
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap41.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap41.mapIterator();
        java.util.Set set44 = serializableMap41.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap46 = serializableMap41.tailMap("hi!");
        java.io.Serializable serializable48 = serializableMap41.selectValue("");
        boolean boolean49 = serializableMap41.isEmpty();
        serializableMap41.clear();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry54 = serializableMap41.subtree("", 0, 1);
        java.io.Serializable serializable55 = serializableMap27.remove((java.lang.Object) "");
        java.util.Set set56 = serializableMap27.keySet();
        java.lang.String str58 = serializableMap27.nextKey("hi!");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str24, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(serializableCollection36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(set38);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(set44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(serializable48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(strTrieEntry54);
        org.junit.Assert.assertNull(serializable55);
        org.junit.Assert.assertNotNull(set56);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.Comparator<? super java.lang.String> wildcardComparator5 = serializableMap1.comparator();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(wildcardComparator5);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        java.util.Set set15 = serializableMap9.keySet();
        java.util.Set set16 = strMapTrieEntry6.setValue(set15);
        boolean boolean17 = strMapTrieEntry6.isExternalNode();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        serializableMap18.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap19);
        java.lang.String str24 = serializableMap18.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap25.values();
        java.util.Set<java.lang.String> strSet28 = serializableMap25.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet29 = serializableMap25.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet30 = serializableMap25.entrySet();
        java.util.Set set31 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap18, (java.util.Set) strEntrySet30);
        boolean boolean34 = serializableMap18.compareKeys("hi!", "");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap35.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection37 = serializableMap35.values();
        int int38 = serializableMap35.modCount;
        boolean boolean39 = serializableMap35.isEmpty();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor40 = serializableMap35.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable41 = serializableMap18.remove((java.lang.Object) serializableMap35);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(set15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strEntrySet29);
        org.junit.Assert.assertNotNull(strEntrySet30);
        org.junit.Assert.assertNotNull(set31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(serializableCollection37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strItor40);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        java.lang.String str10 = strMapTrieEntry6.toString();
        int int11 = strMapTrieEntry6.bitIndex;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap13.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap13.mapIterator();
        serializableMap12.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap13);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry18 = serializableMap13.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        serializableMap19.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap20);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry26 = serializableMap19.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap13.nextEntry(strTrieEntry26);
        java.util.Set<java.lang.String> strSet28 = serializableMap13.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap29 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap30 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap30.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap30.mapIterator();
        java.util.Set set33 = serializableMap30.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry35 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap29, set33, (int) ' ');
        java.lang.String str36 = strMapTrieEntry35.toString();
        strMapTrieEntry35.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap39 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor40 = serializableMap39.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap39.mapIterator();
        java.util.Set set42 = serializableMap39.keySet();
        boolean boolean44 = serializableMap39.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor45 = serializableMap39.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap46 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap46.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection48 = serializableMap46.values();
        java.util.Set<java.lang.String> strSet49 = serializableMap46.keySet();
        java.util.Set set50 = strMapTrieEntry35.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap39, (java.util.Set) strSet49);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry52 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap13, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap39, (int) '4');
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap53 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor54 = serializableMap53.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor55 = serializableMap53.mapIterator();
        int int56 = serializableMap53.modCount;
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet57 = serializableMap53.entrySet();
        boolean boolean58 = serializableMap13.containsValue((java.lang.Object) strEntrySet57);
        java.util.Set set59 = strMapTrieEntry6.setValue((java.util.Set) strEntrySet57);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap60 = strMapTrieEntry6.getKey();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])" + "'", str10, "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNull(strTrieEntry18);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strTrieEntry26);
        org.junit.Assert.assertNull(strTrieEntry27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(set33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str36, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(set42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(serializableCollection48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(set50);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertNotNull(strItor55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(strEntrySet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(set59);
        org.junit.Assert.assertNull(strMap60);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        java.lang.String str9 = strMapTrieEntry6.toString();
        boolean boolean10 = strMapTrieEntry6.isInternalNode();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str9, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.util.Set<java.lang.String> strSet6 = serializableMap0.keySet();
        int int7 = serializableMap0.size();
        java.lang.Object obj10 = serializableMap0.put("hi!", (java.io.Serializable) 10L);
        java.util.Collection<java.io.Serializable> serializableCollection11 = serializableMap0.values();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(serializableCollection11);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        serializableMap0.clear();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry13 = serializableMap0.subtree("", 0, 1);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap15.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap15.mapIterator();
        serializableMap14.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap15);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry20 = serializableMap15.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        serializableMap21.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap22);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry28 = serializableMap21.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry29 = serializableMap15.nextEntry(strTrieEntry28);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry31 = serializableMap15.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.io.Serializable serializable33 = null;
        boolean boolean35 = serializableMap15.replace("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", serializable33, (java.io.Serializable) (-1.0d));
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = serializableMap15.firstKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(strTrieEntry13);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNull(strTrieEntry20);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strTrieEntry28);
        org.junit.Assert.assertNull(strTrieEntry29);
        org.junit.Assert.assertNull(strTrieEntry31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        java.util.Comparator<? super java.lang.String> wildcardComparator22 = serializableMap10.comparator();
        java.util.Comparator comparator23 = serializableMap10.comparator();
        java.util.Comparator comparator24 = serializableMap10.comparator();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(wildcardComparator22);
        org.junit.Assert.assertNotNull(comparator23);
        org.junit.Assert.assertNotNull(comparator24);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        boolean boolean3 = strItor2.hasNext();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap4 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap4.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap4.mapIterator();
        java.util.Set set7 = serializableMap4.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap9 = serializableMap4.tailMap("hi!");
        java.io.Serializable serializable11 = serializableMap4.selectValue("");
        boolean boolean12 = serializableMap4.isEmpty();
        boolean boolean13 = org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare((java.lang.Object) strItor2, (java.lang.Object) boolean12);
        boolean boolean14 = strItor2.hasNext();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(set7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(serializable11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("hi!", (int) (short) 1, 10);
        int int6 = stringKeyAnalyzer0.lengthInBits("");
        int int9 = stringKeyAnalyzer0.compare("Trie[0]={\n}\n", "Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = strItor6.getKey();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap6 = serializableMap1.headMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator7 = serializableMap1.mapIterator();
        java.lang.String str9 = serializableMap1.nextKey("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(orderedMapIterator7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap0.prefixMap("hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = serializableMap0.firstKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        boolean boolean20 = serializableMap1.compareKeys("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap21.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap21.mapIterator();
        java.util.Set set24 = serializableMap21.keySet();
        boolean boolean26 = serializableMap21.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry30 = serializableMap21.subtree("hi!", 16, 0);
        java.io.Serializable serializable31 = serializableMap1.remove((java.lang.Object) strTrieEntry30);
        boolean boolean32 = serializableMap1.isEmpty();
        java.util.Collection<java.io.Serializable> serializableCollection33 = serializableMap1.values();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(set24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(strTrieEntry30);
        org.junit.Assert.assertNull(serializable31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(serializableCollection33);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("hi!", (int) (short) 1, 10);
        int int6 = stringKeyAnalyzer0.lengthInBits("");
        int int7 = stringKeyAnalyzer0.bitsPerElement();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = stringKeyAnalyzer0.bitIndex("", 1, (-1), "Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])", 9, 15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The offsets and lengths must be at Character boundaries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap7.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap7.mapIterator();
        java.util.Set set10 = serializableMap7.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap12 = serializableMap7.tailMap("hi!");
        java.io.Serializable serializable14 = serializableMap7.selectValue("");
        boolean boolean17 = serializableMap7.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable18 = serializableMap0.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        serializableMap19.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap20);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry26 = serializableMap19.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap0.nextEntry(strTrieEntry26);
        java.util.Collection collection28 = serializableMap0.values();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap29 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap30 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap30.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap30.mapIterator();
        serializableMap29.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap30);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap35.mapIterator();
        int int37 = serializableMap35.modCount;
        serializableMap35.clear();
        java.io.Serializable serializable39 = serializableMap29.replace("", (java.io.Serializable) serializableMap35);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = serializableMap0.containsKey((java.lang.Object) serializableMap35);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(set10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(serializable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(serializable18);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strTrieEntry26);
        org.junit.Assert.assertNull(strTrieEntry27);
        org.junit.Assert.assertNotNull(collection28);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(serializable39);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry7 = serializableMap0.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer8 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean12 = stringKeyAnalyzer8.isBitSet("", (int) (short) 1, (-1));
        java.util.Comparator<java.lang.String> strComparator13 = stringKeyAnalyzer8.reversed();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = serializableMap0.containsKey((java.lang.Object) stringKeyAnalyzer8);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strTrieEntry7);
        org.junit.Assert.assertNotNull(stringKeyAnalyzer8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strComparator13);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        int int1 = serializableMap0.size();
        java.lang.String str3 = serializableMap0.nextKey("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap5);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        java.util.Set<java.lang.String> strSet6 = serializableMap0.keySet();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.io.Serializable serializable19 = null;
        boolean boolean21 = serializableMap1.replace("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", serializable19, (java.io.Serializable) (-1.0d));
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap23.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap23.mapIterator();
        serializableMap22.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap23);
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap22.values();
        java.lang.String str29 = serializableMap22.previousKey("hi!");
        boolean boolean30 = serializableMap1.equals((java.lang.Object) serializableMap22);
        java.util.Set set31 = serializableMap1.keySet();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(set31);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry7 = serializableMap0.getNearestEntryForKey("", (int) ' ');
        int int8 = serializableMap0.modCount;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strTrieEntry7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        java.util.Set set14 = serializableMap11.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry16 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap10, set14, (int) ' ');
        java.lang.String str17 = strMapTrieEntry16.toString();
        boolean boolean18 = strMapTrieEntry16.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        java.util.Set set22 = serializableMap19.keySet();
        boolean boolean24 = serializableMap19.containsKey((java.lang.Object) "hi!");
        java.util.Set set25 = serializableMap19.keySet();
        java.util.Set set26 = strMapTrieEntry16.setValue(set25);
        strMapTrieEntry6.right = strMapTrieEntry16;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry28 = strMapTrieEntry16.right;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry29 = strMapTrieEntry28.parent;
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(set14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str17, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(set22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(set26);
        org.junit.Assert.assertNull(strMapTrieEntry28);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        boolean boolean4 = serializableMap0.isEmpty();
        java.util.Comparator<? super java.lang.String> wildcardComparator5 = serializableMap0.comparator();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(wildcardComparator5);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        serializableMap0.clear();
        int int5 = serializableMap0.size();
        boolean boolean8 = serializableMap0.compareKeys("hi!", "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        int int5 = serializableMap0.bitsPerElement();
        serializableMap0.modCount = 10;
        boolean boolean8 = serializableMap0.isEmpty();
        int int9 = serializableMap0.size();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        int int6 = serializableMap0.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection10 = serializableMap8.values();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap12 = serializableMap8.prefixMap("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap14 = serializableMap8.headMap("hi!");
        java.io.Serializable serializable15 = serializableMap0.put("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", (java.io.Serializable) "hi!");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(serializableCollection10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(serializable15);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("", (int) (short) 1, (-1));
        java.util.Comparator<java.lang.String> strComparator5 = stringKeyAnalyzer0.reversed();
        boolean boolean9 = stringKeyAnalyzer0.isBitSet("hi!", (int) ' ', (int) (short) 100);
        int int11 = stringKeyAnalyzer0.lengthInBits("");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = stringKeyAnalyzer0.isPrefix("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=Trie[0]={\n}\n [0])", (int) ' ', 15, "Entry(key=null [0], value=[], parent=null, left=null [0], right=null [32], predecessor=null [0])");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot determine prefix outside of Character boundaries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        serializableMap1.clear();
        serializableMap1.clear();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.io.Serializable serializable19 = null;
        boolean boolean21 = serializableMap1.replace("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", serializable19, (java.io.Serializable) (-1.0d));
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap23.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap23.mapIterator();
        serializableMap22.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap23);
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap22.values();
        java.lang.String str29 = serializableMap22.previousKey("hi!");
        boolean boolean30 = serializableMap1.equals((java.lang.Object) serializableMap22);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap32.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap32.mapIterator();
        serializableMap31.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap32);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry37 = serializableMap32.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap38 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap39 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor40 = serializableMap39.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap39.mapIterator();
        serializableMap38.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap39);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry45 = serializableMap38.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry46 = serializableMap32.nextEntry(strTrieEntry45);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = serializableMap22.containsKey((java.lang.Object) strTrieEntry45);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNull(strTrieEntry37);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(strTrieEntry45);
        org.junit.Assert.assertNull(strTrieEntry46);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap6 = serializableMap1.tailMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        int int3 = serializableMap0.modCount;
        int int4 = serializableMap0.modCount;
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedMap<java.lang.String, java.io.Serializable> strMap7 = serializableMap0.subMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=Trie[0]={\n}\n [0])", "Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey > toKey");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        java.util.Set<java.lang.String> strSet16 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap17.mapIterator();
        java.util.Set set20 = serializableMap17.keySet();
        boolean boolean22 = serializableMap17.containsKey((java.lang.Object) "hi!");
        java.io.Serializable serializable23 = serializableMap1.get((java.lang.Object) "hi!");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(set20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(serializable23);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap0.prefixMap("hi!");
        java.util.Comparator<? super java.lang.String> wildcardComparator9 = strMap8.comparator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedMap<java.lang.String, java.io.Serializable> strMap11 = strMap8.headMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ToKey is out of range: Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(wildcardComparator9);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.io.Serializable serializable4 = serializableMap0.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        serializableMap0.clear();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap7 = serializableMap0.prefixMap("");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry8 = serializableMap0.firstEntry();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNull(serializable4);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(strTrieEntry8);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        boolean boolean2 = org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare((java.lang.Object) (-35), (java.lang.Object) (-3));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        java.util.Set set15 = serializableMap9.keySet();
        java.util.Set set16 = strMapTrieEntry6.setValue(set15);
        boolean boolean17 = strMapTrieEntry6.isExternalNode();
        boolean boolean18 = strMapTrieEntry6.isInternalNode();
        boolean boolean19 = strMapTrieEntry6.isEmpty();
        boolean boolean20 = strMapTrieEntry6.isEmpty();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap21 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        java.util.Set set25 = serializableMap22.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry27 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap21, set25, (int) ' ');
        java.lang.String str28 = strMapTrieEntry27.toString();
        strMapTrieEntry27.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap31.mapIterator();
        java.util.Set set34 = serializableMap31.keySet();
        boolean boolean36 = serializableMap31.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap31.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap38 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor39 = serializableMap38.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection40 = serializableMap38.values();
        java.util.Set<java.lang.String> strSet41 = serializableMap38.keySet();
        java.util.Set set42 = strMapTrieEntry27.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap31, (java.util.Set) strSet41);
        boolean boolean43 = strMapTrieEntry27.isInternalNode();
        int int44 = strMapTrieEntry27.bitIndex;
        java.lang.String str45 = strMapTrieEntry27.toString();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap46 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap47 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor48 = serializableMap47.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap47.mapIterator();
        serializableMap46.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap47);
        java.lang.String str52 = serializableMap46.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap54 = serializableMap46.prefixMap("hi!");
        java.util.Set set55 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry57 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap54, set55, (int) (short) 100);
        java.util.Set set58 = strMapTrieEntry57.value;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry59 = strMapTrieEntry57.predecessor;
        strMapTrieEntry57.bitIndex = (-1);
        strMapTrieEntry27.predecessor = strMapTrieEntry57;
        strMapTrieEntry6.right = strMapTrieEntry57;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(set15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str28, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(set34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(serializableCollection40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(set42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])" + "'", str45, "Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNull(set58);
        org.junit.Assert.assertNotNull(strMapTrieEntry59);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasPrevious();
        boolean boolean8 = strItor6.hasPrevious();
        boolean boolean9 = strItor6.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = strItor6.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        serializableMap0.clear();
        serializableMap0.clear();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        java.util.Set set14 = serializableMap11.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry16 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap10, set14, (int) ' ');
        java.lang.String str17 = strMapTrieEntry16.toString();
        boolean boolean18 = strMapTrieEntry16.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        java.util.Set set22 = serializableMap19.keySet();
        boolean boolean24 = serializableMap19.containsKey((java.lang.Object) "hi!");
        java.util.Set set25 = serializableMap19.keySet();
        java.util.Set set26 = strMapTrieEntry16.setValue(set25);
        strMapTrieEntry6.right = strMapTrieEntry16;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry28 = strMapTrieEntry16.right;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = strMapTrieEntry28.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(set14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str17, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(set22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(set26);
        org.junit.Assert.assertNull(strMapTrieEntry28);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        boolean boolean4 = serializableMap0.isEmpty();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap0.mapIterator();
        java.util.Comparator comparator6 = serializableMap0.comparator();
        java.util.Comparator<? super java.lang.String> wildcardComparator7 = serializableMap0.comparator();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(comparator6);
        org.junit.Assert.assertNotNull(wildcardComparator7);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasNext();
        boolean boolean8 = strItor6.hasPrevious();
        boolean boolean9 = strItor6.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable10 = strItor6.getValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap7.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap7.mapIterator();
        java.util.Set set10 = serializableMap7.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap12 = serializableMap7.tailMap("hi!");
        java.io.Serializable serializable14 = serializableMap7.selectValue("");
        boolean boolean17 = serializableMap7.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable18 = serializableMap0.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        serializableMap19.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap20);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry26 = serializableMap19.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap0.nextEntry(strTrieEntry26);
        java.io.Serializable serializable30 = serializableMap0.put("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", (java.io.Serializable) 10.0f);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap32.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap32.mapIterator();
        serializableMap31.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap32);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry37 = serializableMap31.ceilingEntry("hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry40 = serializableMap31.getNearestEntryForKey("hi!", (int) (short) 10);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap41.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap41.mapIterator();
        java.util.Set set44 = serializableMap41.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap46 = serializableMap41.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap41.mapIterator();
        int int48 = serializableMap41.size();
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry50 = serializableMap41.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set set51 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry53 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap41, set51, 0);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap54 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap55 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor56 = serializableMap55.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor57 = serializableMap55.mapIterator();
        serializableMap54.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap55);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry61 = serializableMap54.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry62 = serializableMap41.previousEntry(strTrieEntry61);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap63 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap64 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor65 = serializableMap64.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor66 = serializableMap64.mapIterator();
        serializableMap63.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap64);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap68 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap69 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor70 = serializableMap69.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor71 = serializableMap69.mapIterator();
        serializableMap68.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap69);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry75 = serializableMap68.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry76 = serializableMap64.followRight(strTrieEntry75);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry77 = serializableMap0.nextEntryImpl(strTrieEntry40, strTrieEntry61, strTrieEntry75);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(set10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(serializable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(serializable18);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strTrieEntry26);
        org.junit.Assert.assertNull(strTrieEntry27);
        org.junit.Assert.assertNull(serializable30);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNull(strTrieEntry37);
        org.junit.Assert.assertNotNull(strTrieEntry40);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(set44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(strEntry50);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(strTrieEntry61);
        org.junit.Assert.assertNull(strTrieEntry62);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertNotNull(strItor71);
        org.junit.Assert.assertNotNull(strTrieEntry75);
        org.junit.Assert.assertNull(strTrieEntry76);
        org.junit.Assert.assertNull(strTrieEntry77);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry7 = serializableMap0.lastEntry();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNull(strTrieEntry7);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        java.util.Set<java.lang.String> strSet3 = serializableMap0.keySet();
        serializableMap0.modCount = (short) 10;
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry7 = serializableMap0.select("");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(strEntry7);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        java.util.Set<java.lang.String> strSet3 = serializableMap0.keySet();
        java.util.Set<java.lang.String> strSet4 = serializableMap0.keySet();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = serializableMap0.remove((java.lang.Object) (-35));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.modCount;
        serializableMap0.clear();
        java.lang.Object obj4 = null;
        boolean boolean5 = serializableMap0.containsKey(obj4);
        java.util.Comparator<? super java.lang.String> wildcardComparator6 = serializableMap0.comparator();
        java.util.Set set7 = serializableMap0.entrySet();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardComparator6);
        org.junit.Assert.assertNotNull(set7);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        boolean boolean1 = org.apache.commons.collections4.trie.KeyAnalyzer.isNullBitKey(15);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        java.util.Map<java.lang.String, java.io.Serializable> strMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>(strMap0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        serializableMap0.clear();
        java.lang.String str11 = serializableMap0.nextKey("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap12.mapIterator();
        int int14 = serializableMap12.modCount;
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap12);
        java.util.Collection<java.io.Serializable> serializableCollection16 = serializableMap12.values();
        java.util.Comparator<? super java.lang.String> wildcardComparator17 = serializableMap12.comparator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap23 = serializableMap18.prefixMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        int int25 = serializableMap18.lengthInBits("hi!");
        serializableMap18.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable27 = serializableMap12.get((java.lang.Object) serializableMap18);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(serializableCollection16);
        org.junit.Assert.assertNotNull(wildcardComparator17);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 48 + "'", int25 == 48);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry5 = serializableMap0.ceilingEntry("");
        java.util.Set set6 = serializableMap0.entrySet();
        int int7 = serializableMap0.bitsPerElement();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strTrieEntry5);
        org.junit.Assert.assertNotNull(set6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap4 = serializableMap0.prefixMap("hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedMap<java.lang.String, java.io.Serializable> strMap6 = strMap4.tailMap("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: FromKey is out of range: ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertNotNull(strMap4);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        boolean boolean20 = serializableMap1.compareKeys("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap21.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap21.mapIterator();
        java.util.Set set24 = serializableMap21.keySet();
        boolean boolean26 = serializableMap21.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry30 = serializableMap21.subtree("hi!", 16, 0);
        java.io.Serializable serializable31 = serializableMap1.remove((java.lang.Object) strTrieEntry30);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry35 = serializableMap1.subtree("hi!", (int) 'a', (-94));
        java.lang.String str36 = serializableMap1.toString();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(set24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(strTrieEntry30);
        org.junit.Assert.assertNull(serializable31);
        org.junit.Assert.assertNull(strTrieEntry35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Trie[0]={\n}\n" + "'", str36, "Trie[0]={\n}\n");
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        java.util.Set<java.lang.String> strSet3 = serializableMap0.keySet();
        serializableMap0.modCount = (short) 10;
        java.util.Comparator<? super java.lang.String> wildcardComparator6 = serializableMap0.comparator();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(wildcardComparator6);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        boolean boolean4 = serializableMap0.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap6.mapIterator();
        serializableMap5.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap6);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap11 = serializableMap6.headMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator12 = serializableMap6.mapIterator();
        java.io.Serializable serializable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable14 = serializableMap0.getOrDefault((java.lang.Object) orderedMapIterator12, serializable13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(orderedMapIterator12);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.util.Set<java.lang.String> strSet6 = serializableMap0.keySet();
        int int7 = serializableMap0.size();
        java.lang.Object obj10 = serializableMap0.put("hi!", (java.io.Serializable) 10L);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        java.util.Set set14 = serializableMap11.keySet();
        serializableMap11.clear();
        java.lang.String str17 = serializableMap11.selectKey("");
        java.lang.String str19 = serializableMap11.nextKey("");
        int int20 = serializableMap11.bitsPerElement();
        java.lang.String str21 = serializableMap11.toString();
        serializableMap11.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable23 = serializableMap0.remove((java.lang.Object) serializableMap11);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(set14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Trie[0]={\n}\n" + "'", str21, "Trie[0]={\n}\n");
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        boolean boolean4 = serializableMap0.isEmpty();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap0.mapIterator();
        java.util.Comparator comparator6 = serializableMap0.comparator();
        boolean boolean9 = serializableMap0.compareKeys("Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])", "");
        boolean boolean10 = serializableMap0.isEmpty();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(comparator6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        java.util.Comparator<? super java.lang.String> wildcardComparator6 = serializableMap0.comparator();
        int int7 = serializableMap0.bitsPerElement();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardComparator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        int int5 = serializableMap0.bitsPerElement();
        serializableMap0.clear();
        boolean boolean7 = serializableMap0.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet8 = serializableMap0.entrySet();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strEntrySet8);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasNext();
        boolean boolean8 = strItor6.hasPrevious();
        boolean boolean9 = strItor6.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable10 = strItor6.getValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry9 = serializableMap0.subtree("hi!", 16, 0);
        int int10 = serializableMap0.size();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strTrieEntry9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            strItor2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap9 = strMapTrieEntry6.key;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean4 = serializableMap0.isEmpty();
        java.lang.String str6 = serializableMap0.selectKey("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        serializableMap9.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap10);
        java.util.Collection<java.io.Serializable> serializableCollection14 = serializableMap9.values();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet15 = serializableMap9.entrySet();
        java.util.Set set16 = strMapTrieEntry6.setValue((java.util.Set) strEntrySet15);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry17 = null;
        strMapTrieEntry6.right = strMapTrieEntry17;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(serializableCollection14);
        org.junit.Assert.assertNotNull(strEntrySet15);
        org.junit.Assert.assertNotNull(set16);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        serializableMap9.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap10);
        java.util.Collection<java.io.Serializable> serializableCollection14 = serializableMap9.values();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet15 = serializableMap9.entrySet();
        java.util.Set set16 = strMapTrieEntry6.setValue((java.util.Set) strEntrySet15);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry17 = strMapTrieEntry6.parent;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(serializableCollection14);
        org.junit.Assert.assertNotNull(strEntrySet15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertNull(strMapTrieEntry17);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("hi!", (int) (short) 1, 10);
        int int6 = stringKeyAnalyzer0.lengthInBits("");
        // The following exception was thrown during execution in test generation
        try {
            int int13 = stringKeyAnalyzer0.bitIndex("Trie[0]={\n}\n", (int) (byte) 10, (int) (short) 10, "hi!", (-91), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The offsets and lengths must be at Character boundaries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry9 = strMapTrieEntry6.predecessor;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry10 = strMapTrieEntry6.parent;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = strMapTrieEntry10.isInternalNode();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strMapTrieEntry9);
        org.junit.Assert.assertNull(strMapTrieEntry10);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("", (int) (short) 1, (-1));
        java.util.Comparator<java.lang.String> strComparator5 = stringKeyAnalyzer0.reversed();
        boolean boolean9 = stringKeyAnalyzer0.isBitSet("hi!", (int) ' ', (int) (short) 100);
        int int11 = stringKeyAnalyzer0.lengthInBits("");
        int int14 = stringKeyAnalyzer0.compare("", "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        int int17 = stringKeyAnalyzer0.compare("Trie[0]={\n}\n", "Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-94) + "'", int14 == (-94));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        java.util.Set<java.lang.String> strSet16 = serializableMap1.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry23 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap17, set21, (int) ' ');
        java.lang.String str24 = strMapTrieEntry23.toString();
        strMapTrieEntry23.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        boolean boolean32 = serializableMap27.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap27.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection36 = serializableMap34.values();
        java.util.Set<java.lang.String> strSet37 = serializableMap34.keySet();
        java.util.Set set38 = strMapTrieEntry23.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap27, (java.util.Set) strSet37);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry40 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap27, (int) '4');
        java.util.Set set41 = serializableMap27.keySet();
        int int42 = serializableMap27.size();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str24, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(serializableCollection36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(set38);
        org.junit.Assert.assertNotNull(set41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        java.util.Set set14 = serializableMap11.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry16 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap10, set14, (int) ' ');
        java.lang.String str17 = strMapTrieEntry16.toString();
        strMapTrieEntry16.bitIndex = 0;
        java.lang.String str20 = strMapTrieEntry16.toString();
        strMapTrieEntry6.predecessor = strMapTrieEntry16;
        java.util.Set set22 = strMapTrieEntry6.getValue();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(set14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str17, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])" + "'", str20, "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.junit.Assert.assertNotNull(set22);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        boolean boolean1 = org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(32);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        serializableMap0.clear();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry3 = serializableMap0.ceilingEntry("Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])");
        org.junit.Assert.assertNull(strTrieEntry3);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        java.util.Set set25 = serializableMap22.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap27 = serializableMap22.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap22.mapIterator();
        int int29 = serializableMap22.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap32 = serializableMap22.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable33 = serializableMap10.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet34 = serializableMap10.entrySet();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap36.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap36.mapIterator();
        serializableMap35.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap36);
        java.lang.String str41 = serializableMap35.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap42 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap42.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap42.mapIterator();
        java.util.Set set45 = serializableMap42.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap47 = serializableMap42.tailMap("hi!");
        java.io.Serializable serializable49 = serializableMap42.selectValue("");
        boolean boolean52 = serializableMap42.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable53 = serializableMap35.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap54 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap55 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor56 = serializableMap55.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor57 = serializableMap55.mapIterator();
        serializableMap54.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap55);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry61 = serializableMap54.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry62 = serializableMap35.nextEntry(strTrieEntry61);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable63 = serializableMap10.remove((java.lang.Object) strTrieEntry61);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(serializable33);
        org.junit.Assert.assertNotNull(strEntrySet34);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(set45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNull(serializable49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(serializable53);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(strTrieEntry61);
        org.junit.Assert.assertNull(strTrieEntry62);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap6 = serializableMap1.headMap("");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = serializableMap1.containsKey((java.lang.Object) (-94));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("hi!", (int) (short) 1, 10);
        int int7 = stringKeyAnalyzer0.compare("", "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        int int8 = stringKeyAnalyzer0.bitsPerElement();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = stringKeyAnalyzer0.isPrefix("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", 48, 100, "Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot determine prefix outside of Character boundaries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-94) + "'", int7 == (-94));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        int int8 = serializableMap6.modCount;
        serializableMap6.clear();
        java.io.Serializable serializable10 = serializableMap0.replace("", (java.io.Serializable) serializableMap6);
        int int11 = serializableMap0.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap13.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap13.mapIterator();
        serializableMap12.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap13);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        int int20 = serializableMap18.modCount;
        serializableMap18.clear();
        java.io.Serializable serializable22 = serializableMap12.replace("", (java.io.Serializable) serializableMap18);
        java.io.Serializable serializable23 = serializableMap0.get((java.lang.Object) serializable22);
        java.io.Serializable serializable25 = null;
        java.io.Serializable serializable26 = serializableMap0.putIfAbsent("Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])", serializable25);
        java.util.Set<java.lang.String> strSet27 = serializableMap0.keySet();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(serializable10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(serializable22);
        org.junit.Assert.assertNull(serializable23);
        org.junit.Assert.assertNull(serializable26);
        org.junit.Assert.assertNotNull(strSet27);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.util.Set<java.lang.String> strSet6 = serializableMap0.keySet();
        int int7 = serializableMap0.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap9 = serializableMap0.tailMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.lang.String str3 = serializableMap0.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap6 = serializableMap0.subMap("Trie[0]={\n}\n", "Trie[0]={\n}\n");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = stringKeyAnalyzer0.isPrefix("Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])", 2, 0, "Trie[0]={\n}\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot determine prefix outside of Character boundaries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        serializableMap10.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap11);
        java.io.Serializable serializable15 = serializableMap0.put("", (java.io.Serializable) serializableMap10);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        serializableMap17.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap18);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry23 = serializableMap18.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor27 = serializableMap25.mapIterator();
        serializableMap24.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap25);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry31 = serializableMap24.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry32 = serializableMap18.nextEntry(strTrieEntry31);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry34 = serializableMap18.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry36 = serializableMap18.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet37 = serializableMap18.entrySet();
        java.io.Serializable serializable38 = serializableMap0.getOrDefault((java.lang.Object) "Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])", (java.io.Serializable) serializableMap18);
        java.lang.Object obj39 = null;
        java.io.Serializable serializable40 = serializableMap0.get(obj39);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap42 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap42.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap42.mapIterator();
        serializableMap41.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap42);
        java.lang.String str47 = serializableMap41.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap48 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap48.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor50 = serializableMap48.mapIterator();
        java.util.Set set51 = serializableMap48.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap53 = serializableMap48.tailMap("hi!");
        java.io.Serializable serializable55 = serializableMap48.selectValue("");
        boolean boolean58 = serializableMap48.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable59 = serializableMap41.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap60 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap61 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor62 = serializableMap61.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor63 = serializableMap61.mapIterator();
        serializableMap60.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap61);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry67 = serializableMap60.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry68 = serializableMap41.nextEntry(strTrieEntry67);
        java.util.Collection collection69 = serializableMap41.values();
        boolean boolean70 = serializableMap0.equals((java.lang.Object) serializableMap41);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap71 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor72 = serializableMap71.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection73 = serializableMap71.values();
        int int74 = serializableMap71.modCount;
        boolean boolean75 = serializableMap71.isEmpty();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor76 = serializableMap71.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap77 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap78 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor79 = serializableMap78.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor80 = serializableMap78.mapIterator();
        serializableMap77.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap78);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap82 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap83 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor84 = serializableMap83.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor85 = serializableMap83.mapIterator();
        serializableMap82.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap83);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry89 = serializableMap82.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry90 = serializableMap78.followRight(strTrieEntry89);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry92 = serializableMap71.addEntry(strTrieEntry89, 0);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry93 = serializableMap41.nextEntry(strTrieEntry92);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNull(serializable15);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNull(strTrieEntry23);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strTrieEntry31);
        org.junit.Assert.assertNull(strTrieEntry32);
        org.junit.Assert.assertNull(strTrieEntry34);
        org.junit.Assert.assertNull(strEntry36);
        org.junit.Assert.assertNotNull(strEntrySet37);
        org.junit.Assert.assertNotNull(serializable38);
        org.junit.Assert.assertNull(serializable40);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertNotNull(set51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNull(serializable55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(serializable59);
        org.junit.Assert.assertNotNull(strItor62);
        org.junit.Assert.assertNotNull(strItor63);
        org.junit.Assert.assertNotNull(strTrieEntry67);
        org.junit.Assert.assertNull(strTrieEntry68);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strItor72);
        org.junit.Assert.assertNotNull(serializableCollection73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strItor76);
        org.junit.Assert.assertNotNull(strItor79);
        org.junit.Assert.assertNotNull(strItor80);
        org.junit.Assert.assertNotNull(strItor84);
        org.junit.Assert.assertNotNull(strItor85);
        org.junit.Assert.assertNotNull(strTrieEntry89);
        org.junit.Assert.assertNull(strTrieEntry90);
        org.junit.Assert.assertNotNull(strTrieEntry92);
        org.junit.Assert.assertNull(strTrieEntry93);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasPrevious();
        boolean boolean8 = strItor6.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = strItor6.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        boolean boolean22 = strMapTrieEntry6.isInternalNode();
        int int23 = strMapTrieEntry6.bitIndex;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry24 = strMapTrieEntry6.parent;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(strMapTrieEntry24);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        java.util.Set set25 = serializableMap22.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap27 = serializableMap22.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap22.mapIterator();
        int int29 = serializableMap22.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap32 = serializableMap22.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable33 = serializableMap10.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        serializableMap10.clear();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap36.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap36.mapIterator();
        serializableMap35.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap36);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap40 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap41.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap41.mapIterator();
        serializableMap40.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap41);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry47 = serializableMap40.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry48 = serializableMap36.followRight(strTrieEntry47);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry50 = serializableMap10.addEntry(strTrieEntry47, (-94));
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap52 = serializableMap10.tailMap("Trie[0]={\n}\n");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap53 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap54 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor55 = serializableMap54.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor56 = serializableMap54.mapIterator();
        serializableMap53.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap54);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap59 = serializableMap54.headMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator60 = serializableMap54.mapIterator();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap62 = serializableMap54.tailMap("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap63 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap64 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor65 = serializableMap64.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor66 = serializableMap64.mapIterator();
        serializableMap63.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap64);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap68 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap69 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor70 = serializableMap69.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor71 = serializableMap69.mapIterator();
        serializableMap68.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap69);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry75 = serializableMap68.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry76 = serializableMap64.followRight(strTrieEntry75);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry77 = serializableMap54.previousEntry(strTrieEntry75);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap78 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap79 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor80 = serializableMap79.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor81 = serializableMap79.mapIterator();
        serializableMap78.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap79);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry84 = serializableMap78.ceilingEntry("hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry87 = serializableMap78.getNearestEntryForKey("hi!", (int) (short) 10);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry89 = serializableMap10.nextEntryImpl(strTrieEntry77, strTrieEntry87, strTrieEntry88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(serializable33);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(strTrieEntry47);
        org.junit.Assert.assertNull(strTrieEntry48);
        org.junit.Assert.assertNotNull(strTrieEntry50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strItor55);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(orderedMapIterator60);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertNotNull(strItor71);
        org.junit.Assert.assertNotNull(strTrieEntry75);
        org.junit.Assert.assertNull(strTrieEntry76);
        org.junit.Assert.assertNull(strTrieEntry77);
        org.junit.Assert.assertNotNull(strItor80);
        org.junit.Assert.assertNotNull(strItor81);
        org.junit.Assert.assertNull(strTrieEntry84);
        org.junit.Assert.assertNotNull(strTrieEntry87);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("hi!", (int) (short) 1, 10);
        java.util.Comparator<java.lang.String> strComparator5 = stringKeyAnalyzer0.reversed();
        int int7 = stringKeyAnalyzer0.lengthInBits("hi!");
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 48 + "'", int7 == 48);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        int int7 = serializableMap0.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        serializableMap9.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap10);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap15 = serializableMap10.headMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator16 = serializableMap10.mapIterator();
        java.io.Serializable serializable17 = serializableMap0.replace("", (java.io.Serializable) serializableMap10);
        java.util.Comparator<? super java.lang.String> wildcardComparator18 = serializableMap0.comparator();
        java.util.Set<java.lang.String> strSet19 = serializableMap0.keySet();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(orderedMapIterator16);
        org.junit.Assert.assertNull(serializable17);
        org.junit.Assert.assertNotNull(wildcardComparator18);
        org.junit.Assert.assertNotNull(strSet19);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry22 = strMapTrieEntry6.parent;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap24.mapIterator();
        serializableMap23.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap24);
        java.lang.String str29 = serializableMap23.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap31 = serializableMap23.prefixMap("hi!");
        java.util.Set set32 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry34 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap31, set32, (int) (short) 100);
        strMapTrieEntry34.bitIndex = 0;
        strMapTrieEntry6.predecessor = strMapTrieEntry34;
        java.lang.String str38 = strMapTrieEntry6.toString();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNull(strMapTrieEntry22);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor={} [0])" + "'", str38, "Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor={} [0])");
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.Collection<java.io.Serializable> serializableCollection5 = serializableMap0.values();
        boolean boolean9 = serializableMap0.isBitSet("hi!", (-1), (int) (short) 100);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        java.util.Set set14 = serializableMap11.keySet();
        boolean boolean16 = serializableMap11.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap11.mapIterator();
        java.util.Set<java.lang.String> strSet18 = serializableMap11.keySet();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        serializableMap19.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap20);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry25 = serializableMap20.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap26 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        serializableMap26.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap27);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry33 = serializableMap26.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry34 = serializableMap20.nextEntry(strTrieEntry33);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry35 = serializableMap11.previousEntry(strTrieEntry33);
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer36 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean40 = stringKeyAnalyzer36.isBitSet("", (int) (short) 1, (-1));
        java.util.Comparator<java.lang.String> strComparator41 = stringKeyAnalyzer36.reversed();
        boolean boolean45 = stringKeyAnalyzer36.isBitSet("hi!", (int) ' ', (int) (short) 100);
        boolean boolean49 = stringKeyAnalyzer36.isBitSet("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])", (int) (short) 10, 0);
        boolean boolean50 = serializableMap0.replace("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=Trie[0]={\n}\n [0])", (java.io.Serializable) strTrieEntry35, (java.io.Serializable) 0);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(serializableCollection5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(set14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNull(strTrieEntry25);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(strTrieEntry33);
        org.junit.Assert.assertNull(strTrieEntry34);
        org.junit.Assert.assertNull(strTrieEntry35);
        org.junit.Assert.assertNotNull(stringKeyAnalyzer36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strComparator41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry7 = serializableMap0.subtree("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", (int) (byte) 1, (int) (byte) -1);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        int int11 = serializableMap8.modCount;
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet12 = serializableMap8.entrySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap13 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap14.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap14.mapIterator();
        java.util.Set set17 = serializableMap14.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry19 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap13, set17, (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry21 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap8, set17, (-3));
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry24 = serializableMap8.getNearestEntryForKey("", (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable25 = serializableMap0.remove((java.lang.Object) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strTrieEntry7);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strEntrySet12);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(set17);
        org.junit.Assert.assertNotNull(strTrieEntry24);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        serializableMap0.clear();
        org.junit.Assert.assertNotNull(strItor1);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        java.lang.String str8 = serializableMap1.selectKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.Collection<java.io.Serializable> serializableCollection9 = serializableMap1.values();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap11 = serializableMap1.prefixMap("");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(serializableCollection9);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        serializableMap10.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap11);
        java.io.Serializable serializable15 = serializableMap0.put("", (java.io.Serializable) serializableMap10);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        serializableMap17.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap18);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry23 = serializableMap18.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor27 = serializableMap25.mapIterator();
        serializableMap24.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap25);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry31 = serializableMap24.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry32 = serializableMap18.nextEntry(strTrieEntry31);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry34 = serializableMap18.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry36 = serializableMap18.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet37 = serializableMap18.entrySet();
        java.io.Serializable serializable38 = serializableMap0.getOrDefault((java.lang.Object) "Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])", (java.io.Serializable) serializableMap18);
        java.lang.Object obj39 = null;
        java.io.Serializable serializable40 = serializableMap0.get(obj39);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap42 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap42.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap42.mapIterator();
        serializableMap41.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap42);
        java.lang.String str47 = serializableMap41.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap48 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap48.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor50 = serializableMap48.mapIterator();
        java.util.Set set51 = serializableMap48.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap53 = serializableMap48.tailMap("hi!");
        java.io.Serializable serializable55 = serializableMap48.selectValue("");
        boolean boolean58 = serializableMap48.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable59 = serializableMap41.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap60 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap61 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor62 = serializableMap61.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor63 = serializableMap61.mapIterator();
        serializableMap60.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap61);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry67 = serializableMap60.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry68 = serializableMap41.nextEntry(strTrieEntry67);
        java.util.Collection collection69 = serializableMap41.values();
        boolean boolean70 = serializableMap0.equals((java.lang.Object) serializableMap41);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap73 = serializableMap41.subMap("", "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNull(serializable15);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNull(strTrieEntry23);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strTrieEntry31);
        org.junit.Assert.assertNull(strTrieEntry32);
        org.junit.Assert.assertNull(strTrieEntry34);
        org.junit.Assert.assertNull(strEntry36);
        org.junit.Assert.assertNotNull(strEntrySet37);
        org.junit.Assert.assertNotNull(serializable38);
        org.junit.Assert.assertNull(serializable40);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertNotNull(set51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNull(serializable55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(serializable59);
        org.junit.Assert.assertNotNull(strItor62);
        org.junit.Assert.assertNotNull(strItor63);
        org.junit.Assert.assertNotNull(strTrieEntry67);
        org.junit.Assert.assertNull(strTrieEntry68);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strMap73);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.lang.String str3 = serializableMap0.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        int int7 = serializableMap5.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        int int10 = serializableMap8.modCount;
        serializableMap8.clear();
        org.apache.commons.collections4.trie.KeyAnalyzer<? super java.lang.String> wildcardKeyAnalyzer12 = serializableMap8.getKeyAnalyzer();
        boolean boolean13 = serializableMap0.replace("hi!", (java.io.Serializable) serializableMap5, (java.io.Serializable) serializableMap8);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap14 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap15.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap15.mapIterator();
        java.util.Set set18 = serializableMap15.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry20 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap14, set18, (int) ' ');
        java.lang.String str21 = strMapTrieEntry20.toString();
        strMapTrieEntry20.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap24.mapIterator();
        java.util.Set set27 = serializableMap24.keySet();
        boolean boolean29 = serializableMap24.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap24.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection33 = serializableMap31.values();
        java.util.Set<java.lang.String> strSet34 = serializableMap31.keySet();
        java.util.Set set35 = strMapTrieEntry20.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap24, (java.util.Set) strSet34);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap36.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap36.mapIterator();
        java.util.Set set39 = serializableMap36.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap41 = serializableMap36.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap36.mapIterator();
        int int43 = serializableMap36.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap46 = serializableMap36.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable47 = serializableMap24.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        serializableMap24.clear();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap49 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap50 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor51 = serializableMap50.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor52 = serializableMap50.mapIterator();
        serializableMap49.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap50);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap54 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap55 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor56 = serializableMap55.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor57 = serializableMap55.mapIterator();
        serializableMap54.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap55);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry61 = serializableMap54.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry62 = serializableMap50.followRight(strTrieEntry61);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry64 = serializableMap24.addEntry(strTrieEntry61, (-94));
        java.io.Serializable serializable65 = serializableMap0.removeEntry(strTrieEntry61);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap66 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor67 = serializableMap66.mapIterator();
        int int68 = serializableMap66.modCount;
        serializableMap66.clear();
        java.lang.Object obj70 = null;
        boolean boolean71 = serializableMap66.containsKey(obj70);
        serializableMap66.incrementSize();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = serializableMap0.containsValue((java.lang.Object) serializableMap66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardKeyAnalyzer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(set18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str21, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(set27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(serializableCollection33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(set35);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(set39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(serializable47);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(strTrieEntry61);
        org.junit.Assert.assertNull(strTrieEntry62);
        org.junit.Assert.assertNotNull(strTrieEntry64);
        org.junit.Assert.assertNull(serializable65);
        org.junit.Assert.assertNotNull(strItor67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry7 = serializableMap0.subtree("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", (int) (byte) 1, (int) (byte) -1);
        java.util.Comparator<? super java.lang.String> wildcardComparator8 = serializableMap0.comparator();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strTrieEntry7);
        org.junit.Assert.assertNotNull(wildcardComparator8);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        boolean boolean20 = serializableMap1.compareKeys("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        serializableMap21.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap22);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap22.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap28 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap29 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap29.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap29.mapIterator();
        serializableMap28.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap29);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry35 = serializableMap28.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry36 = serializableMap22.nextEntry(strTrieEntry35);
        java.util.Set<java.lang.String> strSet37 = serializableMap22.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap38 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap39 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor40 = serializableMap39.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap39.mapIterator();
        java.util.Set set42 = serializableMap39.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry44 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap38, set42, (int) ' ');
        java.lang.String str45 = strMapTrieEntry44.toString();
        strMapTrieEntry44.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap48 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap48.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor50 = serializableMap48.mapIterator();
        java.util.Set set51 = serializableMap48.keySet();
        boolean boolean53 = serializableMap48.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor54 = serializableMap48.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap55 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor56 = serializableMap55.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection57 = serializableMap55.values();
        java.util.Set<java.lang.String> strSet58 = serializableMap55.keySet();
        java.util.Set set59 = strMapTrieEntry44.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap48, (java.util.Set) strSet58);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry61 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap22, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap48, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = serializableMap1.castKey((java.lang.Object) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Cannot cast java.lang.Character to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNull(strTrieEntry27);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(strTrieEntry35);
        org.junit.Assert.assertNull(strTrieEntry36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(set42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str45, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertNotNull(set51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(serializableCollection57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(set59);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap0.prefixMap("hi!");
        java.util.Set set9 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry11 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap8, set9, (int) (short) 100);
        strMapTrieEntry11.bitIndex = 0;
        java.lang.String str14 = strMapTrieEntry11.toString();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])" + "'", str14, "Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])");
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry8 = serializableMap0.higherEntry("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        java.lang.String str10 = serializableMap0.previousKey("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor={} [0])");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strTrieEntry8);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.Collection<java.io.Serializable> serializableCollection5 = serializableMap0.values();
        java.util.Comparator<? super java.lang.String> wildcardComparator6 = serializableMap0.comparator();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(serializableCollection5);
        org.junit.Assert.assertNotNull(wildcardComparator6);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.size();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry4 = serializableMap0.floorEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strTrieEntry4);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        java.util.Set set15 = serializableMap9.keySet();
        java.util.Set set16 = strMapTrieEntry6.setValue(set15);
        int int17 = strMapTrieEntry6.bitIndex;
        strMapTrieEntry6.bitIndex = 0;
        strMapTrieEntry6.bitIndex = 15;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(set15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("hi!", (int) (short) 1, 10);
        int int7 = stringKeyAnalyzer0.compare("", "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        int int9 = stringKeyAnalyzer0.lengthInBits("Trie[0]={\n}\n");
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-94) + "'", int7 == (-94));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 192 + "'", int9 == 192);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        java.util.Set set15 = serializableMap9.keySet();
        java.util.Set set16 = strMapTrieEntry6.setValue(set15);
        boolean boolean17 = strMapTrieEntry6.isExternalNode();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry18 = strMapTrieEntry6.right;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        serializableMap19.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap20);
        java.lang.String str25 = serializableMap19.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap27 = serializableMap19.prefixMap("hi!");
        java.util.Set set28 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry30 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap27, set28, (int) (short) 100);
        java.util.Set set31 = strMapTrieEntry30.value;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry32 = strMapTrieEntry30.predecessor;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap33 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap34.mapIterator();
        java.util.Set set37 = serializableMap34.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry39 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap33, set37, (int) ' ');
        java.lang.String str40 = strMapTrieEntry39.toString();
        strMapTrieEntry39.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap43 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap43.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor45 = serializableMap43.mapIterator();
        java.util.Set set46 = serializableMap43.keySet();
        boolean boolean48 = serializableMap43.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap43.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap50 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor51 = serializableMap50.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection52 = serializableMap50.values();
        java.util.Set<java.lang.String> strSet53 = serializableMap50.keySet();
        java.util.Set set54 = strMapTrieEntry39.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap43, (java.util.Set) strSet53);
        boolean boolean55 = strMapTrieEntry39.isInternalNode();
        strMapTrieEntry32.predecessor = strMapTrieEntry39;
        boolean boolean57 = strMapTrieEntry6.equals((java.lang.Object) strMapTrieEntry39);
        boolean boolean58 = strMapTrieEntry6.isInternalNode();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(set15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(strMapTrieEntry18);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(set31);
        org.junit.Assert.assertNotNull(strMapTrieEntry32);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(set37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str40, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertNotNull(set46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertNotNull(serializableCollection52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(set54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.modCount;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap3 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor4 = serializableMap3.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap3.mapIterator();
        java.util.Set set6 = serializableMap3.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap3.tailMap("hi!");
        boolean boolean9 = serializableMap0.containsValue((java.lang.Object) strMap8);
        int int10 = serializableMap0.size();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(set6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        java.util.Set<java.lang.String> strSet3 = serializableMap0.keySet();
        int int4 = serializableMap0.size();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry9 = strMapTrieEntry6.predecessor;
        strMapTrieEntry9.bitIndex = (byte) 0;
        boolean boolean12 = strMapTrieEntry9.isInternalNode();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strMapTrieEntry9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasPrevious();
        boolean boolean8 = strItor6.hasPrevious();
        boolean boolean9 = strItor6.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable10 = strItor6.getValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        java.util.Set set14 = serializableMap11.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry16 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap10, set14, (int) ' ');
        java.lang.String str17 = strMapTrieEntry16.toString();
        boolean boolean18 = strMapTrieEntry16.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        java.util.Set set22 = serializableMap19.keySet();
        boolean boolean24 = serializableMap19.containsKey((java.lang.Object) "hi!");
        java.util.Set set25 = serializableMap19.keySet();
        java.util.Set set26 = strMapTrieEntry16.setValue(set25);
        strMapTrieEntry6.right = strMapTrieEntry16;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap28 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap28.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection30 = serializableMap28.values();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap32 = serializableMap28.prefixMap("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap33 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap34.mapIterator();
        java.util.Set set37 = serializableMap34.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry39 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap33, set37, (int) ' ');
        java.lang.String str40 = strMapTrieEntry39.toString();
        strMapTrieEntry39.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap43 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap43.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor45 = serializableMap43.mapIterator();
        java.util.Set set46 = serializableMap43.keySet();
        boolean boolean48 = serializableMap43.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap43.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap50 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor51 = serializableMap50.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection52 = serializableMap50.values();
        java.util.Set<java.lang.String> strSet53 = serializableMap50.keySet();
        java.util.Set set54 = strMapTrieEntry39.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap43, (java.util.Set) strSet53);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap55 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor56 = serializableMap55.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor57 = serializableMap55.mapIterator();
        java.util.Set set58 = serializableMap55.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap60 = serializableMap55.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor61 = serializableMap55.mapIterator();
        int int62 = serializableMap55.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap65 = serializableMap55.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable66 = serializableMap43.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet67 = serializableMap43.entrySet();
        java.util.Set set68 = strMapTrieEntry16.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap28, (java.util.Set) strEntrySet67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = serializableMap28.castKey((java.lang.Object) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Cannot cast java.lang.Integer to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(set14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str17, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(set22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(set26);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(serializableCollection30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(set37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str40, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertNotNull(set46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertNotNull(serializableCollection52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(set54);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(set58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(strItor61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNull(serializable66);
        org.junit.Assert.assertNotNull(strEntrySet67);
        org.junit.Assert.assertNotNull(set68);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        int int5 = serializableMap0.bitsPerElement();
        serializableMap0.modCount = 10;
        boolean boolean8 = serializableMap0.isEmpty();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap9 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry15 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap9, set13, (int) ' ');
        java.lang.String str16 = strMapTrieEntry15.toString();
        strMapTrieEntry15.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        java.util.Set set22 = serializableMap19.keySet();
        boolean boolean24 = serializableMap19.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap19.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap26 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor27 = serializableMap26.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection28 = serializableMap26.values();
        java.util.Set<java.lang.String> strSet29 = serializableMap26.keySet();
        java.util.Set set30 = strMapTrieEntry15.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap19, (java.util.Set) strSet29);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap31.mapIterator();
        java.util.Set set34 = serializableMap31.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap36 = serializableMap31.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap31.mapIterator();
        int int38 = serializableMap31.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap41 = serializableMap31.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable42 = serializableMap19.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry43 = serializableMap19.lastEntry();
        java.util.Comparator comparator44 = serializableMap19.comparator();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable45 = serializableMap0.get((java.lang.Object) comparator44);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str16, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(set22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(serializableCollection28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(set34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNull(serializable42);
        org.junit.Assert.assertNull(strTrieEntry43);
        org.junit.Assert.assertNotNull(comparator44);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        java.util.Set<java.lang.String> strSet7 = serializableMap0.keySet();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        serializableMap8.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap9);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap9.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap16 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap16.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap16.mapIterator();
        serializableMap15.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap16);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry22 = serializableMap15.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry23 = serializableMap9.nextEntry(strTrieEntry22);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry24 = serializableMap0.previousEntry(strTrieEntry22);
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap0.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable26 = strItor25.getValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNull(strTrieEntry14);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(strTrieEntry22);
        org.junit.Assert.assertNull(strTrieEntry23);
        org.junit.Assert.assertNull(strTrieEntry24);
        org.junit.Assert.assertNotNull(strItor25);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        boolean boolean4 = serializableMap0.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap5.mapIterator();
        java.util.Set set8 = serializableMap5.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = serializableMap5.tailMap("hi!");
        java.io.Serializable serializable12 = serializableMap5.selectValue("");
        boolean boolean13 = serializableMap5.isEmpty();
        serializableMap5.clear();
        boolean boolean15 = org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare((java.lang.Object) boolean4, (java.lang.Object) serializableMap5);
        java.lang.String str17 = serializableMap5.nextKey("");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(set8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(serializable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        java.util.Set set15 = serializableMap9.keySet();
        java.util.Set set16 = strMapTrieEntry6.setValue(set15);
        boolean boolean17 = strMapTrieEntry6.isExternalNode();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        serializableMap18.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap19);
        java.lang.String str24 = serializableMap18.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap25.values();
        java.util.Set<java.lang.String> strSet28 = serializableMap25.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet29 = serializableMap25.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet30 = serializableMap25.entrySet();
        java.util.Set set31 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap18, (java.util.Set) strEntrySet30);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry32 = strMapTrieEntry6.left;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap33 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap34.mapIterator();
        java.util.Set set37 = serializableMap34.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry39 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap33, set37, (int) ' ');
        java.lang.String str40 = strMapTrieEntry39.toString();
        strMapTrieEntry39.bitIndex = 0;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap43 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap44 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor45 = serializableMap44.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor46 = serializableMap44.mapIterator();
        java.util.Set set47 = serializableMap44.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry49 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap43, set47, (int) ' ');
        java.lang.String str50 = strMapTrieEntry49.toString();
        boolean boolean51 = strMapTrieEntry49.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap52 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor53 = serializableMap52.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor54 = serializableMap52.mapIterator();
        java.util.Set set55 = serializableMap52.keySet();
        boolean boolean57 = serializableMap52.containsKey((java.lang.Object) "hi!");
        java.util.Set set58 = serializableMap52.keySet();
        java.util.Set set59 = strMapTrieEntry49.setValue(set58);
        strMapTrieEntry39.right = strMapTrieEntry49;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap61 = strMapTrieEntry39.key;
        strMapTrieEntry6.left = strMapTrieEntry39;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(set15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strEntrySet29);
        org.junit.Assert.assertNotNull(strEntrySet30);
        org.junit.Assert.assertNotNull(set31);
        org.junit.Assert.assertNotNull(strMapTrieEntry32);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(set37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str40, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertNotNull(set47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str50, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertNotNull(set55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(set58);
        org.junit.Assert.assertNotNull(set59);
        org.junit.Assert.assertNull(strMap61);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        java.util.Set<java.lang.String> strSet16 = serializableMap1.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry23 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap17, set21, (int) ' ');
        java.lang.String str24 = strMapTrieEntry23.toString();
        strMapTrieEntry23.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        boolean boolean32 = serializableMap27.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap27.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection36 = serializableMap34.values();
        java.util.Set<java.lang.String> strSet37 = serializableMap34.keySet();
        java.util.Set set38 = strMapTrieEntry23.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap27, (java.util.Set) strSet37);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry40 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap27, (int) '4');
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap41.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap41.mapIterator();
        int int44 = serializableMap41.modCount;
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet45 = serializableMap41.entrySet();
        boolean boolean46 = serializableMap1.containsValue((java.lang.Object) strEntrySet45);
        java.lang.String str48 = serializableMap1.nextKey("Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap1.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap51 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor52 = serializableMap51.mapIterator();
        int int53 = serializableMap51.modCount;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap55 = serializableMap51.prefixMap("");
        java.io.Serializable serializable56 = serializableMap1.put("Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])", (java.io.Serializable) "");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str24, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(serializableCollection36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(set38);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(strEntrySet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNull(serializable56);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        serializableMap1.incrementSize();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap7.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap7.mapIterator();
        java.util.Set set10 = serializableMap7.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap12 = serializableMap7.tailMap("hi!");
        java.io.Serializable serializable14 = serializableMap7.selectValue("");
        boolean boolean17 = serializableMap7.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable18 = serializableMap0.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        serializableMap19.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap20);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry26 = serializableMap19.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap0.nextEntry(strTrieEntry26);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap28 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap28.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection30 = serializableMap28.values();
        int int31 = serializableMap28.modCount;
        boolean boolean32 = serializableMap28.isEmpty();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap28.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap35.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap35.mapIterator();
        serializableMap34.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap35);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap39 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap40 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap40.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap40.mapIterator();
        serializableMap39.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap40);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry46 = serializableMap39.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry47 = serializableMap35.followRight(strTrieEntry46);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry49 = serializableMap28.addEntry(strTrieEntry46, 0);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry50 = serializableMap0.nextEntry(strTrieEntry46);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(set10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(serializable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(serializable18);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strTrieEntry26);
        org.junit.Assert.assertNull(strTrieEntry27);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(serializableCollection30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strTrieEntry46);
        org.junit.Assert.assertNull(strTrieEntry47);
        org.junit.Assert.assertNotNull(strTrieEntry49);
        org.junit.Assert.assertNull(strTrieEntry50);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        boolean boolean22 = strMapTrieEntry6.isInternalNode();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap23.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection25 = serializableMap23.values();
        int int26 = serializableMap23.modCount;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry30 = serializableMap23.subtree("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", (int) (byte) 1, (int) (byte) -1);
        strMapTrieEntry6.key = serializableMap23;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry32 = strMapTrieEntry6.predecessor;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap33 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap33.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap33.mapIterator();
        java.util.Set set36 = serializableMap33.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap38 = serializableMap33.prefixMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        int int40 = serializableMap33.lengthInBits("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap42 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap42.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap42.mapIterator();
        serializableMap41.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap42);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry47 = serializableMap42.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap48 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap49 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor50 = serializableMap49.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor51 = serializableMap49.mapIterator();
        serializableMap48.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap49);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry55 = serializableMap48.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry56 = serializableMap42.nextEntry(strTrieEntry55);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry58 = serializableMap42.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        int int60 = serializableMap42.lengthInBits("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set<java.lang.String> strSet61 = serializableMap42.keySet();
        java.util.Set set62 = strMapTrieEntry32.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap33, (java.util.Set) strSet61);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap63 = strMapTrieEntry32.getKey();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap64 = strMapTrieEntry32.getKey();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(strTrieEntry30);
        org.junit.Assert.assertNotNull(strMapTrieEntry32);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(set36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 48 + "'", int40 == 48);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNull(strTrieEntry47);
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertNotNull(strTrieEntry55);
        org.junit.Assert.assertNull(strTrieEntry56);
        org.junit.Assert.assertNull(strTrieEntry58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1456 + "'", int60 == 1456);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(set62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(strMap64);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        int int7 = serializableMap0.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        serializableMap9.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap10);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap15 = serializableMap10.headMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator16 = serializableMap10.mapIterator();
        java.io.Serializable serializable17 = serializableMap0.replace("", (java.io.Serializable) serializableMap10);
        java.util.Comparator<? super java.lang.String> wildcardComparator18 = serializableMap0.comparator();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry20 = serializableMap0.ceilingEntry("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        serializableMap21.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap22);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap22.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap28 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap29 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap29.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap29.mapIterator();
        serializableMap28.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap29);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry35 = serializableMap28.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry36 = serializableMap22.nextEntry(strTrieEntry35);
        java.util.Set<java.lang.String> strSet37 = serializableMap22.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap38 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap39 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor40 = serializableMap39.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap39.mapIterator();
        java.util.Set set42 = serializableMap39.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry44 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap38, set42, (int) ' ');
        java.lang.String str45 = strMapTrieEntry44.toString();
        strMapTrieEntry44.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap48 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap48.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor50 = serializableMap48.mapIterator();
        java.util.Set set51 = serializableMap48.keySet();
        boolean boolean53 = serializableMap48.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor54 = serializableMap48.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap55 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor56 = serializableMap55.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection57 = serializableMap55.values();
        java.util.Set<java.lang.String> strSet58 = serializableMap55.keySet();
        java.util.Set set59 = strMapTrieEntry44.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap48, (java.util.Set) strSet58);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry61 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap22, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap48, (int) '4');
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap62 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor63 = serializableMap62.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor64 = serializableMap62.mapIterator();
        java.util.Set set65 = serializableMap62.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap67 = serializableMap62.tailMap("hi!");
        java.io.Serializable serializable69 = serializableMap62.selectValue("");
        boolean boolean70 = serializableMap62.isEmpty();
        serializableMap62.clear();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry75 = serializableMap62.subtree("", 0, 1);
        java.io.Serializable serializable76 = serializableMap48.remove((java.lang.Object) "");
        boolean boolean77 = serializableMap0.containsValue((java.lang.Object) serializableMap48);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(orderedMapIterator16);
        org.junit.Assert.assertNull(serializable17);
        org.junit.Assert.assertNotNull(wildcardComparator18);
        org.junit.Assert.assertNull(strTrieEntry20);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNull(strTrieEntry27);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(strTrieEntry35);
        org.junit.Assert.assertNull(strTrieEntry36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(set42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str45, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertNotNull(set51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(serializableCollection57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(set59);
        org.junit.Assert.assertNotNull(strItor63);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertNotNull(set65);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNull(serializable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(strTrieEntry75);
        org.junit.Assert.assertNull(serializable76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        serializableMap0.clear();
        java.lang.String str11 = serializableMap0.nextKey("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap12.mapIterator();
        int int14 = serializableMap12.modCount;
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap12);
        java.util.Collection<java.io.Serializable> serializableCollection16 = serializableMap12.values();
        java.util.Comparator<? super java.lang.String> wildcardComparator17 = serializableMap12.comparator();
        java.util.Collection<java.io.Serializable> serializableCollection18 = serializableMap12.values();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(serializableCollection16);
        org.junit.Assert.assertNotNull(wildcardComparator17);
        org.junit.Assert.assertNotNull(serializableCollection18);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("", (int) (short) 1, (-1));
        int int7 = stringKeyAnalyzer0.compare("Trie[0]={\n}\n", "hi!");
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-20) + "'", int7 == (-20));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.lang.String str3 = serializableMap0.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap4 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap5.mapIterator();
        java.util.Set set8 = serializableMap5.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry10 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap4, set8, (int) ' ');
        java.lang.String str11 = strMapTrieEntry10.toString();
        strMapTrieEntry10.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap14.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap14.mapIterator();
        java.util.Set set17 = serializableMap14.keySet();
        boolean boolean19 = serializableMap14.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap14.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap21.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection23 = serializableMap21.values();
        java.util.Set<java.lang.String> strSet24 = serializableMap21.keySet();
        java.util.Set set25 = strMapTrieEntry10.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap14, (java.util.Set) strSet24);
        boolean boolean26 = serializableMap0.containsValue((java.lang.Object) strSet24);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap32 = serializableMap27.tailMap("hi!");
        java.io.Serializable serializable34 = serializableMap27.selectValue("");
        boolean boolean35 = serializableMap27.isEmpty();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap27);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap37 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap37.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor39 = serializableMap37.mapIterator();
        java.util.Set set40 = serializableMap37.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap42 = serializableMap37.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap37.mapIterator();
        int int44 = serializableMap37.size();
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry46 = serializableMap37.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set set47 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry49 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap37, set47, 0);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap51 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor52 = serializableMap51.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor53 = serializableMap51.mapIterator();
        java.util.Set set54 = serializableMap51.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap56 = serializableMap51.tailMap("hi!");
        java.util.Comparator<? super java.lang.String> wildcardComparator57 = serializableMap51.comparator();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry60 = serializableMap51.getNearestEntryForKey("Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])", 1);
        java.io.Serializable serializable61 = serializableMap37.putIfAbsent("hi!", (java.io.Serializable) strTrieEntry60);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry63 = serializableMap0.addEntry(strTrieEntry60, (int) (byte) -1);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(set8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str11, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(set17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(serializableCollection23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(serializable34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(set40);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(strEntry46);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertNotNull(set54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(wildcardComparator57);
        org.junit.Assert.assertNotNull(strTrieEntry60);
        org.junit.Assert.assertNull(serializable61);
        org.junit.Assert.assertNotNull(strTrieEntry63);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.Object obj5 = null;
        boolean boolean6 = serializableMap1.containsValue(obj5);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        boolean boolean4 = serializableMap0.isEmpty();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap0.mapIterator();
        java.util.Comparator comparator6 = serializableMap0.comparator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedMap<java.lang.String, java.io.Serializable> strMap9 = serializableMap0.subMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=Trie[0]={\n}\n [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey > toKey");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(comparator6);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        boolean boolean22 = strMapTrieEntry6.isInternalNode();
        int int23 = strMapTrieEntry6.bitIndex;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection26 = serializableMap24.values();
        java.util.Set<java.lang.String> strSet27 = serializableMap24.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet28 = serializableMap24.entrySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap31 = serializableMap24.subMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", "hi!");
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry33 = serializableMap24.select("");
        java.util.Set set34 = null;
        java.util.Set set35 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap24, set34);
        java.lang.String str36 = strMapTrieEntry6.toString();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry37 = strMapTrieEntry6.left;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(serializableCollection26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strEntrySet28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(strEntry33);
        org.junit.Assert.assertNotNull(set35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])" + "'", str36, "Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.junit.Assert.assertNotNull(strMapTrieEntry37);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.modCount;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap3 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor4 = serializableMap3.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap3.mapIterator();
        java.util.Set set6 = serializableMap3.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap3.tailMap("hi!");
        boolean boolean9 = serializableMap0.containsValue((java.lang.Object) strMap8);
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator10 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection11 = serializableMap0.values();
        int int12 = serializableMap0.bitsPerElement();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet13 = serializableMap0.entrySet();
        java.lang.Class<?> wildcardClass14 = serializableMap0.getClass();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(set6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(orderedMapIterator10);
        org.junit.Assert.assertNotNull(serializableCollection11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
        org.junit.Assert.assertNotNull(strEntrySet13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        boolean boolean1 = org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(3);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        boolean boolean22 = strMapTrieEntry6.isInternalNode();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap23.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection25 = serializableMap23.values();
        int int26 = serializableMap23.modCount;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry30 = serializableMap23.subtree("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", (int) (byte) 1, (int) (byte) -1);
        strMapTrieEntry6.key = serializableMap23;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap33 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap33.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap33.mapIterator();
        serializableMap32.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap33);
        int int37 = serializableMap32.bitsPerElement();
        serializableMap32.modCount = 10;
        boolean boolean40 = serializableMap32.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap32);
        serializableMap23.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap41);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(strTrieEntry30);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 16 + "'", int37 == 16);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        java.util.Set set14 = serializableMap11.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry16 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap10, set14, (int) ' ');
        java.lang.String str17 = strMapTrieEntry16.toString();
        boolean boolean18 = strMapTrieEntry16.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        java.util.Set set22 = serializableMap19.keySet();
        boolean boolean24 = serializableMap19.containsKey((java.lang.Object) "hi!");
        java.util.Set set25 = serializableMap19.keySet();
        java.util.Set set26 = strMapTrieEntry16.setValue(set25);
        strMapTrieEntry6.right = strMapTrieEntry16;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry28 = strMapTrieEntry16.right;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry29 = strMapTrieEntry16.predecessor;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(set14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str17, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(set22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(set26);
        org.junit.Assert.assertNull(strMapTrieEntry28);
        org.junit.Assert.assertNotNull(strMapTrieEntry29);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.util.Comparator<? super java.lang.String> wildcardComparator6 = serializableMap0.comparator();
        int int7 = serializableMap0.size();
        java.lang.String str9 = serializableMap0.nextKey("Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap11 = serializableMap0.tailMap("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(wildcardComparator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        java.util.Set set25 = serializableMap22.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap27 = serializableMap22.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap22.mapIterator();
        int int29 = serializableMap22.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap32 = serializableMap22.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable33 = serializableMap10.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        serializableMap10.clear();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap36.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap36.mapIterator();
        serializableMap35.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap36);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap40 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap41.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap41.mapIterator();
        serializableMap40.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap41);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry47 = serializableMap40.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry48 = serializableMap36.followRight(strTrieEntry47);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry50 = serializableMap10.addEntry(strTrieEntry47, (-94));
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap52 = serializableMap10.tailMap("Trie[0]={\n}\n");
        serializableMap10.modCount = 1;
        java.util.Set<java.lang.String> strSet55 = serializableMap10.keySet();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(serializable33);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(strTrieEntry47);
        org.junit.Assert.assertNull(strTrieEntry48);
        org.junit.Assert.assertNotNull(strTrieEntry50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strSet55);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        int int8 = serializableMap6.modCount;
        serializableMap6.clear();
        java.io.Serializable serializable10 = serializableMap0.replace("", (java.io.Serializable) serializableMap6);
        int int11 = serializableMap0.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap13.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap13.mapIterator();
        serializableMap12.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap13);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        int int20 = serializableMap18.modCount;
        serializableMap18.clear();
        java.io.Serializable serializable22 = serializableMap12.replace("", (java.io.Serializable) serializableMap18);
        java.io.Serializable serializable23 = serializableMap0.get((java.lang.Object) serializable22);
        java.util.Collection<java.io.Serializable> serializableCollection24 = serializableMap0.values();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(serializable10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(serializable22);
        org.junit.Assert.assertNull(serializable23);
        org.junit.Assert.assertNotNull(serializableCollection24);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.size();
        java.util.Set<java.lang.String> strSet3 = serializableMap0.keySet();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        int int5 = serializableMap0.bitsPerElement();
        java.io.Serializable serializable8 = serializableMap0.replace("hi!", (java.io.Serializable) (-1.0d));
        int int9 = serializableMap0.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap15 = serializableMap10.tailMap("hi!");
        java.io.Serializable serializable17 = serializableMap10.selectValue("");
        boolean boolean18 = serializableMap10.isEmpty();
        serializableMap10.clear();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry23 = serializableMap10.subtree("", 0, 1);
        int int24 = serializableMap10.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = serializableMap0.containsKey((java.lang.Object) int24);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNull(serializable8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(serializable17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strTrieEntry23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        serializableMap10.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap11);
        java.io.Serializable serializable15 = serializableMap0.put("", (java.io.Serializable) serializableMap10);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        serializableMap17.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap18);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry23 = serializableMap18.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor27 = serializableMap25.mapIterator();
        serializableMap24.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap25);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry31 = serializableMap24.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry32 = serializableMap18.nextEntry(strTrieEntry31);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry34 = serializableMap18.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry36 = serializableMap18.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet37 = serializableMap18.entrySet();
        java.io.Serializable serializable38 = serializableMap0.getOrDefault((java.lang.Object) "Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])", (java.io.Serializable) serializableMap18);
        java.lang.Object obj39 = null;
        java.io.Serializable serializable40 = serializableMap0.get(obj39);
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap0.mapIterator();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNull(serializable15);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNull(strTrieEntry23);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strTrieEntry31);
        org.junit.Assert.assertNull(strTrieEntry32);
        org.junit.Assert.assertNull(strTrieEntry34);
        org.junit.Assert.assertNull(strEntry36);
        org.junit.Assert.assertNotNull(strEntrySet37);
        org.junit.Assert.assertNotNull(serializable38);
        org.junit.Assert.assertNull(serializable40);
        org.junit.Assert.assertNotNull(strItor41);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        java.util.Set<java.lang.String> strSet7 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap9 = serializableMap0.prefixMap("");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        java.util.Set set15 = serializableMap9.keySet();
        java.util.Set set16 = strMapTrieEntry6.setValue(set15);
        boolean boolean17 = strMapTrieEntry6.isExternalNode();
        boolean boolean18 = strMapTrieEntry6.isInternalNode();
        java.util.Set set19 = null;
        strMapTrieEntry6.value = set19;
        strMapTrieEntry6.bitIndex = (short) 0;
        boolean boolean23 = strMapTrieEntry6.isExternalNode();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        int int26 = serializableMap24.modCount;
        java.util.Set set27 = serializableMap24.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet28 = serializableMap24.entrySet();
        strMapTrieEntry6.value = strEntrySet28;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(set15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(set27);
        org.junit.Assert.assertNotNull(strEntrySet28);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        serializableMap10.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap11);
        java.io.Serializable serializable15 = serializableMap0.put("", (java.io.Serializable) serializableMap10);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        serializableMap17.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap18);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry23 = serializableMap18.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor27 = serializableMap25.mapIterator();
        serializableMap24.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap25);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry31 = serializableMap24.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry32 = serializableMap18.nextEntry(strTrieEntry31);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry34 = serializableMap18.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry36 = serializableMap18.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet37 = serializableMap18.entrySet();
        java.io.Serializable serializable38 = serializableMap0.getOrDefault((java.lang.Object) "Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])", (java.io.Serializable) serializableMap18);
        java.lang.Object obj39 = null;
        java.io.Serializable serializable40 = serializableMap0.get(obj39);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap42 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap42.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap42.mapIterator();
        serializableMap41.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap42);
        java.lang.String str47 = serializableMap41.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap48 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap48.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor50 = serializableMap48.mapIterator();
        java.util.Set set51 = serializableMap48.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap53 = serializableMap48.tailMap("hi!");
        java.io.Serializable serializable55 = serializableMap48.selectValue("");
        boolean boolean58 = serializableMap48.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable59 = serializableMap41.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap60 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap61 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor62 = serializableMap61.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor63 = serializableMap61.mapIterator();
        serializableMap60.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap61);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry67 = serializableMap60.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry68 = serializableMap41.nextEntry(strTrieEntry67);
        java.util.Collection collection69 = serializableMap41.values();
        boolean boolean70 = serializableMap0.equals((java.lang.Object) serializableMap41);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap71 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap72 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor73 = serializableMap72.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor74 = serializableMap72.mapIterator();
        serializableMap71.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap72);
        java.lang.String str77 = serializableMap71.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap78 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor79 = serializableMap78.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor80 = serializableMap78.mapIterator();
        java.util.Set set81 = serializableMap78.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap83 = serializableMap78.tailMap("hi!");
        java.io.Serializable serializable85 = serializableMap78.selectValue("");
        boolean boolean88 = serializableMap78.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable89 = serializableMap71.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.lang.Object obj90 = null;
        boolean boolean91 = serializableMap71.containsKey(obj90);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = serializableMap41.containsKey((java.lang.Object) boolean91);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNull(serializable15);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNull(strTrieEntry23);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strTrieEntry31);
        org.junit.Assert.assertNull(strTrieEntry32);
        org.junit.Assert.assertNull(strTrieEntry34);
        org.junit.Assert.assertNull(strEntry36);
        org.junit.Assert.assertNotNull(strEntrySet37);
        org.junit.Assert.assertNotNull(serializable38);
        org.junit.Assert.assertNull(serializable40);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertNotNull(set51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNull(serializable55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(serializable59);
        org.junit.Assert.assertNotNull(strItor62);
        org.junit.Assert.assertNotNull(strItor63);
        org.junit.Assert.assertNotNull(strTrieEntry67);
        org.junit.Assert.assertNull(strTrieEntry68);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strItor73);
        org.junit.Assert.assertNotNull(strItor74);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strItor79);
        org.junit.Assert.assertNotNull(strItor80);
        org.junit.Assert.assertNotNull(set81);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNull(serializable85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(serializable89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        serializableMap0.clear();
        java.lang.String str11 = serializableMap0.nextKey("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap12.mapIterator();
        int int14 = serializableMap12.modCount;
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap12);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = serializableMap12.headMap("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        java.util.Set<java.lang.String> strSet18 = serializableMap12.keySet();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("", (int) (short) 1, (-1));
        java.util.Comparator<java.lang.String> strComparator5 = stringKeyAnalyzer0.reversed();
        boolean boolean9 = stringKeyAnalyzer0.isBitSet("hi!", (int) ' ', (int) (short) 100);
        int int12 = stringKeyAnalyzer0.compare("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = stringKeyAnalyzer0.isPrefix("Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])", (int) 'a', 32, "Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor={} [0])");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot determine prefix outside of Character boundaries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 26 + "'", int12 == 26);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.modCount;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap3 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor4 = serializableMap3.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap3.mapIterator();
        java.util.Set set6 = serializableMap3.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap3.tailMap("hi!");
        boolean boolean9 = serializableMap0.containsValue((java.lang.Object) strMap8);
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator10 = serializableMap0.mapIterator();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry12 = serializableMap0.ceilingEntry("Entry(key=null [0], value=[], parent=null, left=null [0], right=null [32], predecessor=null [0])");
        java.util.Collection<java.io.Serializable> serializableCollection13 = serializableMap0.values();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(set6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(orderedMapIterator10);
        org.junit.Assert.assertNull(strTrieEntry12);
        org.junit.Assert.assertNotNull(serializableCollection13);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap6.mapIterator();
        serializableMap5.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap6);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry12 = serializableMap5.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry13 = serializableMap1.followRight(strTrieEntry12);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap14.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap14.mapIterator();
        java.util.Set set17 = serializableMap14.keySet();
        serializableMap14.clear();
        java.lang.String str20 = serializableMap14.selectKey("");
        java.lang.String str22 = serializableMap14.nextKey("");
        int int23 = serializableMap14.bitsPerElement();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor27 = serializableMap25.mapIterator();
        serializableMap24.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap25);
        java.lang.String str30 = serializableMap24.previousKey("hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry32 = serializableMap24.higherEntry("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        java.util.Set set33 = serializableMap24.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry35 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap14, set33, 171);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable36 = serializableMap1.remove((java.lang.Object) set33);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strTrieEntry12);
        org.junit.Assert.assertNull(strTrieEntry13);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(set17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 16 + "'", int23 == 16);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strTrieEntry32);
        org.junit.Assert.assertNotNull(set33);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        java.lang.String str10 = serializableMap0.nextKey("");
        java.util.Set<java.lang.String> strSet11 = serializableMap0.keySet();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        boolean boolean6 = serializableMap1.equals((java.lang.Object) (-1.0f));
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap1.headMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = serializableMap1.tailMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap12.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap12.mapIterator();
        serializableMap11.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap12);
        int int16 = serializableMap11.bitsPerElement();
        serializableMap11.modCount = 10;
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable19 = serializableMap1.get((java.lang.Object) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap1 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap2 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap2.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor4 = serializableMap2.mapIterator();
        java.util.Set set5 = serializableMap2.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry7 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap1, set5, (int) ' ');
        java.lang.String str8 = strMapTrieEntry7.toString();
        strMapTrieEntry7.bitIndex = 0;
        java.lang.String str11 = strMapTrieEntry7.toString();
        int int12 = strMapTrieEntry7.bitIndex;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap14.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap14.mapIterator();
        serializableMap13.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry19 = serializableMap14.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap21.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap21.mapIterator();
        serializableMap20.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap21);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap20.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry28 = serializableMap14.nextEntry(strTrieEntry27);
        java.util.Set<java.lang.String> strSet29 = serializableMap14.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap30 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap31.mapIterator();
        java.util.Set set34 = serializableMap31.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry36 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap30, set34, (int) ' ');
        java.lang.String str37 = strMapTrieEntry36.toString();
        strMapTrieEntry36.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap40 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap40.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap40.mapIterator();
        java.util.Set set43 = serializableMap40.keySet();
        boolean boolean45 = serializableMap40.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor46 = serializableMap40.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap47 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor48 = serializableMap47.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection49 = serializableMap47.values();
        java.util.Set<java.lang.String> strSet50 = serializableMap47.keySet();
        java.util.Set set51 = strMapTrieEntry36.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap40, (java.util.Set) strSet50);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry53 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap14, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap40, (int) '4');
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap54 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor55 = serializableMap54.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor56 = serializableMap54.mapIterator();
        int int57 = serializableMap54.modCount;
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet58 = serializableMap54.entrySet();
        boolean boolean59 = serializableMap14.containsValue((java.lang.Object) strEntrySet58);
        java.util.Set set60 = strMapTrieEntry7.setValue((java.util.Set) strEntrySet58);
        java.lang.String str61 = strMapTrieEntry7.toString();
        java.util.Set set62 = strMapTrieEntry7.value;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.CharSequence, java.util.Map.Entry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>> charSequenceTrieEntry64 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.CharSequence, java.util.Map.Entry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>>((java.lang.CharSequence) "hi!", (java.util.Map.Entry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>) strMapTrieEntry7, 0);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(set5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str8, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])" + "'", str11, "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNull(strTrieEntry19);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strTrieEntry27);
        org.junit.Assert.assertNull(strTrieEntry28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(set34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str37, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(set43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(serializableCollection49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(set51);
        org.junit.Assert.assertNotNull(strItor55);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(strEntrySet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(set60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])" + "'", str61, "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.junit.Assert.assertNotNull(set62);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        java.util.Set set15 = serializableMap9.keySet();
        java.util.Set set16 = strMapTrieEntry6.setValue(set15);
        boolean boolean17 = strMapTrieEntry6.isExternalNode();
        java.util.Set set18 = strMapTrieEntry6.getValue();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        java.util.Set set22 = serializableMap19.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap24 = serializableMap19.tailMap("hi!");
        java.io.Serializable serializable26 = serializableMap19.selectValue("");
        boolean boolean27 = serializableMap19.isEmpty();
        java.lang.String str29 = serializableMap19.nextKey("");
        java.util.Comparator<? super java.lang.String> wildcardComparator30 = serializableMap19.comparator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap31.mapIterator();
        java.util.Set set34 = serializableMap31.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap36 = serializableMap31.tailMap("hi!");
        java.util.Set<java.lang.String> strSet37 = serializableMap31.keySet();
        java.util.Set set38 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap19, (java.util.Set) strSet37);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(set15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(set18);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(set22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(serializable26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(wildcardComparator30);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(set34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(set38);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        int int1 = serializableMap0.size();
        java.lang.String str3 = serializableMap0.nextKey("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap4 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap5.mapIterator();
        serializableMap4.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap5);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry10 = serializableMap5.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap12.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap12.mapIterator();
        serializableMap11.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap12);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry18 = serializableMap11.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry19 = serializableMap5.nextEntry(strTrieEntry18);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry21 = serializableMap5.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        boolean boolean24 = serializableMap5.compareKeys("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor27 = serializableMap25.mapIterator();
        java.util.Set set28 = serializableMap25.keySet();
        boolean boolean30 = serializableMap25.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry34 = serializableMap25.subtree("hi!", 16, 0);
        java.io.Serializable serializable35 = serializableMap5.remove((java.lang.Object) strTrieEntry34);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable36 = serializableMap0.remove((java.lang.Object) serializableMap5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNull(strTrieEntry10);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strTrieEntry18);
        org.junit.Assert.assertNull(strTrieEntry19);
        org.junit.Assert.assertNull(strTrieEntry21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(set28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strTrieEntry34);
        org.junit.Assert.assertNull(serializable35);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        java.lang.String str12 = serializableMap9.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap13 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap14.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap14.mapIterator();
        java.util.Set set17 = serializableMap14.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry19 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap13, set17, (int) ' ');
        java.lang.String str20 = strMapTrieEntry19.toString();
        strMapTrieEntry19.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap23.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap23.mapIterator();
        java.util.Set set26 = serializableMap23.keySet();
        boolean boolean28 = serializableMap23.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap23.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap30 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap30.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection32 = serializableMap30.values();
        java.util.Set<java.lang.String> strSet33 = serializableMap30.keySet();
        java.util.Set set34 = strMapTrieEntry19.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap23, (java.util.Set) strSet33);
        boolean boolean35 = serializableMap9.containsValue((java.lang.Object) strSet33);
        strMapTrieEntry6.value = strSet33;
        java.util.Set set37 = strMapTrieEntry6.value;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(set17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str20, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(set26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(serializableCollection32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(set34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(set37);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.io.Serializable serializable19 = null;
        boolean boolean21 = serializableMap1.replace("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", serializable19, (java.io.Serializable) (-1.0d));
        int int22 = serializableMap1.size();
        java.util.Collection<java.io.Serializable> serializableCollection23 = serializableMap1.values();
        java.util.Comparator<? super java.lang.String> wildcardComparator24 = serializableMap1.comparator();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(serializableCollection23);
        org.junit.Assert.assertNotNull(wildcardComparator24);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        boolean boolean1 = org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        int int9 = serializableMap0.bitIndex("", "");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry11 = serializableMap0.ceilingEntry("Trie[0]={\n}\n");
        org.apache.commons.collections4.trie.KeyAnalyzer<? super java.lang.String> wildcardKeyAnalyzer12 = serializableMap0.getKeyAnalyzer();
        int int14 = wildcardKeyAnalyzer12.lengthInBits("Entry(key=null [0], value=[], parent=null, left=null [0], right=null [32], predecessor=null [0])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(strTrieEntry11);
        org.junit.Assert.assertNotNull(wildcardKeyAnalyzer12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1536 + "'", int14 == 1536);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        serializableMap0.decrementSize();
        org.junit.Assert.assertNotNull(strItor1);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        boolean boolean6 = serializableMap1.equals((java.lang.Object) (-1.0f));
        serializableMap1.modCount = 9;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        java.lang.Object obj22 = null;
        boolean boolean23 = serializableMap10.containsKey(obj22);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap26 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor27 = serializableMap26.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap26.mapIterator();
        serializableMap25.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap26);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry31 = serializableMap26.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap33 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap33.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap33.mapIterator();
        serializableMap32.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap33);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry39 = serializableMap32.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry40 = serializableMap26.nextEntry(strTrieEntry39);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry42 = serializableMap26.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.io.Serializable serializable43 = serializableMap10.put("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=Trie[0]={\n}\n [0])", (java.io.Serializable) strTrieEntry42);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNull(strTrieEntry31);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(strTrieEntry39);
        org.junit.Assert.assertNull(strTrieEntry40);
        org.junit.Assert.assertNull(strTrieEntry42);
        org.junit.Assert.assertNull(serializable43);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        int int3 = stringKeyAnalyzer0.compare("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Comparator<java.lang.String> strComparator4 = stringKeyAnalyzer0.reversed();
        int int7 = stringKeyAnalyzer0.compare("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-26) + "'", int3 == (-26));
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 26 + "'", int7 == 26);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        int int7 = serializableMap0.size();
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry9 = serializableMap0.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set set10 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry12 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap0, set10, 0);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap14 = serializableMap0.prefixMap("Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.modCount;
        serializableMap0.clear();
        java.lang.Object obj4 = null;
        boolean boolean5 = serializableMap0.containsKey(obj4);
        java.util.Comparator<? super java.lang.String> wildcardComparator6 = serializableMap0.comparator();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap7 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        java.util.Set set11 = serializableMap8.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry13 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap7, set11, (int) ' ');
        java.lang.String str14 = strMapTrieEntry13.toString();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap15 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap16 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap16.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap16.mapIterator();
        java.util.Set set19 = serializableMap16.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry21 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap15, set19, (int) ' ');
        java.lang.String str22 = strMapTrieEntry21.toString();
        strMapTrieEntry21.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor27 = serializableMap25.mapIterator();
        java.util.Set set28 = serializableMap25.keySet();
        boolean boolean30 = serializableMap25.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap25.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap32.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection34 = serializableMap32.values();
        java.util.Set<java.lang.String> strSet35 = serializableMap32.keySet();
        java.util.Set set36 = strMapTrieEntry21.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap25, (java.util.Set) strSet35);
        strMapTrieEntry13.predecessor = strMapTrieEntry21;
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable38 = serializableMap0.remove((java.lang.Object) strMapTrieEntry21);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardComparator6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(set11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str14, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(set19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str22, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(set28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(serializableCollection34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(set36);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry8 = serializableMap0.higherEntry("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        java.util.Set set9 = serializableMap0.keySet();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection12 = serializableMap10.values();
        java.util.Set<java.lang.String> strSet13 = serializableMap10.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet14 = serializableMap10.entrySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = serializableMap10.subMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", "hi!");
        boolean boolean18 = serializableMap0.containsValue((java.lang.Object) "hi!");
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap0.mapIterator();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strTrieEntry8);
        org.junit.Assert.assertNotNull(set9);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(serializableCollection12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strEntrySet14);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strItor19);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        java.util.Set<java.lang.String> strSet16 = serializableMap1.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry23 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap17, set21, (int) ' ');
        java.lang.String str24 = strMapTrieEntry23.toString();
        strMapTrieEntry23.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        boolean boolean32 = serializableMap27.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap27.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection36 = serializableMap34.values();
        java.util.Set<java.lang.String> strSet37 = serializableMap34.keySet();
        java.util.Set set38 = strMapTrieEntry23.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap27, (java.util.Set) strSet37);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry40 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap27, (int) '4');
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap41.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap41.mapIterator();
        java.util.Set set44 = serializableMap41.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap46 = serializableMap41.tailMap("hi!");
        java.io.Serializable serializable48 = serializableMap41.selectValue("");
        boolean boolean49 = serializableMap41.isEmpty();
        serializableMap41.clear();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry54 = serializableMap41.subtree("", 0, 1);
        java.io.Serializable serializable55 = serializableMap27.remove((java.lang.Object) "");
        java.util.Set set56 = serializableMap27.keySet();
        java.util.Comparator<? super java.lang.String> wildcardComparator57 = serializableMap27.comparator();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str24, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(serializableCollection36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(set38);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(set44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(serializable48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(strTrieEntry54);
        org.junit.Assert.assertNull(serializable55);
        org.junit.Assert.assertNotNull(set56);
        org.junit.Assert.assertNotNull(wildcardComparator57);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("hi!", (int) (short) 1, 10);
        boolean boolean8 = stringKeyAnalyzer0.isBitSet("", (-1), (-3));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = stringKeyAnalyzer0.isBitSet("", (int) (short) 10, 1536);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        boolean boolean6 = serializableMap1.equals((java.lang.Object) (-1.0f));
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap1.headMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry9 = serializableMap1.firstEntry();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry10 = serializableMap1.firstEntry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = serializableMap1.firstKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(strTrieEntry9);
        org.junit.Assert.assertNull(strTrieEntry10);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        serializableMap0.clear();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap6.mapIterator();
        serializableMap5.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap6);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry12 = serializableMap5.getNearestEntryForKey("", (int) ' ');
        boolean boolean13 = serializableMap0.equals((java.lang.Object) "");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap0.subtree("", (int) (byte) 1, (int) (short) 0);
        java.util.Comparator comparator18 = serializableMap0.comparator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        java.util.Set set22 = serializableMap19.keySet();
        serializableMap19.clear();
        java.lang.String str25 = serializableMap19.selectKey("");
        java.io.Serializable serializable27 = serializableMap19.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry28 = serializableMap19.lastEntry();
        boolean boolean29 = serializableMap0.containsValue((java.lang.Object) serializableMap19);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strTrieEntry12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertNotNull(comparator18);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(set22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(serializable27);
        org.junit.Assert.assertNull(strTrieEntry28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("hi!", (int) (short) 1, 10);
        int int6 = stringKeyAnalyzer0.lengthInBits("");
        int int9 = stringKeyAnalyzer0.compare("", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        // The following exception was thrown during execution in test generation
        try {
            int int16 = stringKeyAnalyzer0.bitIndex("Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])", (int) (short) 10, (int) '4', "Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor={} [0])", (-91), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The offsets and lengths must be at Character boundaries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-91) + "'", int9 == (-91));
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        java.util.Set set15 = serializableMap9.keySet();
        java.util.Set set16 = strMapTrieEntry6.setValue(set15);
        boolean boolean17 = strMapTrieEntry6.isExternalNode();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        serializableMap18.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap19);
        java.lang.String str24 = serializableMap18.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap25.values();
        java.util.Set<java.lang.String> strSet28 = serializableMap25.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet29 = serializableMap25.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet30 = serializableMap25.entrySet();
        java.util.Set set31 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap18, (java.util.Set) strEntrySet30);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap33 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap33.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap33.mapIterator();
        serializableMap32.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap33);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry38 = serializableMap33.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap39 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap40 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap40.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap40.mapIterator();
        serializableMap39.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap40);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry46 = serializableMap39.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry47 = serializableMap33.nextEntry(strTrieEntry46);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry49 = serializableMap33.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        boolean boolean52 = serializableMap33.compareKeys("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set<java.lang.String> strSet53 = serializableMap33.keySet();
        strMapTrieEntry6.key = serializableMap33;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry55 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry56 = serializableMap33.nextEntry(strTrieEntry55);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(set15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strEntrySet29);
        org.junit.Assert.assertNotNull(strEntrySet30);
        org.junit.Assert.assertNotNull(set31);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNull(strTrieEntry38);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strTrieEntry46);
        org.junit.Assert.assertNull(strTrieEntry47);
        org.junit.Assert.assertNull(strTrieEntry49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNull(strTrieEntry56);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry19 = serializableMap1.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet20 = serializableMap1.entrySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap22 = serializableMap1.headMap("Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])");
        int int24 = serializableMap1.lengthInBits("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertNull(strEntry19);
        org.junit.Assert.assertNotNull(strEntrySet20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1456 + "'", int24 == 1456);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.util.Set<java.lang.String> strSet6 = serializableMap0.keySet();
        int int7 = serializableMap0.size();
        java.lang.String str9 = serializableMap0.nextKey("");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        boolean boolean4 = serializableMap0.isEmpty();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap0.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap7.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap7.mapIterator();
        serializableMap6.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap7);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap12.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap12.mapIterator();
        serializableMap11.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap12);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry18 = serializableMap11.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry19 = serializableMap7.followRight(strTrieEntry18);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry21 = serializableMap0.addEntry(strTrieEntry18, 0);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap22 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap23.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap23.mapIterator();
        java.util.Set set26 = serializableMap23.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry28 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap22, set26, (int) ' ');
        java.lang.String str29 = strMapTrieEntry28.toString();
        strMapTrieEntry28.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap32.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap32.mapIterator();
        java.util.Set set35 = serializableMap32.keySet();
        boolean boolean37 = serializableMap32.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap32.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap39 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor40 = serializableMap39.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection41 = serializableMap39.values();
        java.util.Set<java.lang.String> strSet42 = serializableMap39.keySet();
        java.util.Set set43 = strMapTrieEntry28.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap32, (java.util.Set) strSet42);
        boolean boolean44 = strMapTrieEntry28.isInternalNode();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap45 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap46 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap46.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor48 = serializableMap46.mapIterator();
        serializableMap45.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap46);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry52 = serializableMap45.getNearestEntryForKey("", (int) ' ');
        java.lang.String str54 = serializableMap45.previousKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap55 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor56 = serializableMap55.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor57 = serializableMap55.mapIterator();
        java.util.Set set58 = serializableMap55.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap60 = serializableMap55.tailMap("hi!");
        serializableMap45.putAll((java.util.Map<java.lang.String, java.io.Serializable>) strMap60);
        java.util.Set set62 = null;
        java.util.Set set63 = strMapTrieEntry28.setKeyValue(strMap60, set62);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry64 = strMapTrieEntry28.predecessor;
        java.lang.String str65 = strMapTrieEntry28.toString();
        java.io.Serializable serializable66 = serializableMap0.remove((java.lang.Object) str65);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strTrieEntry18);
        org.junit.Assert.assertNull(strTrieEntry19);
        org.junit.Assert.assertNotNull(strTrieEntry21);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(set26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str29, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(set35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(serializableCollection41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(set43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(strTrieEntry52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(set58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(set63);
        org.junit.Assert.assertNotNull(strMapTrieEntry64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])" + "'", str65, "Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])");
        org.junit.Assert.assertNull(serializable66);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        java.util.Set set14 = serializableMap11.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry16 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap10, set14, (int) ' ');
        java.lang.String str17 = strMapTrieEntry16.toString();
        strMapTrieEntry16.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        java.util.Set set23 = serializableMap20.keySet();
        boolean boolean25 = serializableMap20.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap20.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection29 = serializableMap27.values();
        java.util.Set<java.lang.String> strSet30 = serializableMap27.keySet();
        java.util.Set set31 = strMapTrieEntry16.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap20, (java.util.Set) strSet30);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry32 = strMapTrieEntry16.parent;
        strMapTrieEntry6.left = strMapTrieEntry16;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(set14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str17, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(set23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(serializableCollection29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(set31);
        org.junit.Assert.assertNull(strMapTrieEntry32);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("hi!", (int) (short) 1, 10);
        int int6 = stringKeyAnalyzer0.lengthInBits("");
        int int9 = stringKeyAnalyzer0.compare("", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = stringKeyAnalyzer0.isPrefix("Trie[0]={\n}\n", 32, (-3), "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot determine prefix outside of Character boundaries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-91) + "'", int9 == (-91));
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        serializableMap10.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap11);
        java.io.Serializable serializable15 = serializableMap0.put("", (java.io.Serializable) serializableMap10);
        java.util.Collection<java.io.Serializable> serializableCollection16 = serializableMap10.values();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNull(serializable15);
        org.junit.Assert.assertNotNull(serializableCollection16);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap0.prefixMap("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap9.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap16 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap17.mapIterator();
        serializableMap16.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap17);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry22 = serializableMap17.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap24.mapIterator();
        serializableMap23.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap24);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry30 = serializableMap23.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry31 = serializableMap17.nextEntry(strTrieEntry30);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap33 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap33.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap33.mapIterator();
        serializableMap32.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap33);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry38 = serializableMap33.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap39 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap40 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap40.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap40.mapIterator();
        serializableMap39.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap40);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry46 = serializableMap39.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry47 = serializableMap33.nextEntry(strTrieEntry46);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap48 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap49 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor50 = serializableMap49.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor51 = serializableMap49.mapIterator();
        serializableMap48.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap49);
        java.lang.String str54 = serializableMap48.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap55 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor56 = serializableMap55.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor57 = serializableMap55.mapIterator();
        java.util.Set set58 = serializableMap55.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap60 = serializableMap55.tailMap("hi!");
        java.io.Serializable serializable62 = serializableMap55.selectValue("");
        boolean boolean65 = serializableMap55.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable66 = serializableMap48.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap67 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap68 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor69 = serializableMap68.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor70 = serializableMap68.mapIterator();
        serializableMap67.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap68);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry74 = serializableMap67.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry75 = serializableMap48.nextEntry(strTrieEntry74);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry76 = serializableMap9.nextEntryImpl(strTrieEntry30, strTrieEntry47, strTrieEntry74);
        java.lang.String str77 = serializableMap0.castKey((java.lang.Object) strTrieEntry76);
        java.lang.String str79 = serializableMap0.selectKey("Entry(key=null [0], value=[], parent=null, left=null [0], right=null [32], predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap80 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor81 = serializableMap80.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor82 = serializableMap80.mapIterator();
        java.util.Set set83 = serializableMap80.keySet();
        serializableMap80.clear();
        java.lang.String str86 = serializableMap80.selectKey("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap87 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap88 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor89 = serializableMap88.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor90 = serializableMap88.mapIterator();
        serializableMap87.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap88);
        java.lang.String str93 = serializableMap87.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap95 = serializableMap87.prefixMap("hi!");
        serializableMap80.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap87);
        java.util.Comparator<? super java.lang.String> wildcardComparator97 = serializableMap87.comparator();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable98 = serializableMap0.get((java.lang.Object) wildcardComparator97);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNull(strTrieEntry22);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strTrieEntry30);
        org.junit.Assert.assertNull(strTrieEntry31);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNull(strTrieEntry38);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strTrieEntry46);
        org.junit.Assert.assertNull(strTrieEntry47);
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(set58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNull(serializable62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(serializable66);
        org.junit.Assert.assertNotNull(strItor69);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertNotNull(strTrieEntry74);
        org.junit.Assert.assertNull(strTrieEntry75);
        org.junit.Assert.assertNull(strTrieEntry76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strItor81);
        org.junit.Assert.assertNotNull(strItor82);
        org.junit.Assert.assertNotNull(set83);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strItor89);
        org.junit.Assert.assertNotNull(strItor90);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(strMap95);
        org.junit.Assert.assertNotNull(wildcardComparator97);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        java.util.Set<java.lang.String> strSet16 = serializableMap1.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry23 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap17, set21, (int) ' ');
        java.lang.String str24 = strMapTrieEntry23.toString();
        strMapTrieEntry23.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        boolean boolean32 = serializableMap27.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap27.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection36 = serializableMap34.values();
        java.util.Set<java.lang.String> strSet37 = serializableMap34.keySet();
        java.util.Set set38 = strMapTrieEntry23.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap27, (java.util.Set) strSet37);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry40 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap27, (int) '4');
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap41 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap42 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap42.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap42.mapIterator();
        java.util.Set set45 = serializableMap42.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry47 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap41, set45, (int) ' ');
        java.lang.String str48 = strMapTrieEntry47.toString();
        strMapTrieEntry47.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap51 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor52 = serializableMap51.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor53 = serializableMap51.mapIterator();
        java.util.Set set54 = serializableMap51.keySet();
        boolean boolean56 = serializableMap51.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor57 = serializableMap51.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap58 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor59 = serializableMap58.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection60 = serializableMap58.values();
        java.util.Set<java.lang.String> strSet61 = serializableMap58.keySet();
        java.util.Set set62 = strMapTrieEntry47.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap51, (java.util.Set) strSet61);
        boolean boolean63 = strMapTrieEntry47.isInternalNode();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap64 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor65 = serializableMap64.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection66 = serializableMap64.values();
        int int67 = serializableMap64.modCount;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry71 = serializableMap64.subtree("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", (int) (byte) 1, (int) (byte) -1);
        strMapTrieEntry47.key = serializableMap64;
        boolean boolean73 = serializableMap1.equals((java.lang.Object) serializableMap64);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str24, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(serializableCollection36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(set38);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(set45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str48, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertNotNull(set54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(strItor59);
        org.junit.Assert.assertNotNull(serializableCollection60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(set62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNotNull(serializableCollection66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(strTrieEntry71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap0.ceilingEntry("hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry9 = serializableMap0.getNearestEntryForKey("hi!", (int) (short) 10);
        java.lang.String str11 = serializableMap0.nextKey("Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])");
        serializableMap0.clear();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strTrieEntry9);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        java.util.Set set15 = serializableMap9.keySet();
        java.util.Set set16 = strMapTrieEntry6.setValue(set15);
        boolean boolean17 = strMapTrieEntry6.isExternalNode();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        serializableMap18.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap19);
        java.lang.String str24 = serializableMap18.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap25.values();
        java.util.Set<java.lang.String> strSet28 = serializableMap25.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet29 = serializableMap25.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet30 = serializableMap25.entrySet();
        java.util.Set set31 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap18, (java.util.Set) strEntrySet30);
        boolean boolean34 = serializableMap18.compareKeys("hi!", "");
        int int35 = serializableMap18.size();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(set15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strEntrySet29);
        org.junit.Assert.assertNotNull(strEntrySet30);
        org.junit.Assert.assertNotNull(set31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap7.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap7.mapIterator();
        java.util.Set set10 = serializableMap7.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap12 = serializableMap7.tailMap("hi!");
        java.io.Serializable serializable14 = serializableMap7.selectValue("");
        boolean boolean17 = serializableMap7.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable18 = serializableMap0.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.lang.Object obj19 = null;
        boolean boolean20 = serializableMap0.containsKey(obj19);
        int int21 = serializableMap0.modCount;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(set10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(serializable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(serializable18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        java.util.Set set11 = serializableMap8.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap13 = serializableMap8.tailMap("hi!");
        java.util.Set<java.lang.String> strSet14 = serializableMap8.keySet();
        int int15 = serializableMap8.size();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet16 = serializableMap8.entrySet();
        java.io.Serializable serializable17 = serializableMap0.putIfAbsent("", (java.io.Serializable) serializableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet18 = serializableMap0.entrySet();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(set11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strEntrySet16);
        org.junit.Assert.assertNull(serializable17);
        org.junit.Assert.assertNotNull(strEntrySet18);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.util.Set<java.lang.String> strSet6 = serializableMap0.keySet();
        int int7 = serializableMap0.size();
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer8 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean12 = stringKeyAnalyzer8.isBitSet("hi!", (int) (short) 1, 10);
        int int14 = stringKeyAnalyzer8.lengthInBits("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>, org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer> serializableMapTrieEntry16 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>, org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer>(serializableMap0, stringKeyAnalyzer8, (int) 'a');
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(stringKeyAnalyzer8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1456 + "'", int14 == 1456);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry16 = serializableMap1.lastEntry();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        serializableMap17.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap18);
        java.util.Collection<java.io.Serializable> serializableCollection22 = serializableMap17.values();
        java.lang.String str24 = serializableMap17.previousKey("hi!");
        java.lang.Object obj25 = null;
        java.io.Serializable serializable26 = serializableMap17.remove(obj25);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap17.firstEntry();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<org.apache.commons.collections4.Trie<java.lang.String, java.io.Serializable>, org.apache.commons.collections4.trie.AbstractBitwiseTrie<java.lang.String, java.io.Serializable>> strMapTrieEntry29 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<org.apache.commons.collections4.Trie<java.lang.String, java.io.Serializable>, org.apache.commons.collections4.trie.AbstractBitwiseTrie<java.lang.String, java.io.Serializable>>((org.apache.commons.collections4.Trie<java.lang.String, java.io.Serializable>) serializableMap1, (org.apache.commons.collections4.trie.AbstractBitwiseTrie<java.lang.String, java.io.Serializable>) serializableMap17, (-1));
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap1.mapIterator();
        java.util.Set set31 = serializableMap1.keySet();
        java.util.Set<java.lang.String> strSet32 = serializableMap1.keySet();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry16);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(serializableCollection22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(serializable26);
        org.junit.Assert.assertNull(strTrieEntry27);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(set31);
        org.junit.Assert.assertNotNull(strSet32);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        java.util.Set set6 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap0.headMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(set6);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        serializableMap10.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap11);
        java.io.Serializable serializable15 = serializableMap0.put("", (java.io.Serializable) serializableMap10);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = serializableMap0.headMap("Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNull(serializable15);
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("", (int) (short) 1, (-1));
        java.util.Comparator<java.lang.String> strComparator5 = stringKeyAnalyzer0.reversed();
        boolean boolean9 = stringKeyAnalyzer0.isBitSet("hi!", (int) ' ', (int) (short) 100);
        boolean boolean13 = stringKeyAnalyzer0.isBitSet("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])", (int) (short) 10, 0);
        int int16 = stringKeyAnalyzer0.compare("Trie[0]={\n}\n", "");
        boolean boolean20 = stringKeyAnalyzer0.isBitSet("Entry(key=null [0], value=[], parent=null, left=null [0], right=null [32], predecessor=null [0])", 192, (int) 'a');
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        boolean boolean2 = strItor1.hasNext();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        boolean boolean6 = serializableMap1.equals((java.lang.Object) (-1.0f));
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap1.headMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = serializableMap1.tailMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap12 = serializableMap1.tailMap("hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry13 = serializableMap1.firstEntry();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(strTrieEntry13);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap6.mapIterator();
        serializableMap5.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap6);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry12 = serializableMap5.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry13 = serializableMap1.followRight(strTrieEntry12);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet14 = serializableMap1.entrySet();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap15.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap15.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        serializableMap18.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap19);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry24 = serializableMap19.floorEntry("");
        java.lang.String str26 = serializableMap19.selectKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap19.values();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable28 = serializableMap1.getOrDefault((java.lang.Object) strItor17, (java.io.Serializable) serializableMap19);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strTrieEntry12);
        org.junit.Assert.assertNull(strTrieEntry13);
        org.junit.Assert.assertNotNull(strEntrySet14);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNull(strTrieEntry24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(serializableCollection27);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = serializableMap1.firstKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        boolean boolean4 = serializableMap0.isEmpty();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap0.mapIterator();
        java.util.Comparator comparator6 = serializableMap0.comparator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        java.io.Serializable serializable11 = serializableMap0.put("Entry(key=null [0], value=[], parent=null, left=null [0], right=null [32], predecessor=null [0])", (java.io.Serializable) serializableMap8);
        java.lang.String str13 = serializableMap8.nextKey("Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(comparator6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(serializable11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        int int7 = serializableMap0.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        serializableMap9.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap10);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap15 = serializableMap10.headMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator16 = serializableMap10.mapIterator();
        java.io.Serializable serializable17 = serializableMap0.replace("", (java.io.Serializable) serializableMap10);
        java.util.Comparator<? super java.lang.String> wildcardComparator18 = serializableMap0.comparator();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry20 = serializableMap0.ceilingEntry("hi!");
        org.apache.commons.collections4.trie.KeyAnalyzer<? super java.lang.String> wildcardKeyAnalyzer21 = serializableMap0.getKeyAnalyzer();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap23 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap24.mapIterator();
        java.util.Set set27 = serializableMap24.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry29 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap23, set27, (int) ' ');
        java.lang.String str30 = strMapTrieEntry29.toString();
        boolean boolean31 = strMapTrieEntry29.isEmpty();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry32 = strMapTrieEntry29.predecessor;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap33 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap34.mapIterator();
        serializableMap33.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap34);
        java.lang.String str39 = serializableMap33.previousKey("hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry41 = serializableMap33.higherEntry("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        java.util.Set set42 = serializableMap33.keySet();
        boolean boolean43 = strMapTrieEntry32.equals((java.lang.Object) serializableMap33);
        java.lang.Object obj44 = serializableMap0.put("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", (java.io.Serializable) serializableMap33);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(orderedMapIterator16);
        org.junit.Assert.assertNull(serializable17);
        org.junit.Assert.assertNotNull(wildcardComparator18);
        org.junit.Assert.assertNull(strTrieEntry20);
        org.junit.Assert.assertNotNull(wildcardKeyAnalyzer21);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(set27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str30, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strMapTrieEntry32);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(strTrieEntry41);
        org.junit.Assert.assertNotNull(set42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        java.util.Set set14 = serializableMap11.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry16 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap10, set14, (int) ' ');
        java.lang.String str17 = strMapTrieEntry16.toString();
        boolean boolean18 = strMapTrieEntry16.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        java.util.Set set22 = serializableMap19.keySet();
        boolean boolean24 = serializableMap19.containsKey((java.lang.Object) "hi!");
        java.util.Set set25 = serializableMap19.keySet();
        java.util.Set set26 = strMapTrieEntry16.setValue(set25);
        strMapTrieEntry6.right = strMapTrieEntry16;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap28 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap29 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap29.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap29.mapIterator();
        serializableMap28.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap29);
        java.lang.String str34 = serializableMap28.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap35.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap35.mapIterator();
        java.util.Set set38 = serializableMap35.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap40 = serializableMap35.tailMap("hi!");
        java.io.Serializable serializable42 = serializableMap35.selectValue("");
        boolean boolean45 = serializableMap35.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable46 = serializableMap28.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap47 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap48 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap48.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor50 = serializableMap48.mapIterator();
        serializableMap47.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap48);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry54 = serializableMap47.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry55 = serializableMap28.nextEntry(strTrieEntry54);
        java.util.Collection collection56 = serializableMap28.values();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap57 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap58 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor59 = serializableMap58.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor60 = serializableMap58.mapIterator();
        serializableMap57.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap58);
        java.lang.String str63 = serializableMap57.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap65 = serializableMap57.prefixMap("hi!");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet66 = serializableMap57.entrySet();
        java.util.Set set67 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap28, (java.util.Set) strEntrySet66);
        int int68 = serializableMap28.size();
        int int69 = serializableMap28.size();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(set14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str17, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(set22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(set26);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(set38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNull(serializable42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(serializable46);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertNotNull(strTrieEntry54);
        org.junit.Assert.assertNull(strTrieEntry55);
        org.junit.Assert.assertNotNull(collection56);
        org.junit.Assert.assertNotNull(strItor59);
        org.junit.Assert.assertNotNull(strItor60);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strEntrySet66);
        org.junit.Assert.assertNotNull(set67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        org.apache.commons.collections4.trie.PatriciaTrie<java.lang.Comparable<java.lang.String>> strComparableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.lang.Comparable<java.lang.String>>();
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.modCount;
        serializableMap0.clear();
        org.apache.commons.collections4.trie.KeyAnalyzer<? super java.lang.String> wildcardKeyAnalyzer4 = serializableMap0.getKeyAnalyzer();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        int int7 = serializableMap5.modCount;
        serializableMap5.clear();
        java.lang.Object obj9 = null;
        boolean boolean10 = serializableMap5.containsKey(obj9);
        java.util.Comparator<? super java.lang.String> wildcardComparator11 = serializableMap5.comparator();
        boolean boolean12 = serializableMap0.equals((java.lang.Object) serializableMap5);
        int int13 = serializableMap0.modCount;
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(wildcardKeyAnalyzer4);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardComparator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        int int8 = serializableMap6.modCount;
        serializableMap6.clear();
        java.io.Serializable serializable10 = serializableMap0.replace("", (java.io.Serializable) serializableMap6);
        int int11 = serializableMap0.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap13.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap13.mapIterator();
        serializableMap12.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap13);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        int int20 = serializableMap18.modCount;
        serializableMap18.clear();
        java.io.Serializable serializable22 = serializableMap12.replace("", (java.io.Serializable) serializableMap18);
        java.io.Serializable serializable23 = serializableMap0.get((java.lang.Object) serializable22);
        boolean boolean25 = serializableMap0.equals((java.lang.Object) '4');
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(serializable10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(serializable22);
        org.junit.Assert.assertNull(serializable23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap0.prefixMap("hi!");
        java.util.Set set9 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry11 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap8, set9, (int) (short) 100);
        java.lang.String str12 = strMapTrieEntry11.toString();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Entry(key={} [100], value=null, parent=null, left={} [100], right=null, predecessor={} [100])" + "'", str12, "Entry(key={} [100], value=null, parent=null, left={} [100], right=null, predecessor={} [100])");
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        int int3 = serializableMap0.modCount;
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet4 = serializableMap0.entrySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap6.mapIterator();
        java.util.Set set9 = serializableMap6.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry11 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap5, set9, (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry13 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap0, set9, (-3));
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap15.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap15.mapIterator();
        serializableMap14.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap15);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry20 = serializableMap15.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        serializableMap21.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap22);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry28 = serializableMap21.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry29 = serializableMap15.nextEntry(strTrieEntry28);
        java.util.Set<java.lang.String> strSet30 = serializableMap15.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap31 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap32.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap32.mapIterator();
        java.util.Set set35 = serializableMap32.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry37 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap31, set35, (int) ' ');
        java.lang.String str38 = strMapTrieEntry37.toString();
        strMapTrieEntry37.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap41.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap41.mapIterator();
        java.util.Set set44 = serializableMap41.keySet();
        boolean boolean46 = serializableMap41.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap41.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap48 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap48.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection50 = serializableMap48.values();
        java.util.Set<java.lang.String> strSet51 = serializableMap48.keySet();
        java.util.Set set52 = strMapTrieEntry37.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap41, (java.util.Set) strSet51);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry54 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap15, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap41, (int) '4');
        java.util.Set set55 = serializableMap41.keySet();
        java.util.Set<java.lang.String> strSet56 = serializableMap41.keySet();
        java.util.Collection<java.io.Serializable> serializableCollection57 = serializableMap41.values();
        boolean boolean58 = strMapTrieEntry13.equals((java.lang.Object) serializableCollection57);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strEntrySet4);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(set9);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNull(strTrieEntry20);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strTrieEntry28);
        org.junit.Assert.assertNull(strTrieEntry29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(set35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str38, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(set44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(serializableCollection50);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(set52);
        org.junit.Assert.assertNotNull(set55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(serializableCollection57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        java.util.Set set25 = serializableMap22.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap27 = serializableMap22.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap22.mapIterator();
        int int29 = serializableMap22.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap32 = serializableMap22.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable33 = serializableMap10.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        serializableMap10.clear();
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry36 = serializableMap10.select("Trie[0]={\n}\n");
        java.util.Collection<java.io.Serializable> serializableCollection37 = serializableMap10.values();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(serializable33);
        org.junit.Assert.assertNull(strEntry36);
        org.junit.Assert.assertNotNull(serializableCollection37);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        serializableMap9.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap10);
        java.util.Collection<java.io.Serializable> serializableCollection14 = serializableMap9.values();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet15 = serializableMap9.entrySet();
        java.util.Set set16 = strMapTrieEntry6.setValue((java.util.Set) strEntrySet15);
        boolean boolean17 = strMapTrieEntry6.isInternalNode();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(serializableCollection14);
        org.junit.Assert.assertNotNull(strEntrySet15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        java.lang.String str12 = serializableMap9.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap13 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap14.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap14.mapIterator();
        java.util.Set set17 = serializableMap14.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry19 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap13, set17, (int) ' ');
        java.lang.String str20 = strMapTrieEntry19.toString();
        strMapTrieEntry19.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap23.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap23.mapIterator();
        java.util.Set set26 = serializableMap23.keySet();
        boolean boolean28 = serializableMap23.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap23.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap30 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap30.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection32 = serializableMap30.values();
        java.util.Set<java.lang.String> strSet33 = serializableMap30.keySet();
        java.util.Set set34 = strMapTrieEntry19.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap23, (java.util.Set) strSet33);
        boolean boolean35 = serializableMap9.containsValue((java.lang.Object) strSet33);
        strMapTrieEntry6.value = strSet33;
        strMapTrieEntry6.bitIndex = 10;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(set17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str20, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(set26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(serializableCollection32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(set34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry19 = serializableMap1.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet20 = serializableMap1.entrySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry21 = serializableMap1.firstEntry();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertNull(strEntry19);
        org.junit.Assert.assertNotNull(strEntrySet20);
        org.junit.Assert.assertNull(strTrieEntry21);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("", (int) (short) 1, (-1));
        java.util.Comparator<java.lang.String> strComparator5 = stringKeyAnalyzer0.reversed();
        boolean boolean9 = stringKeyAnalyzer0.isBitSet("hi!", (int) ' ', (int) (short) 100);
        int int11 = stringKeyAnalyzer0.lengthInBits("");
        int int14 = stringKeyAnalyzer0.compare("", "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        int int15 = stringKeyAnalyzer0.bitsPerElement();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap16 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap17.mapIterator();
        java.util.Set set20 = serializableMap17.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry22 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap16, set20, (int) ' ');
        java.lang.String str23 = strMapTrieEntry22.toString();
        boolean boolean24 = strMapTrieEntry22.isEmpty();
        java.lang.String str25 = strMapTrieEntry22.toString();
        boolean boolean26 = org.apache.commons.collections4.trie.AbstractBitwiseTrie.compare((java.lang.Object) int15, (java.lang.Object) strMapTrieEntry22);
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-94) + "'", int14 == (-94));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(set20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str23, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str25, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.io.Serializable serializable19 = null;
        boolean boolean21 = serializableMap1.replace("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", serializable19, (java.io.Serializable) (-1.0d));
        int int22 = serializableMap1.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = serializableMap1.firstKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.modCount;
        serializableMap0.clear();
        org.apache.commons.collections4.trie.KeyAnalyzer<? super java.lang.String> wildcardKeyAnalyzer4 = serializableMap0.getKeyAnalyzer();
        java.util.Set<java.lang.String> strSet5 = serializableMap0.keySet();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap6.mapIterator();
        java.util.Set set9 = serializableMap6.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap11 = serializableMap6.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap6.mapIterator();
        boolean boolean13 = strItor12.hasPrevious();
        boolean boolean14 = strItor12.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = serializableMap0.castKey((java.lang.Object) strItor12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Cannot cast org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(wildcardKeyAnalyzer4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(set9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        java.lang.String str8 = serializableMap1.selectKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.lang.Object obj9 = null;
        boolean boolean10 = serializableMap1.containsValue(obj9);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        java.util.Set<java.lang.String> strSet7 = serializableMap0.keySet();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        serializableMap8.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap9);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap9.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap16 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap16.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap16.mapIterator();
        serializableMap15.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap16);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry22 = serializableMap15.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry23 = serializableMap9.nextEntry(strTrieEntry22);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry24 = serializableMap0.previousEntry(strTrieEntry22);
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap0.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap26 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor27 = serializableMap26.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap26.mapIterator();
        java.util.Set set29 = serializableMap26.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap31 = serializableMap26.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap26.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap34.mapIterator();
        java.util.Set set37 = serializableMap34.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap39 = serializableMap34.tailMap("hi!");
        java.util.Set<java.lang.String> strSet40 = serializableMap34.keySet();
        int int41 = serializableMap34.size();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet42 = serializableMap34.entrySet();
        java.io.Serializable serializable43 = serializableMap26.putIfAbsent("", (java.io.Serializable) serializableMap34);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap45 = serializableMap26.tailMap("Trie[0]={\n}\n");
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable46 = serializableMap0.remove((java.lang.Object) strMap45);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNull(strTrieEntry14);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(strTrieEntry22);
        org.junit.Assert.assertNull(strTrieEntry23);
        org.junit.Assert.assertNull(strTrieEntry24);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(set29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(set37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(strEntrySet42);
        org.junit.Assert.assertNull(serializable43);
        org.junit.Assert.assertNotNull(strMap45);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry6 = serializableMap0.select("");
        java.util.Collection<java.io.Serializable> serializableCollection7 = serializableMap0.values();
        int int10 = serializableMap0.bitIndex("", "Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor={} [0])");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strEntry6);
        org.junit.Assert.assertNotNull(serializableCollection7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("", (int) (short) 1, (-1));
        java.util.Comparator<java.lang.String> strComparator5 = stringKeyAnalyzer0.reversed();
        boolean boolean9 = stringKeyAnalyzer0.isBitSet("hi!", (int) ' ', (int) (short) 100);
        java.util.Comparator<java.lang.String> strComparator10 = stringKeyAnalyzer0.reversed();
        boolean boolean14 = stringKeyAnalyzer0.isBitSet("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=Trie[0]={\n}\n [0])", (int) (byte) 1, (int) '#');
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strComparator10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasNext();
        boolean boolean8 = strItor6.hasNext();
        boolean boolean9 = strItor6.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = strItor6.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        java.util.Set set14 = serializableMap11.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry16 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap10, set14, (int) ' ');
        java.lang.String str17 = strMapTrieEntry16.toString();
        boolean boolean18 = strMapTrieEntry16.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        java.util.Set set22 = serializableMap19.keySet();
        boolean boolean24 = serializableMap19.containsKey((java.lang.Object) "hi!");
        java.util.Set set25 = serializableMap19.keySet();
        java.util.Set set26 = strMapTrieEntry16.setValue(set25);
        strMapTrieEntry6.right = strMapTrieEntry16;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap28 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap28.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection30 = serializableMap28.values();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap32 = serializableMap28.prefixMap("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap33 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap34.mapIterator();
        java.util.Set set37 = serializableMap34.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry39 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap33, set37, (int) ' ');
        java.lang.String str40 = strMapTrieEntry39.toString();
        strMapTrieEntry39.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap43 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap43.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor45 = serializableMap43.mapIterator();
        java.util.Set set46 = serializableMap43.keySet();
        boolean boolean48 = serializableMap43.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap43.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap50 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor51 = serializableMap50.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection52 = serializableMap50.values();
        java.util.Set<java.lang.String> strSet53 = serializableMap50.keySet();
        java.util.Set set54 = strMapTrieEntry39.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap43, (java.util.Set) strSet53);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap55 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor56 = serializableMap55.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor57 = serializableMap55.mapIterator();
        java.util.Set set58 = serializableMap55.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap60 = serializableMap55.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor61 = serializableMap55.mapIterator();
        int int62 = serializableMap55.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap65 = serializableMap55.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable66 = serializableMap43.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet67 = serializableMap43.entrySet();
        java.util.Set set68 = strMapTrieEntry16.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap28, (java.util.Set) strEntrySet67);
        strMapTrieEntry16.bitIndex = (-3);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry71 = strMapTrieEntry16.right;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(set14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str17, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(set22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(set26);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(serializableCollection30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(set37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str40, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertNotNull(set46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertNotNull(serializableCollection52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(set54);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(set58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(strItor61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNull(serializable66);
        org.junit.Assert.assertNotNull(strEntrySet67);
        org.junit.Assert.assertNotNull(set68);
        org.junit.Assert.assertNull(strMapTrieEntry71);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        int int7 = serializableMap0.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry14 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap8, set12, (int) ' ');
        java.lang.String str15 = strMapTrieEntry14.toString();
        strMapTrieEntry14.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        boolean boolean23 = serializableMap18.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap18.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap25.values();
        java.util.Set<java.lang.String> strSet28 = serializableMap25.keySet();
        java.util.Set set29 = strMapTrieEntry14.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap18, (java.util.Set) strSet28);
        java.lang.Object obj30 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap31.mapIterator();
        java.util.Set set34 = serializableMap31.keySet();
        serializableMap31.clear();
        java.lang.String str37 = serializableMap31.selectKey("");
        java.io.Serializable serializable39 = serializableMap31.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        boolean boolean40 = serializableMap18.remove(obj30, (java.lang.Object) serializableMap31);
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap18);
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap18.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = strItor42.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str15, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(set29);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(set34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(serializable39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strItor42);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        int int7 = serializableMap0.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        serializableMap9.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap10);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap15 = serializableMap10.headMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator16 = serializableMap10.mapIterator();
        java.io.Serializable serializable17 = serializableMap0.replace("", (java.io.Serializable) serializableMap10);
        serializableMap0.modCount = 1;
        serializableMap0.clear();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet21 = serializableMap0.entrySet();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(orderedMapIterator16);
        org.junit.Assert.assertNull(serializable17);
        org.junit.Assert.assertNotNull(strEntrySet21);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        java.util.Set<java.lang.String> strSet3 = serializableMap0.keySet();
        serializableMap0.modCount = (short) 10;
        boolean boolean7 = serializableMap0.equals((java.lang.Object) 100);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap6 = serializableMap1.headMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator7 = serializableMap1.mapIterator();
        int int10 = serializableMap1.bitIndex("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = serializableMap1.lastKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(orderedMapIterator7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 171 + "'", int10 == 171);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.Collection<java.io.Serializable> serializableCollection5 = serializableMap0.values();
        java.lang.String str7 = serializableMap0.previousKey("hi!");
        java.lang.Object obj8 = null;
        java.io.Serializable serializable9 = serializableMap0.remove(obj8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry10 = serializableMap0.firstEntry();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet11 = serializableMap0.entrySet();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(serializableCollection5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(serializable9);
        org.junit.Assert.assertNull(strTrieEntry10);
        org.junit.Assert.assertNotNull(strEntrySet11);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        boolean boolean1 = org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(192);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry13 = serializableMap8.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap15.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap15.mapIterator();
        serializableMap14.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap15);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry21 = serializableMap14.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry22 = serializableMap8.nextEntry(strTrieEntry21);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap24.mapIterator();
        serializableMap23.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap24);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry29 = serializableMap24.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap30 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap31.mapIterator();
        serializableMap30.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap31);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry37 = serializableMap30.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry38 = serializableMap24.nextEntry(strTrieEntry37);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap39 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap40 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap40.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap40.mapIterator();
        serializableMap39.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap40);
        java.lang.String str45 = serializableMap39.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap46 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap46.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor48 = serializableMap46.mapIterator();
        java.util.Set set49 = serializableMap46.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap51 = serializableMap46.tailMap("hi!");
        java.io.Serializable serializable53 = serializableMap46.selectValue("");
        boolean boolean56 = serializableMap46.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable57 = serializableMap39.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap58 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap59 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor60 = serializableMap59.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor61 = serializableMap59.mapIterator();
        serializableMap58.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap59);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry65 = serializableMap58.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry66 = serializableMap39.nextEntry(strTrieEntry65);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry67 = serializableMap0.nextEntryImpl(strTrieEntry21, strTrieEntry38, strTrieEntry65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = serializableMap0.lastKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(strTrieEntry13);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(strTrieEntry21);
        org.junit.Assert.assertNull(strTrieEntry22);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNull(strTrieEntry29);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strTrieEntry37);
        org.junit.Assert.assertNull(strTrieEntry38);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(set49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(serializable53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(serializable57);
        org.junit.Assert.assertNotNull(strItor60);
        org.junit.Assert.assertNotNull(strItor61);
        org.junit.Assert.assertNotNull(strTrieEntry65);
        org.junit.Assert.assertNull(strTrieEntry66);
        org.junit.Assert.assertNull(strTrieEntry67);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.lang.String str3 = serializableMap0.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap4 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap5.mapIterator();
        java.util.Set set8 = serializableMap5.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry10 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap4, set8, (int) ' ');
        java.lang.String str11 = strMapTrieEntry10.toString();
        strMapTrieEntry10.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap14.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap14.mapIterator();
        java.util.Set set17 = serializableMap14.keySet();
        boolean boolean19 = serializableMap14.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap14.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap21.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection23 = serializableMap21.values();
        java.util.Set<java.lang.String> strSet24 = serializableMap21.keySet();
        java.util.Set set25 = strMapTrieEntry10.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap14, (java.util.Set) strSet24);
        boolean boolean26 = serializableMap0.containsValue((java.lang.Object) strSet24);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap32 = serializableMap27.tailMap("hi!");
        java.io.Serializable serializable34 = serializableMap27.selectValue("");
        boolean boolean35 = serializableMap27.isEmpty();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap27);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap38 = serializableMap0.headMap("Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap40 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap40.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap40.mapIterator();
        java.io.Serializable serializable44 = serializableMap40.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        int int46 = serializableMap40.lengthInBits("");
        java.io.Serializable serializable47 = serializableMap0.replace("Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])", (java.io.Serializable) serializableMap40);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(set8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str11, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(set17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(serializableCollection23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(serializable34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNull(serializable44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(serializable47);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap0.prefixMap("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap9.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap16 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap17.mapIterator();
        serializableMap16.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap17);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry22 = serializableMap17.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap24.mapIterator();
        serializableMap23.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap24);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry30 = serializableMap23.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry31 = serializableMap17.nextEntry(strTrieEntry30);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap33 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap33.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap33.mapIterator();
        serializableMap32.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap33);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry38 = serializableMap33.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap39 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap40 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap40.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap40.mapIterator();
        serializableMap39.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap40);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry46 = serializableMap39.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry47 = serializableMap33.nextEntry(strTrieEntry46);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap48 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap49 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor50 = serializableMap49.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor51 = serializableMap49.mapIterator();
        serializableMap48.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap49);
        java.lang.String str54 = serializableMap48.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap55 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor56 = serializableMap55.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor57 = serializableMap55.mapIterator();
        java.util.Set set58 = serializableMap55.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap60 = serializableMap55.tailMap("hi!");
        java.io.Serializable serializable62 = serializableMap55.selectValue("");
        boolean boolean65 = serializableMap55.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable66 = serializableMap48.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap67 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap68 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor69 = serializableMap68.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor70 = serializableMap68.mapIterator();
        serializableMap67.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap68);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry74 = serializableMap67.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry75 = serializableMap48.nextEntry(strTrieEntry74);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry76 = serializableMap9.nextEntryImpl(strTrieEntry30, strTrieEntry47, strTrieEntry74);
        java.lang.String str77 = serializableMap0.castKey((java.lang.Object) strTrieEntry76);
        int int80 = serializableMap0.bitIndex("", "Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])");
        java.util.Set<java.lang.String> strSet81 = serializableMap0.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry83 = serializableMap0.floorEntry("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor={} [0])");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNull(strTrieEntry22);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(strTrieEntry30);
        org.junit.Assert.assertNull(strTrieEntry31);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNull(strTrieEntry38);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strTrieEntry46);
        org.junit.Assert.assertNull(strTrieEntry47);
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(set58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNull(serializable62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(serializable66);
        org.junit.Assert.assertNotNull(strItor69);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertNotNull(strTrieEntry74);
        org.junit.Assert.assertNull(strTrieEntry75);
        org.junit.Assert.assertNull(strTrieEntry76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNull(strTrieEntry83);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        serializableMap0.clear();
        int int5 = serializableMap0.size();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        int int7 = serializableMap0.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        serializableMap9.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap10);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap15 = serializableMap10.headMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator16 = serializableMap10.mapIterator();
        java.io.Serializable serializable17 = serializableMap0.replace("", (java.io.Serializable) serializableMap10);
        java.util.Comparator<? super java.lang.String> wildcardComparator18 = serializableMap0.comparator();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry20 = serializableMap0.ceilingEntry("hi!");
        org.apache.commons.collections4.trie.KeyAnalyzer<? super java.lang.String> wildcardKeyAnalyzer21 = serializableMap0.getKeyAnalyzer();
        // The following exception was thrown during execution in test generation
        try {
            int int28 = wildcardKeyAnalyzer21.bitIndex("Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])", (int) (byte) 100, (int) (byte) 1, "Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])", 100, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The offsets and lengths must be at Character boundaries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(orderedMapIterator16);
        org.junit.Assert.assertNull(serializable17);
        org.junit.Assert.assertNotNull(wildcardComparator18);
        org.junit.Assert.assertNull(strTrieEntry20);
        org.junit.Assert.assertNotNull(wildcardKeyAnalyzer21);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry16 = serializableMap1.lastEntry();
        boolean boolean17 = serializableMap1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = serializableMap1.firstKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        java.lang.String str10 = strMapTrieEntry6.toString();
        int int11 = strMapTrieEntry6.bitIndex;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap13.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap13.mapIterator();
        serializableMap12.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap13);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry18 = serializableMap13.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        serializableMap19.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap20);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry26 = serializableMap19.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap13.nextEntry(strTrieEntry26);
        java.util.Set<java.lang.String> strSet28 = serializableMap13.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap29 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap30 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap30.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap30.mapIterator();
        java.util.Set set33 = serializableMap30.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry35 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap29, set33, (int) ' ');
        java.lang.String str36 = strMapTrieEntry35.toString();
        strMapTrieEntry35.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap39 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor40 = serializableMap39.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap39.mapIterator();
        java.util.Set set42 = serializableMap39.keySet();
        boolean boolean44 = serializableMap39.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor45 = serializableMap39.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap46 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap46.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection48 = serializableMap46.values();
        java.util.Set<java.lang.String> strSet49 = serializableMap46.keySet();
        java.util.Set set50 = strMapTrieEntry35.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap39, (java.util.Set) strSet49);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry52 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap13, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap39, (int) '4');
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap53 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor54 = serializableMap53.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor55 = serializableMap53.mapIterator();
        int int56 = serializableMap53.modCount;
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet57 = serializableMap53.entrySet();
        boolean boolean58 = serializableMap13.containsValue((java.lang.Object) strEntrySet57);
        java.util.Set set59 = strMapTrieEntry6.setValue((java.util.Set) strEntrySet57);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry60 = strMapTrieEntry6.right;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry61 = strMapTrieEntry6.parent;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap62 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap63 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor64 = serializableMap63.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor65 = serializableMap63.mapIterator();
        serializableMap62.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap63);
        int int67 = serializableMap62.bitsPerElement();
        serializableMap62.modCount = 10;
        boolean boolean70 = serializableMap62.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap71 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap62);
        // The following exception was thrown during execution in test generation
        try {
            strMapTrieEntry61.key = serializableMap71;
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])" + "'", str10, "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNull(strTrieEntry18);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strTrieEntry26);
        org.junit.Assert.assertNull(strTrieEntry27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(set33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str36, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(set42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(serializableCollection48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(set50);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertNotNull(strItor55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(strEntrySet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(set59);
        org.junit.Assert.assertNull(strMapTrieEntry60);
        org.junit.Assert.assertNull(strMapTrieEntry61);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 16 + "'", int67 == 16);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.modCount;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap3 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor4 = serializableMap3.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap3.mapIterator();
        java.util.Set set6 = serializableMap3.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap3.tailMap("hi!");
        boolean boolean9 = serializableMap0.containsValue((java.lang.Object) strMap8);
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator10 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection11 = serializableMap0.values();
        int int12 = serializableMap0.bitsPerElement();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet13 = serializableMap0.entrySet();
        org.apache.commons.collections4.trie.KeyAnalyzer<? super java.lang.String> wildcardKeyAnalyzer14 = serializableMap0.getKeyAnalyzer();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(set6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(orderedMapIterator10);
        org.junit.Assert.assertNotNull(serializableCollection11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
        org.junit.Assert.assertNotNull(strEntrySet13);
        org.junit.Assert.assertNotNull(wildcardKeyAnalyzer14);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry13 = serializableMap8.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap15.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap15.mapIterator();
        serializableMap14.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap15);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry21 = serializableMap14.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry22 = serializableMap8.nextEntry(strTrieEntry21);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap24.mapIterator();
        serializableMap23.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap24);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry29 = serializableMap24.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap30 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap31.mapIterator();
        serializableMap30.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap31);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry37 = serializableMap30.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry38 = serializableMap24.nextEntry(strTrieEntry37);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap39 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap40 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap40.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap40.mapIterator();
        serializableMap39.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap40);
        java.lang.String str45 = serializableMap39.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap46 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap46.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor48 = serializableMap46.mapIterator();
        java.util.Set set49 = serializableMap46.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap51 = serializableMap46.tailMap("hi!");
        java.io.Serializable serializable53 = serializableMap46.selectValue("");
        boolean boolean56 = serializableMap46.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable57 = serializableMap39.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap58 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap59 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor60 = serializableMap59.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor61 = serializableMap59.mapIterator();
        serializableMap58.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap59);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry65 = serializableMap58.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry66 = serializableMap39.nextEntry(strTrieEntry65);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry67 = serializableMap0.nextEntryImpl(strTrieEntry21, strTrieEntry38, strTrieEntry65);
        serializableMap0.clear();
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry70 = serializableMap0.select("");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(strTrieEntry13);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(strTrieEntry21);
        org.junit.Assert.assertNull(strTrieEntry22);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNull(strTrieEntry29);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strTrieEntry37);
        org.junit.Assert.assertNull(strTrieEntry38);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(set49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(serializable53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(serializable57);
        org.junit.Assert.assertNotNull(strItor60);
        org.junit.Assert.assertNotNull(strItor61);
        org.junit.Assert.assertNotNull(strTrieEntry65);
        org.junit.Assert.assertNull(strTrieEntry66);
        org.junit.Assert.assertNull(strTrieEntry67);
        org.junit.Assert.assertNull(strEntry70);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        boolean boolean4 = serializableMap0.isEmpty();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap0.mapIterator();
        java.util.Comparator comparator6 = serializableMap0.comparator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        java.io.Serializable serializable11 = serializableMap0.put("Entry(key=null [0], value=[], parent=null, left=null [0], right=null [32], predecessor=null [0])", (java.io.Serializable) serializableMap8);
        boolean boolean14 = serializableMap0.compareKeys("Entry(key=null [0], value=[], parent=null, left=null [0], right=null [32], predecessor=null [0])", "Trie[0]={\n}\n");
        java.lang.String str16 = serializableMap0.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap23 = serializableMap18.tailMap("hi!");
        java.io.Serializable serializable25 = serializableMap18.selectValue("");
        boolean boolean26 = serializableMap18.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap28 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap29 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap29.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap29.mapIterator();
        serializableMap28.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap29);
        java.io.Serializable serializable33 = serializableMap18.put("", (java.io.Serializable) serializableMap28);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap36.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap36.mapIterator();
        serializableMap35.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap36);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry41 = serializableMap36.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap42 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap43 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap43.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor45 = serializableMap43.mapIterator();
        serializableMap42.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap43);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry49 = serializableMap42.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry50 = serializableMap36.nextEntry(strTrieEntry49);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry52 = serializableMap36.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry54 = serializableMap36.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet55 = serializableMap36.entrySet();
        java.io.Serializable serializable56 = serializableMap18.getOrDefault((java.lang.Object) "Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])", (java.io.Serializable) serializableMap36);
        java.io.Serializable serializable57 = serializableMap0.putIfAbsent("Entry(key={} [100], value=null, parent=null, left={} [100], right=null, predecessor={} [100])", (java.io.Serializable) "Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])");
        java.util.Collection<java.io.Serializable> serializableCollection58 = serializableMap0.values();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(comparator6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(serializable11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(serializable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNull(serializable33);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNull(strTrieEntry41);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertNotNull(strTrieEntry49);
        org.junit.Assert.assertNull(strTrieEntry50);
        org.junit.Assert.assertNull(strTrieEntry52);
        org.junit.Assert.assertNull(strEntry54);
        org.junit.Assert.assertNotNull(strEntrySet55);
        org.junit.Assert.assertNotNull(serializable56);
        org.junit.Assert.assertNull(serializable57);
        org.junit.Assert.assertNotNull(serializableCollection58);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("", (int) (short) 1, (-1));
        java.util.Comparator<java.lang.String> strComparator5 = stringKeyAnalyzer0.reversed();
        boolean boolean9 = stringKeyAnalyzer0.isBitSet("hi!", (int) ' ', (int) (short) 100);
        boolean boolean13 = stringKeyAnalyzer0.isBitSet("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])", (int) (short) 10, 0);
        boolean boolean17 = stringKeyAnalyzer0.isBitSet("Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])", 1536, 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = stringKeyAnalyzer0.isPrefix("Entry(key={} [100], value=null, parent=null, left={} [100], right=null, predecessor={} [100])", (-1), (-35), "Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot determine prefix outside of Character boundaries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.modCount;
        java.util.Set set3 = serializableMap0.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet4 = serializableMap0.entrySet();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = serializableMap0.lastKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strEntrySet4);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasNext();
        boolean boolean8 = strItor6.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = strItor6.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasPrevious();
        boolean boolean8 = strItor6.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            strItor6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.util.Set<java.lang.String> strSet6 = serializableMap0.keySet();
        java.util.Set<java.lang.String> strSet7 = serializableMap0.keySet();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = serializableMap0.lastKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry2 = serializableMap0.firstEntry();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry3 = serializableMap0.lastEntry();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry5 = serializableMap0.lowerEntry("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNull(strTrieEntry2);
        org.junit.Assert.assertNull(strTrieEntry3);
        org.junit.Assert.assertNull(strTrieEntry5);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        int int7 = serializableMap0.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        serializableMap9.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap10);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap15 = serializableMap10.headMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator16 = serializableMap10.mapIterator();
        java.io.Serializable serializable17 = serializableMap0.replace("", (java.io.Serializable) serializableMap10);
        java.util.Comparator<? super java.lang.String> wildcardComparator18 = serializableMap0.comparator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection22 = serializableMap20.values();
        java.util.Set<java.lang.String> strSet23 = serializableMap20.keySet();
        serializableMap20.modCount = (short) 10;
        java.io.Serializable serializable26 = serializableMap0.replace("hi!", (java.io.Serializable) serializableMap20);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(orderedMapIterator16);
        org.junit.Assert.assertNull(serializable17);
        org.junit.Assert.assertNotNull(wildcardComparator18);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(serializableCollection22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNull(serializable26);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        int int3 = stringKeyAnalyzer0.compare("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = stringKeyAnalyzer0.isBitSet("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor={} [0])", (-20), 1536);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-26) + "'", int3 == (-26));
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        java.util.Set<java.lang.String> strSet3 = serializableMap0.keySet();
        java.util.Set<java.lang.String> strSet4 = serializableMap0.keySet();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap5.mapIterator();
        java.util.Set set8 = serializableMap5.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = serializableMap5.tailMap("hi!");
        java.io.Serializable serializable12 = serializableMap5.selectValue("");
        boolean boolean15 = serializableMap5.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set set16 = serializableMap5.entrySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry18 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap0, set16, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(set8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(serializable12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(set16);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap0.prefixMap("hi!");
        java.util.Set set9 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry11 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap8, set9, (int) (short) 100);
        int int12 = strMapTrieEntry11.bitIndex;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap1.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            strItor18.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertNotNull(strItor18);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap0.prefixMap("hi!");
        java.util.Set set9 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry11 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap8, set9, (int) (short) 100);
        java.util.Set set12 = strMapTrieEntry11.value;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry13 = strMapTrieEntry11.predecessor;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap14 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap15.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap15.mapIterator();
        java.util.Set set18 = serializableMap15.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry20 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap14, set18, (int) ' ');
        java.lang.String str21 = strMapTrieEntry20.toString();
        strMapTrieEntry20.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap24.mapIterator();
        java.util.Set set27 = serializableMap24.keySet();
        boolean boolean29 = serializableMap24.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap24.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection33 = serializableMap31.values();
        java.util.Set<java.lang.String> strSet34 = serializableMap31.keySet();
        java.util.Set set35 = strMapTrieEntry20.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap24, (java.util.Set) strSet34);
        boolean boolean36 = strMapTrieEntry20.isInternalNode();
        strMapTrieEntry13.predecessor = strMapTrieEntry20;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap38 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor39 = serializableMap38.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor40 = serializableMap38.mapIterator();
        java.util.Set set41 = serializableMap38.keySet();
        boolean boolean42 = serializableMap38.isEmpty();
        java.util.Set set43 = null;
        java.util.Set set44 = strMapTrieEntry20.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap38, set43);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap45 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor46 = serializableMap45.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection47 = serializableMap45.values();
        int int48 = serializableMap45.modCount;
        boolean boolean49 = serializableMap45.isEmpty();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor50 = serializableMap45.mapIterator();
        java.util.Comparator comparator51 = serializableMap45.comparator();
        java.util.Set<java.lang.String> strSet52 = serializableMap45.keySet();
        boolean boolean53 = strMapTrieEntry20.equals((java.lang.Object) serializableMap45);
        java.util.Comparator<? super java.lang.String> wildcardComparator54 = serializableMap45.comparator();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(set12);
        org.junit.Assert.assertNotNull(strMapTrieEntry13);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(set18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str21, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(set27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(serializableCollection33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(set35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(set41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(set44);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertNotNull(serializableCollection47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertNotNull(comparator51);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardComparator54);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        boolean boolean24 = serializableMap10.containsValue((java.lang.Object) serializableMap22);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap6.mapIterator();
        java.util.Set set9 = serializableMap6.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap11 = serializableMap6.tailMap("hi!");
        java.io.Serializable serializable13 = serializableMap6.selectValue("");
        boolean boolean14 = serializableMap6.isEmpty();
        serializableMap6.clear();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry19 = serializableMap6.subtree("", 0, 1);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap21.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap21.mapIterator();
        serializableMap20.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap21);
        int int25 = serializableMap20.bitsPerElement();
        java.io.Serializable serializable28 = serializableMap20.replace("hi!", (java.io.Serializable) (-1.0d));
        java.io.Serializable serializable29 = serializableMap0.getOrDefault((java.lang.Object) strTrieEntry19, (java.io.Serializable) (-1.0d));
        org.apache.commons.collections4.trie.KeyAnalyzer<? super java.lang.String> wildcardKeyAnalyzer30 = serializableMap0.getKeyAnalyzer();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(set9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(serializable13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strTrieEntry19);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNull(serializable28);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (-1.0d) + "'", serializable29, (-1.0d));
        org.junit.Assert.assertNotNull(wildcardKeyAnalyzer30);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = strItor1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        boolean boolean4 = serializableMap0.isEmpty();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap0.mapIterator();
        boolean boolean6 = strItor5.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            strItor5.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry9 = strMapTrieEntry6.predecessor;
        int int10 = strMapTrieEntry6.bitIndex;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry11 = strMapTrieEntry6.parent;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap13.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap13.mapIterator();
        serializableMap12.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap13);
        java.lang.String str18 = serializableMap12.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap20 = serializableMap12.prefixMap("hi!");
        java.util.Set set21 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry23 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap20, set21, (int) (short) 100);
        java.util.Set set24 = strMapTrieEntry23.value;
        // The following exception was thrown during execution in test generation
        try {
            strMapTrieEntry11.predecessor = strMapTrieEntry23;
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strMapTrieEntry9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNull(strMapTrieEntry11);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(set24);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        java.util.Set<java.lang.String> strSet16 = serializableMap1.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry23 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap17, set21, (int) ' ');
        java.lang.String str24 = strMapTrieEntry23.toString();
        strMapTrieEntry23.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        boolean boolean32 = serializableMap27.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap27.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection36 = serializableMap34.values();
        java.util.Set<java.lang.String> strSet37 = serializableMap34.keySet();
        java.util.Set set38 = strMapTrieEntry23.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap27, (java.util.Set) strSet37);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry40 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap27, (int) '4');
        java.lang.String str42 = serializableMap1.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        int int43 = serializableMap1.size();
        java.lang.String str45 = serializableMap1.previousKey("");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap47 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap48 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap48.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor50 = serializableMap48.mapIterator();
        java.util.Set set51 = serializableMap48.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry53 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap47, set51, (int) ' ');
        java.lang.String str54 = strMapTrieEntry53.toString();
        strMapTrieEntry53.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap57 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor58 = serializableMap57.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor59 = serializableMap57.mapIterator();
        java.util.Set set60 = serializableMap57.keySet();
        boolean boolean62 = serializableMap57.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor63 = serializableMap57.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap64 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor65 = serializableMap64.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection66 = serializableMap64.values();
        java.util.Set<java.lang.String> strSet67 = serializableMap64.keySet();
        java.util.Set set68 = strMapTrieEntry53.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap57, (java.util.Set) strSet67);
        java.io.Serializable serializable71 = serializableMap57.put("hi!", (java.io.Serializable) "");
        java.io.Serializable serializable72 = serializableMap1.put("", (java.io.Serializable) "");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str24, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(serializableCollection36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(set38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertNotNull(set51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str54, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor58);
        org.junit.Assert.assertNotNull(strItor59);
        org.junit.Assert.assertNotNull(set60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strItor63);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNotNull(serializableCollection66);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(set68);
        org.junit.Assert.assertNull(serializable71);
        org.junit.Assert.assertNull(serializable72);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry2 = serializableMap0.floorEntry("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry4 = serializableMap0.higherEntry("Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        java.lang.String str6 = serializableMap0.nextKey("Trie[0]={\n}\n");
        org.junit.Assert.assertNull(strTrieEntry2);
        org.junit.Assert.assertNull(strTrieEntry4);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry19 = serializableMap1.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet20 = serializableMap1.entrySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap22 = serializableMap1.headMap("Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap23.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection25 = serializableMap23.values();
        int int26 = serializableMap23.modCount;
        boolean boolean27 = serializableMap23.isEmpty();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap23.mapIterator();
        java.util.Comparator comparator29 = serializableMap23.comparator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap31.mapIterator();
        java.io.Serializable serializable34 = serializableMap23.put("Entry(key=null [0], value=[], parent=null, left=null [0], right=null [32], predecessor=null [0])", (java.io.Serializable) serializableMap31);
        boolean boolean37 = serializableMap23.compareKeys("Entry(key=null [0], value=[], parent=null, left=null [0], right=null [32], predecessor=null [0])", "Trie[0]={\n}\n");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap38 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor39 = serializableMap38.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor40 = serializableMap38.mapIterator();
        java.util.Set set41 = serializableMap38.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap43 = serializableMap38.tailMap("hi!");
        java.util.Set<java.lang.String> strSet44 = serializableMap38.keySet();
        java.util.Set<java.lang.String> strSet45 = serializableMap38.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry47 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap23, (java.util.Set) strSet45, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = serializableMap1.containsKey((java.lang.Object) strSet45);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertNull(strEntry19);
        org.junit.Assert.assertNotNull(strEntrySet20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(comparator29);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNull(serializable34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(set41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strSet45);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.Collection<java.io.Serializable> serializableCollection5 = serializableMap0.values();
        boolean boolean9 = serializableMap0.isBitSet("hi!", (-1), (int) (short) 100);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry13 = serializableMap0.subtree("", (int) (byte) 1, (int) '4');
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap14.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap14.mapIterator();
        java.util.Set set17 = serializableMap14.keySet();
        boolean boolean19 = serializableMap14.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap14.mapIterator();
        java.util.Set<java.lang.String> strSet21 = serializableMap14.keySet();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap23 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap23.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap23.mapIterator();
        serializableMap22.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap23);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry28 = serializableMap23.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap29 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap30 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap30.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap30.mapIterator();
        serializableMap29.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap30);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry36 = serializableMap29.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry37 = serializableMap23.nextEntry(strTrieEntry36);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry38 = serializableMap14.previousEntry(strTrieEntry36);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry39 = serializableMap0.nextEntry(strTrieEntry36);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(serializableCollection5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strTrieEntry13);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(set17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNull(strTrieEntry28);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strTrieEntry36);
        org.junit.Assert.assertNull(strTrieEntry37);
        org.junit.Assert.assertNull(strTrieEntry38);
        org.junit.Assert.assertNull(strTrieEntry39);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        serializableMap10.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap11);
        java.io.Serializable serializable15 = serializableMap0.put("", (java.io.Serializable) serializableMap10);
        java.lang.String str17 = serializableMap10.selectKey("Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNull(serializable15);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap4 = serializableMap0.prefixMap("hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap0.floorEntry("Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])");
        boolean boolean7 = serializableMap0.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = serializableMap0.lastKey();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        int int6 = serializableMap0.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap7 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        java.util.Set set11 = serializableMap8.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry13 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap7, set11, (int) ' ');
        java.lang.String str14 = strMapTrieEntry13.toString();
        boolean boolean15 = strMapTrieEntry13.isEmpty();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry16 = strMapTrieEntry13.predecessor;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        serializableMap17.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap18);
        java.lang.String str23 = serializableMap17.previousKey("hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry25 = serializableMap17.higherEntry("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        java.util.Set set26 = serializableMap17.keySet();
        boolean boolean27 = strMapTrieEntry16.equals((java.lang.Object) serializableMap17);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable28 = serializableMap0.get((java.lang.Object) boolean27);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(set11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str14, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strMapTrieEntry16);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(strTrieEntry25);
        org.junit.Assert.assertNotNull(set26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry5 = serializableMap0.ceilingEntry("");
        boolean boolean6 = serializableMap0.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedMap<java.lang.String, java.io.Serializable> strMap9 = serializableMap0.subMap("Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])", "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=Trie[0]={\n}\n [0])");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey > toKey");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strTrieEntry5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap6 = serializableMap1.headMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator7 = serializableMap1.mapIterator();
        java.lang.Object obj8 = null;
        java.lang.Object obj9 = serializableMap1.remove(obj8);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap11 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap12.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap12.mapIterator();
        java.util.Set set15 = serializableMap12.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry17 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap11, set15, (int) ' ');
        java.lang.String str18 = strMapTrieEntry17.toString();
        boolean boolean19 = strMapTrieEntry17.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        java.util.Set set23 = serializableMap20.keySet();
        boolean boolean25 = serializableMap20.containsKey((java.lang.Object) "hi!");
        java.util.Set set26 = serializableMap20.keySet();
        java.util.Set set27 = strMapTrieEntry17.setValue(set26);
        boolean boolean28 = strMapTrieEntry17.isExternalNode();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry29 = strMapTrieEntry17.right;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap30 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap31.mapIterator();
        serializableMap30.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap31);
        java.lang.String str36 = serializableMap30.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap38 = serializableMap30.prefixMap("hi!");
        java.util.Set set39 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry41 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap38, set39, (int) (short) 100);
        java.util.Set set42 = strMapTrieEntry41.value;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry43 = strMapTrieEntry41.predecessor;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap44 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap45 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor46 = serializableMap45.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap45.mapIterator();
        java.util.Set set48 = serializableMap45.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry50 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap44, set48, (int) ' ');
        java.lang.String str51 = strMapTrieEntry50.toString();
        strMapTrieEntry50.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap54 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor55 = serializableMap54.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor56 = serializableMap54.mapIterator();
        java.util.Set set57 = serializableMap54.keySet();
        boolean boolean59 = serializableMap54.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor60 = serializableMap54.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap61 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor62 = serializableMap61.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection63 = serializableMap61.values();
        java.util.Set<java.lang.String> strSet64 = serializableMap61.keySet();
        java.util.Set set65 = strMapTrieEntry50.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap54, (java.util.Set) strSet64);
        boolean boolean66 = strMapTrieEntry50.isInternalNode();
        strMapTrieEntry43.predecessor = strMapTrieEntry50;
        boolean boolean68 = strMapTrieEntry17.equals((java.lang.Object) strMapTrieEntry50);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap69 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap70 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor71 = serializableMap70.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor72 = serializableMap70.mapIterator();
        java.util.Set set73 = serializableMap70.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry75 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap69, set73, (int) ' ');
        java.lang.String str76 = strMapTrieEntry75.toString();
        strMapTrieEntry75.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap79 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor80 = serializableMap79.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor81 = serializableMap79.mapIterator();
        java.util.Set set82 = serializableMap79.keySet();
        boolean boolean84 = serializableMap79.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor85 = serializableMap79.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap86 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor87 = serializableMap86.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection88 = serializableMap86.values();
        java.util.Set<java.lang.String> strSet89 = serializableMap86.keySet();
        java.util.Set set90 = strMapTrieEntry75.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap79, (java.util.Set) strSet89);
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator91 = serializableMap79.mapIterator();
        strMapTrieEntry50.key = serializableMap79;
        java.io.Serializable serializable93 = serializableMap1.put("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=Trie[0]={\n}\n [0])", (java.io.Serializable) strMapTrieEntry50);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(orderedMapIterator7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(set15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str18, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(set23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(set26);
        org.junit.Assert.assertNotNull(set27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(strMapTrieEntry29);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNull(set42);
        org.junit.Assert.assertNotNull(strMapTrieEntry43);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(set48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str51, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor55);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(set57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strItor60);
        org.junit.Assert.assertNotNull(strItor62);
        org.junit.Assert.assertNotNull(serializableCollection63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(set65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strItor71);
        org.junit.Assert.assertNotNull(strItor72);
        org.junit.Assert.assertNotNull(set73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str76, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor80);
        org.junit.Assert.assertNotNull(strItor81);
        org.junit.Assert.assertNotNull(set82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strItor85);
        org.junit.Assert.assertNotNull(strItor87);
        org.junit.Assert.assertNotNull(serializableCollection88);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNotNull(set90);
        org.junit.Assert.assertNotNull(orderedMapIterator91);
        org.junit.Assert.assertNull(serializable93);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.lang.String str3 = serializableMap0.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        int int7 = serializableMap5.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        int int10 = serializableMap8.modCount;
        serializableMap8.clear();
        org.apache.commons.collections4.trie.KeyAnalyzer<? super java.lang.String> wildcardKeyAnalyzer12 = serializableMap8.getKeyAnalyzer();
        boolean boolean13 = serializableMap0.replace("hi!", (java.io.Serializable) serializableMap5, (java.io.Serializable) serializableMap8);
        java.io.Serializable serializable15 = serializableMap8.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardKeyAnalyzer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(serializable15);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        serializableMap0.clear();
        java.lang.String str6 = serializableMap0.selectKey("");
        java.lang.String str8 = serializableMap0.nextKey("");
        int int9 = serializableMap0.bitsPerElement();
        java.lang.String str10 = serializableMap0.toString();
        serializableMap0.clear();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry13 = serializableMap0.lowerEntry("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor={} [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap14.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap14.mapIterator();
        java.util.Set set17 = serializableMap14.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap19 = serializableMap14.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap14.mapIterator();
        int int21 = serializableMap14.size();
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry23 = serializableMap14.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set set24 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry26 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap14, set24, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable27 = serializableMap0.remove((java.lang.Object) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Trie[0]={\n}\n" + "'", str10, "Trie[0]={\n}\n");
        org.junit.Assert.assertNull(strTrieEntry13);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(set17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(strEntry23);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.lang.String str3 = serializableMap0.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap4 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap5.mapIterator();
        java.util.Set set8 = serializableMap5.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry10 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap4, set8, (int) ' ');
        java.lang.String str11 = strMapTrieEntry10.toString();
        strMapTrieEntry10.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap14.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap14.mapIterator();
        java.util.Set set17 = serializableMap14.keySet();
        boolean boolean19 = serializableMap14.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap14.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap21.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection23 = serializableMap21.values();
        java.util.Set<java.lang.String> strSet24 = serializableMap21.keySet();
        java.util.Set set25 = strMapTrieEntry10.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap14, (java.util.Set) strSet24);
        boolean boolean26 = serializableMap0.containsValue((java.lang.Object) strSet24);
        java.lang.String str28 = serializableMap0.nextKey("hi!");
        java.lang.String str30 = serializableMap0.selectKey("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor={} [0])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(set8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str11, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(set17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(serializableCollection23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        boolean boolean22 = strMapTrieEntry6.isInternalNode();
        int int23 = strMapTrieEntry6.bitIndex;
        java.lang.String str24 = strMapTrieEntry6.toString();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap26 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor27 = serializableMap26.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap26.mapIterator();
        serializableMap25.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap26);
        java.lang.String str31 = serializableMap25.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap33 = serializableMap25.prefixMap("hi!");
        java.util.Set set34 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry36 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap33, set34, (int) (short) 100);
        java.util.Set set37 = strMapTrieEntry36.value;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry38 = strMapTrieEntry36.predecessor;
        strMapTrieEntry36.bitIndex = (-1);
        strMapTrieEntry6.predecessor = strMapTrieEntry36;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap42 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap43 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap43.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor45 = serializableMap43.mapIterator();
        java.util.Set set46 = serializableMap43.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry48 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap42, set46, (int) ' ');
        java.lang.String str49 = strMapTrieEntry48.toString();
        boolean boolean50 = strMapTrieEntry48.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap51 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor52 = serializableMap51.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor53 = serializableMap51.mapIterator();
        java.util.Set set54 = serializableMap51.keySet();
        boolean boolean56 = serializableMap51.containsKey((java.lang.Object) "hi!");
        java.util.Set set57 = serializableMap51.keySet();
        java.util.Set set58 = strMapTrieEntry48.setValue(set57);
        int int59 = strMapTrieEntry48.bitIndex;
        strMapTrieEntry48.bitIndex = 0;
        strMapTrieEntry6.predecessor = strMapTrieEntry48;
        java.util.Set set63 = strMapTrieEntry48.getValue();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])" + "'", str24, "Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(set37);
        org.junit.Assert.assertNotNull(strMapTrieEntry38);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertNotNull(set46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str49, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertNotNull(set54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(set57);
        org.junit.Assert.assertNotNull(set58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 32 + "'", int59 == 32);
        org.junit.Assert.assertNotNull(set63);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        int int3 = serializableMap0.modCount;
        int int4 = serializableMap0.modCount;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry8 = serializableMap0.subtree("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor={} [0])", (-26), (-1));
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = serializableMap0.prefixMap("");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(strTrieEntry8);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        serializableMap0.clear();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry13 = serializableMap0.subtree("", 0, 1);
        boolean boolean17 = serializableMap0.isBitSet("hi!", (int) (byte) 1, 9);
        java.lang.String str19 = serializableMap0.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        int int22 = serializableMap20.modCount;
        serializableMap20.clear();
        java.lang.Object obj24 = null;
        boolean boolean25 = serializableMap20.containsKey(obj24);
        java.util.Comparator<? super java.lang.String> wildcardComparator26 = serializableMap20.comparator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = serializableMap0.containsKey((java.lang.Object) serializableMap20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(strTrieEntry13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardComparator26);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.Collection<java.io.Serializable> serializableCollection5 = serializableMap0.values();
        boolean boolean9 = serializableMap0.isBitSet("hi!", (-1), (int) (short) 100);
        java.lang.String str10 = serializableMap0.toString();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry12 = serializableMap0.floorEntry("");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(serializableCollection5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Trie[0]={\n}\n" + "'", str10, "Trie[0]={\n}\n");
        org.junit.Assert.assertNull(strTrieEntry12);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasPrevious();
        boolean boolean8 = strItor6.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = strItor6.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        int int3 = serializableMap0.modCount;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry5 = serializableMap0.higherEntry("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection8 = serializableMap6.values();
        int int9 = serializableMap6.modCount;
        boolean boolean10 = serializableMap6.isEmpty();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap6.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap13.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap13.mapIterator();
        serializableMap12.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap13);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        serializableMap17.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap18);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry24 = serializableMap17.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry25 = serializableMap13.followRight(strTrieEntry24);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap6.addEntry(strTrieEntry24, 0);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap28 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap28.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection30 = serializableMap28.values();
        int int31 = serializableMap28.modCount;
        boolean boolean32 = serializableMap28.isEmpty();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap28.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap35.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap35.mapIterator();
        serializableMap34.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap35);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap39 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap40 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor41 = serializableMap40.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap40.mapIterator();
        serializableMap39.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap40);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry46 = serializableMap39.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry47 = serializableMap35.followRight(strTrieEntry46);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry49 = serializableMap28.addEntry(strTrieEntry46, 0);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry50 = serializableMap0.nextEntryInSubtree(strTrieEntry27, strTrieEntry46);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strTrieEntry5);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(serializableCollection8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strTrieEntry24);
        org.junit.Assert.assertNull(strTrieEntry25);
        org.junit.Assert.assertNotNull(strTrieEntry27);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(serializableCollection30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strTrieEntry46);
        org.junit.Assert.assertNull(strTrieEntry47);
        org.junit.Assert.assertNotNull(strTrieEntry49);
        org.junit.Assert.assertNull(strTrieEntry50);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.prefixMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        int int7 = serializableMap0.lengthInBits("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        serializableMap8.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap9);
        java.util.Collection<java.io.Serializable> serializableCollection13 = serializableMap8.values();
        java.lang.String str15 = serializableMap8.previousKey("hi!");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet16 = serializableMap8.entrySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry18 = serializableMap8.higherEntry("");
        java.io.Serializable serializable19 = serializableMap0.get((java.lang.Object) "");
        boolean boolean20 = serializableMap0.isEmpty();
        serializableMap0.clear();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap23 = serializableMap0.tailMap("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 48 + "'", int7 == 48);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(serializableCollection13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strEntrySet16);
        org.junit.Assert.assertNull(strTrieEntry18);
        org.junit.Assert.assertNull(serializable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strMap23);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.util.Set<java.lang.String> strSet6 = serializableMap0.keySet();
        int int7 = serializableMap0.size();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet8 = serializableMap0.entrySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry9 = serializableMap0.firstEntry();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strEntrySet8);
        org.junit.Assert.assertNull(strTrieEntry9);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        java.util.Set set11 = serializableMap8.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap13 = serializableMap8.tailMap("hi!");
        java.util.Set<java.lang.String> strSet14 = serializableMap8.keySet();
        int int15 = serializableMap8.size();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet16 = serializableMap8.entrySet();
        java.io.Serializable serializable17 = serializableMap0.putIfAbsent("", (java.io.Serializable) serializableMap8);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap23 = serializableMap18.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap18.mapIterator();
        int int25 = serializableMap18.size();
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry27 = serializableMap18.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set set28 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry30 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap18, set28, 0);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap32 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap32.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor34 = serializableMap32.mapIterator();
        serializableMap31.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap32);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry38 = serializableMap31.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry39 = serializableMap18.previousEntry(strTrieEntry38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry40 = serializableMap8.followRight(strTrieEntry39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(set11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strEntrySet16);
        org.junit.Assert.assertNull(serializable17);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(strEntry27);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(strTrieEntry38);
        org.junit.Assert.assertNull(strTrieEntry39);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean8 = serializableMap0.isEmpty();
        serializableMap0.clear();
        java.lang.String str11 = serializableMap0.nextKey("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap12.mapIterator();
        int int14 = serializableMap12.modCount;
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap12);
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry17 = serializableMap0.select("");
        int int18 = serializableMap0.size();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(strEntry17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = new org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer();
        int int3 = stringKeyAnalyzer0.compare("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 91 + "'", int3 == 91);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        int int3 = serializableMap0.modCount;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry5 = serializableMap0.higherEntry("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        boolean boolean6 = serializableMap0.isEmpty();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strTrieEntry5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry19 = serializableMap1.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        int int20 = serializableMap1.size();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet21 = serializableMap1.entrySet();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertNull(strEntry19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(strEntrySet21);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        java.util.Set set11 = serializableMap8.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap13 = serializableMap8.tailMap("hi!");
        java.util.Set<java.lang.String> strSet14 = serializableMap8.keySet();
        int int15 = serializableMap8.size();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet16 = serializableMap8.entrySet();
        java.io.Serializable serializable17 = serializableMap0.putIfAbsent("", (java.io.Serializable) serializableMap8);
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap8.mapIterator();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(set11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strEntrySet16);
        org.junit.Assert.assertNull(serializable17);
        org.junit.Assert.assertNotNull(strItor18);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap6 = serializableMap1.headMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator7 = serializableMap1.mapIterator();
        java.lang.Object obj8 = null;
        java.lang.Object obj9 = serializableMap1.remove(obj8);
        serializableMap1.clear();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(orderedMapIterator7);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        boolean boolean4 = serializableMap0.isEmpty();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap0.mapIterator();
        java.util.Comparator comparator6 = serializableMap0.comparator();
        boolean boolean9 = serializableMap0.compareKeys("Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])", "");
        serializableMap0.clear();
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator11 = serializableMap0.mapIterator();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(comparator6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(orderedMapIterator11);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        java.util.Comparator<? super java.lang.String> wildcardComparator22 = serializableMap10.comparator();
        java.util.Set<java.lang.String> strSet23 = serializableMap10.keySet();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap10.mapIterator();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(wildcardComparator22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strItor24);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        serializableMap0.clear();
        java.util.Comparator<? super java.lang.String> wildcardComparator2 = serializableMap0.comparator();
        org.junit.Assert.assertNotNull(wildcardComparator2);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.modCount;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap4 = serializableMap0.prefixMap("");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap0.higherEntry("");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(strTrieEntry6);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        java.util.Set<java.lang.String> strSet16 = serializableMap1.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry23 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap17, set21, (int) ' ');
        java.lang.String str24 = strMapTrieEntry23.toString();
        strMapTrieEntry23.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        boolean boolean32 = serializableMap27.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap27.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection36 = serializableMap34.values();
        java.util.Set<java.lang.String> strSet37 = serializableMap34.keySet();
        java.util.Set set38 = strMapTrieEntry23.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap27, (java.util.Set) strSet37);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry40 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap27, (int) '4');
        java.lang.String str42 = serializableMap1.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        int int43 = serializableMap1.size();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry47 = serializableMap1.subtree("Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])", (int) (byte) 1, (int) '4');
        int int48 = serializableMap1.bitsPerElement();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str24, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(serializableCollection36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(set38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(strTrieEntry47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 16 + "'", int48 == 16);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        java.lang.String str11 = serializableMap8.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap12 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap13.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap13.mapIterator();
        java.util.Set set16 = serializableMap13.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry18 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap12, set16, (int) ' ');
        java.lang.String str19 = strMapTrieEntry18.toString();
        strMapTrieEntry18.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        java.util.Set set25 = serializableMap22.keySet();
        boolean boolean27 = serializableMap22.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap22.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap29 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap29.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection31 = serializableMap29.values();
        java.util.Set<java.lang.String> strSet32 = serializableMap29.keySet();
        java.util.Set set33 = strMapTrieEntry18.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap22, (java.util.Set) strSet32);
        boolean boolean34 = serializableMap8.containsValue((java.lang.Object) strSet32);
        java.lang.String str36 = serializableMap8.nextKey("hi!");
        java.lang.String str38 = serializableMap8.previousKey("hi!");
        strMapTrieEntry6.key = serializableMap8;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str19, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(serializableCollection31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(set33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry9 = serializableMap0.subtree("hi!", 16, 0);
        int int10 = serializableMap0.size();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strTrieEntry9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        java.util.Set set15 = serializableMap9.keySet();
        java.util.Set set16 = strMapTrieEntry6.setValue(set15);
        boolean boolean17 = strMapTrieEntry6.isExternalNode();
        boolean boolean18 = strMapTrieEntry6.isInternalNode();
        boolean boolean19 = strMapTrieEntry6.isEmpty();
        boolean boolean20 = strMapTrieEntry6.isInternalNode();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry21 = strMapTrieEntry6.right;
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(set15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strMapTrieEntry21);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        serializableMap0.clear();
        java.lang.String str6 = serializableMap0.selectKey("");
        java.lang.String str8 = serializableMap0.nextKey("");
        int int9 = serializableMap0.bitsPerElement();
        java.lang.String str10 = serializableMap0.toString();
        java.lang.String str12 = serializableMap0.selectKey("Entry(key=null [0], value=[], parent=null, left=null [0], right=null [32], predecessor=null [0])");
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Trie[0]={\n}\n" + "'", str10, "Trie[0]={\n}\n");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        serializableMap0.clear();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap6.mapIterator();
        serializableMap5.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap6);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry12 = serializableMap5.getNearestEntryForKey("", (int) ' ');
        boolean boolean13 = serializableMap0.equals((java.lang.Object) "");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap15 = serializableMap0.prefixMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap0.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable17 = strItor16.getValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strTrieEntry12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strItor16);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry17 = serializableMap1.lowerEntry("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap1.mapIterator();
        serializableMap1.clear();
        java.lang.Class<?> wildcardClass20 = serializableMap1.getClass();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNull(strTrieEntry17);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        serializableMap0.clear();
        serializableMap0.clear();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        boolean boolean6 = serializableMap1.equals((java.lang.Object) (-1.0f));
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap1.headMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap10 = serializableMap1.tailMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap12 = serializableMap1.tailMap("hi!");
        boolean boolean13 = serializableMap1.isEmpty();
        java.util.Set<java.lang.String> strSet14 = serializableMap1.keySet();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strSet14);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap7.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap7.mapIterator();
        java.util.Set set10 = serializableMap7.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap12 = serializableMap7.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap7.mapIterator();
        int int14 = serializableMap7.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap16 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap17.mapIterator();
        serializableMap16.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap17);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap22 = serializableMap17.headMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator orderedMapIterator23 = serializableMap17.mapIterator();
        java.io.Serializable serializable24 = serializableMap7.replace("", (java.io.Serializable) serializableMap17);
        java.util.Collection<java.io.Serializable> serializableCollection25 = serializableMap17.values();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap26 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry32 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap26, set30, (int) ' ');
        java.lang.String str33 = strMapTrieEntry32.toString();
        strMapTrieEntry32.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap36.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap36.mapIterator();
        java.util.Set set39 = serializableMap36.keySet();
        boolean boolean41 = serializableMap36.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap36.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap43 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap43.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection45 = serializableMap43.values();
        java.util.Set<java.lang.String> strSet46 = serializableMap43.keySet();
        java.util.Set set47 = strMapTrieEntry32.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap36, (java.util.Set) strSet46);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap48 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor49 = serializableMap48.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor50 = serializableMap48.mapIterator();
        java.util.Set set51 = serializableMap48.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap53 = serializableMap48.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor54 = serializableMap48.mapIterator();
        int int55 = serializableMap48.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap58 = serializableMap48.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable59 = serializableMap36.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        serializableMap36.clear();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap61 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap62 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor63 = serializableMap62.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor64 = serializableMap62.mapIterator();
        serializableMap61.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap62);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap66 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap67 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor68 = serializableMap67.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor69 = serializableMap67.mapIterator();
        serializableMap66.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap67);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry73 = serializableMap66.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry74 = serializableMap62.followRight(strTrieEntry73);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry76 = serializableMap36.addEntry(strTrieEntry73, (-94));
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable77 = serializableMap0.getOrDefault((java.lang.Object) serializableMap17, (java.io.Serializable) (-94));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(set10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(orderedMapIterator23);
        org.junit.Assert.assertNull(serializable24);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str33, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(set39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(serializableCollection45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(set47);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertNotNull(set51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNull(serializable59);
        org.junit.Assert.assertNotNull(strItor63);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertNotNull(strItor68);
        org.junit.Assert.assertNotNull(strItor69);
        org.junit.Assert.assertNotNull(strTrieEntry73);
        org.junit.Assert.assertNull(strTrieEntry74);
        org.junit.Assert.assertNotNull(strTrieEntry76);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        int int8 = serializableMap6.modCount;
        serializableMap6.clear();
        java.io.Serializable serializable10 = serializableMap0.replace("", (java.io.Serializable) serializableMap6);
        java.lang.String str12 = serializableMap6.selectKey("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.lang.Object obj13 = null;
        java.io.Serializable serializable14 = serializableMap6.get(obj13);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap16 = serializableMap6.headMap("Trie[0]={\n}\n");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry23 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap17, set21, (int) ' ');
        java.lang.String str24 = strMapTrieEntry23.toString();
        strMapTrieEntry23.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        boolean boolean32 = serializableMap27.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap27.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection36 = serializableMap34.values();
        java.util.Set<java.lang.String> strSet37 = serializableMap34.keySet();
        java.util.Set set38 = strMapTrieEntry23.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap27, (java.util.Set) strSet37);
        java.util.Comparator<? super java.lang.String> wildcardComparator39 = serializableMap27.comparator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = strMap16.containsKey((java.lang.Object) wildcardComparator39);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(serializable10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(serializable14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str24, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(serializableCollection36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(set38);
        org.junit.Assert.assertNotNull(wildcardComparator39);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        int int2 = serializableMap0.modCount;
        serializableMap0.clear();
        java.lang.Object obj4 = null;
        boolean boolean5 = serializableMap0.containsKey(obj4);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap7.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap7.mapIterator();
        serializableMap6.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap7);
        java.lang.String str12 = serializableMap6.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap13.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap13.mapIterator();
        java.util.Set set16 = serializableMap13.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap18 = serializableMap13.tailMap("hi!");
        java.io.Serializable serializable20 = serializableMap13.selectValue("");
        boolean boolean23 = serializableMap13.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable24 = serializableMap6.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap26 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor27 = serializableMap26.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap26.mapIterator();
        serializableMap25.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap26);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry32 = serializableMap25.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry33 = serializableMap6.nextEntry(strTrieEntry32);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry34 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry35 = serializableMap0.nextEntryInSubtree(strTrieEntry32, strTrieEntry34);
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap36 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap37 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap37.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor39 = serializableMap37.mapIterator();
        java.util.Set set40 = serializableMap37.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry42 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap36, set40, (int) ' ');
        java.lang.String str43 = strMapTrieEntry42.toString();
        strMapTrieEntry42.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap46 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap46.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor48 = serializableMap46.mapIterator();
        java.util.Set set49 = serializableMap46.keySet();
        boolean boolean51 = serializableMap46.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor52 = serializableMap46.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap53 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor54 = serializableMap53.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection55 = serializableMap53.values();
        java.util.Set<java.lang.String> strSet56 = serializableMap53.keySet();
        java.util.Set set57 = strMapTrieEntry42.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap46, (java.util.Set) strSet56);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap58 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor59 = serializableMap58.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor60 = serializableMap58.mapIterator();
        java.util.Set set61 = serializableMap58.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap63 = serializableMap58.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor64 = serializableMap58.mapIterator();
        int int65 = serializableMap58.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap68 = serializableMap58.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable69 = serializableMap46.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap46);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry73 = serializableMap46.getNearestEntryForKey("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor={} [0])", 15);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(serializable20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(serializable24);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strTrieEntry32);
        org.junit.Assert.assertNull(strTrieEntry33);
        org.junit.Assert.assertNull(strTrieEntry35);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(set40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str43, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(set49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertNotNull(serializableCollection55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(set57);
        org.junit.Assert.assertNotNull(strItor59);
        org.junit.Assert.assertNotNull(strItor60);
        org.junit.Assert.assertNotNull(set61);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNull(serializable69);
        org.junit.Assert.assertNotNull(strTrieEntry73);
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.lang.String str3 = serializableMap0.nextKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap4 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap5.mapIterator();
        java.util.Set set8 = serializableMap5.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry10 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap4, set8, (int) ' ');
        java.lang.String str11 = strMapTrieEntry10.toString();
        strMapTrieEntry10.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap14.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap14.mapIterator();
        java.util.Set set17 = serializableMap14.keySet();
        boolean boolean19 = serializableMap14.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap14.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap21 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap21.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection23 = serializableMap21.values();
        java.util.Set<java.lang.String> strSet24 = serializableMap21.keySet();
        java.util.Set set25 = strMapTrieEntry10.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap14, (java.util.Set) strSet24);
        boolean boolean26 = serializableMap0.containsValue((java.lang.Object) strSet24);
        int int29 = serializableMap0.bitIndex("hi!", "hi!");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry30 = serializableMap0.firstEntry();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        int int33 = serializableMap31.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = serializableMap0.containsKey((java.lang.Object) int33);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(set8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str11, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(set17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(serializableCollection23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-2) + "'", int29 == (-2));
        org.junit.Assert.assertNull(strTrieEntry30);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = serializableMap0.prefixMap("hi!");
        java.util.Set set9 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry11 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap8, set9, (int) (short) 100);
        java.util.Set set12 = strMapTrieEntry11.value;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry13 = strMapTrieEntry11.predecessor;
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap14 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap15 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap15.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap15.mapIterator();
        java.util.Set set18 = serializableMap15.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry20 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap14, set18, (int) ' ');
        java.lang.String str21 = strMapTrieEntry20.toString();
        strMapTrieEntry20.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap24 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor25 = serializableMap24.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap24.mapIterator();
        java.util.Set set27 = serializableMap24.keySet();
        boolean boolean29 = serializableMap24.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap24.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap31 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor32 = serializableMap31.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection33 = serializableMap31.values();
        java.util.Set<java.lang.String> strSet34 = serializableMap31.keySet();
        java.util.Set set35 = strMapTrieEntry20.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap24, (java.util.Set) strSet34);
        boolean boolean36 = strMapTrieEntry20.isInternalNode();
        strMapTrieEntry13.predecessor = strMapTrieEntry20;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap38 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor39 = serializableMap38.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor40 = serializableMap38.mapIterator();
        java.util.Set set41 = serializableMap38.keySet();
        boolean boolean42 = serializableMap38.isEmpty();
        java.util.Set set43 = null;
        java.util.Set set44 = strMapTrieEntry20.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap38, set43);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet45 = serializableMap38.entrySet();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(set12);
        org.junit.Assert.assertNotNull(strMapTrieEntry13);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(set18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str21, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(set27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(serializableCollection33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(set35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(set41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(set44);
        org.junit.Assert.assertNotNull(strEntrySet45);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.io.Serializable serializable4 = serializableMap0.selectValue("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap5.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap5.mapIterator();
        java.util.Set set8 = serializableMap5.keySet();
        boolean boolean10 = serializableMap5.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap5.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap13.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap13.mapIterator();
        serializableMap12.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap13);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry18 = serializableMap13.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap20 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap20.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor22 = serializableMap20.mapIterator();
        serializableMap19.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap20);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry26 = serializableMap19.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry27 = serializableMap13.nextEntry(strTrieEntry26);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap28 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap29 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap29.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap29.mapIterator();
        serializableMap28.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap29);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry34 = serializableMap29.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap36.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap36.mapIterator();
        serializableMap35.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap36);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry42 = serializableMap35.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry43 = serializableMap29.nextEntry(strTrieEntry42);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap44 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap45 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor46 = serializableMap45.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap45.mapIterator();
        serializableMap44.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap45);
        java.lang.String str50 = serializableMap44.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap51 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor52 = serializableMap51.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor53 = serializableMap51.mapIterator();
        java.util.Set set54 = serializableMap51.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap56 = serializableMap51.tailMap("hi!");
        java.io.Serializable serializable58 = serializableMap51.selectValue("");
        boolean boolean61 = serializableMap51.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable62 = serializableMap44.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap63 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap64 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor65 = serializableMap64.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor66 = serializableMap64.mapIterator();
        serializableMap63.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap64);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry70 = serializableMap63.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry71 = serializableMap44.nextEntry(strTrieEntry70);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry72 = serializableMap5.nextEntryImpl(strTrieEntry26, strTrieEntry43, strTrieEntry70);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry73 = serializableMap0.followRight(strTrieEntry70);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet74 = serializableMap0.entrySet();
        java.util.Collection<java.io.Serializable> serializableCollection75 = serializableMap0.values();
        java.util.Set set76 = serializableMap0.keySet();
        java.util.Set set77 = serializableMap0.entrySet();
        java.lang.String str78 = serializableMap0.toString();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNull(serializable4);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(set8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNull(strTrieEntry18);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strTrieEntry26);
        org.junit.Assert.assertNull(strTrieEntry27);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNull(strTrieEntry34);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strTrieEntry42);
        org.junit.Assert.assertNull(strTrieEntry43);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertNotNull(set54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNull(serializable58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(serializable62);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertNotNull(strTrieEntry70);
        org.junit.Assert.assertNull(strTrieEntry71);
        org.junit.Assert.assertNull(strTrieEntry72);
        org.junit.Assert.assertNull(strTrieEntry73);
        org.junit.Assert.assertNotNull(strEntrySet74);
        org.junit.Assert.assertNotNull(serializableCollection75);
        org.junit.Assert.assertNotNull(set76);
        org.junit.Assert.assertNotNull(set77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Trie[0]={\n}\n" + "'", str78, "Trie[0]={\n}\n");
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        boolean boolean8 = strMapTrieEntry6.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        boolean boolean14 = serializableMap9.containsKey((java.lang.Object) "hi!");
        java.util.Set set15 = serializableMap9.keySet();
        java.util.Set set16 = strMapTrieEntry6.setValue(set15);
        boolean boolean17 = strMapTrieEntry6.isExternalNode();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        serializableMap18.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap19);
        java.lang.String str24 = serializableMap18.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap25.values();
        java.util.Set<java.lang.String> strSet28 = serializableMap25.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet29 = serializableMap25.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet30 = serializableMap25.entrySet();
        java.util.Set set31 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap18, (java.util.Set) strEntrySet30);
        boolean boolean34 = serializableMap18.compareKeys("hi!", "");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap18.mapIterator();
        java.lang.String str37 = serializableMap18.nextKey("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set<java.lang.String> strSet38 = serializableMap18.keySet();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(set15);
        org.junit.Assert.assertNotNull(set16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strEntrySet29);
        org.junit.Assert.assertNotNull(strEntrySet30);
        org.junit.Assert.assertNotNull(set31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strSet38);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap7.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap7.mapIterator();
        java.util.Set set10 = serializableMap7.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap12 = serializableMap7.tailMap("hi!");
        java.io.Serializable serializable14 = serializableMap7.selectValue("");
        boolean boolean17 = serializableMap7.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable18 = serializableMap0.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.KeyAnalyzer<? super java.lang.String> wildcardKeyAnalyzer19 = serializableMap0.getKeyAnalyzer();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(set10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(serializable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(serializable18);
        org.junit.Assert.assertNotNull(wildcardKeyAnalyzer19);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        boolean boolean5 = serializableMap0.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        java.io.Serializable serializable8 = null;
        java.io.Serializable serializable9 = serializableMap0.put("Entry(key=null [0], value=[], parent=null, left=null [0], right=null [32], predecessor=null [0])", serializable8);
        serializableMap0.clear();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNull(serializable9);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        boolean boolean3 = strItor2.hasNext();
        boolean boolean4 = strItor2.hasNext();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap5 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap6.mapIterator();
        serializableMap5.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap6);
        int int10 = serializableMap5.bitsPerElement();
        serializableMap5.modCount = 10;
        boolean boolean13 = serializableMap5.isEmpty();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap5);
        java.util.Collection collection15 = serializableMap5.values();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable16 = strItor2.setValue((java.io.Serializable) serializableMap5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(collection15);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.util.Collection<java.io.Serializable> serializableCollection5 = serializableMap0.values();
        java.lang.String str7 = serializableMap0.previousKey("hi!");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet8 = serializableMap0.entrySet();
        java.util.Set<java.lang.String> strSet9 = serializableMap0.keySet();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(serializableCollection5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strEntrySet8);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        boolean boolean4 = serializableMap0.isEmpty();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap0.mapIterator();
        java.util.Comparator comparator6 = serializableMap0.comparator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        java.io.Serializable serializable11 = serializableMap0.put("Entry(key=null [0], value=[], parent=null, left=null [0], right=null [32], predecessor=null [0])", (java.io.Serializable) serializableMap8);
        java.util.Comparator<? super java.lang.String> wildcardComparator12 = serializableMap0.comparator();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(comparator6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(serializable11);
        org.junit.Assert.assertNotNull(wildcardComparator12);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        int int7 = serializableMap0.size();
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry9 = serializableMap0.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set set10 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry12 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap0, set10, 0);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap14.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap14.mapIterator();
        serializableMap13.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap14);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry20 = serializableMap13.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry21 = serializableMap0.previousEntry(strTrieEntry20);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry22 = serializableMap0.firstEntry();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strTrieEntry20);
        org.junit.Assert.assertNull(strTrieEntry21);
        org.junit.Assert.assertNull(strTrieEntry22);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        int int5 = serializableMap0.bitsPerElement();
        java.io.Serializable serializable8 = serializableMap0.replace("hi!", (java.io.Serializable) (-1.0d));
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry10 = serializableMap0.higherEntry("");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNull(serializable8);
        org.junit.Assert.assertNull(strTrieEntry10);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap0 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        java.util.Set set4 = serializableMap1.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry6 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap0, set4, (int) ' ');
        java.lang.String str7 = strMapTrieEntry6.toString();
        strMapTrieEntry6.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap10 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap10.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap10.mapIterator();
        java.util.Set set13 = serializableMap10.keySet();
        boolean boolean15 = serializableMap10.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap10.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap17 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor18 = serializableMap17.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection19 = serializableMap17.values();
        java.util.Set<java.lang.String> strSet20 = serializableMap17.keySet();
        java.util.Set set21 = strMapTrieEntry6.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap10, (java.util.Set) strSet20);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap22 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor23 = serializableMap22.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap22.mapIterator();
        java.util.Set set25 = serializableMap22.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap27 = serializableMap22.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap22.mapIterator();
        int int29 = serializableMap22.size();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap32 = serializableMap22.subMap("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable33 = serializableMap10.remove((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        serializableMap10.clear();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap36 = serializableMap10.prefixMap("hi!");
        java.util.Collection<java.io.Serializable> serializableCollection37 = serializableMap10.values();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(set4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str7, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(set13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(serializableCollection19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(set25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(serializable33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(serializableCollection37);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        java.io.Serializable serializable7 = serializableMap0.selectValue("");
        boolean boolean10 = serializableMap0.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        serializableMap0.clear();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        java.lang.String str8 = serializableMap1.selectKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.Collection<java.io.Serializable> serializableCollection9 = serializableMap1.values();
        boolean boolean13 = serializableMap1.isBitSet("hi!", 16, 0);
        java.util.Comparator comparator14 = serializableMap1.comparator();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(serializableCollection9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(comparator14);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("", (int) (short) 1, (-1));
        java.util.Comparator<java.lang.String> strComparator5 = stringKeyAnalyzer0.reversed();
        int int8 = stringKeyAnalyzer0.compare("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=Trie[0]={\n}\n [0])", "");
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 101 + "'", int8 == 101);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry4 = serializableMap0.lowerEntry("");
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry5 = serializableMap0.lastEntry();
        java.util.Comparator comparator6 = serializableMap0.comparator();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNull(strTrieEntry4);
        org.junit.Assert.assertNull(strTrieEntry5);
        org.junit.Assert.assertNotNull(comparator6);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        serializableMap0.clear();
        serializableMap0.modCount = (short) 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap4 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor5 = serializableMap4.mapIterator();
        int int6 = serializableMap4.modCount;
        java.util.Set set7 = serializableMap4.entrySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry10 = serializableMap4.getNearestEntryForKey("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor={} [0])", (int) (short) -1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry11 = serializableMap0.nextEntry(strTrieEntry10);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(set7);
        org.junit.Assert.assertNotNull(strTrieEntry10);
        org.junit.Assert.assertNull(strTrieEntry11);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("", (int) (short) 1, (-1));
        // The following exception was thrown during execution in test generation
        try {
            int int11 = stringKeyAnalyzer0.bitIndex("Trie[0]={\n}\n", (-1), 0, "", 12, (-35));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The offsets and lengths must be at Character boundaries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        int int7 = serializableMap0.size();
        java.util.Map.Entry<java.lang.String, java.io.Serializable> strEntry9 = serializableMap0.select("Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.util.Set set10 = null;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry12 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap0, set10, 0);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap14 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap14.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor16 = serializableMap14.mapIterator();
        java.util.Set set17 = serializableMap14.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap19 = serializableMap14.tailMap("hi!");
        java.util.Comparator<? super java.lang.String> wildcardComparator20 = serializableMap14.comparator();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry23 = serializableMap14.getNearestEntryForKey("Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])", 1);
        java.io.Serializable serializable24 = serializableMap0.putIfAbsent("hi!", (java.io.Serializable) strTrieEntry23);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap26 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor27 = serializableMap26.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap26.mapIterator();
        serializableMap25.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap26);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry32 = serializableMap25.getNearestEntryForKey("", (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry33 = serializableMap0.followLeft(strTrieEntry32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(set17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(wildcardComparator20);
        org.junit.Assert.assertNotNull(strTrieEntry23);
        org.junit.Assert.assertNull(serializable24);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strTrieEntry32);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        int int8 = serializableMap6.modCount;
        serializableMap6.clear();
        java.io.Serializable serializable10 = serializableMap0.replace("", (java.io.Serializable) serializableMap6);
        int int11 = serializableMap0.size();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap12 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap13 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor14 = serializableMap13.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor15 = serializableMap13.mapIterator();
        serializableMap12.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap13);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        int int20 = serializableMap18.modCount;
        serializableMap18.clear();
        java.io.Serializable serializable22 = serializableMap12.replace("", (java.io.Serializable) serializableMap18);
        java.io.Serializable serializable23 = serializableMap0.get((java.lang.Object) serializable22);
        java.io.Serializable serializable25 = null;
        java.io.Serializable serializable26 = serializableMap0.putIfAbsent("Entry(key={} [0], value=null, parent=null, left={} [0], right=null, predecessor={} [0])", serializable25);
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap0.values();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap28 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap29 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor30 = serializableMap29.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor31 = serializableMap29.mapIterator();
        serializableMap28.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap29);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry34 = serializableMap29.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap36 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap36.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor38 = serializableMap36.mapIterator();
        serializableMap35.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap36);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry42 = serializableMap35.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry43 = serializableMap29.nextEntry(strTrieEntry42);
        java.util.Set<java.lang.String> strSet44 = serializableMap29.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap45 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap46 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor47 = serializableMap46.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor48 = serializableMap46.mapIterator();
        java.util.Set set49 = serializableMap46.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry51 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap45, set49, (int) ' ');
        java.lang.String str52 = strMapTrieEntry51.toString();
        strMapTrieEntry51.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap55 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor56 = serializableMap55.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor57 = serializableMap55.mapIterator();
        java.util.Set set58 = serializableMap55.keySet();
        boolean boolean60 = serializableMap55.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor61 = serializableMap55.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap62 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor63 = serializableMap62.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection64 = serializableMap62.values();
        java.util.Set<java.lang.String> strSet65 = serializableMap62.keySet();
        java.util.Set set66 = strMapTrieEntry51.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap55, (java.util.Set) strSet65);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry68 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap29, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap55, (int) '4');
        java.util.Set set69 = serializableMap55.keySet();
        java.util.Set<java.lang.String> strSet70 = serializableMap55.keySet();
        boolean boolean71 = serializableMap0.equals((java.lang.Object) strSet70);
        java.io.Serializable serializable73 = serializableMap0.selectValue("Entry(key={} [1], value=null, parent=null, left={} [1], right=null, predecessor={} [1])");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(serializable10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(serializable22);
        org.junit.Assert.assertNull(serializable23);
        org.junit.Assert.assertNull(serializable26);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNull(strTrieEntry34);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strTrieEntry42);
        org.junit.Assert.assertNull(strTrieEntry43);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(set49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str52, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(set58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strItor61);
        org.junit.Assert.assertNotNull(strItor63);
        org.junit.Assert.assertNotNull(serializableCollection64);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(set66);
        org.junit.Assert.assertNotNull(set69);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(serializable73);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        int int3 = serializableMap0.modCount;
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry5 = serializableMap0.ceilingEntry("");
        java.util.Set set6 = serializableMap0.entrySet();
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap0.mapIterator();
        boolean boolean8 = strItor7.hasPrevious();
        boolean boolean9 = strItor7.hasNext();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strTrieEntry5);
        org.junit.Assert.assertNotNull(set6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap6 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor7 = serializableMap6.mapIterator();
        int int8 = serializableMap6.modCount;
        serializableMap6.clear();
        java.io.Serializable serializable10 = serializableMap0.replace("", (java.io.Serializable) serializableMap6);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap11 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor12 = serializableMap11.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor13 = serializableMap11.mapIterator();
        java.util.Set set14 = serializableMap11.keySet();
        boolean boolean16 = serializableMap11.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor17 = serializableMap11.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap19 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap19.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor21 = serializableMap19.mapIterator();
        serializableMap18.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap19);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry24 = serializableMap19.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap26 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor27 = serializableMap26.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap26.mapIterator();
        serializableMap25.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap26);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry32 = serializableMap25.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry33 = serializableMap19.nextEntry(strTrieEntry32);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap35 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor36 = serializableMap35.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor37 = serializableMap35.mapIterator();
        serializableMap34.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap35);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry40 = serializableMap35.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap42 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap42.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor44 = serializableMap42.mapIterator();
        serializableMap41.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap42);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry48 = serializableMap41.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry49 = serializableMap35.nextEntry(strTrieEntry48);
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap50 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap51 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor52 = serializableMap51.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor53 = serializableMap51.mapIterator();
        serializableMap50.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap51);
        java.lang.String str56 = serializableMap50.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap57 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor58 = serializableMap57.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor59 = serializableMap57.mapIterator();
        java.util.Set set60 = serializableMap57.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap62 = serializableMap57.tailMap("hi!");
        java.io.Serializable serializable64 = serializableMap57.selectValue("");
        boolean boolean67 = serializableMap57.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable68 = serializableMap50.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap69 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap70 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor71 = serializableMap70.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor72 = serializableMap70.mapIterator();
        serializableMap69.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap70);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry76 = serializableMap69.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry77 = serializableMap50.nextEntry(strTrieEntry76);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry78 = serializableMap11.nextEntryImpl(strTrieEntry32, strTrieEntry49, strTrieEntry76);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry79 = serializableMap6.followRight(strTrieEntry32);
        serializableMap6.clear();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(serializable10);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(set14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNull(strTrieEntry24);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strTrieEntry32);
        org.junit.Assert.assertNull(strTrieEntry33);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNull(strTrieEntry40);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(strTrieEntry48);
        org.junit.Assert.assertNull(strTrieEntry49);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strItor58);
        org.junit.Assert.assertNotNull(strItor59);
        org.junit.Assert.assertNotNull(set60);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNull(serializable64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(serializable68);
        org.junit.Assert.assertNotNull(strItor71);
        org.junit.Assert.assertNotNull(strItor72);
        org.junit.Assert.assertNotNull(strTrieEntry76);
        org.junit.Assert.assertNull(strTrieEntry77);
        org.junit.Assert.assertNull(strTrieEntry78);
        org.junit.Assert.assertNull(strTrieEntry79);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer stringKeyAnalyzer0 = org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.INSTANCE;
        boolean boolean4 = stringKeyAnalyzer0.isBitSet("", (int) (short) 1, (-1));
        java.util.Comparator<java.lang.String> strComparator5 = stringKeyAnalyzer0.reversed();
        boolean boolean9 = stringKeyAnalyzer0.isBitSet("hi!", (int) ' ', (int) (short) 100);
        int int11 = stringKeyAnalyzer0.lengthInBits("");
        int int14 = stringKeyAnalyzer0.compare("", "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        boolean boolean18 = stringKeyAnalyzer0.isBitSet("Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])", (int) '#', 2);
        int int21 = stringKeyAnalyzer0.compare("", "hi!");
        org.junit.Assert.assertNotNull(stringKeyAnalyzer0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-94) + "'", int14 == (-94));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        serializableMap0.clear();
        java.lang.String str6 = serializableMap0.selectKey("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        java.lang.String str13 = serializableMap7.previousKey("hi!");
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap15 = serializableMap7.prefixMap("hi!");
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap7);
        boolean boolean17 = serializableMap7.isEmpty();
        java.lang.String str18 = serializableMap7.toString();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Trie[0]={\n}\n" + "'", str18, "Trie[0]={\n}\n");
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        java.util.Set<java.lang.String> strSet3 = serializableMap0.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet4 = serializableMap0.entrySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap7 = serializableMap0.subMap("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])", "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet8 = serializableMap0.entrySet();
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strEntrySet4);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strEntrySet8);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection2 = serializableMap0.values();
        java.util.Set<java.lang.String> strSet3 = serializableMap0.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet4 = serializableMap0.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet5 = serializableMap0.entrySet();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap7.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap7.mapIterator();
        java.util.Set set10 = serializableMap7.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap12 = serializableMap7.tailMap("hi!");
        java.util.Set<java.lang.String> strSet13 = serializableMap7.keySet();
        int int14 = serializableMap7.size();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet15 = serializableMap7.entrySet();
        serializableMap7.clear();
        java.io.Serializable serializable17 = serializableMap0.putIfAbsent("Entry(key=Trie[0]={\n}\n [0], value=[], parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])", (java.io.Serializable) serializableMap7);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(serializableCollection2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strEntrySet4);
        org.junit.Assert.assertNotNull(strEntrySet5);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(set10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strEntrySet15);
        org.junit.Assert.assertNull(serializable17);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor1 = serializableMap0.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap0.mapIterator();
        java.util.Set set3 = serializableMap0.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap5 = serializableMap0.tailMap("hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor6 = serializableMap0.mapIterator();
        boolean boolean7 = strItor6.hasNext();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap8 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap9 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap9.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor11 = serializableMap9.mapIterator();
        java.util.Set set12 = serializableMap9.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry14 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap8, set12, (int) ' ');
        java.lang.String str15 = strMapTrieEntry14.toString();
        strMapTrieEntry14.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        boolean boolean23 = serializableMap18.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor24 = serializableMap18.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap25 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor26 = serializableMap25.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection27 = serializableMap25.values();
        java.util.Set<java.lang.String> strSet28 = serializableMap25.keySet();
        java.util.Set set29 = strMapTrieEntry14.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap18, (java.util.Set) strSet28);
        java.lang.Object obj30 = null;
        boolean boolean31 = serializableMap18.containsKey(obj30);
        int int32 = serializableMap18.size();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable33 = strItor6.setValue((java.io.Serializable) int32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(set3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(set12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str15, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(serializableCollection27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(set29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry7 = serializableMap0.getNearestEntryForKey("", (int) ' ');
        java.lang.String str9 = serializableMap0.previousKey("Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        java.util.Collection<java.io.Serializable> serializableCollection10 = serializableMap0.values();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(strTrieEntry7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(serializableCollection10);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry6 = serializableMap1.floorEntry("");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap8 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap8.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor10 = serializableMap8.mapIterator();
        serializableMap7.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap8);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry14 = serializableMap7.getNearestEntryForKey("", (int) ' ');
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.lang.String, java.io.Serializable> strTrieEntry15 = serializableMap1.nextEntry(strTrieEntry14);
        java.util.Set<java.lang.String> strSet16 = serializableMap1.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap17 = null;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap18 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor19 = serializableMap18.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor20 = serializableMap18.mapIterator();
        java.util.Set set21 = serializableMap18.keySet();
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set> strMapTrieEntry23 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.SortedMap<java.lang.String, java.io.Serializable>, java.util.Set>(strMap17, set21, (int) ' ');
        java.lang.String str24 = strMapTrieEntry23.toString();
        strMapTrieEntry23.bitIndex = 0;
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap27 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor28 = serializableMap27.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor29 = serializableMap27.mapIterator();
        java.util.Set set30 = serializableMap27.keySet();
        boolean boolean32 = serializableMap27.containsKey((java.lang.Object) "hi!");
        org.apache.commons.collections4.OrderedMapIterator<java.lang.String, java.io.Serializable> strItor33 = serializableMap27.mapIterator();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap34 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor35 = serializableMap34.mapIterator();
        java.util.Collection<java.io.Serializable> serializableCollection36 = serializableMap34.values();
        java.util.Set<java.lang.String> strSet37 = serializableMap34.keySet();
        java.util.Set set38 = strMapTrieEntry23.setKeyValue((java.util.SortedMap<java.lang.String, java.io.Serializable>) serializableMap27, (java.util.Set) strSet37);
        org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>> strMapTrieEntry40 = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<java.util.Map<java.lang.String, java.io.Serializable>, java.util.Map<java.lang.String, java.io.Serializable>>((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1, (java.util.Map<java.lang.String, java.io.Serializable>) serializableMap27, (int) '4');
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap41 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor42 = serializableMap41.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor43 = serializableMap41.mapIterator();
        int int44 = serializableMap41.modCount;
        java.util.Set<java.util.Map.Entry<java.lang.String, java.io.Serializable>> strEntrySet45 = serializableMap41.entrySet();
        boolean boolean46 = serializableMap1.containsValue((java.lang.Object) strEntrySet45);
        java.lang.String str48 = serializableMap1.nextKey("Entry(key=Trie[0]={\n}\n [0], value=null, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])");
        java.lang.Class<?> wildcardClass49 = serializableMap1.getClass();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(strTrieEntry6);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strTrieEntry14);
        org.junit.Assert.assertNull(strTrieEntry15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(set21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])" + "'", str24, "Entry(key=null [32], value=[], parent=null, left=null [32], right=null, predecessor=null [32])");
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(set30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(serializableCollection36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(set38);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(strEntrySet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap0 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap1 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor2 = serializableMap1.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor3 = serializableMap1.mapIterator();
        serializableMap0.putAll((java.util.Map<java.lang.String, java.io.Serializable>) serializableMap1);
        java.lang.String str6 = serializableMap0.previousKey("hi!");
        org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable> serializableMap7 = new org.apache.commons.collections4.trie.PatriciaTrie<java.io.Serializable>();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor8 = serializableMap7.mapIterator();
        org.apache.commons.collections4.MapIterator<java.lang.String, java.io.Serializable> strItor9 = serializableMap7.mapIterator();
        java.util.Set set10 = serializableMap7.keySet();
        java.util.SortedMap<java.lang.String, java.io.Serializable> strMap12 = serializableMap7.tailMap("hi!");
        java.io.Serializable serializable14 = serializableMap7.selectValue("");
        boolean boolean17 = serializableMap7.compareKeys("hi!", "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.io.Serializable serializable18 = serializableMap0.get((java.lang.Object) "Entry(key=null [0], value=[], parent=null, left=null [0], right=null, predecessor=null [0])");
        java.lang.Object obj19 = null;
        boolean boolean20 = serializableMap0.containsKey(obj19);
        int int21 = serializableMap0.bitsPerElement();
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(set10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(serializable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(serializable18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
    }
}

