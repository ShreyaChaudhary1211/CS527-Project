package org.joda.time;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RandoopRegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test501");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZone(dateTimeZone3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withDefaultYear(0);
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField12 = gregorianChronology11.months();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = gregorianChronology11.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        boolean boolean16 = iSOChronology7.equals((java.lang.Object) str15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter0.withChronology((org.joda.time.Chronology) iSOChronology7);
        boolean boolean18 = dateTimeFormatter0.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = dateTimeFormatter0.parseLocalDate("58440770-01-01T00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"58440770-01-01T00\" is malformed at \"-01T00\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test502");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime3.add(durationFieldType12, (int) (byte) 0);
        org.joda.time.Instant instant15 = mutableDateTime3.toInstant();
        int int16 = mutableDateTime3.getWeekyear();
        mutableDateTime3.setSecondOfDay(60);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(instant15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
    }

    @Test
    public void test503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test503");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "-28800000-02-26T00:00:10.005+00:00:00.005");
    }

    @Test
    public void test504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test504");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = interval8.toPeriod(periodType9);
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval8);
        long long12 = readableInterval11.getStartMillis();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 13 + "'", int4 == 13);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(readableInterval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711843199995L + "'", long12 == 1711843199995L);
    }

    @Test
    public void test505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test505");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean19 = dateTimeFieldType17.isSupported((org.joda.time.Chronology) gregorianChronology18);
        int int20 = mutableDateTime11.get(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime11.toMutableDateTime(dateTimeZone21);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime11.dayOfYear();
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime11.isEqual(readableInstant25);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test506");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        int int4 = mutableDateTime3.getCenturyOfEra();
        int int5 = mutableDateTime3.getMinuteOfHour();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 36 + "'", int5 == 36);
    }

    @Test
    public void test507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test507");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfEra();
        int int6 = dateTimeField4.get((-47433312020L));
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1968 + "'", int6 == 1968);
    }

    @Test
    public void test508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test508");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        int int20 = mutableDateTime12.getMonthOfYear();
        mutableDateTime12.addMinutes((int) (short) -1);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test509");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicTTimeNoMillis();
        boolean boolean1 = dateTimeFormatter0.isPrinter();
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology2.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology7 = gregorianChronology2.withZone(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.ISODateTimeFormat.basicDate();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10, 10);
        int int13 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfWeek();
        mutableDateTime9.addYears(1);
        java.lang.String str17 = dateTimeFormatter8.print((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter18.withZone(dateTimeZone21);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone23 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone21);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone21.getName(0L, locale25);
        java.lang.Object obj27 = dateTimeZone21.writeReplace();
        mutableDateTime9.setZone(dateTimeZone21);
        long long30 = dateTimeZone6.getMillisKeepLocal(dateTimeZone21, 0L);
        java.util.TimeZone timeZone31 = dateTimeZone21.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter0.withZone(dateTimeZone21);
        boolean boolean33 = dateTimeFormatter0.isParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(gregorianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 13 + "'", int13 == 13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "20250331" + "'", str17, "20250331");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(cachedDateTimeZone23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+02:09" + "'", str26, "+02:09");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-7739995L) + "'", long30 == (-7739995L));
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+02:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test510");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean9 = dateTimeFieldType7.isSupported((org.joda.time.Chronology) gregorianChronology8);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        long long14 = dividedDateTimeField11.set((long) (byte) 4, (int) '#');
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField17 = new org.joda.time.field.PreciseDurationField(durationFieldType15, (-9467020800000L));
        java.lang.String str18 = preciseDurationField17.getName();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology37.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology42 = gregorianChronology37.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology37.millisOfSecond();
        org.joda.time.MutableDateTime.Property property44 = new org.joda.time.MutableDateTime.Property(mutableDateTime30, dateTimeField43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField43.getType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField46 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, (org.joda.time.DurationField) preciseDurationField17, dateTimeFieldType45);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField48 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, 2922789);
        long long50 = offsetDateTimeField48.roundHalfEven((long) (byte) 5);
        long long52 = offsetDateTimeField48.remainder((long) 29222006);
        java.lang.String str53 = offsetDateTimeField48.getName();
        int int55 = offsetDateTimeField48.getLeapAmount((long) 2010);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 50491123200004L + "'", long14 == 50491123200004L);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "years" + "'", str18, "years");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 946857600000L + "'", long50 == 946857600000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 29222006L + "'", long52 == 29222006L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "yearOfEra" + "'", str53, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test511");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 0, chronology3);
        mutableDateTime4.setMonthOfYear(5);
        mutableDateTime4.setDayOfYear((int) (byte) 19);
        boolean boolean9 = mutableDateTime4.isAfterNow();
        int int12 = dateTimeFormatter1.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "monthOfYear", (int) (byte) 10);
        mutableDateTime4.addSeconds(10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone16);
        java.lang.Object obj18 = cachedDateTimeZone17.writeReplace();
        mutableDateTime4.setZone((org.joda.time.DateTimeZone) cachedDateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = cachedDateTimeZone17.getUncachedZone();
        boolean boolean22 = cachedDateTimeZone17.equals((java.lang.Object) "org.joda.time.IllegalInstantException: Illegal instant due to time zone offset transition (daylight savings time 'gap'): 1970-01-01T00:00:00.032 ()");
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((-293477644800000L), (org.joda.time.DateTimeZone) cachedDateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-11) + "'", int12 == (-11));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test512");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology7.secondOfMinute();
        mutableDateTime2.setChronology((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeField dateTimeField14 = gregorianChronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology7.dayOfWeek();
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test513");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.Chronology chronology3 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField4 = chronology3.halfdays();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0, chronology6);
        mutableDateTime7.setMonthOfYear(5);
        mutableDateTime7.setDayOfYear((int) (byte) 19);
        int int12 = mutableDateTime7.getMillisOfDay();
        mutableDateTime7.setMinuteOfDay((int) (byte) 1);
        int int15 = mutableDateTime7.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, 10);
        int int20 = mutableDateTime16.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.dayOfWeek();
        boolean boolean23 = property21.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval24 = property21.toInterval();
        org.joda.time.Period period25 = interval24.toPeriod();
        mutableDateTime7.add((org.joda.time.ReadablePeriod) period25, (int) (byte) 7);
        long long30 = chronology3.add((org.joda.time.ReadablePeriod) period25, (long) '#', 152);
        int int31 = period25.size();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:00.005]" + "'", str2, "ISOChronology[+00:00:00.005]");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 13 + "'", int20 == 13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 13132800035L + "'", long30 == 13132800035L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
    }

    @Test
    public void test514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test514");
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology6 = gregorianChronology1.withZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = gregorianChronology1.withUTC();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(5L, chronology7);
        int int9 = mutableDateTime8.getYearOfCentury();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
    }

    @Test
    public void test515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test515");
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(91, (int) (byte) 9, 19, 0, (int) (byte) 10, 13, (int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0, chronology9);
        mutableDateTime10.setMonthOfYear(5);
        mutableDateTime10.setDayOfYear((int) (byte) 19);
        boolean boolean15 = mutableDateTime10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone18 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime10.toMutableDateTime(dateTimeZone17);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.minuteOfDay();
        int int21 = mutableDateTime19.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfWeek();
        mutableDateTime19.setRounding(dateTimeField23, 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int27 = mutableDateTime19.get(dateTimeFieldType26);
        boolean boolean28 = mutableDateTime7.isEqual((org.joda.time.ReadableInstant) mutableDateTime19);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(cachedDateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test516");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.monthOfYear();
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology2.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology7 = gregorianChronology2.withZone(dateTimeZone6);
        long long11 = gregorianChronology2.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField12 = gregorianChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology2.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter14.withZone(dateTimeZone17);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone17);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone17.getName(0L, locale21);
        org.joda.time.chrono.ZonedChronology zonedChronology23 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology2, dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone26 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone25);
        boolean boolean28 = cachedDateTimeZone26.isStandardOffset((-1L));
        org.joda.time.Chronology chronology29 = zonedChronology23.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone26);
        org.joda.time.Chronology chronology30 = gregorianChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone26);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 0, chronology32);
        mutableDateTime33.setMonthOfYear(5);
        mutableDateTime33.setDayOfYear((int) (byte) 19);
        org.joda.time.chrono.GregorianChronology gregorianChronology38 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology38.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology38.secondOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology38.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology38.weekyear();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology38.secondOfMinute();
        mutableDateTime33.setChronology((org.joda.time.Chronology) gregorianChronology38);
        org.joda.time.DateTimeField dateTimeField45 = gregorianChronology38.millisOfSecond();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = org.joda.time.format.ISODateTimeFormat.dateOptionalTimeParser();
        org.joda.time.Chronology chronology47 = dateTimeFormatter46.getChronolgy();
        org.joda.time.LocalDateTime localDateTime49 = dateTimeFormatter46.parseLocalDateTime("97");
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeField45.getAsText((org.joda.time.ReadablePartial) localDateTime49, locale50);
        boolean boolean52 = cachedDateTimeZone26.isLocalDateTimeGap(localDateTime49);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(gregorianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 910L + "'", long11 == 910L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+02:09" + "'", str22, "+02:09");
        org.junit.Assert.assertNotNull(zonedChronology23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(cachedDateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(gregorianChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNull(chronology47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test517");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        java.util.Locale locale12 = null;
        java.lang.String str13 = remainderDateTimeField10.getAsShortText((long) (byte) 21, locale12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0, chronology15);
        mutableDateTime16.setMonthOfYear(5);
        mutableDateTime16.setDayOfYear((int) (byte) 19);
        org.joda.time.chrono.GregorianChronology gregorianChronology21 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology21.secondOfMinute();
        mutableDateTime16.setChronology((org.joda.time.Chronology) gregorianChronology21);
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology21.millisOfSecond();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = org.joda.time.format.ISODateTimeFormat.dateOptionalTimeParser();
        org.joda.time.Chronology chronology30 = dateTimeFormatter29.getChronolgy();
        org.joda.time.LocalDateTime localDateTime32 = dateTimeFormatter29.parseLocalDateTime("97");
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localDateTime32, locale33);
        org.joda.time.chrono.GregorianChronology gregorianChronology36 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology36.secondOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology36.weekyear();
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeField40.getAsShortText(2000, locale42);
        org.joda.time.ReadablePartial readablePartial44 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology45 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField46 = gregorianChronology45.months();
        org.joda.time.DateTimeField dateTimeField47 = gregorianChronology45.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gregorianChronology45.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology45.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology45.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = gregorianChronology45.getZone();
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration53 = null;
        mutableDateTime52.add(readableDuration53, 10);
        int int56 = mutableDateTime52.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime52.dayOfWeek();
        boolean boolean59 = property57.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval60 = property57.toInterval();
        org.joda.time.Period period61 = interval60.toPeriod();
        int[] intArray64 = gregorianChronology45.get((org.joda.time.ReadablePeriod) period61, (long) 57600000, (long) (byte) 10);
        int int65 = dateTimeField40.getMaximumValue(readablePartial44, intArray64);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray67 = remainderDateTimeField10.addWrapPartial((org.joda.time.ReadablePartial) localDateTime32, 1970, intArray64, (int) (byte) 7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(gregorianChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(chronology30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(gregorianChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2000" + "'", str43, "2000");
        org.junit.Assert.assertNotNull(gregorianChronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 13 + "'", int56 == 13);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 0, 0, -15, -59, -59, -990]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 292278993 + "'", int65 == 292278993);
    }

    @Test
    public void test518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test518");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTimeZoneShortName();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatterBuilder3.toPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        java.io.Writer writer8 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology9.era();
        org.joda.time.DurationField durationField13 = gregorianChronology9.seconds();
        org.joda.time.DurationField durationField14 = gregorianChronology9.millis();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology9.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str17 = dateTimeFieldType16.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField19 = new org.joda.time.field.RemainderDateTimeField(dateTimeField15, dateTimeFieldType16, (int) (short) 100);
        org.joda.time.ReadablePartial readablePartial20 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology21 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology21.yearOfEra();
        org.joda.time.ReadablePartial readablePartial23 = null;
        int[] intArray30 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray32 = dateTimeField22.add(readablePartial23, 0, intArray30, 0);
        int int33 = remainderDateTimeField19.getMaximumValue(readablePartial20, intArray30);
        long long35 = remainderDateTimeField19.roundHalfFloor(0L);
        long long38 = remainderDateTimeField19.getDifferenceAsLong((long) (byte) 13, (long) 1);
        java.lang.String str40 = remainderDateTimeField19.getAsShortText((long) 1969);
        long long43 = remainderDateTimeField19.set((-1735689599965L), 99);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter44.withZone(dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter44.withDefaultYear(0);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology51.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology51.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology51);
        org.joda.time.chrono.GregorianChronology gregorianChronology55 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField56 = gregorianChronology55.months();
        org.joda.time.DateTimeField dateTimeField57 = gregorianChronology55.weekyear();
        org.joda.time.DateTimeZone dateTimeZone58 = gregorianChronology55.getZone();
        java.lang.String str59 = dateTimeZone58.toString();
        boolean boolean60 = iSOChronology51.equals((java.lang.Object) str59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter44.withChronology((org.joda.time.Chronology) iSOChronology51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime64 = dateTimeFormatter62.parseLocalTime("99");
        int[] intArray66 = iSOChronology51.get((org.joda.time.ReadablePartial) localTime64, 86399995L);
        java.util.Locale locale68 = null;
        java.lang.String str69 = remainderDateTimeField19.getAsText((org.joda.time.ReadablePartial) localTime64, 0, locale68);
        java.util.Locale locale70 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter5.printTo(writer8, (org.joda.time.ReadablePartial) localTime64, locale70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "monthOfYear" + "'", str17, "monthOfYear");
        org.junit.Assert.assertNotNull(gregorianChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 99 + "'", int33 == 99);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1735689500965L) + "'", long43 == (-1735689500965L));
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(gregorianChronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(intArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0" + "'", str69, "0");
    }

    @Test
    public void test519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test519");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundCeiling();
        java.util.Date date5 = mutableDateTime4.toDate();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology11 = gregorianChronology6.withZone(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gregorianChronology6.minutes();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone14);
        org.joda.time.Chronology chronology16 = gregorianChronology6.withZone(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone14);
        mutableDateTime4.setZoneRetainFields(dateTimeZone14);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Dec 31 16:00:00 PST 1969");
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test520");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        mutableDateTime11.addYears((int) (byte) 23);
        int int15 = mutableDateTime11.getMillisOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, 10);
        int int20 = mutableDateTime16.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.dayOfWeek();
        boolean boolean23 = property21.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField24 = property21.getField();
        org.joda.time.MutableDateTime mutableDateTime25 = property21.roundHalfEven();
        mutableDateTime11.setTime((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0, chronology28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime31 = property30.roundHalfFloor();
        mutableDateTime31.addYears((int) '#');
        int int34 = mutableDateTime31.getYearOfEra();
        boolean boolean35 = mutableDateTime25.isEqual((org.joda.time.ReadableInstant) mutableDateTime31);
        int int36 = mutableDateTime25.getMinuteOfDay();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 13 + "'", int20 == 13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2005 + "'", int34 == 2005);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test521");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.hourOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime4.millisOfSecond();
        mutableDateTime4.setMillis(0L);
        org.joda.time.Instant instant9 = mutableDateTime4.toInstant();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test522");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        java.io.Writer writer12 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0, chronology14);
        mutableDateTime15.setMonthOfYear(5);
        mutableDateTime15.setDayOfYear((int) (byte) 19);
        boolean boolean20 = mutableDateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone23 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime15.toMutableDateTime(dateTimeZone22);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.minuteOfDay();
        int int26 = mutableDateTime24.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfWeek();
        mutableDateTime24.setRounding(dateTimeField28, 5);
        int int31 = mutableDateTime24.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime24.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime24.set(dateTimeFieldType33, 0);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(writer12, (org.joda.time.ReadableInstant) mutableDateTime24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(cachedDateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 19 + "'", int31 == 19);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
    }

    @Test
    public void test523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test523");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        mutableDateTime12.setDate((-34692278400000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test524");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        java.lang.String str5 = property3.toString();
        org.joda.time.DurationField durationField6 = property3.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime8 = property3.addWrapField((int) (byte) 0);
        java.lang.String str9 = property3.getName();
        org.joda.time.MutableDateTime mutableDateTime11 = property3.add(11);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfDay]" + "'", str5, "Property[secondOfDay]");
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondOfDay" + "'", str9, "secondOfDay");
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test525");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField5 = gregorianChronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology4.getZone();
        java.lang.String str8 = dateTimeZone7.toString();
        boolean boolean9 = iSOChronology0.equals((java.lang.Object) str8);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.weekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField13 = new org.joda.time.field.OffsetDateTimeField(dateTimeField11, (int) '4');
        int int14 = offsetDateTimeField13.getMinimumValue();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292275002) + "'", int14 == (-292275002));
    }

    @Test
    public void test526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test526");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str11 = mutableDateTime2.toString(dateTimeFormatter10);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime12.add(readableDuration13, 10);
        int int16 = mutableDateTime12.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime12.hourOfDay();
        mutableDateTime12.addMinutes(1969);
        int int20 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime12.setMillisOfDay(20);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "19700101T000000.005+0000" + "'", str11, "19700101T000000.005+0000");
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 13 + "'", int16 == 13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test527");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime2.toMutableDateTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology20 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology20.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology25 = gregorianChronology20.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology20.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology28 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean29 = dateTimeFieldType27.isSupported((org.joda.time.Chronology) gregorianChronology28);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField31 = new org.joda.time.field.DividedDateTimeField(dateTimeField26, dateTimeFieldType27, (int) (short) 100);
        long long34 = dividedDateTimeField31.set((long) (byte) 4, (int) '#');
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField37 = new org.joda.time.field.PreciseDurationField(durationFieldType35, (-9467020800000L));
        java.lang.String str38 = preciseDurationField37.getName();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) 0, chronology40);
        mutableDateTime41.setMonthOfYear(5);
        mutableDateTime41.setDayOfYear((int) (byte) 19);
        boolean boolean46 = mutableDateTime41.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone49 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime41.toMutableDateTime(dateTimeZone48);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.minuteOfDay();
        int int52 = mutableDateTime50.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology53.dayOfWeek();
        mutableDateTime50.setRounding(dateTimeField54, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology57 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = gregorianChronology57.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = gregorianChronology57.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology62 = gregorianChronology57.withZone(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = gregorianChronology57.millisOfSecond();
        org.joda.time.MutableDateTime.Property property64 = new org.joda.time.MutableDateTime.Property(mutableDateTime50, dateTimeField63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = dateTimeField63.getType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField66 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField31, (org.joda.time.DurationField) preciseDurationField37, dateTimeFieldType65);
        boolean boolean67 = mutableDateTime19.isSupported(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(gregorianChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(gregorianChronology28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 50491123200004L + "'", long34 == 50491123200004L);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "years" + "'", str38, "years");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(cachedDateTimeZone49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(iSOChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(gregorianChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test528");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        int int7 = mutableDateTime2.getMillisOfDay();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weekyears();
        mutableDateTime2.add(durationFieldType8, 0);
        java.lang.String str11 = durationFieldType8.getName();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyears" + "'", str11, "weekyears");
    }

    @Test
    public void test529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test529");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        mutableDateTime2.setMillisOfSecond((int) (byte) 0);
        int int9 = mutableDateTime2.getEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology15 = gregorianChronology10.withZone(dateTimeZone14);
        long long19 = gregorianChronology10.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField20 = gregorianChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology10.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter22.withZone(dateTimeZone25);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone27 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone25);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone25.getName(0L, locale29);
        org.joda.time.chrono.ZonedChronology zonedChronology31 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology10, dateTimeZone25);
        mutableDateTime2.setZoneRetainFields(dateTimeZone25);
        int int33 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Instant instant34 = mutableDateTime2.toInstant();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime35.add(readableDuration36, 10);
        int int39 = mutableDateTime35.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime35.dayOfWeek();
        boolean boolean42 = property40.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval43 = property40.toInterval();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) 0, chronology45);
        mutableDateTime46.setMonthOfYear(5);
        mutableDateTime46.setDayOfYear((int) (byte) 19);
        boolean boolean51 = mutableDateTime46.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone54 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone53);
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime46.toMutableDateTime(dateTimeZone53);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.minuteOfDay();
        mutableDateTime55.addYears((int) (byte) 23);
        mutableDateTime55.setSecondOfDay((int) (byte) 15);
        boolean boolean61 = interval43.isBefore((org.joda.time.ReadableInstant) mutableDateTime55);
        org.joda.time.ReadableInterval readableInterval62 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Duration duration63 = readableInterval62.toDuration();
        org.joda.time.MutableDateTime mutableDateTime64 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration65 = null;
        mutableDateTime64.add(readableDuration65, 10);
        int int68 = mutableDateTime64.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime64.dayOfWeek();
        boolean boolean71 = property69.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval72 = property69.toInterval();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime((long) 0, chronology74);
        mutableDateTime75.setMonthOfYear(5);
        mutableDateTime75.setDayOfYear((int) (byte) 19);
        boolean boolean80 = mutableDateTime75.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone83 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone82);
        org.joda.time.MutableDateTime mutableDateTime84 = mutableDateTime75.toMutableDateTime(dateTimeZone82);
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime84.minuteOfDay();
        mutableDateTime84.addYears((int) (byte) 23);
        mutableDateTime84.setSecondOfDay((int) (byte) 15);
        boolean boolean90 = interval72.isBefore((org.joda.time.ReadableInstant) mutableDateTime84);
        org.joda.time.ReadableInterval readableInterval91 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval72);
        org.joda.time.Duration duration92 = readableInterval91.toDuration();
        int int93 = duration63.compareTo((org.joda.time.ReadableDuration) duration92);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration63, 2922789);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 910L + "'", long19 == 910L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(cachedDateTimeZone27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+02:09" + "'", str30, "+02:09");
        org.junit.Assert.assertNotNull(zonedChronology31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 13 + "'", int39 == 13);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(cachedDateTimeZone54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(readableInterval62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 13 + "'", int68 == 13);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(cachedDateTimeZone83);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(readableInterval91);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test530");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str15 = dateTimeFieldType14.toString();
        boolean boolean16 = mutableDateTime11.isSupported(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        long long20 = dateTimeZone18.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone21 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone18);
        java.lang.String str23 = cachedDateTimeZone21.getNameKey((long) '#');
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 2000, (org.joda.time.DateTimeZone) cachedDateTimeZone21);
        mutableDateTime11.setZoneRetainFields((org.joda.time.DateTimeZone) cachedDateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "monthOfYear" + "'", str15, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test531");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setHourOfDay(5845578);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5845578 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
    }

    @Test
    public void test532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test532");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        mutableDateTime11.setTime((long) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.ISODateTimeFormat.tTime();
        java.lang.String str17 = mutableDateTime11.toString(dateTimeFormatter16);
        java.lang.Appendable appendable18 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.yearOfEra();
        int int32 = mutableDateTime30.getHourOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology33 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology33.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology38 = gregorianChronology33.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology33.millisOfSecond();
        org.joda.time.MutableDateTime.Property property40 = new org.joda.time.MutableDateTime.Property(mutableDateTime30, dateTimeField39);
        org.joda.time.DateTime dateTime41 = mutableDateTime30.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter16.printTo(appendable18, (org.joda.time.ReadableInstant) dateTime41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "T00:00:00.097+00:00:00.005" + "'", str17, "T00:00:00.097+00:00:00.005");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test533");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gregorianChronology0);
        org.joda.time.DurationField durationField7 = gregorianChronology0.months();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test534");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        org.joda.time.DateTimeField dateTimeField20 = mutableDateTime12.getRoundingField();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime12.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.add((long) 3);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(dateTimeField20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test535");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.Period period11 = period9.toPeriod();
        org.joda.time.Period period12 = period11.toPeriod();
        java.lang.String str13 = period11.toString();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 13 + "'", int4 == 13);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P1D" + "'", str13, "P1D");
    }

    @Test
    public void test536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test536");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod11 = period9.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType12 = null;
        int int13 = period9.get(durationFieldType12);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 13 + "'", int4 == 13);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test537");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.monthOfYear();
        long long8 = gregorianChronology0.getDateTimeMillis((int) (byte) 13, 1, (int) (byte) 19, 1969);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gregorianChronology0);
        mutableDateTime9.addHours(19);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-61755350398031L) + "'", long8 == (-61755350398031L));
    }

    @Test
    public void test538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test538");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        mutableDateTime11.addYears((int) (byte) 23);
        int int15 = mutableDateTime11.getMillisOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, 10);
        int int20 = mutableDateTime16.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.dayOfWeek();
        boolean boolean23 = property21.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField24 = property21.getField();
        org.joda.time.MutableDateTime mutableDateTime25 = property21.roundHalfEven();
        mutableDateTime11.setTime((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableDateTime25.add(readablePeriod27);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 13 + "'", int20 == 13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test539");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0, chronology10);
        mutableDateTime11.setMonthOfYear(5);
        mutableDateTime11.setDayOfYear((int) (byte) 19);
        boolean boolean16 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime11.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.minuteOfDay();
        mutableDateTime20.addYears((int) (byte) 23);
        mutableDateTime20.setSecondOfDay((int) (byte) 15);
        boolean boolean26 = interval8.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.MutableInterval mutableInterval27 = interval8.toMutableInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 0, chronology29);
        mutableDateTime30.setMonthOfYear(5);
        mutableDateTime30.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(durationFieldType35, "");
        java.lang.Throwable[] throwableArray38 = illegalFieldValueException37.getSuppressed();
        boolean boolean39 = mutableDateTime30.equals((java.lang.Object) illegalFieldValueException37);
        mutableDateTime30.setSecondOfDay((int) (short) 10);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gregorianChronology42.monthOfYear();
        org.joda.time.DateTime dateTime46 = mutableDateTime30.toDateTime((org.joda.time.Chronology) gregorianChronology42);
        boolean boolean47 = mutableInterval27.equals((java.lang.Object) dateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 13 + "'", int4 == 13);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test540");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        long long5 = cachedDateTimeZone3.nextTransition(315705600019L);
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        java.util.Locale locale9 = null;
        java.lang.String str10 = cachedDateTimeZone3.getName((-2678400000L), locale9);
        org.joda.time.DateTimeZone dateTimeZone11 = cachedDateTimeZone3.getUncachedZone();
        boolean boolean13 = cachedDateTimeZone3.equals((java.lang.Object) (-28798030));
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 315705600019L + "'", long5 == 315705600019L);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.005" + "'", str10, "+00:00:00.005");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test541");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.util.GregorianCalendar gregorianCalendar1 = mutableDateTime0.toGregorianCalendar();
        boolean boolean2 = mutableDateTime0.isBeforeNow();
        int int3 = mutableDateTime0.getRoundingMode();
        int int4 = mutableDateTime0.getDayOfYear();
        int int5 = mutableDateTime0.getYear();
        mutableDateTime0.addWeekyears(19);
        org.junit.Assert.assertNotNull(gregorianCalendar1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 91 + "'", int4 == 91);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2024 + "'", int5 == 2024);
    }

    @Test
    public void test542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test542");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0, chronology10);
        mutableDateTime11.setMonthOfYear(5);
        mutableDateTime11.setDayOfYear((int) (byte) 19);
        boolean boolean16 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime11.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.minuteOfDay();
        mutableDateTime20.addYears((int) (byte) 23);
        mutableDateTime20.setSecondOfDay((int) (byte) 15);
        boolean boolean26 = interval8.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology27.era();
        org.joda.time.DurationField durationField31 = gregorianChronology27.seconds();
        org.joda.time.DurationField durationField32 = gregorianChronology27.millis();
        org.joda.time.DateTimeZone dateTimeZone33 = gregorianChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology27.hourOfDay();
        boolean boolean35 = interval8.equals((java.lang.Object) gregorianChronology27);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime36.add(readableDuration37, 10);
        int int40 = mutableDateTime36.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfWeek();
        boolean boolean43 = property41.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval44 = property41.toInterval();
        org.joda.time.Period period45 = interval44.toPeriod();
        boolean boolean46 = interval8.overlaps((org.joda.time.ReadableInterval) interval44);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48, 10);
        int int51 = mutableDateTime47.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime47.dayOfWeek();
        boolean boolean54 = property52.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval55 = property52.toInterval();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = interval55.toPeriod(periodType56);
        org.joda.time.ReadableInterval readableInterval58 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval55);
        boolean boolean59 = interval44.overlaps(readableInterval58);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 13 + "'", int4 == 13);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 13 + "'", int40 == 13);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 13 + "'", int51 == 13);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(readableInterval58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test543");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        long long9 = gregorianChronology0.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField10 = gregorianChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology0.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gregorianChronology0);
        int int13 = mutableDateTime12.getMillisOfSecond();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 910L + "'", long9 == 910L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 105 + "'", int13 == 105);
    }

    @Test
    public void test544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test544");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0, chronology6);
        mutableDateTime7.setMonthOfYear(5);
        mutableDateTime7.setDayOfYear((int) (byte) 19);
        boolean boolean12 = mutableDateTime7.isAfterNow();
        int int15 = dateTimeFormatter4.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime7, "monthOfYear", (int) (byte) 10);
        int int16 = mutableDateTime7.getDayOfMonth();
        boolean boolean17 = iSOChronology0.equals((java.lang.Object) mutableDateTime7);
        org.joda.time.Chronology chronology18 = iSOChronology0.withUTC();
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology19.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology19.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone24 = gregorianChronology19.getZone();
        org.joda.time.Chronology chronology25 = iSOChronology0.withZone(dateTimeZone24);
        java.lang.String str26 = dateTimeZone24.getID();
        java.lang.String str28 = dateTimeZone24.getName(18934041602000L);
        java.lang.String str30 = dateTimeZone24.getShortName(10373820000L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-11) + "'", int15 == (-11));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
    }

    @Test
    public void test545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test545");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str11 = mutableDateTime2.toString(dateTimeFormatter10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.yearOfCentury();
        org.joda.time.Chronology chronology13 = property12.getChronology();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property12.getAsText(locale14);
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology21 = gregorianChronology16.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology16.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology24 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean25 = dateTimeFieldType23.isSupported((org.joda.time.Chronology) gregorianChronology24);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField27 = new org.joda.time.field.DividedDateTimeField(dateTimeField22, dateTimeFieldType23, (int) (short) 100);
        long long30 = dividedDateTimeField27.getDifferenceAsLong(0L, (-220L));
        java.lang.String str32 = dividedDateTimeField27.getAsShortText((long) (-11));
        int int33 = dividedDateTimeField27.getDivisor();
        long long36 = dividedDateTimeField27.getDifferenceAsLong((long) (short) 10, (long) 19);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dividedDateTimeField27.getAsShortText(6251432339477249L, locale38);
        org.joda.time.chrono.GregorianChronology gregorianChronology40 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField41 = gregorianChronology40.months();
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology40.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology40.dayOfMonth();
        long long48 = gregorianChronology40.getDateTimeMillis((int) (byte) 3, (int) (byte) 1, 10, (int) 'a');
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology40.yearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime52 = dateTimeFormatter50.parseLocalTime("99");
        int int53 = dateTimeField49.getMaximumValue((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.chrono.GregorianChronology gregorianChronology55 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField56 = gregorianChronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField57 = gregorianChronology55.secondOfDay();
        org.joda.time.DateTimeField dateTimeField58 = gregorianChronology55.era();
        org.joda.time.DurationField durationField59 = gregorianChronology55.seconds();
        org.joda.time.DurationField durationField60 = gregorianChronology55.millis();
        org.joda.time.DateTimeField dateTimeField61 = gregorianChronology55.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology62 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField63 = gregorianChronology62.months();
        org.joda.time.DateTimeField dateTimeField64 = gregorianChronology62.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField65 = gregorianChronology62.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField66 = gregorianChronology62.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField67 = gregorianChronology62.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone68 = gregorianChronology62.getZone();
        org.joda.time.MutableDateTime mutableDateTime69 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration70 = null;
        mutableDateTime69.add(readableDuration70, 10);
        int int73 = mutableDateTime69.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime69.dayOfWeek();
        boolean boolean76 = property74.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval77 = property74.toInterval();
        org.joda.time.Period period78 = interval77.toPeriod();
        int[] intArray81 = gregorianChronology62.get((org.joda.time.ReadablePeriod) period78, (long) 57600000, (long) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod82 = period78.toMutablePeriod();
        java.lang.String str83 = mutablePeriod82.toString();
        int[] intArray85 = gregorianChronology55.get((org.joda.time.ReadablePeriod) mutablePeriod82, (long) 365);
        int[] intArray87 = dividedDateTimeField27.addWrapField((org.joda.time.ReadablePartial) localTime52, 6, intArray85, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = property12.compareTo((org.joda.time.ReadablePartial) localTime52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "19700101T000000.005+0000" + "'", str11, "19700101T000000.005+0000");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "70" + "'", str15, "70");
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(gregorianChronology24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "19" + "'", str32, "19");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2000" + "'", str39, "2000");
        org.junit.Assert.assertNotNull(gregorianChronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-62071747199903L) + "'", long48 == (-62071747199903L));
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(gregorianChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(gregorianChronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 14 + "'", int73 == 14);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 0, 0, 0, -15, -59, -59, -990]");
        org.junit.Assert.assertNotNull(mutablePeriod82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "P1D" + "'", str83, "P1D");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 0, 0, 0, 0, 0, 0, 365]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 0, 0, 0, 0, 0, 0, 365]");
    }

    @Test
    public void test546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test546");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval8);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11, 10);
        int int14 = mutableDateTime10.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.dayOfWeek();
        boolean boolean17 = property15.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval18 = property15.toInterval();
        org.joda.time.Period period19 = interval18.toPeriod();
        boolean boolean20 = interval8.overlaps((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Period period21 = interval8.toPeriod();
        org.joda.time.DateTime dateTime22 = interval8.getEnd();
        org.joda.time.DateTime dateTime23 = interval8.getStart();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 14 + "'", int14 == 14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test547");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        java.lang.String str14 = mutableDateTime11.toString();
        mutableDateTime11.setHourOfDay(0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-19T00:00:00.005+00:00:00.005" + "'", str14, "1970-01-19T00:00:00.005+00:00:00.005");
    }

    @Test
    public void test548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test548");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        mutableDateTime11.addYears((int) (byte) 23);
        int int15 = mutableDateTime11.getMillisOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, 10);
        int int20 = mutableDateTime16.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.dayOfWeek();
        boolean boolean23 = property21.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField24 = property21.getField();
        org.joda.time.MutableDateTime mutableDateTime25 = property21.roundHalfEven();
        mutableDateTime11.setTime((org.joda.time.ReadableInstant) mutableDateTime25);
        mutableDateTime25.addSeconds(69);
        mutableDateTime25.addSeconds(5270400);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 14 + "'", int20 == 14);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test549");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        int int7 = property5.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
    }

    @Test
    public void test550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test550");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTimeZoneShortName();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0, chronology6);
        mutableDateTime7.setMonthOfYear(5);
        mutableDateTime7.setDayOfYear((int) (byte) 19);
        boolean boolean12 = mutableDateTime7.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone15 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime7.toMutableDateTime(dateTimeZone14);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.minuteOfDay();
        int int18 = mutableDateTime16.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.dayOfWeek();
        mutableDateTime16.setRounding(dateTimeField20, 5);
        int int23 = mutableDateTime16.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime16.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime16.set(dateTimeFieldType25, 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder3.appendShortText(dateTimeFieldType25);
        org.joda.time.chrono.GregorianChronology gregorianChronology29 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = gregorianChronology29.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology34 = gregorianChronology29.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology29.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean38 = dateTimeFieldType36.isSupported((org.joda.time.Chronology) gregorianChronology37);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField40 = new org.joda.time.field.DividedDateTimeField(dateTimeField35, dateTimeFieldType36, (int) (short) 100);
        org.joda.time.DurationField durationField41 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField43 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField40, durationField41, dateTimeFieldType42);
        org.joda.time.IllegalFieldValueException illegalFieldValueException47 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType42, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder3.appendFixedDecimal(dateTimeFieldType42, (int) (byte) 1);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(cachedDateTimeZone15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 19 + "'", int23 == 19);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(gregorianChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
    }

    @Test
    public void test551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test551");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology2.era();
        org.joda.time.DurationField durationField6 = gregorianChronology2.seconds();
        org.joda.time.DurationField durationField7 = gregorianChronology2.millis();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology2.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str10 = dateTimeFieldType9.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField12 = new org.joda.time.field.RemainderDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 100);
        org.joda.time.ReadablePartial readablePartial13 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.yearOfEra();
        org.joda.time.ReadablePartial readablePartial16 = null;
        int[] intArray23 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray25 = dateTimeField15.add(readablePartial16, 0, intArray23, 0);
        int int26 = remainderDateTimeField12.getMaximumValue(readablePartial13, intArray23);
        long long28 = remainderDateTimeField12.roundHalfFloor(0L);
        java.lang.String str29 = remainderDateTimeField12.toString();
        long long31 = remainderDateTimeField12.roundHalfEven(2000020L);
        boolean boolean32 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeFormatterBuilder1, (java.lang.Object) remainderDateTimeField12);
        org.joda.time.chrono.GregorianChronology gregorianChronology33 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField34 = gregorianChronology33.months();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology33.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology33.dayOfMonth();
        long long41 = gregorianChronology33.getDateTimeMillis((int) (byte) 3, (int) (byte) 1, 10, (int) 'a');
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology33.yearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime45 = dateTimeFormatter43.parseLocalTime("99");
        int int46 = dateTimeField42.getMaximumValue((org.joda.time.ReadablePartial) localTime45);
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField49 = gregorianChronology48.months();
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology48.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gregorianChronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = gregorianChronology48.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone54 = gregorianChronology48.getZone();
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration56 = null;
        mutableDateTime55.add(readableDuration56, 10);
        int int59 = mutableDateTime55.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime55.dayOfWeek();
        boolean boolean62 = property60.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval63 = property60.toInterval();
        org.joda.time.Period period64 = interval63.toPeriod();
        int int65 = period64.size();
        org.joda.time.Period period66 = period64.toPeriod();
        int int67 = period64.size();
        org.joda.time.Period period68 = period64.toPeriod();
        int[] intArray70 = gregorianChronology48.get((org.joda.time.ReadablePeriod) period64, (-5756400001L));
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray72 = remainderDateTimeField12.set((org.joda.time.ReadablePartial) localTime45, (-28800000), intArray70, (int) (byte) 16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -28800000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder1);
        org.junit.Assert.assertNotNull(gregorianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 99 + "'", int26 == 99);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DateTimeField[monthOfYear]" + "'", str29, "DateTimeField[monthOfYear]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2000000L + "'", long31 == 2000000L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(gregorianChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-62071747199903L) + "'", long41 == (-62071747199903L));
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 14 + "'", int59 == 14);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 0, -9, -3, -15, 0, 0, -1]");
    }

    @Test
    public void test552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test552");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.timeElementParser();
        java.io.Writer writer1 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 0, chronology3);
        mutableDateTime4.setMonthOfYear(5);
        mutableDateTime4.setDayOfYear((int) (byte) 19);
        boolean boolean9 = mutableDateTime4.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone12 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime4.toMutableDateTime(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.yearOfEra();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime13.add(readableDuration15);
        mutableDateTime13.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology20 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean21 = dateTimeFieldType19.isSupported((org.joda.time.Chronology) gregorianChronology20);
        int int22 = mutableDateTime13.get(dateTimeFieldType19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter23.withZone(dateTimeZone26);
        int int28 = dateTimeFormatter27.getDefaultYear();
        boolean boolean29 = dateTimeFormatter27.isPrinter();
        java.lang.String str30 = mutableDateTime13.toString(dateTimeFormatter27);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(writer1, (org.joda.time.ReadableInstant) mutableDateTime13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(cachedDateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(gregorianChronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-019T03:09:00.000+02:09" + "'", str30, "1970-019T03:09:00.000+02:09");
    }

    @Test
    public void test553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test553");
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(91, (int) (byte) 9, 19, 0, (int) (byte) 10, 13, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        long long10 = dateTimeZone8.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone11);
        mutableDateTime12.addSeconds((-28800000));
        boolean boolean15 = mutableDateTime7.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        int int16 = mutableDateTime12.getWeekOfWeekyear();
        java.lang.String str17 = mutableDateTime12.toString();
        java.lang.Object obj18 = mutableDateTime12.clone();
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gregorianChronology19.minutes();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.chrono.GregorianChronology gregorianChronology28 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology29 = gregorianChronology19.withZone(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone27);
        mutableDateTime12.setZone(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 18 + "'", int16 == 18);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2023-05-04T17:36:52.458+00:00:00.005" + "'", str17, "2023-05-04T17:36:52.458+00:00:00.005");
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "2023-05-04T17:36:52.458+00:00:00.005");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "2023-05-04T17:36:52.458+00:00:00.005");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "2023-05-04T17:36:52.458+00:00:00.005");
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(gregorianChronology28);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test554");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.MutableDateTime mutableDateTime8 = property5.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        long long11 = dateTimeZone9.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone12 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        java.lang.String str14 = cachedDateTimeZone12.getNameKey((long) (short) 100);
        mutableDateTime8.setZoneRetainFields((org.joda.time.DateTimeZone) cachedDateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test555");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.util.GregorianCalendar gregorianCalendar1 = mutableDateTime0.toGregorianCalendar();
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) mutableDateTime0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.ISODateTimeFormat.basicDate();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5, 10);
        int int8 = mutableDateTime4.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime4.dayOfWeek();
        mutableDateTime4.addYears(1);
        java.lang.String str12 = dateTimeFormatter3.print((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter13.withZone(dateTimeZone16);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone18 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone16);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone16.getName(0L, locale20);
        java.lang.Object obj22 = dateTimeZone16.writeReplace();
        mutableDateTime4.setZone(dateTimeZone16);
        java.lang.Object obj24 = mutableDateTime4.clone();
        boolean boolean25 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        long long28 = dateTimeZone26.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone26);
        java.lang.String str31 = cachedDateTimeZone29.getNameKey((long) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeUtils.getZone((org.joda.time.DateTimeZone) cachedDateTimeZone29);
        org.joda.time.DateTime dateTime33 = mutableDateTime4.toDateTime(dateTimeZone32);
        org.junit.Assert.assertNotNull(gregorianCalendar1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "20250402" + "'", str12, "20250402");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(cachedDateTimeZone18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+02:09" + "'", str21, "+02:09");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj24);
// flaky:         org.junit.Assert.assertEquals(obj24.toString(), "2025-04-02T03:45:52.661+02:09");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "2025-04-02T03:45:52.661+02:09");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "2025-04-02T03:45:52.661+02:09");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
// flaky:         org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test556");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYearOfEra((int) ' ', (int) (byte) 23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneName(strMap4);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfSecond((int) (byte) 100, (int) ' ');
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology11.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology16 = gregorianChronology11.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology11.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean20 = dateTimeFieldType18.isSupported((org.joda.time.Chronology) gregorianChronology19);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField22 = new org.joda.time.field.DividedDateTimeField(dateTimeField17, dateTimeFieldType18, (int) (short) 100);
        long long25 = dividedDateTimeField22.set((long) (byte) 4, (int) '#');
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField28 = new org.joda.time.field.PreciseDurationField(durationFieldType26, (-9467020800000L));
        java.lang.String str29 = preciseDurationField28.getName();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 0, chronology31);
        mutableDateTime32.setMonthOfYear(5);
        mutableDateTime32.setDayOfYear((int) (byte) 19);
        boolean boolean37 = mutableDateTime32.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone40 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime32.toMutableDateTime(dateTimeZone39);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.minuteOfDay();
        int int43 = mutableDateTime41.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology44.dayOfWeek();
        mutableDateTime41.setRounding(dateTimeField45, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology48.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology53 = gregorianChronology48.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = gregorianChronology48.millisOfSecond();
        org.joda.time.MutableDateTime.Property property55 = new org.joda.time.MutableDateTime.Property(mutableDateTime41, dateTimeField54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = dateTimeField54.getType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField57 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField22, (org.joda.time.DurationField) preciseDurationField28, dateTimeFieldType56);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder59 = dateTimeFormatterBuilder7.appendFixedDecimal(dateTimeFieldType56, 3);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder63 = dateTimeFormatterBuilder60.appendYearOfEra((int) ' ', (int) (byte) 23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap64 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = dateTimeFormatterBuilder60.appendTimeZoneName(strMap64);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap66 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = dateTimeFormatterBuilder65.appendTimeZoneShortName(strMap66);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = dateTimeFormatterBuilder59.appendTimeZoneName(strMap66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder72 = dateTimeFormatterBuilder59.appendDecimal(dateTimeFieldType69, (int) (byte) 10, (int) (byte) 2);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder73 = dateTimeFormatterBuilder72.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder74 = dateTimeFormatterBuilder72.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder76 = dateTimeFormatterBuilder74.appendHourOfHalfday((int) (byte) 15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 50491123200004L + "'", long25 == 50491123200004L);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "years" + "'", str29, "years");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(cachedDateTimeZone40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder59);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder63);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder67);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder72);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder73);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder74);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder76);
    }

    @Test
    public void test557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test557");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        mutableDateTime11.addYears((int) (byte) 23);
        mutableDateTime11.setSecondOfDay((int) (byte) 15);
        org.joda.time.Chronology chronology17 = mutableDateTime11.getChronology();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime11.add(readableDuration18);
        boolean boolean20 = mutableDateTime11.isEqualNow();
        java.util.GregorianCalendar gregorianCalendar21 = mutableDateTime11.toGregorianCalendar();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime11.secondOfMinute();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test558");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder3.appendYear((int) (byte) 100, (int) (byte) 19);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0, chronology8);
        mutableDateTime9.setMonthOfYear(5);
        mutableDateTime9.setDayOfYear((int) (byte) 19);
        boolean boolean14 = mutableDateTime9.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime9.toMutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.minuteOfDay();
        int int20 = mutableDateTime18.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfWeek();
        mutableDateTime18.setRounding(dateTimeField22, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology25 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology25.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology30 = gregorianChronology25.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gregorianChronology25.millisOfSecond();
        org.joda.time.MutableDateTime.Property property32 = new org.joda.time.MutableDateTime.Property(mutableDateTime18, dateTimeField31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = dateTimeField31.getType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder6.appendFixedDecimal(dateTimeFieldType33, (int) (byte) 23);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology36.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology36);
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType33.getField((org.joda.time.Chronology) iSOChronology36);
        org.joda.time.DateTimeZone dateTimeZone42 = iSOChronology36.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(gregorianChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
    }

    @Test
    public void test559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test559");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology11 = gregorianChronology6.withZone(dateTimeZone10);
        long long15 = gregorianChronology6.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField16 = gregorianChronology6.halfdays();
        org.joda.time.DurationField durationField17 = gregorianChronology6.years();
        boolean boolean18 = property5.equals((java.lang.Object) gregorianChronology6);
        java.util.Locale locale19 = null;
        java.lang.String str20 = property5.getAsShortText(locale19);
        int int21 = property5.getMaximumValue();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 910L + "'", long15 == 910L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 23 + "'", int21 == 23);
    }

    @Test
    public void test560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test560");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean9 = dateTimeFieldType7.isSupported((org.joda.time.Chronology) gregorianChronology8);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        long long14 = dividedDateTimeField11.getDifferenceAsLong(0L, (-220L));
        java.lang.String str16 = dividedDateTimeField11.getAsShortText((long) (-11));
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11);
        long long19 = dividedDateTimeField11.roundHalfFloor((long) 6000);
        java.util.Locale locale22 = null;
        long long23 = dividedDateTimeField11.set((long) 32, "1969", locale22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime26 = dateTimeFormatter24.parseLocalTime("99");
        org.joda.time.chrono.GregorianChronology gregorianChronology28 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gregorianChronology28.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = gregorianChronology28.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology28.weekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime39 = dateTimeFormatter37.parseLocalTime("99");
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology41.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology41.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial45 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology46 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField47 = gregorianChronology46.months();
        org.joda.time.DateTimeField dateTimeField48 = gregorianChronology46.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology46.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology46.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField51 = gregorianChronology46.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone52 = gregorianChronology46.getZone();
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration54 = null;
        mutableDateTime53.add(readableDuration54, 10);
        int int57 = mutableDateTime53.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime53.dayOfWeek();
        boolean boolean60 = property58.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval61 = property58.toInterval();
        org.joda.time.Period period62 = interval61.toPeriod();
        int[] intArray65 = gregorianChronology46.get((org.joda.time.ReadablePeriod) period62, (long) 57600000, (long) (byte) 10);
        int int66 = dateTimeField44.getMaximumValue(readablePartial45, intArray65);
        int[] intArray68 = dateTimeField36.set((org.joda.time.ReadablePartial) localTime39, 5, intArray65, 960);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray70 = dividedDateTimeField11.set((org.joda.time.ReadablePartial) localTime26, (-57600001), intArray68, (int) (byte) 19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -57600001");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "19" + "'", str16, "19");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 946857600000L + "'", long19 == 946857600000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 6153605942400032L + "'", long23 == 6153605942400032L);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(gregorianChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(gregorianChronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 14 + "'", int57 == 14);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, -15, 960, -59, -990]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 99 + "'", int66 == 99);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 0, 0, -15, 960, -59, -990]");
    }

    @Test
    public void test561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test561");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        mutableDateTime11.addMillis(0);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.minuteOfDay();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime11.minuteOfDay();
        org.joda.time.DateTime dateTime18 = mutableDateTime11.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test562");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicWeekDate();
        java.lang.Appendable appendable1 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 0, chronology3);
        mutableDateTime4.setMonthOfYear(5);
        mutableDateTime4.setDayOfYear((int) (byte) 19);
        int int9 = mutableDateTime4.getMillisOfDay();
        java.lang.Object obj10 = mutableDateTime4.clone();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(appendable1, (org.joda.time.ReadableInstant) mutableDateTime4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "1970-01-19T00:00:00.005+00:00:00.005");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-19T00:00:00.005+00:00:00.005");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-19T00:00:00.005+00:00:00.005");
    }

    @Test
    public void test563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test563");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField5 = gregorianChronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology4.getZone();
        java.lang.String str8 = dateTimeZone7.toString();
        boolean boolean9 = iSOChronology0.equals((java.lang.Object) str8);
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DurationField durationField11 = iSOChronology0.seconds();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test564");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.MutableDateTime mutableDateTime8 = property5.roundHalfCeiling();
        long long9 = property5.getMillis();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1712015999995L + "'", long9 == 1712015999995L);
    }

    @Test
    public void test565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test565");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.months();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology0.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology0.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
    }

    @Test
    public void test566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test566");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTimeZoneShortName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder8.appendYear((int) (byte) 100, (int) (byte) 19);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 0, chronology13);
        mutableDateTime14.setMonthOfYear(5);
        mutableDateTime14.setDayOfYear((int) (byte) 19);
        boolean boolean19 = mutableDateTime14.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone22 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime14.toMutableDateTime(dateTimeZone21);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.minuteOfDay();
        int int25 = mutableDateTime23.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfWeek();
        mutableDateTime23.setRounding(dateTimeField27, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology30 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = gregorianChronology30.yearOfEra();
        org.joda.time.DateTimeField dateTimeField32 = gregorianChronology30.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology35 = gregorianChronology30.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology30.millisOfSecond();
        org.joda.time.MutableDateTime.Property property37 = new org.joda.time.MutableDateTime.Property(mutableDateTime23, dateTimeField36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField36.getType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder11.appendFixedDecimal(dateTimeFieldType38, (int) (byte) 23);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder11.appendSignedDecimal(dateTimeFieldType41, 0, 365);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = dateTimeFormatterBuilder11.appendMinuteOfDay((int) (byte) 13);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder47.appendYearOfEra((int) ' ', (int) (byte) 23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap51 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder47.appendTimeZoneName(strMap51);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap53 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = dateTimeFormatterBuilder52.appendTimeZoneShortName(strMap53);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap53);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = dateTimeFormatterBuilder3.appendTimeZoneShortName(strMap53);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = dateTimeFormatterBuilder3.appendHourOfDay(15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(cachedDateTimeZone22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(gregorianChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder54);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder56);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder58);
    }

    @Test
    public void test567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test567");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYearOfEra((int) ' ', (int) (byte) 23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneName(strMap4);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfSecond((int) (byte) 100, (int) ' ');
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology11.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology16 = gregorianChronology11.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology11.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean20 = dateTimeFieldType18.isSupported((org.joda.time.Chronology) gregorianChronology19);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField22 = new org.joda.time.field.DividedDateTimeField(dateTimeField17, dateTimeFieldType18, (int) (short) 100);
        long long25 = dividedDateTimeField22.set((long) (byte) 4, (int) '#');
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField28 = new org.joda.time.field.PreciseDurationField(durationFieldType26, (-9467020800000L));
        java.lang.String str29 = preciseDurationField28.getName();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 0, chronology31);
        mutableDateTime32.setMonthOfYear(5);
        mutableDateTime32.setDayOfYear((int) (byte) 19);
        boolean boolean37 = mutableDateTime32.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone40 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime32.toMutableDateTime(dateTimeZone39);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.minuteOfDay();
        int int43 = mutableDateTime41.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology44.dayOfWeek();
        mutableDateTime41.setRounding(dateTimeField45, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology48.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology53 = gregorianChronology48.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = gregorianChronology48.millisOfSecond();
        org.joda.time.MutableDateTime.Property property55 = new org.joda.time.MutableDateTime.Property(mutableDateTime41, dateTimeField54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = dateTimeField54.getType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField57 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField22, (org.joda.time.DurationField) preciseDurationField28, dateTimeFieldType56);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder59 = dateTimeFormatterBuilder7.appendFixedDecimal(dateTimeFieldType56, 3);
        boolean boolean60 = dateTimeFormatterBuilder7.canBuildPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 50491123200004L + "'", long25 == 50491123200004L);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "years" + "'", str29, "years");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(cachedDateTimeZone40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test568");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval8);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11, 10);
        int int14 = mutableDateTime10.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.dayOfWeek();
        boolean boolean17 = property15.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval18 = property15.toInterval();
        org.joda.time.Period period19 = interval18.toPeriod();
        boolean boolean20 = interval8.overlaps((org.joda.time.ReadableInterval) interval18);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22, 10);
        int int25 = mutableDateTime21.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime21.dayOfWeek();
        boolean boolean28 = property26.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval29 = property26.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = interval29.toPeriod(periodType30);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33, 10);
        int int36 = mutableDateTime32.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime32.dayOfWeek();
        boolean boolean39 = property37.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval40 = property37.toInterval();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = interval40.toPeriod(periodType41);
        org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval40);
        boolean boolean44 = interval29.overlaps((org.joda.time.ReadableInterval) interval40);
        org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval40);
        boolean boolean46 = interval8.isBefore(readableInterval45);
        long long47 = readableInterval45.getEndMillis();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 14 + "'", int14 == 14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(mutableDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 14 + "'", int25 == 14);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 14 + "'", int36 == 14);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(readableInterval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(readableInterval45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1712102399995L + "'", long47 == 1712102399995L);
    }

    @Test
    public void test569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test569");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology12 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology12.yearOfEra();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray23 = dateTimeField13.add(readablePartial14, 0, intArray21, 0);
        int int24 = remainderDateTimeField10.getMaximumValue(readablePartial11, intArray21);
        long long26 = remainderDateTimeField10.roundHalfFloor(0L);
        long long29 = remainderDateTimeField10.add((long) 20, 2000);
        long long32 = remainderDateTimeField10.getDifferenceAsLong((long) (-11), (long) 20);
        org.joda.time.chrono.GregorianChronology gregorianChronology33 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology33.secondOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology33.era();
        org.joda.time.DurationField durationField37 = gregorianChronology33.seconds();
        org.joda.time.DurationField durationField38 = gregorianChronology33.millis();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology33.secondOfDay();
        java.lang.Object obj40 = null;
        boolean boolean41 = gregorianChronology33.equals(obj40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime44 = dateTimeFormatter42.parseLocalTime("99");
        long long46 = gregorianChronology33.set((org.joda.time.ReadablePartial) localTime44, 999L);
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology48.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gregorianChronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology48.minuteOfHour();
        org.joda.time.chrono.GregorianChronology gregorianChronology53 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField54 = gregorianChronology53.yearOfEra();
        org.joda.time.DateTimeField dateTimeField55 = gregorianChronology53.secondOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gregorianChronology53.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField57 = gregorianChronology53.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration59 = null;
        mutableDateTime58.add(readableDuration59, 10);
        int int62 = mutableDateTime58.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime58.dayOfWeek();
        boolean boolean65 = property63.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval66 = property63.toInterval();
        org.joda.time.Chronology chronology67 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval66);
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration69 = null;
        mutableDateTime68.add(readableDuration69, 10);
        int int72 = mutableDateTime68.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime68.dayOfWeek();
        boolean boolean75 = property73.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval76 = property73.toInterval();
        org.joda.time.Period period77 = interval76.toPeriod();
        boolean boolean78 = interval66.overlaps((org.joda.time.ReadableInterval) interval76);
        org.joda.time.Period period79 = interval66.toPeriod();
        int[] intArray81 = gregorianChronology53.get((org.joda.time.ReadablePeriod) period79, (-259200000L));
        int[] intArray84 = gregorianChronology48.get((org.joda.time.ReadablePeriod) period79, (-28799901L), 3155695200000L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray86 = remainderDateTimeField10.set((org.joda.time.ReadablePartial) localTime44, (int) (short) 1, intArray84, (-2922751));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2922751 for monthOfYear must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(gregorianChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 2000020L + "'", long29 == 2000020L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(gregorianChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(gregorianChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 14 + "'", int62 == 14);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 14 + "'", int72 == 14);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 0, 0, -3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[99, 11, 4, 2, 13, 59, 59, 901]");
    }

    @Test
    public void test570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test570");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = mutableDateTime2.getZone();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
    }

    @Test
    public void test571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test571");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder3.appendYear((int) (byte) 100, (int) (byte) 19);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0, chronology8);
        mutableDateTime9.setMonthOfYear(5);
        mutableDateTime9.setDayOfYear((int) (byte) 19);
        boolean boolean14 = mutableDateTime9.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime9.toMutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.minuteOfDay();
        int int20 = mutableDateTime18.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfWeek();
        mutableDateTime18.setRounding(dateTimeField22, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology25 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology25.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology30 = gregorianChronology25.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gregorianChronology25.millisOfSecond();
        org.joda.time.MutableDateTime.Property property32 = new org.joda.time.MutableDateTime.Property(mutableDateTime18, dateTimeField31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = dateTimeField31.getType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder6.appendFixedDecimal(dateTimeFieldType33, (int) (byte) 23);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology36.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology36);
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType33.getField((org.joda.time.Chronology) iSOChronology36);
        java.lang.String str42 = iSOChronology36.toString();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(gregorianChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ISOChronology[+00:00:00.005]" + "'", str42, "ISOChronology[+00:00:00.005]");
    }

    @Test
    public void test572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test572");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((-302944665600000L));
    }

    @Test
    public void test573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test573");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1969-01-20T00:00:00.005+00:00:00.005", "yearOfEra", 57600000, (int) (short) 1);
        long long6 = fixedDateTimeZone4.previousTransition(41024102400013L);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8, 10);
        int int11 = mutableDateTime7.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime7.dayOfWeek();
        boolean boolean14 = property12.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval15 = property12.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0, chronology17);
        mutableDateTime18.setMonthOfYear(5);
        mutableDateTime18.setDayOfYear((int) (byte) 19);
        boolean boolean23 = mutableDateTime18.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone26 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime18.toMutableDateTime(dateTimeZone25);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.minuteOfDay();
        mutableDateTime27.addYears((int) (byte) 23);
        mutableDateTime27.setSecondOfDay((int) (byte) 15);
        boolean boolean33 = interval15.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.chrono.GregorianChronology gregorianChronology34 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology34.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology34.era();
        org.joda.time.DurationField durationField38 = gregorianChronology34.seconds();
        org.joda.time.DurationField durationField39 = gregorianChronology34.millis();
        org.joda.time.DateTimeZone dateTimeZone40 = gregorianChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology34.hourOfDay();
        boolean boolean42 = interval15.equals((java.lang.Object) gregorianChronology34);
        boolean boolean43 = fixedDateTimeZone4.equals((java.lang.Object) boolean42);
        long long45 = fixedDateTimeZone4.convertUTCToLocal(86400000L);
        org.joda.time.chrono.GregorianChronology gregorianChronology46 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = gregorianChronology46.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = gregorianChronology46.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology51 = gregorianChronology46.withZone(dateTimeZone50);
        long long55 = gregorianChronology46.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField56 = gregorianChronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField57 = gregorianChronology46.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter58.withZone(dateTimeZone61);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone63 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone61);
        java.util.Locale locale65 = null;
        java.lang.String str66 = dateTimeZone61.getName(0L, locale65);
        org.joda.time.chrono.ZonedChronology zonedChronology67 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology46, dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone68 = zonedChronology67.getZone();
        org.joda.time.DateTimeZone dateTimeZone69 = zonedChronology67.getZone();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) 0, chronology71);
        mutableDateTime72.setMonthOfYear(5);
        mutableDateTime72.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException79 = new org.joda.time.IllegalFieldValueException(durationFieldType77, "");
        java.lang.Throwable[] throwableArray80 = illegalFieldValueException79.getSuppressed();
        boolean boolean81 = mutableDateTime72.equals((java.lang.Object) illegalFieldValueException79);
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime72.era();
        mutableDateTime72.setMinuteOfDay((int) (byte) 9);
        boolean boolean85 = zonedChronology67.equals((java.lang.Object) (byte) 9);
        org.joda.time.DateTimeField dateTimeField86 = zonedChronology67.weekyearOfCentury();
        boolean boolean87 = fixedDateTimeZone4.equals((java.lang.Object) dateTimeField86);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 41024102400013L + "'", long6 == 41024102400013L);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 14 + "'", int11 == 14);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(cachedDateTimeZone26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(gregorianChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 144000000L + "'", long45 == 144000000L);
        org.junit.Assert.assertNotNull(gregorianChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 910L + "'", long55 == 910L);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(cachedDateTimeZone63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+02:09" + "'", str66, "+02:09");
        org.junit.Assert.assertNotNull(zonedChronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test574");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setTime((int) (short) -1, 0, (-28798030), (int) (byte) 22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test575");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(chronology4);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test576");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology0.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6, 10);
        int int9 = mutableDateTime5.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime5.dayOfWeek();
        boolean boolean12 = property10.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval13 = property10.toInterval();
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval13);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16, 10);
        int int19 = mutableDateTime15.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.dayOfWeek();
        boolean boolean22 = property20.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval23 = property20.toInterval();
        org.joda.time.Period period24 = interval23.toPeriod();
        boolean boolean25 = interval13.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Period period26 = interval13.toPeriod();
        int[] intArray28 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period26, (-259200000L));
        org.joda.time.Period period29 = period26.toPeriod();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 14 + "'", int9 == 14);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 14 + "'", int19 == 14);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, -3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test577");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        long long9 = gregorianChronology0.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField10 = gregorianChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology0.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter12.withZone(dateTimeZone15);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone15.getName(0L, locale19);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology0, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology21.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = zonedChronology21.getZone();
        org.joda.time.DurationField durationField24 = zonedChronology21.millis();
        org.joda.time.chrono.GregorianChronology gregorianChronology25 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField26 = gregorianChronology25.months();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology25.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology25.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology25.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = gregorianChronology25.getZone();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33, 10);
        int int36 = mutableDateTime32.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime32.dayOfWeek();
        boolean boolean39 = property37.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval40 = property37.toInterval();
        org.joda.time.Period period41 = interval40.toPeriod();
        int[] intArray44 = gregorianChronology25.get((org.joda.time.ReadablePeriod) period41, (long) 57600000, (long) (byte) 10);
        java.lang.Object obj45 = null;
        boolean boolean46 = period41.equals(obj45);
        int[] intArray49 = zonedChronology21.get((org.joda.time.ReadablePeriod) period41, 892800015L, 105L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 910L + "'", long9 == 910L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+02:09" + "'", str20, "+02:09");
        org.junit.Assert.assertNotNull(zonedChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(gregorianChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 14 + "'", int36 == 14);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, -15, -59, -59, -990]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, -1, -3, -7, -59, -59, -910]");
    }

    @Test
    public void test578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test578");
        org.joda.time.DateTimeUtils.OffsetMillisProvider offsetMillisProvider1 = new org.joda.time.DateTimeUtils.OffsetMillisProvider((long) (byte) 16);
        long long2 = offsetMillisProvider1.getMillis();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711935419185L + "'", long2 == 1711935419185L);
    }

    @Test
    public void test579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test579");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str11 = mutableDateTime2.toString(dateTimeFormatter10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.yearOfCentury();
        int int13 = property12.getMinimumValueOverall();
        int int14 = property12.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.roundHalfEven();
        java.util.Locale locale16 = null;
        int int17 = property12.getMaximumTextLength(locale16);
        java.lang.String str18 = property12.getName();
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "19700101T000000.005+0000" + "'", str11, "19700101T000000.005+0000");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "yearOfCentury" + "'", str18, "yearOfCentury");
    }

    @Test
    public void test580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test580");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        int int10 = period9.size();
        org.joda.time.MutablePeriod mutablePeriod11 = period9.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType13 = mutablePeriod11.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod11);
    }

    @Test
    public void test581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test581");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTimeZoneShortName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder8.appendYear((int) (byte) 100, (int) (byte) 19);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 0, chronology13);
        mutableDateTime14.setMonthOfYear(5);
        mutableDateTime14.setDayOfYear((int) (byte) 19);
        boolean boolean19 = mutableDateTime14.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone22 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime14.toMutableDateTime(dateTimeZone21);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.minuteOfDay();
        int int25 = mutableDateTime23.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfWeek();
        mutableDateTime23.setRounding(dateTimeField27, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology30 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = gregorianChronology30.yearOfEra();
        org.joda.time.DateTimeField dateTimeField32 = gregorianChronology30.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology35 = gregorianChronology30.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology30.millisOfSecond();
        org.joda.time.MutableDateTime.Property property37 = new org.joda.time.MutableDateTime.Property(mutableDateTime23, dateTimeField36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField36.getType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder11.appendFixedDecimal(dateTimeFieldType38, (int) (byte) 23);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder11.appendSignedDecimal(dateTimeFieldType41, 0, 365);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = dateTimeFormatterBuilder11.appendMinuteOfDay((int) (byte) 13);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder47.appendYearOfEra((int) ' ', (int) (byte) 23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap51 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder47.appendTimeZoneName(strMap51);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap53 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = dateTimeFormatterBuilder52.appendTimeZoneShortName(strMap53);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap53);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = dateTimeFormatterBuilder3.appendTimeZoneShortName(strMap53);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = dateTimeFormatterBuilder57.appendYearOfEra((int) ' ', (int) (byte) 23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap61 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder62 = dateTimeFormatterBuilder57.appendTimeZoneName(strMap61);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap63 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder64 = dateTimeFormatterBuilder62.appendTimeZoneShortName(strMap63);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = dateTimeFormatterBuilder3.appendTimeZoneName(strMap63);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(cachedDateTimeZone22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(gregorianChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder54);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder56);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder60);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder64);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder65);
    }

    @Test
    public void test582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test582");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setMillis(0L);
        mutableDateTime3.setMillisOfSecond((int) (byte) 0);
        int int10 = mutableDateTime3.getEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology11.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology16 = gregorianChronology11.withZone(dateTimeZone15);
        long long20 = gregorianChronology11.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField21 = gregorianChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology11.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter23.withZone(dateTimeZone26);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone28 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone26);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone26.getName(0L, locale30);
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology11, dateTimeZone26);
        mutableDateTime3.setZoneRetainFields(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (-5), dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 910L + "'", long20 == 910L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(cachedDateTimeZone28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+02:09" + "'", str31, "+02:09");
        org.junit.Assert.assertNotNull(zonedChronology32);
    }

    @Test
    public void test583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test583");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYearOfEra((int) ' ', (int) (byte) 23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneName(strMap4);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfSecond((int) (byte) 100, (int) ' ');
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology11.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology16 = gregorianChronology11.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology11.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean20 = dateTimeFieldType18.isSupported((org.joda.time.Chronology) gregorianChronology19);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField22 = new org.joda.time.field.DividedDateTimeField(dateTimeField17, dateTimeFieldType18, (int) (short) 100);
        long long25 = dividedDateTimeField22.set((long) (byte) 4, (int) '#');
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField28 = new org.joda.time.field.PreciseDurationField(durationFieldType26, (-9467020800000L));
        java.lang.String str29 = preciseDurationField28.getName();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 0, chronology31);
        mutableDateTime32.setMonthOfYear(5);
        mutableDateTime32.setDayOfYear((int) (byte) 19);
        boolean boolean37 = mutableDateTime32.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone40 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime32.toMutableDateTime(dateTimeZone39);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.minuteOfDay();
        int int43 = mutableDateTime41.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology44.dayOfWeek();
        mutableDateTime41.setRounding(dateTimeField45, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology48.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology53 = gregorianChronology48.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = gregorianChronology48.millisOfSecond();
        org.joda.time.MutableDateTime.Property property55 = new org.joda.time.MutableDateTime.Property(mutableDateTime41, dateTimeField54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = dateTimeField54.getType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField57 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField22, (org.joda.time.DurationField) preciseDurationField28, dateTimeFieldType56);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder59 = dateTimeFormatterBuilder7.appendFixedDecimal(dateTimeFieldType56, 3);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = dateTimeFormatterBuilder59.appendTwoDigitWeekyear((int) (byte) -1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder63 = dateTimeFormatterBuilder61.appendMinuteOfDay((int) (byte) 17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 50491123200004L + "'", long25 == 50491123200004L);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "years" + "'", str29, "years");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(cachedDateTimeZone40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder59);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder61);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder63);
    }

    @Test
    public void test584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test584");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        // The following exception was thrown during execution in test generation
        try {
            long long63 = unsupportedDateTimeField61.roundHalfCeiling(2000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuryOfEra field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T000000.005+0000" + "'", str51, "19700101T000000.005+0000");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
    }

    @Test
    public void test585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test585");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        mutableDateTime11.addYears((int) (byte) 23);
        java.lang.String str15 = mutableDateTime11.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1993-01-19T00:00:00.005+00:00:00.005" + "'", str15, "1993-01-19T00:00:00.005+00:00:00.005");
    }

    @Test
    public void test586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test586");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DurationField durationField6 = gregorianChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone8);
        org.joda.time.Chronology chronology10 = gregorianChronology0.withZone(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test587");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        mutableDateTime3.addSeconds(10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        java.lang.Object obj17 = cachedDateTimeZone16.writeReplace();
        mutableDateTime3.setZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        int int19 = mutableDateTime3.getEra();
        int int20 = mutableDateTime3.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test588");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        java.lang.String str5 = property3.toString();
        org.joda.time.DurationField durationField6 = property3.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime7 = property3.roundCeiling();
        int int8 = mutableDateTime7.getMillisOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfDay]" + "'", str5, "Property[secondOfDay]");
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test589");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval8);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(readableInterval9);
    }

    @Test
    public void test590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test590");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        mutableDateTime11.addSeconds(9);
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology21 = gregorianChronology16.withZone(dateTimeZone20);
        long long25 = gregorianChronology16.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField26 = gregorianChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology16.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter28.withZone(dateTimeZone31);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone31);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone31.getName(0L, locale35);
        org.joda.time.chrono.ZonedChronology zonedChronology37 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology16, dateTimeZone31);
        org.joda.time.DurationField durationField38 = zonedChronology37.weeks();
        org.joda.time.chrono.GregorianChronology gregorianChronology39 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField40 = gregorianChronology39.months();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology39.weekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = gregorianChronology39.getZone();
        org.joda.time.Chronology chronology43 = zonedChronology37.withZone(dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime11.toMutableDateTime(dateTimeZone42);
        int int45 = mutableDateTime11.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 910L + "'", long25 == 910L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+02:09" + "'", str36, "+02:09");
        org.junit.Assert.assertNotNull(zonedChronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(gregorianChronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 70 + "'", int45 == 70);
    }

    @Test
    public void test591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test591");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        // The following exception was thrown during execution in test generation
        try {
            int int63 = unsupportedDateTimeField61.getMinimumValue((long) 57600000);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuryOfEra field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T000000.005+0000" + "'", str51, "19700101T000000.005+0000");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
    }

    @Test
    public void test592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test592");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = mutableDateTime2.toString("minutes");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test593");
        java.lang.Object obj0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        long long7 = gregorianChronology1.add(readablePeriod4, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(obj0, (org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.weekOfWeekyear();
        int int11 = mutableDateTime9.getDayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder12.appendYearOfEra((int) ' ', (int) (byte) 23);
        boolean boolean16 = dateTimeFormatterBuilder12.canBuildPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = dateTimeFormatterBuilder12.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder12.appendLiteral("100");
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatterBuilder19.toParser();
        boolean boolean21 = org.joda.time.field.FieldUtils.equals((java.lang.Object) mutableDateTime9, (java.lang.Object) dateTimeParser20);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23, 10);
        int int26 = mutableDateTime22.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.dayOfWeek();
        boolean boolean29 = property27.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval30 = property27.toInterval();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 0, chronology32);
        mutableDateTime33.setMonthOfYear(5);
        mutableDateTime33.setDayOfYear((int) (byte) 19);
        boolean boolean38 = mutableDateTime33.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone41 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime33.toMutableDateTime(dateTimeZone40);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.minuteOfDay();
        mutableDateTime42.addYears((int) (byte) 23);
        mutableDateTime42.setSecondOfDay((int) (byte) 15);
        boolean boolean48 = interval30.isBefore((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.MutableInterval mutableInterval49 = interval30.toMutableInterval();
        org.joda.time.Duration duration50 = interval30.toDuration();
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration50, (-28798031));
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 93 + "'", int11 == 93);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimePrinter17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeParser20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mutableDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 14 + "'", int26 == 14);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(cachedDateTimeZone41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertNotNull(duration50);
    }

    @Test
    public void test594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test594");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        int int7 = mutableDateTime2.getMillisOfDay();
        java.lang.Object obj8 = mutableDateTime2.clone();
        boolean boolean10 = mutableDateTime2.isEqual((-22089712277211L));
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "1970-01-19T00:00:00.005+00:00:00.005");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-19T00:00:00.005+00:00:00.005");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-19T00:00:00.005+00:00:00.005");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test595");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = interval8.toPeriod(periodType9);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12, 10);
        int int15 = mutableDateTime11.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.dayOfWeek();
        boolean boolean18 = property16.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval19 = property16.toInterval();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = interval19.toPeriod(periodType20);
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval19);
        boolean boolean23 = interval8.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTime dateTime25 = readableInterval24.getEnd();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((-2678400000L));
        mutableDateTime27.setYear((-10));
        boolean boolean30 = readableInterval24.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime27.era();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 14 + "'", int15 == 14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test596");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone6 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone5);
        mutableDateTime3.setZone(dateTimeZone5);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.minuteOfHour();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(cachedDateTimeZone6);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test597");
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology1.era();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(0L, (org.joda.time.Chronology) gregorianChronology1);
        mutableDateTime9.add((long) (byte) 9);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test598");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        mutableDateTime11.addYears((int) (byte) 23);
        int int15 = mutableDateTime11.getMillisOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, 10);
        int int20 = mutableDateTime16.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.dayOfWeek();
        boolean boolean23 = property21.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField24 = property21.getField();
        org.joda.time.MutableDateTime mutableDateTime25 = property21.roundHalfEven();
        mutableDateTime11.setTime((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology27.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology32 = gregorianChronology27.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = gregorianChronology27.weekyear();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology27.centuryOfEra();
        int int35 = mutableDateTime25.get(dateTimeField34);
        java.util.GregorianCalendar gregorianCalendar36 = mutableDateTime25.toGregorianCalendar();
        int int37 = mutableDateTime25.getEra();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime25.centuryOfEra();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 14 + "'", int20 == 14);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 21 + "'", int35 == 21);
        org.junit.Assert.assertNotNull(gregorianCalendar36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test599");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        mutableDateTime2.addWeekyears(0);
        mutableDateTime2.setMinuteOfHour(0);
        int int14 = mutableDateTime2.getEra();
        mutableDateTime2.addDays(967);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0, chronology18);
        mutableDateTime19.setMonthOfYear(5);
        mutableDateTime19.setMillis(0L);
        mutableDateTime19.setMillisOfSecond((int) (byte) 0);
        int int26 = mutableDateTime19.getEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology27.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology32 = gregorianChronology27.withZone(dateTimeZone31);
        long long36 = gregorianChronology27.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField37 = gregorianChronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology27.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter39.withZone(dateTimeZone42);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone44 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone42);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeZone42.getName(0L, locale46);
        org.joda.time.chrono.ZonedChronology zonedChronology48 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology27, dateTimeZone42);
        mutableDateTime19.setZoneRetainFields(dateTimeZone42);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) 0, chronology51);
        org.joda.time.chrono.GregorianChronology gregorianChronology53 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField54 = gregorianChronology53.yearOfEra();
        org.joda.time.DateTimeField dateTimeField55 = gregorianChronology53.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology58 = gregorianChronology53.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField59 = gregorianChronology53.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology61 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean62 = dateTimeFieldType60.isSupported((org.joda.time.Chronology) gregorianChronology61);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField64 = new org.joda.time.field.DividedDateTimeField(dateTimeField59, dateTimeFieldType60, (int) (short) 100);
        org.joda.time.DurationField durationField65 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField67 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField64, durationField65, dateTimeFieldType66);
        mutableDateTime52.setRounding((org.joda.time.DateTimeField) remainderDateTimeField67);
        org.joda.time.chrono.GregorianChronology gregorianChronology69 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField70 = gregorianChronology69.yearOfEra();
        org.joda.time.DateTimeField dateTimeField71 = gregorianChronology69.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology74 = gregorianChronology69.withZone(dateTimeZone73);
        org.joda.time.DateTimeField dateTimeField75 = gregorianChronology69.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology77 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean78 = dateTimeFieldType76.isSupported((org.joda.time.Chronology) gregorianChronology77);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField80 = new org.joda.time.field.DividedDateTimeField(dateTimeField75, dateTimeFieldType76, (int) (short) 100);
        org.joda.time.DurationField durationField81 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField83 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField80, durationField81, dateTimeFieldType82);
        org.joda.time.IllegalFieldValueException illegalFieldValueException87 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType82, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField89 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField67, dateTimeFieldType82, (int) (byte) 5);
        boolean boolean90 = mutableDateTime19.isSupported(dateTimeFieldType82);
        boolean boolean91 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 910L + "'", long36 == 910L);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(cachedDateTimeZone44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+02:09" + "'", str47, "+02:09");
        org.junit.Assert.assertNotNull(zonedChronology48);
        org.junit.Assert.assertNotNull(gregorianChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(gregorianChronology61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(gregorianChronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(gregorianChronology77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test600");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        int int18 = mutableDateTime12.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
    }

    @Test
    public void test601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test601");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        mutableDateTime4.addYears((int) '#');
        int int7 = mutableDateTime4.getYearOfEra();
        int int8 = mutableDateTime4.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime4.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2005 + "'", int7 == 2005);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test602");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        mutableDateTime11.addYears((int) (byte) 23);
        int int15 = mutableDateTime11.getMillisOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, 10);
        int int20 = mutableDateTime16.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.dayOfWeek();
        boolean boolean23 = property21.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField24 = property21.getField();
        org.joda.time.MutableDateTime mutableDateTime25 = property21.roundHalfEven();
        mutableDateTime11.setTime((org.joda.time.ReadableInstant) mutableDateTime25);
        int int27 = mutableDateTime25.getHourOfDay();
        mutableDateTime25.setSecondOfMinute((int) (byte) 17);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 14 + "'", int20 == 14);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test603");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean9 = dateTimeFieldType7.isSupported((org.joda.time.Chronology) gregorianChronology8);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        long long14 = dividedDateTimeField11.set((long) (byte) 4, (int) '#');
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField17 = new org.joda.time.field.PreciseDurationField(durationFieldType15, (-9467020800000L));
        java.lang.String str18 = preciseDurationField17.getName();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology37.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology42 = gregorianChronology37.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology37.millisOfSecond();
        org.joda.time.MutableDateTime.Property property44 = new org.joda.time.MutableDateTime.Property(mutableDateTime30, dateTimeField43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField43.getType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField46 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, (org.joda.time.DurationField) preciseDurationField17, dateTimeFieldType45);
        long long49 = preciseDurationField17.getMillis(0L, 0L);
        long long50 = preciseDurationField17.getUnitMillis();
        boolean boolean51 = preciseDurationField17.isPrecise();
        boolean boolean52 = preciseDurationField17.isSupported();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 50491123200004L + "'", long14 == 50491123200004L);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "years" + "'", str18, "years");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-9467020800000L) + "'", long50 == (-9467020800000L));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test604");
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology1.era();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(0L, (org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11, 10);
        int int14 = mutableDateTime10.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.MutableDateTime.Property property17 = new org.joda.time.MutableDateTime.Property(mutableDateTime9, dateTimeField16);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 14 + "'", int14 == 14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test605");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        long long7 = dateTimeField5.remainder(0L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 5L + "'", long7 == 5L);
    }

    @Test
    public void test606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test606");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime3.add(durationFieldType12, (int) (byte) 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology15.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property18 = new org.joda.time.MutableDateTime.Property(mutableDateTime3, dateTimeField17);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime19.add(readableDuration20, 10);
        int int23 = mutableDateTime19.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime19.dayOfWeek();
        int int25 = property18.getDifference((org.joda.time.ReadableInstant) mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 14 + "'", int23 == 14);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-475129) + "'", int25 == (-475129));
    }

    @Test
    public void test607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test607");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.yearMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear((java.lang.Integer) 99);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.parse("GregorianChronology[UTC]", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"GregorianChronology[UTC]\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
    }

    @Test
    public void test608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test608");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        mutableDateTime2.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        int int41 = mutableDateTime34.getDayOfMonth();
        boolean boolean42 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime2.era();
        java.lang.String str44 = property43.getName();
        org.joda.time.MutableDateTime mutableDateTime45 = property43.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.era();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "era" + "'", str44, "era");
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test609");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.time();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology2);
        org.joda.time.Chronology chronology6 = iSOChronology2.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter1.withChronology(chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.parse("1970-019T02:09:09.000+02:09", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1970-019T02:09:09.000+02:09\" is malformed at \"70-019T02:09:09.000+02:09\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test610");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDate();
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology6 = gregorianChronology1.withZone(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology1.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean10 = dateTimeFieldType8.isSupported((org.joda.time.Chronology) gregorianChronology9);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField12 = new org.joda.time.field.DividedDateTimeField(dateTimeField7, dateTimeFieldType8, (int) (short) 100);
        int int14 = dividedDateTimeField12.getLeapAmount(910L);
        java.lang.String str16 = dividedDateTimeField12.getAsText((-2L));
        org.joda.time.chrono.GregorianChronology gregorianChronology17 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology17.era();
        org.joda.time.DurationField durationField21 = gregorianChronology17.seconds();
        org.joda.time.DurationField durationField22 = gregorianChronology17.millis();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology17.secondOfDay();
        java.lang.Object obj24 = null;
        boolean boolean25 = gregorianChronology17.equals(obj24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime28 = dateTimeFormatter26.parseLocalTime("99");
        long long30 = gregorianChronology17.set((org.joda.time.ReadablePartial) localTime28, 999L);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology31.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology31.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial35 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology36 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField37 = gregorianChronology36.months();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology36.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology36.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology36.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = gregorianChronology36.getZone();
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutableDateTime43.add(readableDuration44, 10);
        int int47 = mutableDateTime43.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime43.dayOfWeek();
        boolean boolean50 = property48.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval51 = property48.toInterval();
        org.joda.time.Period period52 = interval51.toPeriod();
        int[] intArray55 = gregorianChronology36.get((org.joda.time.ReadablePeriod) period52, (long) 57600000, (long) (byte) 10);
        int int56 = dateTimeField34.getMaximumValue(readablePartial35, intArray55);
        int int57 = dividedDateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) localTime28, intArray55);
        java.lang.String str58 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime28);
        // The following exception was thrown during execution in test generation
        try {
            long long60 = dateTimeFormatter0.parseMillis("-28799999-02-25T00:00:10.000-07:52:58");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"-28799999-02-25T00:00:10.000-07:52:58\" is malformed at \"9-02-25T00:00:10.000-07:52:58\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "19" + "'", str16, "19");
        org.junit.Assert.assertNotNull(gregorianChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(gregorianChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 14 + "'", int47 == 14);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, -15, -59, -59, -990]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 99 + "'", int56 == 99);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-2922751) + "'", int57 == (-2922751));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str58, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
    }

    @Test
    public void test611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test611");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField3 = gregorianChronology0.days();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5, 10);
        int int8 = mutableDateTime4.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime4.dayOfWeek();
        boolean boolean11 = property9.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval12 = property9.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        int int14 = period13.size();
        org.joda.time.Period period15 = period13.toPeriod();
        long long18 = gregorianChronology0.add((org.joda.time.ReadablePeriod) period13, (-2L), 1969);
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology0.yearOfCentury();
        org.joda.time.DurationField durationField20 = gregorianChronology0.weeks();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 170121599998L + "'", long18 == 170121599998L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test612");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean19 = dateTimeFieldType17.isSupported((org.joda.time.Chronology) gregorianChronology18);
        int int20 = mutableDateTime11.get(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime11.toMutableDateTime(dateTimeZone21);
        boolean boolean25 = mutableDateTime23.isAfter(0L);
        java.lang.Object obj26 = mutableDateTime23.clone();
        mutableDateTime23.setSecondOfDay((int) (byte) 18);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(mutableDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "1970-01-19T01:00:00.005+00:00:00.005");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-19T01:00:00.005+00:00:00.005");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-19T01:00:00.005+00:00:00.005");
    }

    @Test
    public void test613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test613");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        mutableDateTime2.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        int int41 = mutableDateTime34.getDayOfMonth();
        boolean boolean42 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime2.era();
        java.lang.String str44 = property43.getName();
        org.joda.time.MutableDateTime mutableDateTime45 = property43.getMutableDateTime();
        mutableDateTime45.addMinutes((-2));
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "era" + "'", str44, "era");
        org.junit.Assert.assertNotNull(mutableDateTime45);
    }

    @Test
    public void test614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test614");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.util.GregorianCalendar gregorianCalendar1 = mutableDateTime0.toGregorianCalendar();
        boolean boolean2 = mutableDateTime0.isBeforeNow();
        int int3 = mutableDateTime0.getRoundingMode();
        int int4 = mutableDateTime0.getDayOfYear();
        int int5 = mutableDateTime0.getYear();
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime0.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfWeek();
        org.junit.Assert.assertNotNull(gregorianCalendar1);
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 93 + "'", int4 == 93);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2024 + "'", int5 == 2024);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test615");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1969-01-20T00:00:00.005+00:00:00.005", "yearOfEra", 57600000, (int) (short) 1);
        long long6 = fixedDateTimeZone4.previousTransition(41024102400013L);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8, 10);
        int int11 = mutableDateTime7.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime7.dayOfWeek();
        boolean boolean14 = property12.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval15 = property12.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0, chronology17);
        mutableDateTime18.setMonthOfYear(5);
        mutableDateTime18.setDayOfYear((int) (byte) 19);
        boolean boolean23 = mutableDateTime18.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone26 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime18.toMutableDateTime(dateTimeZone25);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.minuteOfDay();
        mutableDateTime27.addYears((int) (byte) 23);
        mutableDateTime27.setSecondOfDay((int) (byte) 15);
        boolean boolean33 = interval15.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.chrono.GregorianChronology gregorianChronology34 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology34.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology34.era();
        org.joda.time.DurationField durationField38 = gregorianChronology34.seconds();
        org.joda.time.DurationField durationField39 = gregorianChronology34.millis();
        org.joda.time.DateTimeZone dateTimeZone40 = gregorianChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology34.hourOfDay();
        boolean boolean42 = interval15.equals((java.lang.Object) gregorianChronology34);
        boolean boolean43 = fixedDateTimeZone4.equals((java.lang.Object) boolean42);
        long long45 = fixedDateTimeZone4.convertUTCToLocal(86400000L);
        boolean boolean46 = fixedDateTimeZone4.isFixed();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 41024102400013L + "'", long6 == 41024102400013L);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 14 + "'", int11 == 14);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(cachedDateTimeZone26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(gregorianChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 144000000L + "'", long45 == 144000000L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test616");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        int int18 = mutableDateTime11.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.millisOfSecond();
        mutableDateTime11.setSecondOfMinute((int) (byte) 15);
        int int22 = mutableDateTime11.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 70 + "'", int22 == 70);
    }

    @Test
    public void test617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test617");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.hourOfDay();
        int int6 = property5.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test618");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField5 = gregorianChronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology4.getZone();
        java.lang.String str8 = dateTimeZone7.toString();
        boolean boolean9 = iSOChronology0.equals((java.lang.Object) str8);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test619");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.months();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology0.dayOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0, chronology8);
        mutableDateTime9.setMonthOfYear(5);
        mutableDateTime9.setDayOfYear((int) (byte) 19);
        boolean boolean14 = mutableDateTime9.isAfterNow();
        int int17 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "monthOfYear", (int) (byte) 10);
        mutableDateTime9.addSeconds(10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone22 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone21);
        java.lang.Object obj23 = cachedDateTimeZone22.writeReplace();
        mutableDateTime9.setZone((org.joda.time.DateTimeZone) cachedDateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = cachedDateTimeZone22.getUncachedZone();
        long long27 = cachedDateTimeZone22.previousTransition((long) 999);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology0, (org.joda.time.DateTimeZone) cachedDateTimeZone22);
        int int30 = cachedDateTimeZone22.getStandardOffset((-862623L));
        java.util.Locale locale32 = null;
        java.lang.String str33 = cachedDateTimeZone22.getShortName((long) 39, locale32);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-11) + "'", int17 == (-11));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(cachedDateTimeZone22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 999L + "'", long27 == 999L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.005" + "'", str33, "+00:00:00.005");
    }

    @Test
    public void test620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test620");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        mutableDateTime2.setMillisOfSecond((int) (byte) 0);
        int int9 = mutableDateTime2.getEra();
        mutableDateTime2.setTime(0L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setTime(12, (int) (byte) 11, 5845578, (-28798031));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5845578 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test621");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = iSOChronology0.getDateTimeMillis((int) (short) -1, (int) (short) 100, (-292275054), (-2922751), (int) (short) -1, (int) (byte) 21, (int) (byte) 21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2922751 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test622");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        long long5 = cachedDateTimeZone3.nextTransition(315705600019L);
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        java.util.Locale locale9 = null;
        java.lang.String str10 = cachedDateTimeZone3.getName((-2678400000L), locale9);
        org.joda.time.DateTimeZone dateTimeZone11 = cachedDateTimeZone3.getUncachedZone();
        long long13 = dateTimeZone11.nextTransition(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 315705600019L + "'", long5 == 315705600019L);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.005" + "'", str10, "+00:00:00.005");
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test623");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField5 = gregorianChronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology4.getZone();
        java.lang.String str8 = dateTimeZone7.toString();
        boolean boolean9 = iSOChronology0.equals((java.lang.Object) str8);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test624");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        long long5 = cachedDateTimeZone3.nextTransition(315705600019L);
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        java.lang.String str8 = cachedDateTimeZone3.toString();
        org.joda.time.DateTimeZone dateTimeZone9 = cachedDateTimeZone3.getUncachedZone();
        long long11 = cachedDateTimeZone3.convertUTCToLocal(99L);
        org.joda.time.DateTimeZone dateTimeZone12 = cachedDateTimeZone3.getUncachedZone();
        long long14 = cachedDateTimeZone3.convertUTCToLocal((long) (-292275054));
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 315705600019L + "'", long5 == 315705600019L);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.005" + "'", str8, "+00:00:00.005");
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 104L + "'", long11 == 104L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-292275049L) + "'", long14 == (-292275049L));
    }

    @Test
    public void test625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test625");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology0.weekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime11 = dateTimeFormatter9.parseLocalTime("99");
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial17 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField19 = gregorianChronology18.months();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology18.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology18.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology18.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = gregorianChronology18.getZone();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26, 10);
        int int29 = mutableDateTime25.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime25.dayOfWeek();
        boolean boolean32 = property30.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval33 = property30.toInterval();
        org.joda.time.Period period34 = interval33.toPeriod();
        int[] intArray37 = gregorianChronology18.get((org.joda.time.ReadablePeriod) period34, (long) 57600000, (long) (byte) 10);
        int int38 = dateTimeField16.getMaximumValue(readablePartial17, intArray37);
        int[] intArray40 = dateTimeField8.set((org.joda.time.ReadablePartial) localTime11, 5, intArray37, 960);
        long long43 = dateTimeField8.set((long) 9, (int) (short) -1);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 14 + "'", int29 == 14);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, -15, 960, -59, -990]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 99 + "'", int38 == 99);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, -15, 960, -59, -990]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-62198236799991L) + "'", long43 == (-62198236799991L));
    }

    @Test
    public void test626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test626");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTimeZoneShortName();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatterBuilder3.toPrinter();
        boolean boolean6 = dateTimeFormatterBuilder3.canBuildPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendYear((int) (byte) 100, (int) (byte) 19);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0, chronology15);
        mutableDateTime16.setMonthOfYear(5);
        mutableDateTime16.setDayOfYear((int) (byte) 19);
        boolean boolean21 = mutableDateTime16.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone24 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime16.toMutableDateTime(dateTimeZone23);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.minuteOfDay();
        int int27 = mutableDateTime25.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfWeek();
        mutableDateTime25.setRounding(dateTimeField29, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology32 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = gregorianChronology32.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology32.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology37 = gregorianChronology32.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology32.millisOfSecond();
        org.joda.time.MutableDateTime.Property property39 = new org.joda.time.MutableDateTime.Property(mutableDateTime25, dateTimeField38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = dateTimeField38.getType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder13.appendFixedDecimal(dateTimeFieldType40, (int) (byte) 23);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = dateTimeFormatterBuilder13.appendSignedDecimal(dateTimeFieldType43, 0, 365);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder13.appendMinuteOfDay((int) (byte) 13);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder49.appendYearOfEra((int) ' ', (int) (byte) 23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap53 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = dateTimeFormatterBuilder49.appendTimeZoneName(strMap53);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap55 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = dateTimeFormatterBuilder54.appendTimeZoneShortName(strMap55);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = dateTimeFormatterBuilder13.appendTimeZoneShortName(strMap55);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = dateTimeFormatterBuilder3.appendTimeZoneShortName(strMap55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(cachedDateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(gregorianChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder56);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder57);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder58);
    }

    @Test
    public void test627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test627");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        mutableDateTime2.addWeekyears(0);
        mutableDateTime2.setDate(50491123300000L);
        int int14 = mutableDateTime2.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
    }

    @Test
    public void test628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test628");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField6 = iSOChronology0.days();
        org.joda.time.DurationField durationField7 = iSOChronology0.years();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test629");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withZone(dateTimeZone9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter6.withDefaultYear(0);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology13);
        org.joda.time.chrono.GregorianChronology gregorianChronology17 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField18 = gregorianChronology17.months();
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology17.weekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = gregorianChronology17.getZone();
        java.lang.String str21 = dateTimeZone20.toString();
        boolean boolean22 = iSOChronology13.equals((java.lang.Object) str21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter6.withChronology((org.joda.time.Chronology) iSOChronology13);
        boolean boolean24 = mutableDateTime4.equals((java.lang.Object) dateTimeFormatter6);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeFormatter6.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(gregorianChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(dateTimeZone25);
    }

    @Test
    public void test630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test630");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1969-01-20T00:00:00.005+00:00:00.005", "yearOfEra", 57600000, (int) (short) 1);
        long long6 = fixedDateTimeZone4.previousTransition(41024102400013L);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8, 10);
        int int11 = mutableDateTime7.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime7.dayOfWeek();
        boolean boolean14 = property12.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval15 = property12.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0, chronology17);
        mutableDateTime18.setMonthOfYear(5);
        mutableDateTime18.setDayOfYear((int) (byte) 19);
        boolean boolean23 = mutableDateTime18.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone26 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime18.toMutableDateTime(dateTimeZone25);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.minuteOfDay();
        mutableDateTime27.addYears((int) (byte) 23);
        mutableDateTime27.setSecondOfDay((int) (byte) 15);
        boolean boolean33 = interval15.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.chrono.GregorianChronology gregorianChronology34 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology34.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology34.era();
        org.joda.time.DurationField durationField38 = gregorianChronology34.seconds();
        org.joda.time.DurationField durationField39 = gregorianChronology34.millis();
        org.joda.time.DateTimeZone dateTimeZone40 = gregorianChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology34.hourOfDay();
        boolean boolean42 = interval15.equals((java.lang.Object) gregorianChronology34);
        boolean boolean43 = fixedDateTimeZone4.equals((java.lang.Object) boolean42);
        long long45 = fixedDateTimeZone4.convertUTCToLocal(86400000L);
        int int47 = fixedDateTimeZone4.getOffsetFromLocal((-6682L));
        boolean boolean48 = fixedDateTimeZone4.isFixed();
        boolean boolean49 = fixedDateTimeZone4.isFixed();
        java.util.Locale locale51 = null;
        java.lang.String str52 = fixedDateTimeZone4.getShortName((-2722206301372799901L), locale51);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 41024102400013L + "'", long6 == 41024102400013L);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 14 + "'", int11 == 14);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(cachedDateTimeZone26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(gregorianChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 144000000L + "'", long45 == 144000000L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 57600000 + "'", int47 == 57600000);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+16:00" + "'", str52, "+16:00");
    }

    @Test
    public void test631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test631");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = unsupportedDateTimeField61.getType();
        java.lang.String str63 = unsupportedDateTimeField61.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long66 = unsupportedDateTimeField61.add(1711929600000L, (-252525694139995L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -252525694139995");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T000000.005+0000" + "'", str51, "19700101T000000.005+0000");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UnsupportedDateTimeField" + "'", str63, "UnsupportedDateTimeField");
    }

    @Test
    public void test632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test632");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        mutableDateTime4.setWeekyear((int) (byte) 22);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
    }

    @Test
    public void test633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test633");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField5 = gregorianChronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology4.getZone();
        java.lang.String str8 = dateTimeZone7.toString();
        boolean boolean9 = iSOChronology0.equals((java.lang.Object) str8);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.halfdayOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology12 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField13 = gregorianChronology12.months();
        org.joda.time.DateTimeField dateTimeField14 = gregorianChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        long long18 = dateTimeZone16.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone16);
        java.lang.String str21 = cachedDateTimeZone19.getNameKey((long) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeUtils.getZone((org.joda.time.DateTimeZone) cachedDateTimeZone19);
        org.joda.time.Chronology chronology23 = gregorianChronology12.withZone(dateTimeZone22);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone22.getShortName((long) 10, locale25);
        org.joda.time.Chronology chronology27 = iSOChronology0.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology0.hourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(gregorianChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.005" + "'", str26, "+00:00:00.005");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test634");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField5 = gregorianChronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology4.getZone();
        java.lang.String str8 = dateTimeZone7.toString();
        boolean boolean9 = iSOChronology0.equals((java.lang.Object) str8);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.hourOfHalfday();
        org.joda.time.chrono.GregorianChronology gregorianChronology13 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = gregorianChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology13.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = gregorianChronology13.add(readablePeriod16, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology13.yearOfCentury();
        java.lang.String str21 = gregorianChronology13.toString();
        org.joda.time.DurationField durationField22 = gregorianChronology13.months();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology13.minuteOfHour();
        org.joda.time.chrono.GregorianChronology gregorianChronology25 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology25.secondOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology25.era();
        org.joda.time.DurationField durationField29 = gregorianChronology25.seconds();
        org.joda.time.DurationField durationField30 = gregorianChronology25.millis();
        org.joda.time.DateTimeField dateTimeField31 = gregorianChronology25.secondOfDay();
        java.lang.Object obj32 = null;
        boolean boolean33 = gregorianChronology25.equals(obj32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime36 = dateTimeFormatter34.parseLocalTime("99");
        long long38 = gregorianChronology25.set((org.joda.time.ReadablePartial) localTime36, 999L);
        int[] intArray40 = gregorianChronology13.get((org.joda.time.ReadablePartial) localTime36, (-1L));
        int[] intArray42 = iSOChronology0.get((org.joda.time.ReadablePartial) localTime36, 315705589019L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(gregorianChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GregorianChronology[UTC]" + "'", str21, "GregorianChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(gregorianChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[23, 59, 49, 24]");
    }

    @Test
    public void test635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test635");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        mutableDateTime11.addYears((int) (byte) 23);
        int int15 = mutableDateTime11.getMillisOfDay();
        mutableDateTime11.addMinutes(11);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
    }

    @Test
    public void test636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test636");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = unsupportedDateTimeField61.getType();
        java.lang.String str63 = unsupportedDateTimeField61.toString();
        int int66 = unsupportedDateTimeField61.getDifference((long) (byte) 21, 0L);
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T000000.005+0000" + "'", str51, "19700101T000000.005+0000");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UnsupportedDateTimeField" + "'", str63, "UnsupportedDateTimeField");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test637");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        boolean boolean10 = mutableDateTime2.isBeforeNow();
        int int11 = mutableDateTime2.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test638");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.setMinuteOfHour((int) (byte) 13);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        long long5 = dateTimeZone3.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone6 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone3);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone6);
        mutableDateTime0.setZone((org.joda.time.DateTimeZone) cachedDateTimeZone6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0, chronology10);
        mutableDateTime11.setMonthOfYear(5);
        mutableDateTime11.setMillis(0L);
        mutableDateTime11.setMillisOfSecond((int) (byte) 0);
        int int18 = mutableDateTime11.getEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        long long28 = gregorianChronology19.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField29 = gregorianChronology19.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology19.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter31.withZone(dateTimeZone34);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone36 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone34);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone34.getName(0L, locale38);
        org.joda.time.chrono.ZonedChronology zonedChronology40 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology19, dateTimeZone34);
        mutableDateTime11.setZoneRetainFields(dateTimeZone34);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) 0, chronology43);
        org.joda.time.chrono.GregorianChronology gregorianChronology45 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField46 = gregorianChronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = gregorianChronology45.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology50 = gregorianChronology45.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = gregorianChronology45.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology53 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean54 = dateTimeFieldType52.isSupported((org.joda.time.Chronology) gregorianChronology53);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField56 = new org.joda.time.field.DividedDateTimeField(dateTimeField51, dateTimeFieldType52, (int) (short) 100);
        org.joda.time.DurationField durationField57 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField59 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField56, durationField57, dateTimeFieldType58);
        mutableDateTime44.setRounding((org.joda.time.DateTimeField) remainderDateTimeField59);
        org.joda.time.chrono.GregorianChronology gregorianChronology61 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField62 = gregorianChronology61.yearOfEra();
        org.joda.time.DateTimeField dateTimeField63 = gregorianChronology61.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology66 = gregorianChronology61.withZone(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = gregorianChronology61.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology69 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean70 = dateTimeFieldType68.isSupported((org.joda.time.Chronology) gregorianChronology69);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField72 = new org.joda.time.field.DividedDateTimeField(dateTimeField67, dateTimeFieldType68, (int) (short) 100);
        org.joda.time.DurationField durationField73 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField75 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField72, durationField73, dateTimeFieldType74);
        org.joda.time.IllegalFieldValueException illegalFieldValueException79 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType74, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField81 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField59, dateTimeFieldType74, (int) (byte) 5);
        boolean boolean82 = mutableDateTime11.isSupported(dateTimeFieldType74);
        boolean boolean83 = mutableDateTime0.isEqual((org.joda.time.ReadableInstant) mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 910L + "'", long28 == 910L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(cachedDateTimeZone36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+02:09" + "'", str39, "+02:09");
        org.junit.Assert.assertNotNull(zonedChronology40);
        org.junit.Assert.assertNotNull(gregorianChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(gregorianChronology53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(gregorianChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(gregorianChronology69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test639");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology18.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology23 = gregorianChronology18.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology18.millisOfSecond();
        org.joda.time.MutableDateTime.Property property25 = new org.joda.time.MutableDateTime.Property(mutableDateTime11, dateTimeField24);
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime11.getZone();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
    }

    @Test
    public void test640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test640");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0, chronology6);
        mutableDateTime7.setMonthOfYear(5);
        mutableDateTime7.setDayOfYear((int) (byte) 19);
        boolean boolean12 = mutableDateTime7.isAfterNow();
        int int15 = dateTimeFormatter4.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime7, "monthOfYear", (int) (byte) 10);
        int int16 = mutableDateTime7.getDayOfMonth();
        boolean boolean17 = iSOChronology0.equals((java.lang.Object) mutableDateTime7);
        org.joda.time.Chronology chronology18 = iSOChronology0.withUTC();
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology19.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology19.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone24 = gregorianChronology19.getZone();
        org.joda.time.Chronology chronology25 = iSOChronology0.withZone(dateTimeZone24);
        java.lang.String str26 = dateTimeZone24.getID();
        java.lang.String str28 = dateTimeZone24.getName(18934041602000L);
        java.util.TimeZone timeZone29 = dateTimeZone24.toTimeZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-11) + "'", int15 == (-11));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test641");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        mutableDateTime11.addYears((int) (byte) 23);
        mutableDateTime11.setSecondOfDay((int) (byte) 15);
        org.joda.time.Chronology chronology17 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        boolean boolean20 = dateTimeZone18.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology17, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        long long24 = dateTimeZone22.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone25 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone22);
        long long27 = cachedDateTimeZone25.nextTransition(315705600019L);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone25);
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfMonth();
        boolean boolean30 = zonedChronology21.equals((java.lang.Object) dateTimeField29);
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology21.getZone();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+16:00");
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(zonedChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 315705600019L + "'", long27 == 315705600019L);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
    }

    @Test
    public void test642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test642");
        java.lang.Object obj0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        long long7 = gregorianChronology1.add(readablePeriod4, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(obj0, (org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField((int) (byte) 7);
        java.lang.String str13 = property10.getAsShortText();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "21" + "'", str13, "21");
    }

    @Test
    public void test643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test643");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = interval8.toPeriod(periodType9);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12, 10);
        int int15 = mutableDateTime11.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.dayOfWeek();
        boolean boolean18 = property16.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval19 = property16.toInterval();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = interval19.toPeriod(periodType20);
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval19);
        boolean boolean23 = interval8.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.MutableInterval mutableInterval24 = interval19.toMutableInterval();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 14 + "'", int15 == 14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(mutableInterval24);
    }

    @Test
    public void test644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test644");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicTTimeNoMillis();
        boolean boolean1 = dateTimeFormatter0.isPrinter();
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology2.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology7 = gregorianChronology2.withZone(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.ISODateTimeFormat.basicDate();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10, 10);
        int int13 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfWeek();
        mutableDateTime9.addYears(1);
        java.lang.String str17 = dateTimeFormatter8.print((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter18.withZone(dateTimeZone21);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone23 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone21);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone21.getName(0L, locale25);
        java.lang.Object obj27 = dateTimeZone21.writeReplace();
        mutableDateTime9.setZone(dateTimeZone21);
        long long30 = dateTimeZone6.getMillisKeepLocal(dateTimeZone21, 0L);
        java.util.TimeZone timeZone31 = dateTimeZone21.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter0.withZone(dateTimeZone21);
        java.lang.String str34 = dateTimeFormatter32.print((-5259492000L));
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(gregorianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 14 + "'", int13 == 14);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "20250401" + "'", str17, "20250401");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(cachedDateTimeZone23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+02:09" + "'", str26, "+02:09");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-7739995L) + "'", long30 == (-7739995L));
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+02:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "T051048+0209" + "'", str34, "T051048+0209");
    }

    @Test
    public void test645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test645");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        mutableDateTime0.addMinutes(1969);
        mutableDateTime0.addHours(0);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test646");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        org.joda.time.DateTimeField dateTimeField20 = mutableDateTime12.getRoundingField();
        org.joda.time.chrono.GregorianChronology gregorianChronology21 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology21.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = gregorianChronology21.withZone(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gregorianChronology21);
        org.joda.time.DurationField durationField28 = gregorianChronology21.hours();
        mutableDateTime12.setChronology((org.joda.time.Chronology) gregorianChronology21);
        boolean boolean30 = mutableDateTime12.isAfterNow();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 57600000 + "'", int13 == 57600000);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(dateTimeField20);
        org.junit.Assert.assertNotNull(gregorianChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test647");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology11 = gregorianChronology6.withZone(dateTimeZone10);
        long long15 = gregorianChronology6.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField16 = gregorianChronology6.halfdays();
        org.joda.time.DurationField durationField17 = gregorianChronology6.years();
        boolean boolean18 = property5.equals((java.lang.Object) gregorianChronology6);
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology6.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology6.hourOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 910L + "'", long15 == 910L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test648");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        mutableDateTime2.addWeekyears(0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime2.dayOfYear();
        mutableDateTime2.setTime((long) 10005);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test649");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.hourOfDay();
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) mutableDateTime5);
        long long8 = mutableDateTime5.getMillis();
        boolean boolean9 = org.joda.time.field.FieldUtils.equals((java.lang.Object) durationFieldType0, (java.lang.Object) mutableDateTime5);
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = gregorianChronology10.add(readablePeriod13, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology10.yearOfCentury();
        java.lang.String str18 = gregorianChronology10.toString();
        org.joda.time.DurationField durationField19 = gregorianChronology10.months();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = gregorianChronology10.centuries();
        long long25 = gregorianChronology10.add((long) (short) 10, 910L, (int) ' ');
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology10.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime5.toMutableDateTime((org.joda.time.Chronology) gregorianChronology10);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GregorianChronology[UTC]" + "'", str18, "GregorianChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 29130L + "'", long25 == 29130L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
    }

    @Test
    public void test650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test650");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = unsupportedDateTimeField61.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long65 = unsupportedDateTimeField61.set((long) (byte) 8, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuryOfEra field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
    }

    @Test
    public void test651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test651");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone23 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime2.toMutableDateTime(dateTimeZone22);
        boolean boolean25 = mutableDateTime24.isBeforeNow();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime24.centuryOfEra();
        mutableDateTime24.setMinuteOfDay((int) (byte) 12);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(cachedDateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test652");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.MutableDateTime mutableDateTime8 = property5.roundHalfCeiling();
        java.util.Locale locale9 = null;
        int int10 = property5.getMaximumTextLength(locale9);
        java.util.Locale locale11 = null;
        java.lang.String str12 = property5.getAsText(locale11);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Tuesday" + "'", str12, "Tuesday");
    }

    @Test
    public void test653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test653");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        java.lang.String str13 = property12.getAsString();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.roundHalfFloor();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 0, chronology16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.hourOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 0, chronology22);
        mutableDateTime23.setMonthOfYear(5);
        mutableDateTime23.setDayOfYear((int) (byte) 19);
        boolean boolean28 = mutableDateTime23.isAfterNow();
        java.util.GregorianCalendar gregorianCalendar29 = mutableDateTime23.toGregorianCalendar();
        boolean boolean30 = mutableDateTime19.isAfter((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime19.era();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime19.year();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime33.add(readableDuration34, 10);
        int int37 = mutableDateTime33.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfWeek();
        boolean boolean40 = property38.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval41 = property38.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) 0, chronology43);
        mutableDateTime44.setMonthOfYear(5);
        mutableDateTime44.setDayOfYear((int) (byte) 19);
        boolean boolean49 = mutableDateTime44.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone52 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone51);
        org.joda.time.MutableDateTime mutableDateTime53 = mutableDateTime44.toMutableDateTime(dateTimeZone51);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.minuteOfDay();
        mutableDateTime53.addYears((int) (byte) 23);
        mutableDateTime53.setSecondOfDay((int) (byte) 15);
        boolean boolean59 = interval41.isBefore((org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.ReadableInterval readableInterval60 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Duration duration61 = readableInterval60.toDuration();
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration63 = null;
        mutableDateTime62.add(readableDuration63, 10);
        int int66 = mutableDateTime62.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime62.dayOfWeek();
        boolean boolean69 = property67.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval70 = property67.toInterval();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime((long) 0, chronology72);
        mutableDateTime73.setMonthOfYear(5);
        mutableDateTime73.setDayOfYear((int) (byte) 19);
        boolean boolean78 = mutableDateTime73.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone81 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone80);
        org.joda.time.MutableDateTime mutableDateTime82 = mutableDateTime73.toMutableDateTime(dateTimeZone80);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime82.minuteOfDay();
        mutableDateTime82.addYears((int) (byte) 23);
        mutableDateTime82.setSecondOfDay((int) (byte) 15);
        boolean boolean88 = interval70.isBefore((org.joda.time.ReadableInstant) mutableDateTime82);
        org.joda.time.ReadableInterval readableInterval89 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval70);
        org.joda.time.Duration duration90 = readableInterval89.toDuration();
        int int91 = duration61.compareTo((org.joda.time.ReadableDuration) duration90);
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration90);
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration90);
        mutableDateTime14.setSecondOfDay((int) (byte) 21);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 14 + "'", int37 == 14);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(cachedDateTimeZone52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(readableInterval60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 14 + "'", int66 == 14);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(cachedDateTimeZone81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(readableInterval89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test654");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        mutableDateTime0.addHours(20);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        int int9 = mutableDateTime0.get(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2024 + "'", int9 == 2024);
    }

    @Test
    public void test655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test655");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gregorianChronology0);
        mutableDateTime6.addDays(1970);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test656");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = interval8.toPeriod(periodType9);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12, 10);
        int int15 = mutableDateTime11.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.dayOfWeek();
        boolean boolean18 = property16.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval19 = property16.toInterval();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = interval19.toPeriod(periodType20);
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval19);
        boolean boolean23 = interval8.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval19);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26, 10);
        int int29 = mutableDateTime25.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime25.hourOfDay();
        mutableDateTime25.addMinutes(1969);
        long long33 = mutableDateTime25.getMillis();
        boolean boolean34 = interval19.contains((org.joda.time.ReadableInstant) mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 14 + "'", int15 == 14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 14 + "'", int29 == 14);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1712053577492L + "'", long33 == 1712053577492L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test657");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0, chronology10);
        mutableDateTime11.setMonthOfYear(5);
        mutableDateTime11.setDayOfYear((int) (byte) 19);
        boolean boolean16 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime11.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.minuteOfDay();
        mutableDateTime20.addYears((int) (byte) 23);
        mutableDateTime20.setSecondOfDay((int) (byte) 15);
        boolean boolean26 = interval8.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology27.era();
        org.joda.time.DurationField durationField31 = gregorianChronology27.seconds();
        org.joda.time.DurationField durationField32 = gregorianChronology27.millis();
        org.joda.time.DateTimeZone dateTimeZone33 = gregorianChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology27.hourOfDay();
        boolean boolean35 = interval8.equals((java.lang.Object) gregorianChronology27);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime36.add(readableDuration37, 10);
        int int40 = mutableDateTime36.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfWeek();
        boolean boolean43 = property41.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval44 = property41.toInterval();
        org.joda.time.Period period45 = interval44.toPeriod();
        boolean boolean46 = interval8.overlaps((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Duration duration47 = interval8.toDuration();
        org.joda.time.Duration duration48 = duration47.toDuration();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mutableDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 14 + "'", int40 == 14);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration48);
    }

    @Test
    public void test658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test658");
        java.lang.Object obj0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        long long7 = gregorianChronology1.add(readablePeriod4, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(obj0, (org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DurationField durationField10 = gregorianChronology1.centuries();
        org.joda.time.DateTimeZone dateTimeZone11 = gregorianChronology1.getZone();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
    }

    @Test
    public void test659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test659");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withZone(dateTimeZone11);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone13 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone11);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone11.getName(0L, locale15);
        org.joda.time.DateTime dateTime17 = mutableDateTime2.toDateTime(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime2.millisOfSecond();
        mutableDateTime2.addHours(2005);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(cachedDateTimeZone13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+02:09" + "'", str16, "+02:09");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test660");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology0.year();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval14 = property11.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 0, chronology16);
        mutableDateTime17.setMonthOfYear(5);
        mutableDateTime17.setDayOfYear((int) (byte) 19);
        boolean boolean22 = mutableDateTime17.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone25 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime17.toMutableDateTime(dateTimeZone24);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.minuteOfDay();
        mutableDateTime26.addYears((int) (byte) 23);
        mutableDateTime26.setSecondOfDay((int) (byte) 15);
        boolean boolean32 = interval14.isBefore((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableInterval mutableInterval33 = interval14.toMutableInterval();
        org.joda.time.Duration duration34 = interval14.toDuration();
        org.joda.time.Period period35 = duration34.toPeriod();
        long long38 = gregorianChronology0.add((org.joda.time.ReadablePeriod) period35, 50493024000004L, 24);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 14 + "'", int10 == 14);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(cachedDateTimeZone25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 50495097600004L + "'", long38 == 50495097600004L);
    }

    @Test
    public void test661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test661");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.hourOfDay();
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) mutableDateTime4);
        mutableDateTime4.setDayOfYear((int) (byte) 2);
        mutableDateTime4.setMillisOfDay(14);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test662");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = unsupportedDateTimeField61.getType();
        java.lang.String str63 = unsupportedDateTimeField61.toString();
        java.util.Locale locale65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = unsupportedDateTimeField61.getAsShortText((long) 14, locale65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuryOfEra field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UnsupportedDateTimeField" + "'", str63, "UnsupportedDateTimeField");
    }

    @Test
    public void test663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test663");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        mutableDateTime3.addSeconds(10);
        mutableDateTime3.addHours(960);
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology16.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology16.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone21 = gregorianChronology16.getZone();
        mutableDateTime3.setChronology((org.joda.time.Chronology) gregorianChronology16);
        org.joda.time.Chronology chronology23 = mutableDateTime3.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test664");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone2 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone1);
        int int4 = cachedDateTimeZone2.getOffset((long) (byte) 5);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now((org.joda.time.DateTimeZone) cachedDateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(cachedDateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test665");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withZone(dateTimeZone11);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone13 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone11);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone11.getName(0L, locale15);
        org.joda.time.DateTime dateTime17 = mutableDateTime2.toDateTime(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime2.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.add((-5259492000L));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(cachedDateTimeZone13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+02:09" + "'", str16, "+02:09");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test666");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        mutableDateTime0.setMillisOfSecond((int) (byte) 15);
        int int7 = mutableDateTime0.getMonthOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
    }

    @Test
    public void test667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test667");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        java.lang.String str13 = property12.getAsString();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.roundHalfFloor();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter15.withZone(dateTimeZone18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter15.withDefaultYear(0);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.chrono.GregorianChronology gregorianChronology26 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField27 = gregorianChronology26.months();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology26.weekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = gregorianChronology26.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        boolean boolean31 = iSOChronology22.equals((java.lang.Object) str30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter15.withChronology((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology35 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean36 = dateTimeFieldType34.isSupported((org.joda.time.Chronology) gregorianChronology35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime14.property(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(gregorianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(gregorianChronology35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test668");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        mutableDateTime11.addYears((int) (byte) 23);
        int int15 = mutableDateTime11.getMillisOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, 10);
        int int20 = mutableDateTime16.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.dayOfWeek();
        boolean boolean23 = property21.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField24 = property21.getField();
        org.joda.time.MutableDateTime mutableDateTime25 = property21.roundHalfEven();
        mutableDateTime11.setTime((org.joda.time.ReadableInstant) mutableDateTime25);
        mutableDateTime25.addSeconds(69);
        mutableDateTime25.addDays(15);
        int int31 = mutableDateTime25.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 14 + "'", int20 == 14);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
    }

    @Test
    public void test669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test669");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology18.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology18.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology18);
        boolean boolean22 = mutableDateTime11.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.chrono.GregorianChronology gregorianChronology23 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField24 = gregorianChronology23.months();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology23.dayOfYear();
        long long28 = dateTimeField25.getDifferenceAsLong(50491123200004L, 0L);
        int int29 = mutableDateTime21.get(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(gregorianChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 584388L + "'", long28 == 584388L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 92 + "'", int29 == 92);
    }

    @Test
    public void test670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test670");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.util.GregorianCalendar gregorianCalendar1 = mutableDateTime0.toGregorianCalendar();
        boolean boolean2 = mutableDateTime0.isBeforeNow();
        int int3 = mutableDateTime0.getRoundingMode();
        int int4 = mutableDateTime0.getDayOfYear();
        int int5 = mutableDateTime0.getYear();
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime0.toMutableDateTime();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder10.appendTimeZoneShortName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder11.appendTimeZoneShortName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder13.appendYearOfEra((int) ' ', (int) (byte) 23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap17 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder13.appendTimeZoneName(strMap17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str20 = dateTimeFieldType19.toString();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder18.appendFixedDecimal(dateTimeFieldType19, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder11.appendFraction(dateTimeFieldType19, 100, (int) (byte) 15);
        boolean boolean26 = mutableDateTime6.isSupported(dateTimeFieldType19);
        int int27 = mutableDateTime6.getDayOfYear();
        org.junit.Assert.assertNotNull(gregorianCalendar1);
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 92 + "'", int4 == 92);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2024 + "'", int5 == 2024);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "monthOfYear" + "'", str20, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 92 + "'", int27 == 92);
    }

    @Test
    public void test671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test671");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean19 = dateTimeFieldType17.isSupported((org.joda.time.Chronology) gregorianChronology18);
        int int20 = mutableDateTime11.get(dateTimeFieldType17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter21.withZone(dateTimeZone24);
        int int26 = dateTimeFormatter25.getDefaultYear();
        boolean boolean27 = dateTimeFormatter25.isPrinter();
        java.lang.String str28 = mutableDateTime11.toString(dateTimeFormatter25);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime11.centuryOfEra();
        java.util.Locale locale30 = null;
        int int31 = property29.getMaximumTextLength(locale30);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-019T03:09:00.000+02:09" + "'", str28, "1970-019T03:09:00.000+02:09");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
    }

    @Test
    public void test672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test672");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.chrono.GregorianChronology gregorianChronology21 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology21.monthOfYear();
        org.joda.time.DurationField durationField25 = gregorianChronology21.months();
        org.joda.time.DateTime dateTime26 = mutableDateTime2.toDateTime((org.joda.time.Chronology) gregorianChronology21);
        int int27 = mutableDateTime2.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime2.dayOfYear();
        int int29 = mutableDateTime2.getYearOfCentury();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(gregorianChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 70 + "'", int27 == 70);
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 70 + "'", int29 == 70);
    }

    @Test
    public void test673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test673");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        java.lang.String str13 = property12.getAsString();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.roundHalfFloor();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter15.withZone(dateTimeZone18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter15.withDefaultYear(0);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.chrono.GregorianChronology gregorianChronology26 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField27 = gregorianChronology26.months();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology26.weekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = gregorianChronology26.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        boolean boolean31 = iSOChronology22.equals((java.lang.Object) str30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter15.withChronology((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime((org.joda.time.Chronology) iSOChronology22);
        int int34 = mutableDateTime33.getMonthOfYear();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(gregorianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test674");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        mutableDateTime3.addSeconds(10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        java.lang.Object obj17 = cachedDateTimeZone16.writeReplace();
        mutableDateTime3.setZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        boolean boolean19 = cachedDateTimeZone16.isFixed();
        java.lang.String str21 = cachedDateTimeZone16.getShortName((-26438400000L));
        long long23 = cachedDateTimeZone16.nextTransition((long) 13);
        java.lang.Object obj24 = cachedDateTimeZone16.writeReplace();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.005" + "'", str21, "+00:00:00.005");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 13L + "'", long23 == 13L);
        org.junit.Assert.assertNotNull(obj24);
    }

    @Test
    public void test675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test675");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        long long7 = gregorianChronology1.add(readablePeriod4, (long) (short) 100, (int) (byte) 10);
        boolean boolean8 = durationFieldType0.isSupported((org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology14 = gregorianChronology9.withZone(dateTimeZone13);
        long long18 = gregorianChronology9.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField19 = gregorianChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology9.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter21.withZone(dateTimeZone24);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone26 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone24);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone24.getName(0L, locale28);
        org.joda.time.chrono.ZonedChronology zonedChronology30 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology9, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology30.getZone();
        org.joda.time.DateTimeZone dateTimeZone32 = zonedChronology30.getZone();
        boolean boolean33 = durationFieldType0.isSupported((org.joda.time.Chronology) zonedChronology30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.chrono.GregorianChronology gregorianChronology35 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField36 = gregorianChronology35.months();
        boolean boolean37 = dateTimeZone34.equals((java.lang.Object) gregorianChronology35);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutableDateTime38.add(readableDuration39, 10);
        int int42 = mutableDateTime38.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime38.dayOfWeek();
        boolean boolean45 = property43.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval46 = property43.toInterval();
        org.joda.time.Period period47 = interval46.toPeriod();
        int int48 = period47.size();
        org.joda.time.Period period49 = period47.toPeriod();
        int int50 = period47.size();
        int[] intArray52 = gregorianChronology35.get((org.joda.time.ReadablePeriod) period47, (-7139980L));
        boolean boolean53 = durationFieldType0.isSupported((org.joda.time.Chronology) gregorianChronology35);
        org.joda.time.DateTimeField dateTimeField54 = gregorianChronology35.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long62 = gregorianChronology35.getDateTimeMillis((int) (byte) 19, 32, 6, (-28800000), (int) (byte) 12, 69, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -28800000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 910L + "'", long18 == 910L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(cachedDateTimeZone26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+02:09" + "'", str29, "+02:09");
        org.junit.Assert.assertNotNull(zonedChronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(gregorianChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mutableDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 14 + "'", int42 == 14);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 0, 0, 0, -1, -58, -59, -980]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test676");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str11 = mutableDateTime2.toString(dateTimeFormatter10);
        mutableDateTime2.addMinutes(20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder14.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder17.appendYear((int) (byte) 100, (int) (byte) 19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 0, chronology22);
        mutableDateTime23.setMonthOfYear(5);
        mutableDateTime23.setDayOfYear((int) (byte) 19);
        boolean boolean28 = mutableDateTime23.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone31 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime23.toMutableDateTime(dateTimeZone30);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.minuteOfDay();
        int int34 = mutableDateTime32.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.dayOfWeek();
        mutableDateTime32.setRounding(dateTimeField36, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology39 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology39.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology39.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology44 = gregorianChronology39.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = gregorianChronology39.millisOfSecond();
        org.joda.time.MutableDateTime.Property property46 = new org.joda.time.MutableDateTime.Property(mutableDateTime32, dateTimeField45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = dateTimeField45.getType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder20.appendFixedDecimal(dateTimeFieldType47, (int) (byte) 23);
        int int50 = mutableDateTime2.get(dateTimeFieldType47);
        org.joda.time.chrono.GregorianChronology gregorianChronology51 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology51.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = gregorianChronology51.secondOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gregorianChronology51.era();
        org.joda.time.DurationField durationField55 = gregorianChronology51.seconds();
        org.joda.time.DurationField durationField56 = gregorianChronology51.millis();
        org.joda.time.DateTimeField dateTimeField57 = gregorianChronology51.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str59 = dateTimeFieldType58.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField61 = new org.joda.time.field.RemainderDateTimeField(dateTimeField57, dateTimeFieldType58, (int) (short) 100);
        int int62 = remainderDateTimeField61.getDivisor();
        long long65 = remainderDateTimeField61.add((long) (byte) 11, (int) (byte) 21);
        org.joda.time.DurationField durationField66 = remainderDateTimeField61.getDurationField();
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField69 = new org.joda.time.field.PreciseDurationField(durationFieldType67, (-9467020800000L));
        java.lang.String str70 = preciseDurationField69.getName();
        int int73 = preciseDurationField69.getDifference(10L, (long) (byte) 8);
        long long76 = preciseDurationField69.getDifferenceAsLong(779839000L, (long) (byte) 5);
        long long79 = preciseDurationField69.getDifferenceAsLong((long) (short) -1, (long) 5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.PreciseDateTimeField preciseDateTimeField80 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType47, durationField66, (org.joda.time.DurationField) preciseDurationField69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The effective range must be at least 2");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "19700101T160000.000+1600" + "'", str11, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(cachedDateTimeZone31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(gregorianChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "monthOfYear" + "'", str59, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 21011L + "'", long65 == 21011L);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "years" + "'", str70, "years");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
    }

    @Test
    public void test677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test677");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        int int12 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.dayOfMonth();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0, chronology15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundHalfFloor();
        int int19 = mutableDateTime18.getMinuteOfDay();
        int int20 = mutableDateTime18.getMillisOfSecond();
        int int21 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) mutableDateTime18);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 960 + "'", int12 == 960);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 960 + "'", int19 == 960);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test678");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.util.GregorianCalendar gregorianCalendar1 = mutableDateTime0.toGregorianCalendar();
        boolean boolean2 = mutableDateTime0.isBeforeNow();
        int int3 = mutableDateTime0.getRoundingMode();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5, 10);
        int int8 = mutableDateTime4.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime4.dayOfWeek();
        boolean boolean11 = property9.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval12 = property9.toInterval();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = interval12.toPeriod(periodType13);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16, 10);
        int int19 = mutableDateTime15.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.dayOfWeek();
        boolean boolean22 = property20.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval23 = property20.toInterval();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = interval23.toPeriod(periodType24);
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval23);
        boolean boolean27 = interval12.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime29 = readableInterval28.getEnd();
        boolean boolean30 = mutableDateTime0.isBefore((org.joda.time.ReadableInstant) dateTime29);
        int int31 = mutableDateTime0.getYearOfEra();
        org.junit.Assert.assertNotNull(gregorianCalendar1);
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 14 + "'", int19 == 14);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2024 + "'", int31 == 2024);
    }

    @Test
    public void test679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test679");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0, chronology15);
        mutableDateTime16.setMonthOfYear(5);
        mutableDateTime16.setDayOfYear((int) (byte) 19);
        boolean boolean21 = mutableDateTime16.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone24 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime16.toMutableDateTime(dateTimeZone23);
        int int26 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) mutableDateTime25);
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) mutableDateTime25);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.setDayOfWeek(5845578);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5845578 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(cachedDateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 57600000 + "'", int26 == 57600000);
    }

    @Test
    public void test680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test680");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        java.lang.String str62 = unsupportedDateTimeField61.getName();
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "centuryOfEra" + "'", str62, "centuryOfEra");
    }

    @Test
    public void test681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test681");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        mutableDateTime11.addYears((int) (byte) 23);
        int int15 = mutableDateTime11.getMillisOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, 10);
        int int20 = mutableDateTime16.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.dayOfWeek();
        boolean boolean23 = property21.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField24 = property21.getField();
        org.joda.time.MutableDateTime mutableDateTime25 = property21.roundHalfEven();
        mutableDateTime11.setTime((org.joda.time.ReadableInstant) mutableDateTime25);
        int int27 = mutableDateTime25.getHourOfDay();
        int int28 = mutableDateTime25.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 14 + "'", int20 == 14);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test682");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0, chronology10);
        mutableDateTime11.setMonthOfYear(5);
        mutableDateTime11.setDayOfYear((int) (byte) 19);
        boolean boolean16 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime11.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.minuteOfDay();
        mutableDateTime20.addYears((int) (byte) 23);
        mutableDateTime20.setSecondOfDay((int) (byte) 15);
        boolean boolean26 = interval8.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology27.era();
        org.joda.time.DurationField durationField31 = gregorianChronology27.seconds();
        org.joda.time.DurationField durationField32 = gregorianChronology27.millis();
        org.joda.time.DateTimeZone dateTimeZone33 = gregorianChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology27.hourOfDay();
        boolean boolean35 = interval8.equals((java.lang.Object) gregorianChronology27);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime36.add(readableDuration37, 10);
        int int40 = mutableDateTime36.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfWeek();
        boolean boolean43 = property41.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval44 = property41.toInterval();
        org.joda.time.Period period45 = interval44.toPeriod();
        boolean boolean46 = interval8.overlaps((org.joda.time.ReadableInterval) interval44);
        org.joda.time.chrono.GregorianChronology gregorianChronology47 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField48 = gregorianChronology47.months();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology47.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gregorianChronology47);
        boolean boolean51 = interval8.contains((org.joda.time.ReadableInstant) mutableDateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mutableDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 14 + "'", int40 == 14);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(gregorianChronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test683");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        int int18 = mutableDateTime11.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime11.set(dateTimeFieldType20, 0);
        mutableDateTime11.addYears(105);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
    }

    @Test
    public void test684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test684");
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology6 = gregorianChronology1.withZone(dateTimeZone5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.basicDate();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9, 10);
        int int12 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.dayOfWeek();
        mutableDateTime8.addYears(1);
        java.lang.String str16 = dateTimeFormatter7.print((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone22 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone20);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone20.getName(0L, locale24);
        java.lang.Object obj26 = dateTimeZone20.writeReplace();
        mutableDateTime8.setZone(dateTimeZone20);
        long long29 = dateTimeZone5.getMillisKeepLocal(dateTimeZone20, 0L);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(0L, dateTimeZone20);
        long long34 = dateTimeZone20.convertLocalToUTC(292223993L, true, 136600840588L);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 14 + "'", int12 == 14);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "20250401" + "'", str16, "20250401");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(cachedDateTimeZone22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+02:09" + "'", str25, "+02:09");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-7739995L) + "'", long29 == (-7739995L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 284483993L + "'", long34 == 284483993L);
    }

    @Test
    public void test685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test685");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology11 = gregorianChronology6.withZone(dateTimeZone10);
        long long15 = gregorianChronology6.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField16 = gregorianChronology6.halfdays();
        org.joda.time.DurationField durationField17 = gregorianChronology6.years();
        boolean boolean18 = property5.equals((java.lang.Object) gregorianChronology6);
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology6.dayOfWeek();
        org.joda.time.DurationField durationField20 = gregorianChronology6.minutes();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 910L + "'", long15 == 910L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test686");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.months();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology0.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology0.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8, 10);
        int int11 = mutableDateTime7.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime7.dayOfWeek();
        boolean boolean14 = property12.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval15 = property12.toInterval();
        org.joda.time.Period period16 = interval15.toPeriod();
        int int17 = period16.size();
        org.joda.time.Period period18 = period16.toPeriod();
        int int19 = period16.size();
        org.joda.time.Period period20 = period16.toPeriod();
        int[] intArray22 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period16, (-5756400001L));
        org.joda.time.DurationField durationField23 = gregorianChronology0.years();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 14 + "'", int11 == 14);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, -9, -3, -15, 0, 0, -1]");
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test687");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.centuryOfEra();
        int int5 = dateTimeField3.getLeapAmount(0L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test688");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        mutableDateTime2.addWeekyears(0);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        int int13 = property12.get();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test689");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        mutableDateTime0.setMillisOfSecond((int) (byte) 15);
        int int7 = mutableDateTime0.getWeekyear();
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology8.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology13 = gregorianChronology8.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.ISODateTimeFormat.basicDate();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16, 10);
        int int19 = mutableDateTime15.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.dayOfWeek();
        mutableDateTime15.addYears(1);
        java.lang.String str23 = dateTimeFormatter14.print((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter24.withZone(dateTimeZone27);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone27);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone27.getName(0L, locale31);
        java.lang.Object obj33 = dateTimeZone27.writeReplace();
        mutableDateTime15.setZone(dateTimeZone27);
        long long36 = dateTimeZone12.getMillisKeepLocal(dateTimeZone27, 0L);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone27.getName((long) 31, locale38);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime0.toMutableDateTime(dateTimeZone27);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2024 + "'", int7 == 2024);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 14 + "'", int19 == 14);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "20250401" + "'", str23, "20250401");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+02:09" + "'", str32, "+02:09");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-7739995L) + "'", long36 == (-7739995L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+02:09" + "'", str39, "+02:09");
        org.junit.Assert.assertNotNull(mutableDateTime40);
    }

    @Test
    public void test690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test690");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.hourOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0, chronology7);
        mutableDateTime8.setMonthOfYear(5);
        mutableDateTime8.setDayOfYear((int) (byte) 19);
        boolean boolean13 = mutableDateTime8.isAfterNow();
        java.util.GregorianCalendar gregorianCalendar14 = mutableDateTime8.toGregorianCalendar();
        boolean boolean15 = mutableDateTime4.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime4.era();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime4.year();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime18.add(readableDuration19, 10);
        int int22 = mutableDateTime18.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.dayOfWeek();
        boolean boolean25 = property23.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval26 = property23.toInterval();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0, chronology28);
        mutableDateTime29.setMonthOfYear(5);
        mutableDateTime29.setDayOfYear((int) (byte) 19);
        boolean boolean34 = mutableDateTime29.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone37 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime29.toMutableDateTime(dateTimeZone36);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.minuteOfDay();
        mutableDateTime38.addYears((int) (byte) 23);
        mutableDateTime38.setSecondOfDay((int) (byte) 15);
        boolean boolean44 = interval26.isBefore((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Duration duration46 = readableInterval45.toDuration();
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48, 10);
        int int51 = mutableDateTime47.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime47.dayOfWeek();
        boolean boolean54 = property52.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval55 = property52.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) 0, chronology57);
        mutableDateTime58.setMonthOfYear(5);
        mutableDateTime58.setDayOfYear((int) (byte) 19);
        boolean boolean63 = mutableDateTime58.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone66 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone65);
        org.joda.time.MutableDateTime mutableDateTime67 = mutableDateTime58.toMutableDateTime(dateTimeZone65);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime67.minuteOfDay();
        mutableDateTime67.addYears((int) (byte) 23);
        mutableDateTime67.setSecondOfDay((int) (byte) 15);
        boolean boolean73 = interval55.isBefore((org.joda.time.ReadableInstant) mutableDateTime67);
        org.joda.time.ReadableInterval readableInterval74 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration75 = readableInterval74.toDuration();
        int int76 = duration46.compareTo((org.joda.time.ReadableDuration) duration75);
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration75);
        java.lang.String str78 = duration75.toString();
        long long79 = duration75.getMillis();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 14 + "'", int22 == 14);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(cachedDateTimeZone37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(readableInterval45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 14 + "'", int51 == 14);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(cachedDateTimeZone66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(readableInterval74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PT86400S" + "'", str78, "PT86400S");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 86400000L + "'", long79 == 86400000L);
    }

    @Test
    public void test691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test691");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.secondOfDay();
        int int5 = mutableDateTime2.getMinuteOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 960 + "'", int5 == 960);
    }

    @Test
    public void test692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test692");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1969-01-20T00:00:00.005+00:00:00.005", "yearOfEra", 57600000, (int) (short) 1);
        long long6 = fixedDateTimeZone4.previousTransition(41024102400013L);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8, 10);
        int int11 = mutableDateTime7.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime7.dayOfWeek();
        boolean boolean14 = property12.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval15 = property12.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0, chronology17);
        mutableDateTime18.setMonthOfYear(5);
        mutableDateTime18.setDayOfYear((int) (byte) 19);
        boolean boolean23 = mutableDateTime18.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone26 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime18.toMutableDateTime(dateTimeZone25);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.minuteOfDay();
        mutableDateTime27.addYears((int) (byte) 23);
        mutableDateTime27.setSecondOfDay((int) (byte) 15);
        boolean boolean33 = interval15.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.chrono.GregorianChronology gregorianChronology34 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology34.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology34.era();
        org.joda.time.DurationField durationField38 = gregorianChronology34.seconds();
        org.joda.time.DurationField durationField39 = gregorianChronology34.millis();
        org.joda.time.DateTimeZone dateTimeZone40 = gregorianChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology34.hourOfDay();
        boolean boolean42 = interval15.equals((java.lang.Object) gregorianChronology34);
        boolean boolean43 = fixedDateTimeZone4.equals((java.lang.Object) boolean42);
        int int45 = fixedDateTimeZone4.getOffset(779839000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 41024102400013L + "'", long6 == 41024102400013L);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 14 + "'", int11 == 14);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(cachedDateTimeZone26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(gregorianChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 57600000 + "'", int45 == 57600000);
    }

    @Test
    public void test693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test693");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.DateTimeField dateTimeField19 = remainderDateTimeField17.getWrappedField();
        int int20 = remainderDateTimeField17.getMaximumValue();
        long long23 = remainderDateTimeField17.addWrapField((long) 31, (-57600001));
        int int25 = remainderDateTimeField17.getLeapAmount((-293477644800000L));
        org.joda.time.DurationField durationField26 = remainderDateTimeField17.getRangeDurationField();
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 99 + "'", int20 == 99);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-31449599969L) + "'", long23 == (-31449599969L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test694");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = unsupportedDateTimeField61.getType();
        java.lang.String str63 = unsupportedDateTimeField61.toString();
        java.util.Locale locale64 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int65 = unsupportedDateTimeField61.getMaximumShortTextLength(locale64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuryOfEra field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UnsupportedDateTimeField" + "'", str63, "UnsupportedDateTimeField");
    }

    @Test
    public void test695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test695");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        int int18 = mutableDateTime11.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.millisOfSecond();
        int int20 = mutableDateTime11.getMinuteOfDay();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 480 + "'", int20 == 480);
    }

    @Test
    public void test696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test696");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.chrono.GregorianChronology gregorianChronology21 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology21.monthOfYear();
        org.joda.time.DurationField durationField25 = gregorianChronology21.months();
        org.joda.time.DateTime dateTime26 = mutableDateTime2.toDateTime((org.joda.time.Chronology) gregorianChronology21);
        mutableDateTime2.setWeekyear((int) (byte) 19);
        mutableDateTime2.setMillis(0L);
        int int31 = mutableDateTime2.getWeekyear();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(gregorianChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
    }

    @Test
    public void test697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test697");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((int) (byte) 8, 0, (int) (short) 1, 366, (int) (byte) 15, 86399, 2922789);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test698");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        mutableDateTime11.addYears((int) (byte) 23);
        mutableDateTime11.setSecondOfDay((int) (byte) 15);
        org.joda.time.Chronology chronology17 = mutableDateTime11.getChronology();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime11.add(readableDuration18);
        boolean boolean20 = mutableDateTime11.isEqualNow();
        org.joda.time.Instant instant21 = mutableDateTime11.toInstant();
        mutableDateTime11.addMillis(60);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(instant21);
    }

    @Test
    public void test699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test699");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = unsupportedDateTimeField61.getType();
        // The following exception was thrown during execution in test generation
        try {
            int int64 = unsupportedDateTimeField61.getMinimumValue((long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuryOfEra field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
    }

    @Test
    public void test700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test700");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        java.lang.String str13 = property12.getAsString();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.roundHalfFloor();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property12.getAsText(locale15);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(mutableDateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AD" + "'", str16, "AD");
    }

    @Test
    public void test701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test701");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYearOfEra((int) ' ', (int) (byte) 23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneName(strMap4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatterBuilder5.toPrinter();
        java.lang.Object obj7 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology8.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = gregorianChronology8.add(readablePeriod11, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(obj7, (org.joda.time.Chronology) gregorianChronology8);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.weekOfWeekyear();
        int int18 = mutableDateTime16.getDayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder19.appendYearOfEra((int) ' ', (int) (byte) 23);
        boolean boolean23 = dateTimeFormatterBuilder19.canBuildPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = dateTimeFormatterBuilder19.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder19.appendLiteral("100");
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatterBuilder26.toParser();
        boolean boolean28 = org.joda.time.field.FieldUtils.equals((java.lang.Object) mutableDateTime16, (java.lang.Object) dateTimeParser27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int33 = dateTimeParser27.parseInto(dateTimeParserBucket30, "960", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimePrinter24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeParser27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test702");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.time();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.Chronology chronology5 = iSOChronology1.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withChronology(chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        java.lang.String str9 = dateTimeFormatter7.print((-6311347200000L));
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "00:00:00.000Z" + "'", str9, "00:00:00.000Z");
    }

    @Test
    public void test703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test703");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = unsupportedDateTimeField61.getMaximumValue();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuryOfEra field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
    }

    @Test
    public void test704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test704");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0, chronology10);
        mutableDateTime11.setMonthOfYear(5);
        mutableDateTime11.setDayOfYear((int) (byte) 19);
        boolean boolean16 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime11.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.minuteOfDay();
        mutableDateTime20.addYears((int) (byte) 23);
        mutableDateTime20.setSecondOfDay((int) (byte) 15);
        boolean boolean26 = interval8.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.MutableInterval mutableInterval27 = interval8.toMutableInterval();
        org.joda.time.Duration duration28 = interval8.toDuration();
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval8);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(readableInterval29);
    }

    @Test
    public void test705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test705");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.era();
        int int13 = mutableDateTime11.get(dateTimeFieldType12);
        int int14 = mutableDateTime11.getRoundingMode();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test706");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.hourOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder6.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder9.appendTimeZoneShortName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder10.appendTimeZoneShortName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder12.appendYearOfEra((int) ' ', (int) (byte) 23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap16 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder12.appendTimeZoneName(strMap16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str19 = dateTimeFieldType18.toString();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder17.appendFixedDecimal(dateTimeFieldType18, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder10.appendFraction(dateTimeFieldType18, 100, (int) (byte) 15);
        int int25 = mutableDateTime4.get(dateTimeFieldType18);
        mutableDateTime4.setWeekOfWeekyear((int) (byte) 15);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 0, chronology29);
        mutableDateTime30.setMonthOfYear(5);
        mutableDateTime30.setMillis(0L);
        mutableDateTime30.setMillisOfSecond((int) (byte) 0);
        int int37 = mutableDateTime30.getEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology38 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology38.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology38.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology43 = gregorianChronology38.withZone(dateTimeZone42);
        long long47 = gregorianChronology38.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField48 = gregorianChronology38.halfdays();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology38.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter50.withZone(dateTimeZone53);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone55 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone53);
        java.util.Locale locale57 = null;
        java.lang.String str58 = dateTimeZone53.getName(0L, locale57);
        org.joda.time.chrono.ZonedChronology zonedChronology59 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology38, dateTimeZone53);
        mutableDateTime30.setZoneRetainFields(dateTimeZone53);
        int int61 = mutableDateTime30.getMinuteOfDay();
        org.joda.time.Instant instant62 = mutableDateTime30.toInstant();
        org.joda.time.chrono.GregorianChronology gregorianChronology63 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField64 = gregorianChronology63.months();
        org.joda.time.DateTimeField dateTimeField65 = gregorianChronology63.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField66 = gregorianChronology63.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        long long69 = dateTimeZone67.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone70 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone67);
        java.lang.String str72 = cachedDateTimeZone70.getNameKey((long) '#');
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeUtils.getZone((org.joda.time.DateTimeZone) cachedDateTimeZone70);
        org.joda.time.Chronology chronology74 = gregorianChronology63.withZone(dateTimeZone73);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter75.withZone(dateTimeZone78);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone80 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone78);
        org.joda.time.chrono.ISOChronology iSOChronology81 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone78);
        org.joda.time.Chronology chronology82 = chronology74.withZone(dateTimeZone78);
        mutableDateTime30.setZone(dateTimeZone78);
        boolean boolean84 = mutableDateTime4.isAfter((org.joda.time.ReadableInstant) mutableDateTime30);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "monthOfYear" + "'", str19, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(gregorianChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 910L + "'", long47 == 910L);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(cachedDateTimeZone55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+02:09" + "'", str58, "+02:09");
        org.junit.Assert.assertNotNull(zonedChronology59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 960 + "'", int61 == 960);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(gregorianChronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone70);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "yearOfEra" + "'", str72, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(cachedDateTimeZone80);
        org.junit.Assert.assertNotNull(iSOChronology81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test707");
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(91, (int) (byte) 9, 19, 0, (int) (byte) 10, 13, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        long long10 = dateTimeZone8.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone11);
        mutableDateTime12.addSeconds((-28800000));
        boolean boolean15 = mutableDateTime7.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        int int16 = mutableDateTime12.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime12.add(readableDuration17, (int) (short) -1);
        int int20 = mutableDateTime12.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime12.minuteOfHour();
        int int22 = property21.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 18 + "'", int16 == 18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
    }

    @Test
    public void test708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test708");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean9 = dateTimeFieldType7.isSupported((org.joda.time.Chronology) gregorianChronology8);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        long long14 = dividedDateTimeField11.set((long) (byte) 4, (int) '#');
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField17 = new org.joda.time.field.PreciseDurationField(durationFieldType15, (-9467020800000L));
        java.lang.String str18 = preciseDurationField17.getName();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology37.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology42 = gregorianChronology37.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology37.millisOfSecond();
        org.joda.time.MutableDateTime.Property property44 = new org.joda.time.MutableDateTime.Property(mutableDateTime30, dateTimeField43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField43.getType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField46 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, (org.joda.time.DurationField) preciseDurationField17, dateTimeFieldType45);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField48 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, 2922789);
        long long50 = offsetDateTimeField48.roundHalfEven((long) (byte) 5);
        long long52 = offsetDateTimeField48.roundFloor(6324013180800000L);
        java.lang.String str53 = offsetDateTimeField48.toString();
        long long55 = offsetDateTimeField48.roundHalfFloor((long) 11);
        long long58 = offsetDateTimeField48.set((long) (byte) 23, "70");
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 50491123200004L + "'", long14 == 50491123200004L);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "years" + "'", str18, "years");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 946857600000L + "'", long50 == 946857600000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 6321804192000000L + "'", long52 == 6321804192000000L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "DateTimeField[yearOfEra]" + "'", str53, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 946857600000L + "'", long55 == 946857600000L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-9223270277155199977L) + "'", long58 == (-9223270277155199977L));
    }

    @Test
    public void test709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test709");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.MutableDateTime mutableDateTime9 = property5.roundHalfEven();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundHalfEven();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test710");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone23 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime2.toMutableDateTime(dateTimeZone22);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.dayOfYear();
        mutableDateTime24.setMinuteOfDay(100);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime24.millisOfSecond();
        mutableDateTime24.addYears(2005);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(cachedDateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test711");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        mutableDateTime2.addWeekyears(0);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime2.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test712");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        mutableDateTime3.addSeconds(10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        java.lang.Object obj17 = cachedDateTimeZone16.writeReplace();
        mutableDateTime3.setZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = cachedDateTimeZone16.getUncachedZone();
        long long21 = dateTimeZone19.nextTransition(905684543942409L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone19.getShortName(0L, locale23);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 905684543942409L + "'", long21 == 905684543942409L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.005" + "'", str24, "+00:00:00.005");
    }

    @Test
    public void test713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test713");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.chrono.GregorianChronology gregorianChronology21 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology21.monthOfYear();
        org.joda.time.DurationField durationField25 = gregorianChronology21.months();
        org.joda.time.DateTime dateTime26 = mutableDateTime2.toDateTime((org.joda.time.Chronology) gregorianChronology21);
        int int27 = mutableDateTime2.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime2.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime2.copy();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(gregorianChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 70 + "'", int27 == 70);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
    }

    @Test
    public void test714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test714");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.date();
        java.util.Locale locale1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 2922789);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0, chronology6);
        mutableDateTime7.setMonthOfYear(5);
        mutableDateTime7.setDayOfYear((int) (byte) 19);
        int int12 = mutableDateTime7.getMillisOfDay();
        mutableDateTime7.setMinuteOfDay((int) (byte) 1);
        mutableDateTime7.addWeeks((int) (short) 10);
        java.lang.String str17 = dateTimeFormatter4.print((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime7.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 57600000 + "'", int12 == 57600000);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-03-30" + "'", str17, "1970-03-30");
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test715");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        mutableDateTime11.addYears((int) (byte) 23);
        int int15 = mutableDateTime11.getMillisOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, 10);
        int int20 = mutableDateTime16.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.dayOfWeek();
        boolean boolean23 = property21.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField24 = property21.getField();
        org.joda.time.MutableDateTime mutableDateTime25 = property21.roundHalfEven();
        mutableDateTime11.setTime((org.joda.time.ReadableInstant) mutableDateTime25);
        mutableDateTime25.addMonths(2010);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 14 + "'", int20 == 14);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test716");
        java.lang.Object obj0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        long long7 = gregorianChronology1.add(readablePeriod4, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(obj0, (org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundHalfEven();
        mutableDateTime11.addHours(91);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test717");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.util.GregorianCalendar gregorianCalendar1 = mutableDateTime0.toGregorianCalendar();
        boolean boolean2 = mutableDateTime0.isBeforeNow();
        int int3 = mutableDateTime0.getRoundingMode();
        int int4 = mutableDateTime0.getDayOfYear();
        int int5 = mutableDateTime0.getYear();
        org.joda.time.Chronology chronology6 = mutableDateTime0.getChronology();
        org.joda.time.DateTime dateTime7 = mutableDateTime0.toDateTime();
        org.junit.Assert.assertNotNull(gregorianCalendar1);
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 92 + "'", int4 == 92);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2024 + "'", int5 == 2024);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test718");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean19 = dateTimeFieldType17.isSupported((org.joda.time.Chronology) gregorianChronology18);
        int int20 = mutableDateTime11.get(dateTimeFieldType17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter21.withZone(dateTimeZone24);
        int int26 = dateTimeFormatter25.getDefaultYear();
        boolean boolean27 = dateTimeFormatter25.isPrinter();
        java.lang.String str28 = mutableDateTime11.toString(dateTimeFormatter25);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime11.centuryOfEra();
        java.util.Locale locale30 = null;
        int int31 = property29.getMaximumShortTextLength(locale30);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-019T03:09:00.000+02:09" + "'", str28, "1970-019T03:09:00.000+02:09");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
    }

    @Test
    public void test719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test719");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        mutableDateTime3.addSeconds(10);
        mutableDateTime3.addHours(960);
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology16.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology16.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone21 = gregorianChronology16.getZone();
        mutableDateTime3.setChronology((org.joda.time.Chronology) gregorianChronology16);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime3.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test720");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.yearOfCentury();
        mutableDateTime0.setRounding(dateTimeField6);
        int int8 = mutableDateTime0.getDayOfYear();
        mutableDateTime0.addSeconds(0);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test721");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime2.toMutableDateTime();
        mutableDateTime19.addMillis(3);
        long long22 = mutableDateTime19.getMillis();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-57589997L) + "'", long22 == (-57589997L));
    }

    @Test
    public void test722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test722");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(971L, dateTimeZone1);
    }

    @Test
    public void test723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test723");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField5 = gregorianChronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology4.getZone();
        java.lang.String str8 = dateTimeZone7.toString();
        boolean boolean9 = iSOChronology0.equals((java.lang.Object) str8);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.weekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField13 = new org.joda.time.field.OffsetDateTimeField(dateTimeField11, (int) '4');
        org.joda.time.DurationField durationField14 = offsetDateTimeField13.getLeapDurationField();
        org.joda.time.DurationField durationField15 = offsetDateTimeField13.getLeapDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test724");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField8 = gregorianChronology7.months();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology7.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = gregorianChronology7.getZone();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime14.add(readableDuration15, 10);
        int int18 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime14.dayOfWeek();
        boolean boolean21 = property19.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval22 = property19.toInterval();
        org.joda.time.Period period23 = interval22.toPeriod();
        int[] intArray26 = gregorianChronology7.get((org.joda.time.ReadablePeriod) period23, (long) 57600000, (long) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod27 = period23.toMutablePeriod();
        java.lang.String str28 = mutablePeriod27.toString();
        int[] intArray30 = gregorianChronology0.get((org.joda.time.ReadablePeriod) mutablePeriod27, (long) 365);
        org.joda.time.DateTimeField dateTimeField31 = gregorianChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField32 = gregorianChronology0.days();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 14 + "'", int18 == 14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, -15, -59, -59, -990]");
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "P1D" + "'", str28, "P1D");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 365]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test725");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = interval8.toPeriod(periodType9);
        org.joda.time.DateTime dateTime11 = interval8.getStart();
        int int12 = dateTime11.getDayOfMonth();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test726");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology18.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology18.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology18);
        boolean boolean22 = mutableDateTime11.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder23.appendYearOfEra((int) ' ', (int) (byte) 23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap27 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder23.appendTimeZoneName(strMap27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str30 = dateTimeFieldType29.toString();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder28.appendFixedDecimal(dateTimeFieldType29, 20);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime11.property(dateTimeFieldType29);
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime11.getZone();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "monthOfYear" + "'", str30, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
    }

    @Test
    public void test727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test727");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        long long5 = cachedDateTimeZone3.nextTransition(315705600019L);
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder8.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder11.appendYear((int) (byte) 100, (int) (byte) 19);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 0, chronology16);
        mutableDateTime17.setMonthOfYear(5);
        mutableDateTime17.setDayOfYear((int) (byte) 19);
        boolean boolean22 = mutableDateTime17.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone25 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime17.toMutableDateTime(dateTimeZone24);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.minuteOfDay();
        int int28 = mutableDateTime26.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfWeek();
        mutableDateTime26.setRounding(dateTimeField30, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology33 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology33.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology38 = gregorianChronology33.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology33.millisOfSecond();
        org.joda.time.MutableDateTime.Property property40 = new org.joda.time.MutableDateTime.Property(mutableDateTime26, dateTimeField39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = dateTimeField39.getType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder14.appendFixedDecimal(dateTimeFieldType41, (int) (byte) 23);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime7.property(dateTimeFieldType41);
        org.joda.time.Instant instant45 = mutableDateTime7.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 315705600019L + "'", long5 == 315705600019L);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(cachedDateTimeZone25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(gregorianChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(instant45);
    }

    @Test
    public void test728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test728");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addMinutes((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfCentury();
        java.lang.String str5 = property4.getAsString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "24" + "'", str5, "24");
    }

    @Test
    public void test729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test729");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        mutableDateTime3.addSeconds(10);
        mutableDateTime3.addWeekyears(20);
        mutableDateTime3.addHours((-28798030));
        mutableDateTime3.setHourOfDay(14);
        int int20 = mutableDateTime3.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50410 + "'", int20 == 50410);
    }

    @Test
    public void test730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test730");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = unsupportedDateTimeField61.getType();
        long long65 = unsupportedDateTimeField61.getDifferenceAsLong((long) 52, (long) (-475129));
        java.util.Locale locale66 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int67 = unsupportedDateTimeField61.getMaximumTextLength(locale66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuryOfEra field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
    }

    @Test
    public void test731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test731");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField5 = gregorianChronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology4.getZone();
        java.lang.String str8 = dateTimeZone7.toString();
        boolean boolean9 = iSOChronology0.equals((java.lang.Object) str8);
        org.joda.time.DurationField durationField10 = iSOChronology0.days();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DurationField durationField12 = iSOChronology0.seconds();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test732");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = interval8.toPeriod(periodType9);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12, 10);
        int int15 = mutableDateTime11.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.dayOfWeek();
        boolean boolean18 = property16.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval19 = property16.toInterval();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = interval19.toPeriod(periodType20);
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval19);
        boolean boolean23 = interval8.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTime dateTime25 = readableInterval24.getEnd();
        org.joda.time.DateTime dateTime26 = readableInterval24.getEnd();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 14 + "'", int15 == 14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test733");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology11 = gregorianChronology6.withZone(dateTimeZone10);
        long long15 = gregorianChronology6.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField16 = gregorianChronology6.halfdays();
        org.joda.time.DurationField durationField17 = gregorianChronology6.years();
        boolean boolean18 = property5.equals((java.lang.Object) gregorianChronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime20 = property5.add(3155846400010L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 3155846400010 * 3600000");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 910L + "'", long15 == 910L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test734");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean9 = dateTimeFieldType7.isSupported((org.joda.time.Chronology) gregorianChronology8);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        long long14 = dividedDateTimeField11.set((long) (byte) 4, (int) '#');
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField17 = new org.joda.time.field.PreciseDurationField(durationFieldType15, (-9467020800000L));
        java.lang.String str18 = preciseDurationField17.getName();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology37.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology42 = gregorianChronology37.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology37.millisOfSecond();
        org.joda.time.MutableDateTime.Property property44 = new org.joda.time.MutableDateTime.Property(mutableDateTime30, dateTimeField43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField43.getType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField46 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, (org.joda.time.DurationField) preciseDurationField17, dateTimeFieldType45);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField48 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, 2922789);
        long long50 = offsetDateTimeField48.roundHalfEven((long) (byte) 5);
        long long52 = offsetDateTimeField48.remainder((long) 29222006);
        long long54 = offsetDateTimeField48.roundFloor((long) 5);
        long long56 = offsetDateTimeField48.roundHalfFloor(1711935261054L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 50491123200004L + "'", long14 == 50491123200004L);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "years" + "'", str18, "years");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 946857600000L + "'", long50 == 946857600000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 29222006L + "'", long52 == 29222006L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-2208988800000L) + "'", long54 == (-2208988800000L));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 946857600000L + "'", long56 == 946857600000L);
    }

    @Test
    public void test735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test735");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException(durationFieldType0, "");
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean5 = dateTimeFieldType3.isSupported((org.joda.time.Chronology) gregorianChronology4);
        org.joda.time.DurationField durationField6 = gregorianChronology4.centuries();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("1969-01-20T00:00:00.005+00:00:00.005", "yearOfEra", 57600000, (int) (short) 1);
        long long13 = fixedDateTimeZone11.previousTransition(41024102400013L);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime14.add(readableDuration15, 10);
        int int18 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime14.dayOfWeek();
        boolean boolean21 = property19.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval22 = property19.toInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        mutableDateTime34.addYears((int) (byte) 23);
        mutableDateTime34.setSecondOfDay((int) (byte) 15);
        boolean boolean40 = interval22.isBefore((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.chrono.GregorianChronology gregorianChronology41 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology41.yearOfEra();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology41.secondOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology41.era();
        org.joda.time.DurationField durationField45 = gregorianChronology41.seconds();
        org.joda.time.DurationField durationField46 = gregorianChronology41.millis();
        org.joda.time.DateTimeZone dateTimeZone47 = gregorianChronology41.getZone();
        org.joda.time.DateTimeField dateTimeField48 = gregorianChronology41.hourOfDay();
        boolean boolean49 = interval22.equals((java.lang.Object) gregorianChronology41);
        boolean boolean50 = fixedDateTimeZone11.equals((java.lang.Object) boolean49);
        org.joda.time.Chronology chronology51 = gregorianChronology4.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone11);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology4.millisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology53.yearOfCentury();
        java.lang.String str55 = iSOChronology53.toString();
        org.joda.time.Chronology chronology56 = iSOChronology53.withUTC();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology53.yearOfCentury();
        org.joda.time.DurationField durationField58 = iSOChronology53.years();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime61 = dateTimeFormatter59.parseLocalTime("99");
        long long63 = iSOChronology53.set((org.joda.time.ReadablePartial) localTime61, (long) 12480);
        long long65 = gregorianChronology4.set((org.joda.time.ReadablePartial) localTime61, 96000L);
        boolean boolean66 = durationFieldType0.isSupported((org.joda.time.Chronology) gregorianChronology4);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 41024102400013L + "'", long13 == 41024102400013L);
        org.junit.Assert.assertNotNull(mutableDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 14 + "'", int18 == 14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(gregorianChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(iSOChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[1969-01-20T00:00:00.005+00:00:00.005]" + "'", str55, "ISOChronology[1969-01-20T00:00:00.005+00:00:00.005]");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-57600000L) + "'", long63 == (-57600000L));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test736");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int19 = mutableDateTime11.get(dateTimeFieldType18);
        org.joda.time.chrono.GregorianChronology gregorianChronology20 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology20.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = gregorianChronology20.add(readablePeriod23, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology20.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology20.clockhourOfHalfday();
        org.joda.time.Chronology chronology29 = gregorianChronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType18.getField((org.joda.time.Chronology) gregorianChronology20);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology31.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology31.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType18.getField((org.joda.time.Chronology) iSOChronology31);
        boolean boolean37 = iSOChronology31.equals((java.lang.Object) "15");
        org.joda.time.DurationField durationField38 = iSOChronology31.months();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertNotNull(gregorianChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test737");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.timeParser();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException10 = new org.joda.time.IllegalFieldValueException(durationFieldType8, "");
        java.lang.Throwable[] throwableArray11 = illegalFieldValueException10.getSuppressed();
        boolean boolean12 = mutableDateTime3.equals((java.lang.Object) illegalFieldValueException10);
        mutableDateTime3.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime3.add(readableDuration15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime3.add(readablePeriod17, 0);
        mutableDateTime3.setYear((-28800000));
        mutableDateTime3.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 0, chronology25);
        mutableDateTime26.setMonthOfYear(5);
        mutableDateTime26.setDayOfYear((int) (byte) 19);
        boolean boolean31 = mutableDateTime26.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone34 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime26.toMutableDateTime(dateTimeZone33);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.minuteOfDay();
        int int37 = mutableDateTime35.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology38.dayOfWeek();
        mutableDateTime35.setRounding(dateTimeField39, 5);
        int int42 = mutableDateTime35.getDayOfMonth();
        boolean boolean43 = mutableDateTime3.isAfter((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) 0, chronology45);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime48 = property47.roundHalfFloor();
        int int49 = mutableDateTime48.getMinuteOfDay();
        int int50 = mutableDateTime48.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime48.year();
        boolean boolean52 = mutableDateTime35.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(cachedDateTimeZone34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 19 + "'", int42 == 19);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 960 + "'", int49 == 960);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(property51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test738");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str11 = mutableDateTime2.toString(dateTimeFormatter10);
        mutableDateTime2.addMinutes(20);
        int int14 = mutableDateTime2.getMillisOfSecond();
        int int15 = mutableDateTime2.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setMinuteOfDay(1968);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1968 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "19700101T160000.000+1600" + "'", str11, "19700101T160000.000+1600");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test739");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = unsupportedDateTimeField61.getType();
        long long65 = unsupportedDateTimeField61.getDifferenceAsLong((long) 52, (long) (-475129));
        // The following exception was thrown during execution in test generation
        try {
            long long68 = unsupportedDateTimeField61.add((-86399995L), 3155695200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 3155695200000");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
    }

    @Test
    public void test740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test740");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.secondOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test741");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.util.GregorianCalendar gregorianCalendar1 = mutableDateTime0.toGregorianCalendar();
        boolean boolean2 = mutableDateTime0.isBeforeNow();
        int int3 = mutableDateTime0.getRoundingMode();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5, 10);
        int int8 = mutableDateTime4.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime4.dayOfWeek();
        boolean boolean11 = property9.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval12 = property9.toInterval();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = interval12.toPeriod(periodType13);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16, 10);
        int int19 = mutableDateTime15.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.dayOfWeek();
        boolean boolean22 = property20.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval23 = property20.toInterval();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = interval23.toPeriod(periodType24);
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval23);
        boolean boolean27 = interval12.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime29 = readableInterval28.getEnd();
        boolean boolean30 = mutableDateTime0.isBefore((org.joda.time.ReadableInstant) dateTime29);
        java.lang.String str31 = dateTime29.toString();
        org.junit.Assert.assertNotNull(gregorianCalendar1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 14 + "'", int19 == 14);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2024-04-02T00:00:00.000+16:00" + "'", str31, "2024-04-02T00:00:00.000+16:00");
    }

    @Test
    public void test742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test742");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean9 = dateTimeFieldType7.isSupported((org.joda.time.Chronology) gregorianChronology8);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        long long13 = dividedDateTimeField11.remainder(6L);
        long long15 = dividedDateTimeField11.roundHalfCeiling(999L);
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.yearOfCentury();
        java.lang.String str18 = iSOChronology16.toString();
        org.joda.time.Chronology chronology19 = iSOChronology16.withUTC();
        org.joda.time.DurationField durationField20 = chronology19.halfdays();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, durationField20, dateTimeFieldType21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology41.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology41);
        boolean boolean45 = mutableDateTime34.isAfter((org.joda.time.ReadableInstant) mutableDateTime44);
        mutableDateTime34.setMinuteOfDay(99);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        long long50 = dateTimeZone48.previousTransition(0L);
        java.lang.Object obj51 = dateTimeZone48.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(dateTimeZone48);
        mutableDateTime52.addYears(960);
        org.joda.time.chrono.GregorianChronology gregorianChronology55 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField56 = gregorianChronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField57 = gregorianChronology55.secondOfDay();
        org.joda.time.DateTimeField dateTimeField58 = gregorianChronology55.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField59 = gregorianChronology55.weekyear();
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology55.secondOfMinute();
        org.joda.time.MutableDateTime.Property property61 = new org.joda.time.MutableDateTime.Property(mutableDateTime52, dateTimeField60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) 0, chronology63);
        mutableDateTime64.setMonthOfYear(5);
        mutableDateTime64.setDayOfYear((int) (byte) 19);
        boolean boolean69 = mutableDateTime64.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone72 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone71);
        org.joda.time.MutableDateTime mutableDateTime73 = mutableDateTime64.toMutableDateTime(dateTimeZone71);
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime73.minuteOfDay();
        int int75 = mutableDateTime73.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology76 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField77 = iSOChronology76.dayOfWeek();
        mutableDateTime73.setRounding(dateTimeField77, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology80 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField81 = gregorianChronology80.yearOfEra();
        org.joda.time.DateTimeField dateTimeField82 = gregorianChronology80.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology85 = gregorianChronology80.withZone(dateTimeZone84);
        org.joda.time.DateTimeField dateTimeField86 = gregorianChronology80.millisOfSecond();
        org.joda.time.MutableDateTime.Property property87 = new org.joda.time.MutableDateTime.Property(mutableDateTime73, dateTimeField86);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = dateTimeField86.getType();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField92 = new org.joda.time.field.OffsetDateTimeField(dateTimeField60, dateTimeFieldType88, 35, (int) (byte) 18, 57600000);
        int int93 = mutableDateTime34.get(dateTimeFieldType88);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField94 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType88);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 6L + "'", long13 == 6L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 946857600000L + "'", long15 == 946857600000L);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[1969-01-20T00:00:00.005+00:00:00.005]" + "'", str18, "ISOChronology[1969-01-20T00:00:00.005+00:00:00.005]");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(gregorianChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(cachedDateTimeZone72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertNotNull(iSOChronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(gregorianChronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 5 + "'", int93 == 5);
    }

    @Test
    public void test743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test743");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        mutableDateTime4.addYears((int) '#');
        int int7 = mutableDateTime4.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime4.getZone();
        long long10 = dateTimeZone8.previousTransition(3155673600000L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2005 + "'", int7 == 2005);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3155673600000L + "'", long10 == 3155673600000L);
    }

    @Test
    public void test744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test744");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.hourOfDay();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property5.getAsText(locale7);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendShortText(dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.IllegalFieldValueException illegalFieldValueException16 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType12, (java.lang.Number) 3, (java.lang.Number) 60000L, (java.lang.Number) 0L);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder9.appendShortText(dateTimeFieldType12);
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology18.era();
        org.joda.time.DurationField durationField22 = gregorianChronology18.seconds();
        org.joda.time.DurationField durationField23 = gregorianChronology18.millis();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology18.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str26 = dateTimeFieldType25.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField28 = new org.joda.time.field.RemainderDateTimeField(dateTimeField24, dateTimeFieldType25, (int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder17.appendFixedDecimal(dateTimeFieldType25, 35);
        boolean boolean31 = property5.equals((java.lang.Object) dateTimeFormatterBuilder17);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder17.appendFractionOfSecond(5270400, 0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "16" + "'", str8, "16");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "monthOfYear" + "'", str26, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
    }

    @Test
    public void test745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test745");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.MutableDateTime mutableDateTime9 = property5.roundHalfEven();
        java.lang.String str10 = mutableDateTime9.toString();
        int int11 = mutableDateTime9.getMillisOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2024-04-02T00:00:00.000+16:00" + "'", str10, "2024-04-02T00:00:00.000+16:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test746");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withZone(dateTimeZone11);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone13 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone11);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone11.getName(0L, locale15);
        org.joda.time.DateTime dateTime17 = mutableDateTime2.toDateTime(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime2.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.addWrapField(9);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(cachedDateTimeZone13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+02:09" + "'", str16, "+02:09");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test747");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendDayOfYear((int) (short) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendYear((int) (byte) 10, (int) (byte) 15);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendLiteral('#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder0.appendDayOfYear((int) (byte) 13);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0, chronology14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType17, 100, 5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
    }

    @Test
    public void test748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test748");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean9 = dateTimeFieldType7.isSupported((org.joda.time.Chronology) gregorianChronology8);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        long long14 = dividedDateTimeField11.set((long) (byte) 4, (int) '#');
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField17 = new org.joda.time.field.PreciseDurationField(durationFieldType15, (-9467020800000L));
        java.lang.String str18 = preciseDurationField17.getName();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology37.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology42 = gregorianChronology37.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology37.millisOfSecond();
        org.joda.time.MutableDateTime.Property property44 = new org.joda.time.MutableDateTime.Property(mutableDateTime30, dateTimeField43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField43.getType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField46 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, (org.joda.time.DurationField) preciseDurationField17, dateTimeFieldType45);
        long long49 = dividedDateTimeField11.add((long) 99, (long) (byte) 5);
        long long51 = dividedDateTimeField11.remainder((long) 287980);
        long long53 = dividedDateTimeField11.roundFloor(9223372036854775807L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 50491123200004L + "'", long14 == 50491123200004L);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "years" + "'", str18, "years");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 15778627200099L + "'", long49 == 15778627200099L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 287980L + "'", long51 == 287980L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 9223370596886400000L + "'", long53 == 9223370596886400000L);
    }

    @Test
    public void test749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test749");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
    }

    @Test
    public void test750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test750");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str11 = mutableDateTime2.toString(dateTimeFormatter10);
        mutableDateTime2.addMinutes(20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder14.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder17.appendYear((int) (byte) 100, (int) (byte) 19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 0, chronology22);
        mutableDateTime23.setMonthOfYear(5);
        mutableDateTime23.setDayOfYear((int) (byte) 19);
        boolean boolean28 = mutableDateTime23.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone31 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime23.toMutableDateTime(dateTimeZone30);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.minuteOfDay();
        int int34 = mutableDateTime32.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.dayOfWeek();
        mutableDateTime32.setRounding(dateTimeField36, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology39 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology39.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology39.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology44 = gregorianChronology39.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = gregorianChronology39.millisOfSecond();
        org.joda.time.MutableDateTime.Property property46 = new org.joda.time.MutableDateTime.Property(mutableDateTime32, dateTimeField45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = dateTimeField45.getType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder20.appendFixedDecimal(dateTimeFieldType47, (int) (byte) 23);
        int int50 = mutableDateTime2.get(dateTimeFieldType47);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime2.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "19700101T160000.000+1600" + "'", str11, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(cachedDateTimeZone31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(gregorianChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test751");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder3.appendYear((int) (byte) 100, (int) (byte) 19);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0, chronology8);
        mutableDateTime9.setMonthOfYear(5);
        mutableDateTime9.setDayOfYear((int) (byte) 19);
        boolean boolean14 = mutableDateTime9.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime9.toMutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.minuteOfDay();
        int int20 = mutableDateTime18.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfWeek();
        mutableDateTime18.setRounding(dateTimeField22, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology25 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology25.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology30 = gregorianChronology25.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gregorianChronology25.millisOfSecond();
        org.joda.time.MutableDateTime.Property property32 = new org.joda.time.MutableDateTime.Property(mutableDateTime18, dateTimeField31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = dateTimeField31.getType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder6.appendFixedDecimal(dateTimeFieldType33, (int) (byte) 23);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder6.appendSignedDecimal(dateTimeFieldType36, 0, 365);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder6.appendMinuteOfDay((int) (byte) 13);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder42.appendYearOfEra((int) ' ', (int) (byte) 23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap46 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder42.appendTimeZoneName(strMap46);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap48 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder47.appendTimeZoneShortName(strMap48);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder6.appendTimeZoneShortName(strMap48);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder50.appendSecondOfDay(12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(gregorianChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
    }

    @Test
    public void test752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test752");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        int int20 = mutableDateTime12.getYearOfCentury();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 0, chronology22);
        mutableDateTime23.setMonthOfYear(5);
        mutableDateTime23.setDayOfYear((int) (byte) 19);
        boolean boolean28 = mutableDateTime23.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone31 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime23.toMutableDateTime(dateTimeZone30);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.minuteOfDay();
        mutableDateTime32.addYears((int) (byte) 23);
        int int36 = mutableDateTime32.getMillisOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime37.add(readableDuration38, 10);
        int int41 = mutableDateTime37.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime37.dayOfWeek();
        boolean boolean44 = property42.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField45 = property42.getField();
        org.joda.time.MutableDateTime mutableDateTime46 = property42.roundHalfEven();
        mutableDateTime32.setTime((org.joda.time.ReadableInstant) mutableDateTime46);
        mutableDateTime46.addSeconds(69);
        mutableDateTime12.setTime((org.joda.time.ReadableInstant) mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 57600000 + "'", int13 == 57600000);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 70 + "'", int20 == 70);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(cachedDateTimeZone31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 14 + "'", int41 == 14);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
    }

    @Test
    public void test753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test753");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        java.lang.String str14 = mutableDateTime11.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16, 10);
        int int19 = mutableDateTime15.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.dayOfWeek();
        boolean boolean22 = property20.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval23 = property20.toInterval();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 0, chronology25);
        mutableDateTime26.setMonthOfYear(5);
        mutableDateTime26.setDayOfYear((int) (byte) 19);
        boolean boolean31 = mutableDateTime26.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone34 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime26.toMutableDateTime(dateTimeZone33);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.minuteOfDay();
        mutableDateTime35.addYears((int) (byte) 23);
        mutableDateTime35.setSecondOfDay((int) (byte) 15);
        boolean boolean41 = interval23.isBefore((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.ReadableInterval readableInterval42 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration43 = readableInterval42.toDuration();
        mutableDateTime11.add((org.joda.time.ReadableDuration) duration43);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-19T00:00:00.005+00:00:00.005" + "'", str14, "1970-01-19T00:00:00.005+00:00:00.005");
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 14 + "'", int19 == 14);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(cachedDateTimeZone34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(readableInterval42);
        org.junit.Assert.assertNotNull(duration43);
    }

    @Test
    public void test754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test754");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        long long9 = gregorianChronology0.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField10 = gregorianChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology0.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter12.withZone(dateTimeZone15);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone15.getName(0L, locale19);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology0, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology21.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = zonedChronology21.getZone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 0, chronology25);
        mutableDateTime26.setMonthOfYear(5);
        mutableDateTime26.setMillis(0L);
        mutableDateTime26.setMillisOfSecond((int) (byte) 0);
        int int33 = mutableDateTime26.getEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology34 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology34.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology39 = gregorianChronology34.withZone(dateTimeZone38);
        long long43 = gregorianChronology34.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField44 = gregorianChronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = gregorianChronology34.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter46.withZone(dateTimeZone49);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone51 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone49);
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeZone49.getName(0L, locale53);
        org.joda.time.chrono.ZonedChronology zonedChronology55 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology34, dateTimeZone49);
        mutableDateTime26.setZoneRetainFields(dateTimeZone49);
        org.joda.time.Chronology chronology57 = zonedChronology21.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology21.centuryOfEra();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 910L + "'", long9 == 910L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+02:09" + "'", str20, "+02:09");
        org.junit.Assert.assertNotNull(zonedChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(gregorianChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 910L + "'", long43 == 910L);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(cachedDateTimeZone51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+02:09" + "'", str54, "+02:09");
        org.junit.Assert.assertNotNull(zonedChronology55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test755");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        int int12 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.dayOfMonth();
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField15 = gregorianChronology14.months();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology14.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology14.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology14.yearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 0, chronology23);
        mutableDateTime24.setMonthOfYear(5);
        mutableDateTime24.setDayOfYear((int) (byte) 19);
        boolean boolean29 = mutableDateTime24.isAfterNow();
        int int32 = dateTimeFormatter21.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime24, "monthOfYear", (int) (byte) 10);
        mutableDateTime24.addSeconds(10);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone37 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone36);
        java.lang.Object obj38 = cachedDateTimeZone37.writeReplace();
        mutableDateTime24.setZone((org.joda.time.DateTimeZone) cachedDateTimeZone37);
        boolean boolean40 = cachedDateTimeZone37.isFixed();
        org.joda.time.Chronology chronology41 = gregorianChronology14.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone37);
        org.joda.time.DateTime dateTime42 = mutableDateTime2.toDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 960 + "'", int12 == 960);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-11) + "'", int32 == (-11));
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(cachedDateTimeZone37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test756");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((int) (byte) 8, 2, (-292275054), 7, 0, (-28800000), 0, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -28800000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test757");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfDay(10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendDayOfWeek(105);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 105, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder1);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
    }

    @Test
    public void test758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test758");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology12 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology12.yearOfEra();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray23 = dateTimeField13.add(readablePartial14, 0, intArray21, 0);
        int int24 = remainderDateTimeField10.getMaximumValue(readablePartial11, intArray21);
        long long26 = remainderDateTimeField10.roundHalfFloor((long) 23);
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology27.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = gregorianChronology27.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = gregorianChronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology27.weekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime38 = dateTimeFormatter36.parseLocalTime("99");
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology40.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology40.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology40.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial44 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology45 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField46 = gregorianChronology45.months();
        org.joda.time.DateTimeField dateTimeField47 = gregorianChronology45.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gregorianChronology45.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology45.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology45.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = gregorianChronology45.getZone();
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration53 = null;
        mutableDateTime52.add(readableDuration53, 10);
        int int56 = mutableDateTime52.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime52.dayOfWeek();
        boolean boolean59 = property57.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval60 = property57.toInterval();
        org.joda.time.Period period61 = interval60.toPeriod();
        int[] intArray64 = gregorianChronology45.get((org.joda.time.ReadablePeriod) period61, (long) 57600000, (long) (byte) 10);
        int int65 = dateTimeField43.getMaximumValue(readablePartial44, intArray64);
        int[] intArray67 = dateTimeField35.set((org.joda.time.ReadablePartial) localTime38, 5, intArray64, 960);
        org.joda.time.chrono.GregorianChronology gregorianChronology69 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField70 = gregorianChronology69.yearOfEra();
        org.joda.time.ReadablePartial readablePartial71 = null;
        int[] intArray78 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray80 = dateTimeField70.add(readablePartial71, 0, intArray78, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray82 = remainderDateTimeField10.set((org.joda.time.ReadablePartial) localTime38, 38, intArray78, (int) (byte) 8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 38");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(gregorianChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(gregorianChronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 14 + "'", int56 == 14);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 0, 0, -15, 960, -59, -990]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 99 + "'", int65 == 99);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, 0, 0, -15, 960, -59, -990]");
        org.junit.Assert.assertNotNull(gregorianChronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 0, 97, 23, 5]");
    }

    @Test
    public void test759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test759");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        mutableDateTime3.addMonths((-28800000));
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime3.add(readableDuration14, 20);
        mutableDateTime3.addWeekyears(20);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = dateTimeField20.getType();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField23 = new org.joda.time.field.OffsetDateTimeField(dateTimeField20, (int) (byte) 11);
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.Locale locale26 = null;
        java.lang.String str27 = offsetDateTimeField23.getAsText(readablePartial24, (int) 'a', locale26);
        org.joda.time.chrono.GregorianChronology gregorianChronology28 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology28.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology33 = gregorianChronology28.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology28.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology36 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean37 = dateTimeFieldType35.isSupported((org.joda.time.Chronology) gregorianChronology36);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField(dateTimeField34, dateTimeFieldType35, (int) (short) 100);
        int int41 = dividedDateTimeField39.getLeapAmount(910L);
        java.lang.String str43 = dividedDateTimeField39.getAsText((-2L));
        org.joda.time.chrono.GregorianChronology gregorianChronology44 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = gregorianChronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField46 = gregorianChronology44.secondOfDay();
        org.joda.time.DateTimeField dateTimeField47 = gregorianChronology44.era();
        org.joda.time.DurationField durationField48 = gregorianChronology44.seconds();
        org.joda.time.DurationField durationField49 = gregorianChronology44.millis();
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology44.secondOfDay();
        java.lang.Object obj51 = null;
        boolean boolean52 = gregorianChronology44.equals(obj51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime55 = dateTimeFormatter53.parseLocalTime("99");
        long long57 = gregorianChronology44.set((org.joda.time.ReadablePartial) localTime55, 999L);
        org.joda.time.chrono.ISOChronology iSOChronology58 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology58.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology58.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology58.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial62 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology63 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField64 = gregorianChronology63.months();
        org.joda.time.DateTimeField dateTimeField65 = gregorianChronology63.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField66 = gregorianChronology63.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField67 = gregorianChronology63.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField68 = gregorianChronology63.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone69 = gregorianChronology63.getZone();
        org.joda.time.MutableDateTime mutableDateTime70 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration71 = null;
        mutableDateTime70.add(readableDuration71, 10);
        int int74 = mutableDateTime70.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime70.dayOfWeek();
        boolean boolean77 = property75.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval78 = property75.toInterval();
        org.joda.time.Period period79 = interval78.toPeriod();
        int[] intArray82 = gregorianChronology63.get((org.joda.time.ReadablePeriod) period79, (long) 57600000, (long) (byte) 10);
        int int83 = dateTimeField61.getMaximumValue(readablePartial62, intArray82);
        int int84 = dividedDateTimeField39.getMinimumValue((org.joda.time.ReadablePartial) localTime55, intArray82);
        java.util.Locale locale86 = null;
        java.lang.String str87 = offsetDateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localTime55, (int) (byte) -1, locale86);
        int int88 = mutableDateTime3.get((org.joda.time.DateTimeField) offsetDateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "97" + "'", str27, "97");
        org.junit.Assert.assertNotNull(gregorianChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(gregorianChronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "19" + "'", str43, "19");
        org.junit.Assert.assertNotNull(gregorianChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(gregorianChronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 14 + "'", int74 == 14);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 0, 0, 0, -15, -59, -59, -990]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 99 + "'", int83 == 99);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-2922751) + "'", int84 == (-2922751));
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "-1" + "'", str87, "-1");
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 12 + "'", int88 == 12);
    }

    @Test
    public void test760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test760");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        long long9 = gregorianChronology0.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField10 = gregorianChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology0.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter12.withZone(dateTimeZone15);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone15.getName(0L, locale19);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology0, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology21.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = zonedChronology21.getZone();
        java.lang.String str24 = zonedChronology21.toString();
        org.joda.time.chrono.GregorianChronology gregorianChronology25 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology25.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology30 = gregorianChronology25.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gregorianChronology25.minutes();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.chrono.GregorianChronology gregorianChronology34 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone33);
        org.joda.time.Chronology chronology35 = gregorianChronology25.withZone(dateTimeZone33);
        boolean boolean36 = zonedChronology21.equals((java.lang.Object) dateTimeZone33);
        org.joda.time.DurationField durationField37 = zonedChronology21.centuries();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) 0, chronology40);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = property42.roundHalfFloor();
        java.lang.String str44 = property42.toString();
        boolean boolean45 = zonedChronology21.equals((java.lang.Object) property42);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 910L + "'", long9 == 910L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+02:09" + "'", str20, "+02:09");
        org.junit.Assert.assertNotNull(zonedChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ZonedChronology[GregorianChronology[UTC], +02:09]" + "'", str24, "ZonedChronology[GregorianChronology[UTC], +02:09]");
        org.junit.Assert.assertNotNull(gregorianChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(gregorianChronology34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Property[secondOfDay]" + "'", str44, "Property[secondOfDay]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test761");
        java.lang.Object obj0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        long long7 = gregorianChronology1.add(readablePeriod4, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(obj0, (org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField((int) (byte) 7);
        mutableDateTime12.setWeekOfWeekyear(2);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test762");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = unsupportedDateTimeField61.getType();
        long long65 = unsupportedDateTimeField61.getDifferenceAsLong((long) 52, (long) (-475129));
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = unsupportedDateTimeField61.getType();
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
    }

    @Test
    public void test763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test763");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = interval8.toPeriod(periodType10);
        java.lang.String str12 = interval8.toString();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(period11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2024-04-01T00:00:00.000+16:00/2024-04-02T00:00:00.000+16:00" + "'", str12, "2024-04-01T00:00:00.000+16:00/2024-04-02T00:00:00.000+16:00");
    }

    @Test
    public void test764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test764");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        int int7 = mutableDateTime2.getMillisOfDay();
        mutableDateTime2.setDate((-31449599969L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 57600000 + "'", int7 == 57600000);
    }

    @Test
    public void test765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test765");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(83, 5845578, 0, 152, 0, (-28799073), (-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 152 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test766");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0, chronology10);
        mutableDateTime11.setMonthOfYear(5);
        mutableDateTime11.setDayOfYear((int) (byte) 19);
        boolean boolean16 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime11.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.minuteOfDay();
        mutableDateTime20.addYears((int) (byte) 23);
        mutableDateTime20.setSecondOfDay((int) (byte) 15);
        boolean boolean26 = interval8.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology27.era();
        org.joda.time.DurationField durationField31 = gregorianChronology27.seconds();
        org.joda.time.DurationField durationField32 = gregorianChronology27.millis();
        org.joda.time.DateTimeZone dateTimeZone33 = gregorianChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology27.hourOfDay();
        boolean boolean35 = interval8.equals((java.lang.Object) gregorianChronology27);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime36.add(readableDuration37, 10);
        int int40 = mutableDateTime36.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfWeek();
        boolean boolean43 = property41.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval44 = property41.toInterval();
        org.joda.time.Period period45 = interval44.toPeriod();
        boolean boolean46 = interval8.overlaps((org.joda.time.ReadableInterval) interval44);
        java.lang.String str47 = interval8.toString();
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration49 = null;
        mutableDateTime48.add(readableDuration49, 10);
        int int52 = mutableDateTime48.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime48.dayOfWeek();
        boolean boolean55 = property53.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval56 = property53.toInterval();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval56.toPeriod(periodType57);
        org.joda.time.PeriodType periodType59 = period58.getPeriodType();
        org.joda.time.PeriodType periodType60 = org.joda.time.DateTimeUtils.getPeriodType(periodType59);
        org.joda.time.Period period61 = interval8.toPeriod(periodType59);
        long long62 = interval8.getEndMillis();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mutableDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 14 + "'", int40 == 14);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2024-04-01T00:00:00.000+16:00/2024-04-02T00:00:00.000+16:00" + "'", str47, "2024-04-01T00:00:00.000+16:00/2024-04-02T00:00:00.000+16:00");
        org.junit.Assert.assertNotNull(mutableDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 14 + "'", int52 == 14);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period61);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1711958400000L + "'", long62 == 1711958400000L);
    }

    @Test
    public void test767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test767");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField11 = gregorianChronology10.months();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology10.dayOfYear();
        mutableDateTime2.setChronology((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 0, chronology16);
        mutableDateTime17.setMonthOfYear(5);
        mutableDateTime17.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException24 = new org.joda.time.IllegalFieldValueException(durationFieldType22, "");
        java.lang.Throwable[] throwableArray25 = illegalFieldValueException24.getSuppressed();
        boolean boolean26 = mutableDateTime17.equals((java.lang.Object) illegalFieldValueException24);
        mutableDateTime17.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime17.add(readableDuration29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableDateTime17.add(readablePeriod31, 0);
        mutableDateTime17.setYear((-28800000));
        mutableDateTime17.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 0, chronology39);
        mutableDateTime40.setMonthOfYear(5);
        mutableDateTime40.setDayOfYear((int) (byte) 19);
        boolean boolean45 = mutableDateTime40.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone48 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime40.toMutableDateTime(dateTimeZone47);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.minuteOfDay();
        int int51 = mutableDateTime49.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology52.dayOfWeek();
        mutableDateTime49.setRounding(dateTimeField53, 5);
        int int56 = mutableDateTime49.getDayOfMonth();
        boolean boolean57 = mutableDateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime17.era();
        java.lang.String str59 = property58.getName();
        org.joda.time.MutableDateTime mutableDateTime60 = property58.getMutableDateTime();
        mutableDateTime60.setSecondOfDay((int) (byte) 19);
        boolean boolean63 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime60);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(cachedDateTimeZone48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 19 + "'", int56 == 19);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "era" + "'", str59, "era");
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test768");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology14.monthOfYear();
        org.joda.time.DateTime dateTime18 = mutableDateTime2.toDateTime((org.joda.time.Chronology) gregorianChronology14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.secondOfDay();
        boolean boolean23 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime2.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone28 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone27);
        boolean boolean29 = dateTimeZone27.isFixed();
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime2.toMutableDateTime(dateTimeZone27);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(cachedDateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test769");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval8);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11, 10);
        int int14 = mutableDateTime10.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.dayOfWeek();
        boolean boolean17 = property15.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval18 = property15.toInterval();
        org.joda.time.Period period19 = interval18.toPeriod();
        boolean boolean20 = interval8.overlaps((org.joda.time.ReadableInterval) interval18);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22, 10);
        int int25 = mutableDateTime21.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime21.dayOfWeek();
        boolean boolean28 = property26.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval29 = property26.toInterval();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = interval29.toPeriod(periodType30);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33, 10);
        int int36 = mutableDateTime32.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime32.dayOfWeek();
        boolean boolean39 = property37.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval40 = property37.toInterval();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = interval40.toPeriod(periodType41);
        org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval40);
        boolean boolean44 = interval29.overlaps((org.joda.time.ReadableInterval) interval40);
        org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval40);
        boolean boolean46 = interval8.isBefore(readableInterval45);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48, 10);
        int int51 = mutableDateTime47.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime47.dayOfWeek();
        boolean boolean54 = property52.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField55 = property52.getField();
        org.joda.time.MutableDateTime mutableDateTime56 = property52.roundHalfEven();
        java.lang.String str57 = mutableDateTime56.toString();
        boolean boolean58 = interval8.isAfter((org.joda.time.ReadableInstant) mutableDateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 14 + "'", int14 == 14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(mutableDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 14 + "'", int25 == 14);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 14 + "'", int36 == 14);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(readableInterval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(readableInterval45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(mutableDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 14 + "'", int51 == 14);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2024-04-02T00:00:00.000+16:00" + "'", str57, "2024-04-02T00:00:00.000+16:00");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test770");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean9 = dateTimeFieldType7.isSupported((org.joda.time.Chronology) gregorianChronology8);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        long long14 = dividedDateTimeField11.set((long) (byte) 4, (int) '#');
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField17 = new org.joda.time.field.PreciseDurationField(durationFieldType15, (-9467020800000L));
        java.lang.String str18 = preciseDurationField17.getName();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology37.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology42 = gregorianChronology37.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology37.millisOfSecond();
        org.joda.time.MutableDateTime.Property property44 = new org.joda.time.MutableDateTime.Property(mutableDateTime30, dateTimeField43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField43.getType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField46 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, (org.joda.time.DurationField) preciseDurationField17, dateTimeFieldType45);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField48 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, 2922789);
        long long50 = offsetDateTimeField48.roundHalfEven((long) (byte) 5);
        long long52 = offsetDateTimeField48.roundFloor(6324013180800000L);
        long long55 = offsetDateTimeField48.addWrapField((long) 24, 99);
        // The following exception was thrown during execution in test generation
        try {
            long long58 = offsetDateTimeField48.add(1711935273819L, (-918301017600000L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -91830101760000000");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 50491123200004L + "'", long14 == 50491123200004L);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "years" + "'", str18, "years");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 946857600000L + "'", long50 == 946857600000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 6321804192000000L + "'", long52 == 6321804192000000L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 312414278400024L + "'", long55 == 312414278400024L);
    }

    @Test
    public void test771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test771");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        java.lang.Object obj3 = dateTimeZone0.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime4.addYears(960);
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology7.secondOfMinute();
        org.joda.time.MutableDateTime.Property property13 = new org.joda.time.MutableDateTime.Property(mutableDateTime4, dateTimeField12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0, chronology15);
        mutableDateTime16.setMonthOfYear(5);
        mutableDateTime16.setDayOfYear((int) (byte) 19);
        boolean boolean21 = mutableDateTime16.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone24 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime16.toMutableDateTime(dateTimeZone23);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.minuteOfDay();
        int int27 = mutableDateTime25.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfWeek();
        mutableDateTime25.setRounding(dateTimeField29, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology32 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = gregorianChronology32.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology32.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology37 = gregorianChronology32.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology32.millisOfSecond();
        org.joda.time.MutableDateTime.Property property39 = new org.joda.time.MutableDateTime.Property(mutableDateTime25, dateTimeField38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = dateTimeField38.getType();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField44 = new org.joda.time.field.OffsetDateTimeField(dateTimeField12, dateTimeFieldType40, 35, (int) (byte) 18, 57600000);
        org.joda.time.DurationField durationField45 = offsetDateTimeField44.getRangeDurationField();
        long long47 = offsetDateTimeField44.roundHalfCeiling(6327169027200005L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(cachedDateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(gregorianChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 6327169027200000L + "'", long47 == 6327169027200000L);
    }

    @Test
    public void test772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test772");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.weekyear();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test773");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology0.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6, 10);
        int int9 = mutableDateTime5.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime5.dayOfWeek();
        boolean boolean12 = property10.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval13 = property10.toInterval();
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval13);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16, 10);
        int int19 = mutableDateTime15.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.dayOfWeek();
        boolean boolean22 = property20.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval23 = property20.toInterval();
        org.joda.time.Period period24 = interval23.toPeriod();
        boolean boolean25 = interval13.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Period period26 = interval13.toPeriod();
        int[] intArray28 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period26, (-259200000L));
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 14 + "'", int9 == 14);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 14 + "'", int19 == 14);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, -3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test774");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((-2678400000L));
        mutableDateTime1.setYear((-10));
        mutableDateTime1.setMinuteOfDay((int) '#');
        int int6 = mutableDateTime1.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
    }

    @Test
    public void test775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test775");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        mutableDateTime2.addWeeks((int) (short) -1);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime2.dayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test776");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = interval8.toPeriod(periodType9);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12, 10);
        int int15 = mutableDateTime11.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.dayOfWeek();
        boolean boolean18 = property16.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval19 = property16.toInterval();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = interval19.toPeriod(periodType20);
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval19);
        boolean boolean23 = interval8.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTime dateTime25 = readableInterval24.getEnd();
        org.joda.time.DateTime dateTime26 = readableInterval24.getStart();
        org.joda.time.DateTime dateTime27 = readableInterval24.getEnd();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 14 + "'", int15 == 14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test777");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.basicDate();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9, 10);
        int int12 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.dayOfWeek();
        mutableDateTime8.addYears(1);
        java.lang.String str16 = dateTimeFormatter7.print((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone22 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone20);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone20.getName(0L, locale24);
        java.lang.Object obj26 = dateTimeZone20.writeReplace();
        mutableDateTime8.setZone(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone20.isLocalDateTimeGap(localDateTime28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(50410, 0, (int) (byte) 6, 23, (int) (byte) 5, (-28798031), 14, dateTimeZone20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -28798031 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 14 + "'", int12 == 14);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "20250401" + "'", str16, "20250401");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(cachedDateTimeZone22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+02:09" + "'", str25, "+02:09");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test778");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean19 = dateTimeFieldType17.isSupported((org.joda.time.Chronology) gregorianChronology18);
        int int20 = mutableDateTime11.get(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime11.toMutableDateTime(dateTimeZone21);
        boolean boolean25 = mutableDateTime23.isAfter(0L);
        java.lang.Object obj26 = mutableDateTime23.clone();
        int int27 = mutableDateTime23.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.yearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+16:00");
        org.junit.Assert.assertNotNull(mutableDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "1970-01-19T17:00:00.000+16:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-19T17:00:00.000+16:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-19T17:00:00.000+16:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test779");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        java.lang.String str2 = iSOChronology0.toString();
        java.lang.String str3 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField5 = iSOChronology0.eras();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0, chronology8);
        mutableDateTime9.setMonthOfYear(5);
        mutableDateTime9.setDayOfYear((int) (byte) 19);
        boolean boolean14 = mutableDateTime9.isAfterNow();
        int int17 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "monthOfYear", (int) (byte) 10);
        mutableDateTime9.addSeconds(10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone22 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone21);
        java.lang.Object obj23 = cachedDateTimeZone22.writeReplace();
        mutableDateTime9.setZone((org.joda.time.DateTimeZone) cachedDateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = cachedDateTimeZone22.getUncachedZone();
        boolean boolean26 = cachedDateTimeZone22.isFixed();
        org.joda.time.Chronology chronology27 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone22);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[1969-01-20T00:00:00.005+00:00:00.005]" + "'", str2, "ISOChronology[1969-01-20T00:00:00.005+00:00:00.005]");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISOChronology[1969-01-20T00:00:00.005+00:00:00.005]" + "'", str3, "ISOChronology[1969-01-20T00:00:00.005+00:00:00.005]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-11) + "'", int17 == (-11));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(cachedDateTimeZone22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test780");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        mutableDateTime2.setMillisOfDay(91);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime2.copy();
        mutableDateTime2.setDayOfMonth((int) (byte) 18);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test781");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        int int18 = mutableDateTime11.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.millisOfSecond();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property19.getAsShortText(locale20);
        org.joda.time.MutableDateTime mutableDateTime23 = property19.add((long) (byte) 8);
        org.joda.time.Interval interval24 = property19.toInterval();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "5" + "'", str21, "5");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(interval24);
    }

    @Test
    public void test782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test782");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean9 = dateTimeFieldType7.isSupported((org.joda.time.Chronology) gregorianChronology8);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        long long14 = dividedDateTimeField11.getDifferenceAsLong(0L, (-220L));
        java.lang.String str16 = dividedDateTimeField11.getAsShortText((long) (-11));
        int int17 = dividedDateTimeField11.getDivisor();
        long long20 = dividedDateTimeField11.getDifferenceAsLong((long) (short) 10, (long) 19);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dividedDateTimeField11.getAsShortText(6251432339477249L, locale22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter24.withZone(dateTimeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter24.withDefaultYear(0);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology31.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.chrono.GregorianChronology gregorianChronology35 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField36 = gregorianChronology35.months();
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology35.weekyear();
        org.joda.time.DateTimeZone dateTimeZone38 = gregorianChronology35.getZone();
        java.lang.String str39 = dateTimeZone38.toString();
        boolean boolean40 = iSOChronology31.equals((java.lang.Object) str39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter24.withChronology((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime44 = dateTimeFormatter42.parseLocalTime("99");
        int[] intArray46 = iSOChronology31.get((org.joda.time.ReadablePartial) localTime44, 86399995L);
        java.util.Locale locale48 = null;
        java.lang.String str49 = dividedDateTimeField11.getAsText((org.joda.time.ReadablePartial) localTime44, (-1169100216), locale48);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "19" + "'", str16, "19");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2000" + "'", str23, "2000");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(gregorianChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[15, 59, 59, 995]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1169100216" + "'", str49, "-1169100216");
    }

    @Test
    public void test783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test783");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDate();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2, 10);
        int int5 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addYears(1);
        java.lang.String str9 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter10.withZone(dateTimeZone13);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone15 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone13);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone13.getName(0L, locale17);
        java.lang.Object obj19 = dateTimeZone13.writeReplace();
        mutableDateTime1.setZone(dateTimeZone13);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 14 + "'", int5 == 14);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "20250401" + "'", str9, "20250401");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(cachedDateTimeZone15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+02:09" + "'", str18, "+02:09");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test784");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        int int12 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.secondOfDay();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 960 + "'", int12 == 960);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test785");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.DurationField durationField19 = remainderDateTimeField17.getRangeDurationField();
        org.joda.time.chrono.GregorianChronology gregorianChronology20 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology20.era();
        org.joda.time.DurationField durationField24 = gregorianChronology20.seconds();
        org.joda.time.DurationField durationField25 = gregorianChronology20.millis();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology20.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str28 = dateTimeFieldType27.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField30 = new org.joda.time.field.RemainderDateTimeField(dateTimeField26, dateTimeFieldType27, (int) (short) 100);
        org.joda.time.ReadablePartial readablePartial31 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology32 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = gregorianChronology32.yearOfEra();
        org.joda.time.ReadablePartial readablePartial34 = null;
        int[] intArray41 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray43 = dateTimeField33.add(readablePartial34, 0, intArray41, 0);
        int int44 = remainderDateTimeField30.getMaximumValue(readablePartial31, intArray41);
        long long46 = remainderDateTimeField30.roundHalfFloor(0L);
        long long49 = remainderDateTimeField30.getDifferenceAsLong((long) (byte) 13, (long) 1);
        java.lang.String str51 = remainderDateTimeField30.getAsShortText((long) 1969);
        long long54 = remainderDateTimeField30.set((-1735689599965L), 99);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter55.withZone(dateTimeZone58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter55.withDefaultYear(0);
        org.joda.time.chrono.ISOChronology iSOChronology62 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology62.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology62.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology62);
        org.joda.time.chrono.GregorianChronology gregorianChronology66 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField67 = gregorianChronology66.months();
        org.joda.time.DateTimeField dateTimeField68 = gregorianChronology66.weekyear();
        org.joda.time.DateTimeZone dateTimeZone69 = gregorianChronology66.getZone();
        java.lang.String str70 = dateTimeZone69.toString();
        boolean boolean71 = iSOChronology62.equals((java.lang.Object) str70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter55.withChronology((org.joda.time.Chronology) iSOChronology62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime75 = dateTimeFormatter73.parseLocalTime("99");
        int[] intArray77 = iSOChronology62.get((org.joda.time.ReadablePartial) localTime75, 86399995L);
        java.util.Locale locale79 = null;
        java.lang.String str80 = remainderDateTimeField30.getAsText((org.joda.time.ReadablePartial) localTime75, 0, locale79);
        int int81 = remainderDateTimeField17.getMinimumValue((org.joda.time.ReadablePartial) localTime75);
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(gregorianChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "monthOfYear" + "'", str28, "monthOfYear");
        org.junit.Assert.assertNotNull(gregorianChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 99 + "'", int44 == 99);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1735689500965L) + "'", long54 == (-1735689500965L));
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(iSOChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(gregorianChronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "UTC" + "'", str70, "UTC");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[15, 59, 59, 995]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "0" + "'", str80, "0");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test786");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DurationField durationField6 = gregorianChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone8);
        org.joda.time.Chronology chronology10 = gregorianChronology0.withZone(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0, chronology14);
        mutableDateTime15.setMonthOfYear(5);
        mutableDateTime15.setDayOfYear((int) (byte) 19);
        boolean boolean20 = mutableDateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone23 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime15.toMutableDateTime(dateTimeZone22);
        int int25 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) mutableDateTime24);
        int int26 = mutableDateTime24.getDayOfMonth();
        boolean boolean28 = mutableDateTime24.isBefore(959L);
        boolean boolean29 = mutableDateTime11.isAfter((org.joda.time.ReadableInstant) mutableDateTime24);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(cachedDateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 57600000 + "'", int25 == 57600000);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test787");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0, chronology6);
        mutableDateTime7.setMonthOfYear(5);
        mutableDateTime7.setDayOfYear((int) (byte) 19);
        boolean boolean12 = mutableDateTime7.isAfterNow();
        int int15 = dateTimeFormatter4.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime7, "monthOfYear", (int) (byte) 10);
        int int16 = mutableDateTime7.getDayOfMonth();
        boolean boolean17 = iSOChronology0.equals((java.lang.Object) mutableDateTime7);
        mutableDateTime7.add(13132800035L);
        org.joda.time.chrono.GregorianChronology gregorianChronology20 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology20.era();
        org.joda.time.DurationField durationField24 = gregorianChronology20.seconds();
        org.joda.time.DurationField durationField25 = gregorianChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology20.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime7, (org.joda.time.Chronology) gregorianChronology20);
        mutableDateTime7.setWeekyear(5270400);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-11) + "'", int15 == (-11));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(gregorianChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test788");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.MutableDateTime mutableDateTime9 = property5.roundHalfEven();
        org.joda.time.DurationField durationField10 = property5.getDurationField();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test789");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.set("10");
        int int7 = mutableDateTime6.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime6.getZone();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone8);
    }

    @Test
    public void test790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test790");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        mutableDateTime2.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        int int41 = mutableDateTime34.getDayOfMonth();
        boolean boolean42 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime2.era();
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45, 10);
        int int48 = mutableDateTime44.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime44.dayOfWeek();
        boolean boolean51 = property49.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval52 = property49.toInterval();
        org.joda.time.Period period53 = interval52.toPeriod();
        int int54 = period53.size();
        org.joda.time.Period period55 = period53.toPeriod();
        mutableDateTime2.add((org.joda.time.ReadablePeriod) period53, 13);
        mutableDateTime2.addHours((int) (short) -1);
        int int60 = mutableDateTime2.getMillisOfSecond();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 14 + "'", int48 == 14);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test791");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0, chronology10);
        mutableDateTime11.setMonthOfYear(5);
        mutableDateTime11.setDayOfYear((int) (byte) 19);
        boolean boolean16 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime11.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.minuteOfDay();
        mutableDateTime20.addYears((int) (byte) 23);
        mutableDateTime20.setSecondOfDay((int) (byte) 15);
        boolean boolean26 = interval8.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology27.era();
        org.joda.time.DurationField durationField31 = gregorianChronology27.seconds();
        org.joda.time.DurationField durationField32 = gregorianChronology27.millis();
        org.joda.time.DateTimeZone dateTimeZone33 = gregorianChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology27.hourOfDay();
        boolean boolean35 = interval8.equals((java.lang.Object) gregorianChronology27);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime36.add(readableDuration37, 10);
        int int40 = mutableDateTime36.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfWeek();
        boolean boolean43 = property41.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval44 = property41.toInterval();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = interval44.toPeriod(periodType45);
        org.joda.time.PeriodType periodType47 = period46.getPeriodType();
        org.joda.time.PeriodType periodType48 = org.joda.time.DateTimeUtils.getPeriodType(periodType47);
        org.joda.time.Period period49 = interval8.toPeriod(periodType48);
        org.joda.time.PeriodType periodType50 = org.joda.time.DateTimeUtils.getPeriodType(periodType48);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mutableDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 14 + "'", int40 == 14);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(periodType50);
    }

    @Test
    public void test792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test792");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.weekOfWeekyear();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology11 = gregorianChronology6.withZone(dateTimeZone10);
        org.joda.time.Chronology chronology12 = gregorianChronology6.withUTC();
        org.joda.time.DurationField durationField13 = gregorianChronology6.minutes();
        org.joda.time.DateTimeField dateTimeField14 = gregorianChronology6.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter15.withZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = gregorianChronology6.withZone(dateTimeZone18);
        org.joda.time.DurationField durationField21 = gregorianChronology6.days();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology6.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime25 = dateTimeFormatter23.parseLocalTime("99");
        int int26 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) localTime25);
        boolean boolean27 = iSOChronology0.equals((java.lang.Object) localTime25);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test793");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        java.lang.Object obj6 = mutableDateTime0.clone();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.dayOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(obj6);
// flaky:         org.junit.Assert.assertEquals(obj6.toString(), "2024-04-01T17:37:45.768+16:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "2024-04-01T17:37:45.768+16:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "2024-04-01T17:37:45.768+16:00");
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test794");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField2 = gregorianChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test795");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfDay(10);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5, 10);
        int int8 = mutableDateTime4.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime4.hourOfDay();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime4.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property10.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder3.appendFraction(dateTimeFieldType11, (int) (short) -1, (-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder1);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
    }

    @Test
    public void test796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test796");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        mutableDateTime11.addYears((int) (byte) 23);
        int int15 = mutableDateTime11.getMillisOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, 10);
        int int20 = mutableDateTime16.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.dayOfWeek();
        boolean boolean23 = property21.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField24 = property21.getField();
        org.joda.time.MutableDateTime mutableDateTime25 = property21.roundHalfEven();
        mutableDateTime11.setTime((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 0, chronology33);
        mutableDateTime34.setMonthOfYear(5);
        mutableDateTime34.setDayOfYear((int) (byte) 19);
        boolean boolean39 = mutableDateTime34.isAfterNow();
        int int42 = dateTimeFormatter31.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime34, "monthOfYear", (int) (byte) 10);
        int int43 = mutableDateTime34.getDayOfMonth();
        boolean boolean44 = iSOChronology27.equals((java.lang.Object) mutableDateTime34);
        org.joda.time.Chronology chronology45 = iSOChronology27.withUTC();
        mutableDateTime25.setChronology((org.joda.time.Chronology) iSOChronology27);
        long long47 = mutableDateTime25.getMillis();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 14 + "'", int20 == 14);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-11) + "'", int42 == (-11));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 19 + "'", int43 == 19);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1711958400000L + "'", long47 == 1711958400000L);
    }

    @Test
    public void test797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test797");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gregorianChronology0);
        org.joda.time.DurationField durationField7 = gregorianChronology0.hours();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9, 10);
        int int12 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.dayOfWeek();
        boolean boolean15 = property13.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval16 = property13.toInterval();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0, chronology18);
        mutableDateTime19.setMonthOfYear(5);
        mutableDateTime19.setDayOfYear((int) (byte) 19);
        boolean boolean24 = mutableDateTime19.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone27 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime19.toMutableDateTime(dateTimeZone26);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.minuteOfDay();
        mutableDateTime28.addYears((int) (byte) 23);
        mutableDateTime28.setSecondOfDay((int) (byte) 15);
        boolean boolean34 = interval16.isBefore((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.MutableInterval mutableInterval35 = interval16.toMutableInterval();
        org.joda.time.Duration duration36 = interval16.toDuration();
        org.joda.time.Period period37 = duration36.toPeriod();
        long long40 = gregorianChronology0.add((org.joda.time.ReadablePeriod) period37, 0L, 36);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 14 + "'", int12 == 14);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(cachedDateTimeZone27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 3110400000L + "'", long40 == 3110400000L);
    }

    @Test
    public void test798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test798");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZone(dateTimeZone3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withDefaultYear(0);
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField12 = gregorianChronology11.months();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = gregorianChronology11.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        boolean boolean16 = iSOChronology7.equals((java.lang.Object) str15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter0.withChronology((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology7.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test799");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        mutableDateTime3.addSeconds(10);
        mutableDateTime3.addWeekyears(20);
        mutableDateTime3.addHours((-28798030));
        mutableDateTime3.setHourOfDay(14);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setDayOfMonth(70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
    }

    @Test
    public void test800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test800");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField5 = gregorianChronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology4.getZone();
        java.lang.String str8 = dateTimeZone7.toString();
        boolean boolean9 = iSOChronology0.equals((java.lang.Object) str8);
        org.joda.time.DurationField durationField10 = iSOChronology0.days();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime11.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test801");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        mutableDateTime11.addYears((int) (byte) 23);
        int int15 = mutableDateTime11.getMillisOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, 10);
        int int20 = mutableDateTime16.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.dayOfWeek();
        boolean boolean23 = property21.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField24 = property21.getField();
        org.joda.time.MutableDateTime mutableDateTime25 = property21.roundHalfEven();
        mutableDateTime11.setTime((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 0, chronology33);
        mutableDateTime34.setMonthOfYear(5);
        mutableDateTime34.setDayOfYear((int) (byte) 19);
        boolean boolean39 = mutableDateTime34.isAfterNow();
        int int42 = dateTimeFormatter31.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime34, "monthOfYear", (int) (byte) 10);
        int int43 = mutableDateTime34.getDayOfMonth();
        boolean boolean44 = iSOChronology27.equals((java.lang.Object) mutableDateTime34);
        org.joda.time.Chronology chronology45 = iSOChronology27.withUTC();
        mutableDateTime25.setChronology((org.joda.time.Chronology) iSOChronology27);
        mutableDateTime25.setMinuteOfHour((int) (byte) 12);
        int int49 = mutableDateTime25.getYear();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 14 + "'", int20 == 14);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-11) + "'", int42 == (-11));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 19 + "'", int43 == 19);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2024 + "'", int49 == 2024);
    }

    @Test
    public void test802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test802");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = interval8.toPeriod(periodType9);
        org.joda.time.PeriodType periodType11 = period10.getPeriodType();
        org.joda.time.PeriodType periodType12 = org.joda.time.DateTimeUtils.getPeriodType(periodType11);
        org.joda.time.PeriodType periodType13 = org.joda.time.DateTimeUtils.getPeriodType(periodType11);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test803");
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(91, (int) (byte) 9, 19, 0, (int) (byte) 10, 13, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        long long10 = dateTimeZone8.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone11);
        mutableDateTime12.addSeconds((-28800000));
        boolean boolean15 = mutableDateTime7.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime12.addWeeks(23);
        boolean boolean19 = mutableDateTime12.isAfter((long) 15);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test804");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYearOfEra((int) ' ', (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder3.appendYear((int) (byte) 100, (int) (byte) 19);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0, chronology8);
        mutableDateTime9.setMonthOfYear(5);
        mutableDateTime9.setDayOfYear((int) (byte) 19);
        boolean boolean14 = mutableDateTime9.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime9.toMutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.minuteOfDay();
        int int20 = mutableDateTime18.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfWeek();
        mutableDateTime18.setRounding(dateTimeField22, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology25 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology25.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology30 = gregorianChronology25.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gregorianChronology25.millisOfSecond();
        org.joda.time.MutableDateTime.Property property32 = new org.joda.time.MutableDateTime.Property(mutableDateTime18, dateTimeField31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = dateTimeField31.getType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder6.appendFixedDecimal(dateTimeFieldType33, (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder6.appendEraText();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(gregorianChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
    }

    @Test
    public void test805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test805");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeField2.getAsShortText((int) '#', locale4);
        mutableDateTime0.setRounding(dateTimeField2, 5);
        long long10 = dateTimeField2.getDifferenceAsLong((long) (byte) -1, 1711868400000L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "35" + "'", str5, "35");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-54L) + "'", long10 == (-54L));
    }

    @Test
    public void test806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test806");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getStart();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        long long11 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        long long14 = dateTimeZone12.previousTransition(0L);
        java.lang.Object obj15 = dateTimeZone12.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone12);
        mutableDateTime16.addYears(960);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology19.secondOfMinute();
        org.joda.time.MutableDateTime.Property property25 = new org.joda.time.MutableDateTime.Property(mutableDateTime16, dateTimeField24);
        int int26 = dateTime10.get(dateTimeField24);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711872000000L + "'", long11 == 1711872000000L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test807");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = unsupportedDateTimeField61.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long65 = unsupportedDateTimeField61.set((-292275049L), "org.joda.time.IllegalFieldValueException: Value 3 for minuteOfHour must be in the range [60000,0]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuryOfEra field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
    }

    @Test
    public void test808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test808");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean9 = dateTimeFieldType7.isSupported((org.joda.time.Chronology) gregorianChronology8);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        long long14 = dividedDateTimeField11.set((long) (byte) 4, (int) '#');
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField17 = new org.joda.time.field.PreciseDurationField(durationFieldType15, (-9467020800000L));
        java.lang.String str18 = preciseDurationField17.getName();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology37.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology42 = gregorianChronology37.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology37.millisOfSecond();
        org.joda.time.MutableDateTime.Property property44 = new org.joda.time.MutableDateTime.Property(mutableDateTime30, dateTimeField43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField43.getType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField46 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, (org.joda.time.DurationField) preciseDurationField17, dateTimeFieldType45);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField48 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, 2922789);
        org.joda.time.DurationField durationField49 = dividedDateTimeField11.getRangeDurationField();
        long long52 = dividedDateTimeField11.set((long) (byte) 5, 2024);
        java.util.Locale locale54 = null;
        java.lang.String str55 = dividedDateTimeField11.getAsShortText(910L, locale54);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 50491123200004L + "'", long14 == 50491123200004L);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "years" + "'", str18, "years");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNull(durationField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 6327169027200005L + "'", long52 == 6327169027200005L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "19" + "'", str55, "19");
    }

    @Test
    public void test809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test809");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = gregorianChronology0.add(readablePeriod3, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology0.yearOfCentury();
        java.lang.String str8 = gregorianChronology0.toString();
        org.joda.time.DurationField durationField9 = gregorianChronology0.months();
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology15 = gregorianChronology10.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology10.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean19 = dateTimeFieldType17.isSupported((org.joda.time.Chronology) gregorianChronology18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField21 = new org.joda.time.field.DividedDateTimeField(dateTimeField16, dateTimeFieldType17, (int) (short) 100);
        org.joda.time.DurationField durationField22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField24 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField21, durationField22, dateTimeFieldType23);
        boolean boolean25 = remainderDateTimeField24.isSupported();
        boolean boolean26 = gregorianChronology0.equals((java.lang.Object) boolean25);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28, 10);
        int int31 = mutableDateTime27.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.dayOfWeek();
        boolean boolean34 = property32.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval35 = property32.toInterval();
        org.joda.time.Period period36 = interval35.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod37 = period36.toMutablePeriod();
        org.joda.time.Period period38 = period36.toPeriod();
        org.joda.time.Period period39 = period38.toPeriod();
        int[] intArray42 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period38, (long) 4, (-1443911141844L));
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GregorianChronology[UTC]" + "'", str8, "GregorianChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mutableDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 14 + "'", int31 == 14);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-45, -9, 0, 0, -22, -25, -41, -848]");
    }

    @Test
    public void test810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test810");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withZone(dateTimeZone11);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone13 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone11);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone11.getName(0L, locale15);
        org.joda.time.DateTime dateTime17 = mutableDateTime2.toDateTime(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime2.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime();
        java.util.GregorianCalendar gregorianCalendar20 = mutableDateTime19.toGregorianCalendar();
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundHalfCeiling();
        boolean boolean24 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime23);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(cachedDateTimeZone13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+02:09" + "'", str16, "+02:09");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test811");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        java.util.GregorianCalendar gregorianCalendar8 = mutableDateTime2.toGregorianCalendar();
        mutableDateTime2.addMonths(19);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.hourOfDay();
        mutableDateTime2.addHours(0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test812");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime2.add(readableDuration21, 31);
        int int24 = mutableDateTime2.getYear();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26, 10);
        int int29 = mutableDateTime25.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime25.dayOfWeek();
        boolean boolean32 = property30.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval33 = property30.toInterval();
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval33);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime35.add(readableDuration36, 10);
        int int39 = mutableDateTime35.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime35.dayOfWeek();
        boolean boolean42 = property40.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval43 = property40.toInterval();
        org.joda.time.Period period44 = interval43.toPeriod();
        boolean boolean45 = interval33.overlaps((org.joda.time.ReadableInterval) interval43);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47, 10);
        int int50 = mutableDateTime46.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime46.dayOfWeek();
        boolean boolean53 = property51.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval54 = property51.toInterval();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) 0, chronology56);
        mutableDateTime57.setMonthOfYear(5);
        mutableDateTime57.setDayOfYear((int) (byte) 19);
        boolean boolean62 = mutableDateTime57.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone65 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone64);
        org.joda.time.MutableDateTime mutableDateTime66 = mutableDateTime57.toMutableDateTime(dateTimeZone64);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.minuteOfDay();
        mutableDateTime66.addYears((int) (byte) 23);
        mutableDateTime66.setSecondOfDay((int) (byte) 15);
        boolean boolean72 = interval54.isBefore((org.joda.time.ReadableInstant) mutableDateTime66);
        org.joda.time.chrono.GregorianChronology gregorianChronology73 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField74 = gregorianChronology73.yearOfEra();
        org.joda.time.DateTimeField dateTimeField75 = gregorianChronology73.secondOfDay();
        org.joda.time.DateTimeField dateTimeField76 = gregorianChronology73.era();
        org.joda.time.DurationField durationField77 = gregorianChronology73.seconds();
        org.joda.time.DurationField durationField78 = gregorianChronology73.millis();
        org.joda.time.DateTimeZone dateTimeZone79 = gregorianChronology73.getZone();
        org.joda.time.DateTimeField dateTimeField80 = gregorianChronology73.hourOfDay();
        boolean boolean81 = interval54.equals((java.lang.Object) gregorianChronology73);
        org.joda.time.MutableDateTime mutableDateTime82 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration83 = null;
        mutableDateTime82.add(readableDuration83, 10);
        int int86 = mutableDateTime82.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property87 = mutableDateTime82.dayOfWeek();
        boolean boolean89 = property87.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval90 = property87.toInterval();
        org.joda.time.Period period91 = interval90.toPeriod();
        boolean boolean92 = interval54.overlaps((org.joda.time.ReadableInterval) interval90);
        boolean boolean93 = interval33.isAfter((org.joda.time.ReadableInterval) interval90);
        org.joda.time.DateTime dateTime94 = interval90.getEnd();
        boolean boolean96 = dateTime94.isAfter(1711935254513L);
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) dateTime94);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 14 + "'", int29 == 14);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 14 + "'", int39 == 14);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(mutableDateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 14 + "'", int50 == 14);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(cachedDateTimeZone65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(gregorianChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(mutableDateTime82);
// flaky:         org.junit.Assert.assertTrue("'" + int86 + "' != '" + 14 + "'", int86 == 14);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test813");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0, chronology10);
        mutableDateTime11.setMonthOfYear(5);
        mutableDateTime11.setDayOfYear((int) (byte) 19);
        boolean boolean16 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime11.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.minuteOfDay();
        mutableDateTime20.addYears((int) (byte) 23);
        mutableDateTime20.setSecondOfDay((int) (byte) 15);
        boolean boolean26 = interval8.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Duration duration28 = readableInterval27.toDuration();
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30, 10);
        int int33 = mutableDateTime29.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime29.dayOfWeek();
        boolean boolean36 = property34.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval37 = property34.toInterval();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 0, chronology39);
        mutableDateTime40.setMonthOfYear(5);
        mutableDateTime40.setDayOfYear((int) (byte) 19);
        boolean boolean45 = mutableDateTime40.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone48 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime40.toMutableDateTime(dateTimeZone47);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.minuteOfDay();
        mutableDateTime49.addYears((int) (byte) 23);
        mutableDateTime49.setSecondOfDay((int) (byte) 15);
        boolean boolean55 = interval37.isBefore((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.ReadableInterval readableInterval56 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Duration duration57 = readableInterval56.toDuration();
        int int58 = duration28.compareTo((org.joda.time.ReadableDuration) duration57);
        java.lang.String str59 = duration28.toString();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 14 + "'", int33 == 14);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(cachedDateTimeZone48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(readableInterval56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "PT86400S" + "'", str59, "PT86400S");
    }

    @Test
    public void test814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test814");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        int int5 = mutableDateTime4.getMinuteOfDay();
        int int6 = mutableDateTime4.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.setWeekOfWeekyear((-10));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -10 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 960 + "'", int5 == 960);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test815");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        java.util.GregorianCalendar gregorianCalendar8 = mutableDateTime2.toGregorianCalendar();
        mutableDateTime2.addMonths(19);
        mutableDateTime2.setWeekOfWeekyear(9);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setTime((int) '#', 292278993, 52, (int) (byte) 16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
    }

    @Test
    public void test816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test816");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        mutableDateTime2.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        int int41 = mutableDateTime34.getDayOfMonth();
        boolean boolean42 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        java.lang.String str43 = mutableDateTime2.toString();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType44, (int) (byte) 12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder47.appendYearOfEra((int) ' ', (int) (byte) 23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap51 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder47.appendTimeZoneName(strMap51);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap53 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = dateTimeFormatterBuilder52.appendTimeZoneShortName(strMap53);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = dateTimeFormatterBuilder54.appendFractionOfSecond((int) (byte) 100, (int) ' ');
        boolean boolean58 = mutableDateTime2.equals((java.lang.Object) ' ');
        org.joda.time.Chronology chronology59 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.weekOfWeekyear();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-28800000-02-26T00:00:10.000+16:00" + "'", str43, "-28800000-02-26T00:00:10.000+16:00");
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder54);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test817");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.hourOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime4.millisOfSecond();
        mutableDateTime4.setMillis(0L);
        int int9 = mutableDateTime4.getWeekyear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime4.millisOfSecond();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test818");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        int int13 = mutableDateTime11.getHourOfDay();
        org.joda.time.Chronology chronology14 = mutableDateTime11.getChronology();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfEven();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test819");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime2.toMutableDateTime();
        int int20 = mutableDateTime2.getEra();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test820");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        mutableDateTime4.setMillis(0L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
    }

    @Test
    public void test821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test821");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.chrono.GregorianChronology gregorianChronology21 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology21.monthOfYear();
        org.joda.time.DurationField durationField25 = gregorianChronology21.months();
        org.joda.time.DateTime dateTime26 = mutableDateTime2.toDateTime((org.joda.time.Chronology) gregorianChronology21);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28, 10);
        int int31 = mutableDateTime27.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.dayOfWeek();
        boolean boolean33 = dateTime26.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        int int34 = dateTime26.getYear();
        boolean boolean36 = dateTime26.isEqual((long) 4);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(gregorianChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 14 + "'", int31 == 14);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1969 + "'", int34 == 1969);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test822");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        java.lang.String str13 = property12.getAsString();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.roundHalfFloor();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter15.withZone(dateTimeZone18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter15.withDefaultYear(0);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.chrono.GregorianChronology gregorianChronology26 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField27 = gregorianChronology26.months();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology26.weekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = gregorianChronology26.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        boolean boolean31 = iSOChronology22.equals((java.lang.Object) str30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter15.withChronology((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime((org.joda.time.Chronology) iSOChronology22);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime33.setMonthOfYear(2004);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2004 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(gregorianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
    }

    @Test
    public void test823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test823");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        mutableDateTime11.setTime((long) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.ISODateTimeFormat.tTime();
        java.lang.String str17 = mutableDateTime11.toString(dateTimeFormatter16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter16.withPivotYear(70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTimeFormatter19.parseDateTime("0091-09-19T00:10:13.097+00:00:00.005");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0091-09-19T00:10:13.097+00:00:00...\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "T00:00:00.097+00:00:00.005" + "'", str17, "T00:00:00.097+00:00:00.005");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
    }

    @Test
    public void test824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test824");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.DurationField durationField9 = property5.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime10 = property5.roundHalfFloor();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test825");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.hourOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0, chronology7);
        mutableDateTime8.setMonthOfYear(5);
        mutableDateTime8.setDayOfYear((int) (byte) 19);
        boolean boolean13 = mutableDateTime8.isAfterNow();
        java.util.GregorianCalendar gregorianCalendar14 = mutableDateTime8.toGregorianCalendar();
        boolean boolean15 = mutableDateTime4.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime4.era();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime4.year();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime18.add(readableDuration19, 10);
        int int22 = mutableDateTime18.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.dayOfWeek();
        boolean boolean25 = property23.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval26 = property23.toInterval();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0, chronology28);
        mutableDateTime29.setMonthOfYear(5);
        mutableDateTime29.setDayOfYear((int) (byte) 19);
        boolean boolean34 = mutableDateTime29.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone37 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime29.toMutableDateTime(dateTimeZone36);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.minuteOfDay();
        mutableDateTime38.addYears((int) (byte) 23);
        mutableDateTime38.setSecondOfDay((int) (byte) 15);
        boolean boolean44 = interval26.isBefore((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Duration duration46 = readableInterval45.toDuration();
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48, 10);
        int int51 = mutableDateTime47.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime47.dayOfWeek();
        boolean boolean54 = property52.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval55 = property52.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) 0, chronology57);
        mutableDateTime58.setMonthOfYear(5);
        mutableDateTime58.setDayOfYear((int) (byte) 19);
        boolean boolean63 = mutableDateTime58.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone66 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone65);
        org.joda.time.MutableDateTime mutableDateTime67 = mutableDateTime58.toMutableDateTime(dateTimeZone65);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime67.minuteOfDay();
        mutableDateTime67.addYears((int) (byte) 23);
        mutableDateTime67.setSecondOfDay((int) (byte) 15);
        boolean boolean73 = interval55.isBefore((org.joda.time.ReadableInstant) mutableDateTime67);
        org.joda.time.ReadableInterval readableInterval74 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration75 = readableInterval74.toDuration();
        int int76 = duration46.compareTo((org.joda.time.ReadableDuration) duration75);
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Period period78 = duration75.toPeriod();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 14 + "'", int22 == 14);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(cachedDateTimeZone37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(readableInterval45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 14 + "'", int51 == 14);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(cachedDateTimeZone66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(readableInterval74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(period78);
    }

    @Test
    public void test826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test826");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime11.millisOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology14.era();
        org.joda.time.DurationField durationField18 = gregorianChronology14.seconds();
        org.joda.time.DurationField durationField19 = gregorianChronology14.millis();
        mutableDateTime11.setChronology((org.joda.time.Chronology) gregorianChronology14);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test827");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.minuteOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology11 = gregorianChronology6.withZone(dateTimeZone10);
        long long15 = gregorianChronology6.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField16 = gregorianChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology6.secondOfMinute();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField19 = gregorianChronology18.months();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology18.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology18.dayOfMonth();
        long long26 = gregorianChronology18.getDateTimeMillis((int) (byte) 3, (int) (byte) 1, 10, (int) 'a');
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology18.yearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime30 = dateTimeFormatter28.parseLocalTime("99");
        int int31 = dateTimeField27.getMaximumValue((org.joda.time.ReadablePartial) localTime30);
        long long33 = gregorianChronology6.set((org.joda.time.ReadablePartial) localTime30, 41370L);
        org.joda.time.chrono.GregorianChronology gregorianChronology35 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology35.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime37.add(readableDuration38, 10);
        int int41 = mutableDateTime37.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime37.dayOfWeek();
        boolean boolean44 = property42.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval45 = property42.toInterval();
        org.joda.time.Period period46 = interval45.toPeriod();
        int int47 = period46.size();
        org.joda.time.Period period48 = period46.toPeriod();
        int int49 = period48.size();
        int[] intArray51 = gregorianChronology35.get((org.joda.time.ReadablePeriod) period48, (long) 6);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = dateTimeField5.set((org.joda.time.ReadablePartial) localTime30, 60, intArray51, 287980);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 287980 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 910L + "'", long15 == 910L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-62071747199903L) + "'", long26 == (-62071747199903L));
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(gregorianChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 14 + "'", int41 == 14);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 0, 0, 6]");
    }

    @Test
    public void test828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test828");
        java.lang.Object obj0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        long long7 = gregorianChronology1.add(readablePeriod4, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(obj0, (org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DurationField durationField10 = gregorianChronology1.centuries();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology11.yearOfCentury();
        java.lang.String str13 = iSOChronology11.toString();
        org.joda.time.Chronology chronology14 = iSOChronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology11.yearOfCentury();
        org.joda.time.DurationField durationField16 = iSOChronology11.years();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime19 = dateTimeFormatter17.parseLocalTime("99");
        long long21 = iSOChronology11.set((org.joda.time.ReadablePartial) localTime19, (long) 12480);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianChronology1, (org.joda.time.Chronology) iSOChronology11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.GregorianChronology");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[1969-01-20T00:00:00.005+00:00:00.005]" + "'", str13, "ISOChronology[1969-01-20T00:00:00.005+00:00:00.005]");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-57600000L) + "'", long21 == (-57600000L));
    }

    @Test
    public void test829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test829");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException(durationFieldType0, "");
        org.joda.time.IllegalFieldValueException illegalFieldValueException4 = new org.joda.time.IllegalFieldValueException(durationFieldType0, "minutes");
        java.lang.String str5 = illegalFieldValueException4.getIllegalValueAsString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0, chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
        org.joda.time.IllegalFieldValueException illegalFieldValueException12 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType10, "ISOChronology[+00:00:00.005]");
        java.lang.Number number13 = illegalFieldValueException12.getUpperBound();
        illegalFieldValueException4.addSuppressed((java.lang.Throwable) illegalFieldValueException12);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "minutes" + "'", str5, "minutes");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNull(number13);
    }

    @Test
    public void test830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test830");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.IllegalFieldValueException illegalFieldValueException4 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 3, (java.lang.Number) 60000L, (java.lang.Number) 0L);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0, chronology6);
        mutableDateTime7.setMonthOfYear(5);
        mutableDateTime7.setDayOfYear((int) (byte) 19);
        mutableDateTime7.setMillis(910L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        long long16 = dateTimeZone14.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone14);
        long long19 = cachedDateTimeZone17.nextTransition(315705600019L);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now((org.joda.time.DateTimeZone) cachedDateTimeZone17);
        mutableDateTime21.setWeekyear((int) (byte) 15);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableInstant) mutableDateTime21);
        boolean boolean25 = dateTimeFieldType0.isSupported(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 315705600019L + "'", long19 == 315705600019L);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test831");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        mutableDateTime2.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        int int41 = mutableDateTime34.getDayOfMonth();
        boolean boolean42 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime2.era();
        mutableDateTime2.addWeeks((int) (byte) 20);
        mutableDateTime2.setTime((int) (byte) 5, 0, (int) (byte) 13, 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test832");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        int int18 = mutableDateTime11.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.millisOfSecond();
        boolean boolean20 = property19.isLeap();
        org.joda.time.DurationField durationField21 = property19.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test833");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = unsupportedDateTimeField61.getType();
        long long65 = unsupportedDateTimeField61.getDifferenceAsLong((long) 52, (long) (-475129));
        org.joda.time.DurationField durationField66 = unsupportedDateTimeField61.getLeapDurationField();
        java.lang.String str67 = unsupportedDateTimeField61.getName();
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNull(durationField66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "centuryOfEra" + "'", str67, "centuryOfEra");
    }

    @Test
    public void test834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test834");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str15 = dateTimeFieldType14.toString();
        boolean boolean16 = mutableDateTime11.isSupported(dateTimeFieldType14);
        java.lang.Object obj17 = null;
        boolean boolean18 = mutableDateTime11.equals(obj17);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "monthOfYear" + "'", str15, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test835");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = gregorianChronology6.add(readablePeriod9, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology6.yearOfCentury();
        java.lang.String str14 = gregorianChronology6.toString();
        org.joda.time.DurationField durationField15 = gregorianChronology6.months();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology6.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology6.hourOfHalfday();
        org.joda.time.DurationField durationField18 = gregorianChronology6.halfdays();
        org.joda.time.DateTime dateTime19 = mutableDateTime0.toDateTime((org.joda.time.Chronology) gregorianChronology6);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GregorianChronology[UTC]" + "'", str14, "GregorianChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test836");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        java.util.Locale locale62 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int63 = unsupportedDateTimeField61.getMaximumShortTextLength(locale62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuryOfEra field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
    }

    @Test
    public void test837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test837");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.basicTTime();
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withLocale(locale2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.parse("1970-019T02:09:09.000+02:09", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1970-019T02:09:09.000+02:09\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
    }

    @Test
    public void test838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test838");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime0.getZone();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test839");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDate();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2, 10);
        int int5 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addYears(1);
        java.lang.String str9 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withZoneUTC();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 14 + "'", int5 == 14);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "20250401" + "'", str9, "20250401");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test840");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = unsupportedDateTimeField61.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long64 = unsupportedDateTimeField61.roundHalfCeiling((long) 93);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuryOfEra field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
    }

    @Test
    public void test841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test841");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        org.joda.time.DateTimeField dateTimeField20 = mutableDateTime12.getRoundingField();
        org.joda.time.chrono.GregorianChronology gregorianChronology21 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology21.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = gregorianChronology21.withZone(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gregorianChronology21);
        org.joda.time.DurationField durationField28 = gregorianChronology21.hours();
        mutableDateTime12.setChronology((org.joda.time.Chronology) gregorianChronology21);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime12.year();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 57600000 + "'", int13 == 57600000);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(dateTimeField20);
        org.junit.Assert.assertNotNull(gregorianChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test842");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        int int5 = mutableDateTime4.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime4.minuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 960 + "'", int5 == 960);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test843");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField3 = iSOChronology0.halfdays();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5, 10);
        int int8 = mutableDateTime4.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime4.dayOfWeek();
        boolean boolean11 = property9.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval12 = property9.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        int int14 = period13.size();
        org.joda.time.Period period15 = period13.toPeriod();
        int int16 = period13.size();
        org.joda.time.Period period17 = period13.toPeriod();
        long long20 = iSOChronology0.add((org.joda.time.ReadablePeriod) period13, (long) (byte) -1, 0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    }

    @Test
    public void test844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test844");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withZone(dateTimeZone9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter6.withDefaultYear(0);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology13);
        org.joda.time.chrono.GregorianChronology gregorianChronology17 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField18 = gregorianChronology17.months();
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology17.weekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = gregorianChronology17.getZone();
        java.lang.String str21 = dateTimeZone20.toString();
        boolean boolean22 = iSOChronology13.equals((java.lang.Object) str21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter6.withChronology((org.joda.time.Chronology) iSOChronology13);
        boolean boolean24 = mutableDateTime4.equals((java.lang.Object) dateTimeFormatter6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) 0, chronology27);
        mutableDateTime28.setMonthOfYear(5);
        mutableDateTime28.setDayOfYear((int) (byte) 19);
        boolean boolean33 = mutableDateTime28.isAfterNow();
        int int36 = dateTimeFormatter25.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime28, "monthOfYear", (int) (byte) 10);
        mutableDateTime28.addSeconds(10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone41 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone40);
        java.lang.Object obj42 = cachedDateTimeZone41.writeReplace();
        mutableDateTime28.setZone((org.joda.time.DateTimeZone) cachedDateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = cachedDateTimeZone41.getUncachedZone();
        boolean boolean45 = cachedDateTimeZone41.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter6.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(gregorianChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-11) + "'", int36 == (-11));
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(cachedDateTimeZone41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
    }

    @Test
    public void test845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test845");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = unsupportedDateTimeField61.getType();
        java.util.Locale locale64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = unsupportedDateTimeField61.getAsShortText((int) 'a', locale64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuryOfEra field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
    }

    @Test
    public void test846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test846");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField5 = gregorianChronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology4.getZone();
        java.lang.String str8 = dateTimeZone7.toString();
        boolean boolean9 = iSOChronology0.equals((java.lang.Object) str8);
        org.joda.time.DurationField durationField10 = iSOChronology0.days();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.centuryOfEra();
        mutableDateTime11.addMinutes(99);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test847");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        java.util.Locale locale12 = null;
        java.lang.String str13 = remainderDateTimeField10.getAsShortText((long) (byte) 21, locale12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder14.appendYearOfEra((int) ' ', (int) (byte) 23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder14.appendTimeZoneName(strMap18);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap20 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendTimeZoneShortName(strMap20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder19.appendSecondOfMinute(2000);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder19.appendSecondOfDay(29222006);
        org.joda.time.format.DateTimeParser dateTimeParser26 = dateTimeFormatterBuilder19.toParser();
        boolean boolean27 = dateTimeFormatterBuilder19.canBuildParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder19.appendTwoDigitWeekyear(365);
        org.joda.time.chrono.GregorianChronology gregorianChronology30 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = gregorianChronology30.yearOfEra();
        org.joda.time.DateTimeField dateTimeField32 = gregorianChronology30.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology35 = gregorianChronology30.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology30.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology38 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean39 = dateTimeFieldType37.isSupported((org.joda.time.Chronology) gregorianChronology38);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField41 = new org.joda.time.field.DividedDateTimeField(dateTimeField36, dateTimeFieldType37, (int) (short) 100);
        long long44 = dividedDateTimeField41.set((long) (byte) 4, (int) '#');
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField47 = new org.joda.time.field.PreciseDurationField(durationFieldType45, (-9467020800000L));
        java.lang.String str48 = preciseDurationField47.getName();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) 0, chronology50);
        mutableDateTime51.setMonthOfYear(5);
        mutableDateTime51.setDayOfYear((int) (byte) 19);
        boolean boolean56 = mutableDateTime51.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone59 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone58);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime51.toMutableDateTime(dateTimeZone58);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.minuteOfDay();
        int int62 = mutableDateTime60.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology63 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology63.dayOfWeek();
        mutableDateTime60.setRounding(dateTimeField64, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology67 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField68 = gregorianChronology67.yearOfEra();
        org.joda.time.DateTimeField dateTimeField69 = gregorianChronology67.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology72 = gregorianChronology67.withZone(dateTimeZone71);
        org.joda.time.DateTimeField dateTimeField73 = gregorianChronology67.millisOfSecond();
        org.joda.time.MutableDateTime.Property property74 = new org.joda.time.MutableDateTime.Property(mutableDateTime60, dateTimeField73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = dateTimeField73.getType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField76 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField41, (org.joda.time.DurationField) preciseDurationField47, dateTimeFieldType75);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder77 = dateTimeFormatterBuilder19.appendShortText(dateTimeFieldType75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.RemainderDateTimeField remainderDateTimeField79 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField10, dateTimeFieldType75, (-57600001));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The divisor must be at least 2");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeParser26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(gregorianChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(gregorianChronology38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 50491123200004L + "'", long44 == 50491123200004L);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "years" + "'", str48, "years");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(cachedDateTimeZone59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertNotNull(iSOChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(gregorianChronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder77);
    }

    @Test
    public void test848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test848");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        int int5 = mutableDateTime4.getSecondOfMinute();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = mutableDateTime4.toCalendar(locale6);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1711935473592,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1969-01-20T00:00:00.005+00:00:00.005,offset=57600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2024,MONTH=3,WEEK_OF_YEAR=14,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=92,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=37,SECOND=53,MILLISECOND=592,ZONE_OFFSET=57600000,DST_OFFSET=0]");
    }

    @Test
    public void test849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test849");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = unsupportedDateTimeField61.getMinimumValue();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuryOfEra field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
    }

    @Test
    public void test850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test850");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = unsupportedDateTimeField61.getType();
        org.joda.time.DurationField durationField63 = unsupportedDateTimeField61.getRangeDurationField();
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNull(durationField63);
    }

    @Test
    public void test851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test851");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("1969-01-20T00:00:00.005+00:00:00.005", "yearOfEra", 57600000, (int) (short) 1);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology5.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology5.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology5.weekyear();
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeField9.getAsText(29894400, locale11);
        boolean boolean13 = fixedDateTimeZone4.equals((java.lang.Object) str12);
        java.lang.String str15 = fixedDateTimeZone4.getNameKey((long) 2004);
        java.lang.String str17 = fixedDateTimeZone4.getNameKey(170121599998L);
        int int19 = fixedDateTimeZone4.getOffsetFromLocal((long) (short) 10);
        long long21 = fixedDateTimeZone4.nextTransition(908840217542409L);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 0, chronology23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.hourOfDay();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime26.millisOfSecond();
        mutableDateTime26.setMillis(0L);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime26.millisOfSecond();
        boolean boolean32 = fixedDateTimeZone4.equals((java.lang.Object) property31);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "29894400" + "'", str12, "29894400");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "yearOfEra" + "'", str15, "yearOfEra");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "yearOfEra" + "'", str17, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 57600000 + "'", int19 == 57600000);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 908840217542409L + "'", long21 == 908840217542409L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test852");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 0, chronology3);
        mutableDateTime4.setMonthOfYear(5);
        mutableDateTime4.setDayOfYear((int) (byte) 19);
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = gregorianChronology9.secondOfMinute();
        mutableDateTime4.setChronology((org.joda.time.Chronology) gregorianChronology9);
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology9.millisOfSecond();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateOptionalTimeParser();
        org.joda.time.Chronology chronology18 = dateTimeFormatter17.getChronolgy();
        org.joda.time.LocalDateTime localDateTime20 = dateTimeFormatter17.parseLocalDateTime("97");
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime20, locale21);
        int[] intArray25 = new int[] { (-1) };
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray27 = dateTimeField1.set((org.joda.time.ReadablePartial) localDateTime20, 0, intArray25, (int) (byte) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(chronology18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[2]");
    }

    @Test
    public void test853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test853");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        mutableDateTime3.addSeconds(10);
        mutableDateTime3.addHours(960);
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology16.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology16.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone21 = gregorianChronology16.getZone();
        mutableDateTime3.setChronology((org.joda.time.Chronology) gregorianChronology16);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime3.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfFloor();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test854");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        mutableDateTime2.setMillisOfSecond((int) (byte) 0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone13 = new org.joda.time.tz.FixedDateTimeZone("1969-01-20T00:00:00.005+00:00:00.005", "yearOfEra", 57600000, (int) (short) 1);
        long long15 = fixedDateTimeZone13.previousTransition(41024102400013L);
        java.lang.String str17 = fixedDateTimeZone13.getNameKey((long) 13);
        boolean boolean18 = fixedDateTimeZone13.isFixed();
        mutableDateTime2.setZoneRetainFields((org.joda.time.DateTimeZone) fixedDateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 41024102400013L + "'", long15 == 41024102400013L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "yearOfEra" + "'", str17, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test855");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        mutableDateTime2.setMillisOfSecond((int) (byte) 0);
        int int9 = mutableDateTime2.getEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology15 = gregorianChronology10.withZone(dateTimeZone14);
        long long19 = gregorianChronology10.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField20 = gregorianChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology10.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter22.withZone(dateTimeZone25);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone27 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone25);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone25.getName(0L, locale29);
        org.joda.time.chrono.ZonedChronology zonedChronology31 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology10, dateTimeZone25);
        mutableDateTime2.setZoneRetainFields(dateTimeZone25);
        int int33 = mutableDateTime2.getMinuteOfDay();
        int int34 = mutableDateTime2.getYearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime35.add(readableDuration36, 10);
        int int39 = mutableDateTime35.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime35.dayOfWeek();
        boolean boolean42 = property40.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval43 = property40.toInterval();
        org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval43);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration46 = null;
        mutableDateTime45.add(readableDuration46, 10);
        int int49 = mutableDateTime45.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime45.dayOfWeek();
        boolean boolean52 = property50.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval53 = property50.toInterval();
        org.joda.time.Period period54 = interval53.toPeriod();
        boolean boolean55 = interval43.overlaps((org.joda.time.ReadableInterval) interval53);
        org.joda.time.Period period56 = interval43.toPeriod();
        mutableDateTime2.add((org.joda.time.ReadablePeriod) period56, (-2922751));
        java.lang.String str59 = period56.toString();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 910L + "'", long19 == 910L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(cachedDateTimeZone27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+02:09" + "'", str30, "+02:09");
        org.junit.Assert.assertNotNull(zonedChronology31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 960 + "'", int33 == 960);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 70 + "'", int34 == 70);
        org.junit.Assert.assertNotNull(mutableDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 14 + "'", int39 == 14);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 14 + "'", int49 == 14);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "P1D" + "'", str59, "P1D");
    }

    @Test
    public void test856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test856");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField5 = gregorianChronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology4.getZone();
        java.lang.String str8 = dateTimeZone7.toString();
        boolean boolean9 = iSOChronology0.equals((java.lang.Object) str8);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        mutableDateTime13.addSeconds((int) (byte) 19);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test857");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        org.joda.time.DurationField durationField11 = remainderDateTimeField10.getRangeDurationField();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField13.getType();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField16 = new org.joda.time.field.OffsetDateTimeField(dateTimeField13, (int) (byte) 11);
        long long19 = offsetDateTimeField16.add(15778627200099L, (-31507200000L));
        long long21 = offsetDateTimeField16.roundHalfFloor((-10L));
        org.joda.time.chrono.GregorianChronology gregorianChronology22 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology22.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = gregorianChronology22.add(readablePeriod25, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology22.yearOfCentury();
        java.lang.String str30 = gregorianChronology22.toString();
        org.joda.time.DurationField durationField31 = gregorianChronology22.months();
        org.joda.time.DateTimeField dateTimeField32 = gregorianChronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = gregorianChronology22.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.LocalTime localTime36 = dateTimeFormatter34.parseLocalTime("99");
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology37.secondOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology37.era();
        org.joda.time.DurationField durationField41 = gregorianChronology37.seconds();
        org.joda.time.DurationField durationField42 = gregorianChronology37.millis();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology37.secondOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology37.weekOfWeekyear();
        org.joda.time.chrono.GregorianChronology gregorianChronology45 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField46 = gregorianChronology45.months();
        org.joda.time.DateTimeField dateTimeField47 = gregorianChronology45.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gregorianChronology45.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology45.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology45.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = gregorianChronology45.getZone();
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration53 = null;
        mutableDateTime52.add(readableDuration53, 10);
        int int56 = mutableDateTime52.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime52.dayOfWeek();
        boolean boolean59 = property57.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval60 = property57.toInterval();
        org.joda.time.Period period61 = interval60.toPeriod();
        int[] intArray64 = gregorianChronology45.get((org.joda.time.ReadablePeriod) period61, (long) 57600000, (long) (byte) 10);
        int[] intArray66 = gregorianChronology37.get((org.joda.time.ReadablePeriod) period61, (-28400803200000L));
        int int67 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localTime36, intArray66);
        java.util.Locale locale69 = null;
        java.lang.String str70 = offsetDateTimeField16.getAsText((org.joda.time.ReadablePartial) localTime36, 81, locale69);
        java.util.Locale locale71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = remainderDateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localTime36, locale71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-2722206301372799901L) + "'", long19 == (-2722206301372799901L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 28800000L + "'", long21 == 28800000L);
        org.junit.Assert.assertNotNull(gregorianChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GregorianChronology[UTC]" + "'", str30, "GregorianChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(gregorianChronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 14 + "'", int56 == 14);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 0, 0, -15, -59, -59, -990]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, -46959, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "81" + "'", str70, "81");
    }

    @Test
    public void test858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test858");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval8);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11, 10);
        int int14 = mutableDateTime10.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.dayOfWeek();
        boolean boolean17 = property15.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval18 = property15.toInterval();
        org.joda.time.Period period19 = interval18.toPeriod();
        boolean boolean20 = interval8.overlaps((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 0, chronology22);
        mutableDateTime23.setMonthOfYear(5);
        mutableDateTime23.setDayOfYear((int) (byte) 19);
        boolean boolean28 = mutableDateTime23.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone31 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime23.toMutableDateTime(dateTimeZone30);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.yearOfEra();
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime32.add(readableDuration34);
        mutableDateTime32.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology39 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean40 = dateTimeFieldType38.isSupported((org.joda.time.Chronology) gregorianChronology39);
        int int41 = mutableDateTime32.get(dateTimeFieldType38);
        int int42 = mutableDateTime32.getMinuteOfDay();
        boolean boolean43 = interval18.isBefore((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology44.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology44.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) 0, chronology50);
        mutableDateTime51.setMonthOfYear(5);
        mutableDateTime51.setDayOfYear((int) (byte) 19);
        boolean boolean56 = mutableDateTime51.isAfterNow();
        int int59 = dateTimeFormatter48.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime51, "monthOfYear", (int) (byte) 10);
        int int60 = mutableDateTime51.getDayOfMonth();
        boolean boolean61 = iSOChronology44.equals((java.lang.Object) mutableDateTime51);
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology44.yearOfEra();
        int int63 = mutableDateTime32.get(dateTimeField62);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 14 + "'", int14 == 14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(cachedDateTimeZone31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(gregorianChronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 60 + "'", int42 == 60);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-11) + "'", int59 == (-11));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 19 + "'", int60 == 19);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeField62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1970 + "'", int63 == 1970);
    }

    @Test
    public void test859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test859");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology0.secondOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0, chronology9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.hourOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0, chronology15);
        mutableDateTime16.setMonthOfYear(5);
        mutableDateTime16.setDayOfYear((int) (byte) 19);
        boolean boolean21 = mutableDateTime16.isAfterNow();
        java.util.GregorianCalendar gregorianCalendar22 = mutableDateTime16.toGregorianCalendar();
        boolean boolean23 = mutableDateTime12.isAfter((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime12.era();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime12.year();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime12.dayOfMonth();
        boolean boolean27 = gregorianChronology0.equals((java.lang.Object) property26);
        org.joda.time.Chronology chronology28 = gregorianChronology0.withUTC();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar22);
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test860");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str11 = mutableDateTime2.toString(dateTimeFormatter10);
        mutableDateTime2.addMinutes(20);
        int int14 = mutableDateTime2.getMillisOfSecond();
        mutableDateTime2.setSecondOfMinute(0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = mutableDateTime2.toDateTime(chronology17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime2.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "19700101T160000.000+1600" + "'", str11, "19700101T160000.000+1600");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test861");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        org.joda.time.Chronology chronology20 = mutableDateTime12.getChronology();
        mutableDateTime12.addMonths((int) (byte) 12);
        int int23 = mutableDateTime12.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 57600000 + "'", int13 == 57600000);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test862");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = interval8.toPeriod(periodType9);
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval8);
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = interval8.isBefore(readableInterval12);
        org.joda.time.DateTime dateTime14 = interval8.getEnd();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test863");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicTTimeNoMillis();
        boolean boolean1 = dateTimeFormatter0.isPrinter();
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology2.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology7 = gregorianChronology2.withZone(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.ISODateTimeFormat.basicDate();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10, 10);
        int int13 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfWeek();
        mutableDateTime9.addYears(1);
        java.lang.String str17 = dateTimeFormatter8.print((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter18.withZone(dateTimeZone21);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone23 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone21);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone21.getName(0L, locale25);
        java.lang.Object obj27 = dateTimeZone21.writeReplace();
        mutableDateTime9.setZone(dateTimeZone21);
        long long30 = dateTimeZone6.getMillisKeepLocal(dateTimeZone21, 0L);
        java.util.TimeZone timeZone31 = dateTimeZone21.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter0.withZone(dateTimeZone21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter0.withZoneUTC();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(gregorianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 14 + "'", int13 == 14);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "20250401" + "'", str17, "20250401");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(cachedDateTimeZone23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+02:09" + "'", str26, "+02:09");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-7739995L) + "'", long30 == (-7739995L));
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+02:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
    }

    @Test
    public void test864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test864");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean19 = dateTimeFieldType17.isSupported((org.joda.time.Chronology) gregorianChronology18);
        int int20 = mutableDateTime11.get(dateTimeFieldType17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter21.withZone(dateTimeZone24);
        int int26 = dateTimeFormatter25.getDefaultYear();
        boolean boolean27 = dateTimeFormatter25.isPrinter();
        java.lang.String str28 = mutableDateTime11.toString(dateTimeFormatter25);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime11.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.setMinuteOfDay((-2922751));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2922751 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-019T03:09:00.000+02:09" + "'", str28, "1970-019T03:09:00.000+02:09");
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test865");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = unsupportedDateTimeField61.getType();
        org.joda.time.DurationField durationField63 = unsupportedDateTimeField61.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            int int65 = unsupportedDateTimeField61.getMaximumValue((-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuryOfEra field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(durationField63);
    }

    @Test
    public void test866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test866");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField11 = gregorianChronology10.months();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology10.dayOfYear();
        mutableDateTime2.setChronology((org.joda.time.Chronology) gregorianChronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.ISODateTimeFormat.date();
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withLocale(locale16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withPivotYear((java.lang.Integer) 2922789);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0, chronology21);
        mutableDateTime22.setMonthOfYear(5);
        mutableDateTime22.setDayOfYear((int) (byte) 19);
        int int27 = mutableDateTime22.getMillisOfDay();
        mutableDateTime22.setMinuteOfDay((int) (byte) 1);
        mutableDateTime22.addWeeks((int) (short) 10);
        java.lang.String str32 = dateTimeFormatter19.print((org.joda.time.ReadableInstant) mutableDateTime22);
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime22.dayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 57600000 + "'", int27 == 57600000);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-03-30" + "'", str32, "1970-03-30");
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test867");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean9 = dateTimeFieldType7.isSupported((org.joda.time.Chronology) gregorianChronology8);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        long long14 = dividedDateTimeField11.set((long) (byte) 4, (int) '#');
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField17 = new org.joda.time.field.PreciseDurationField(durationFieldType15, (-9467020800000L));
        java.lang.String str18 = preciseDurationField17.getName();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology37.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology42 = gregorianChronology37.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology37.millisOfSecond();
        org.joda.time.MutableDateTime.Property property44 = new org.joda.time.MutableDateTime.Property(mutableDateTime30, dateTimeField43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField43.getType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField46 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, (org.joda.time.DurationField) preciseDurationField17, dateTimeFieldType45);
        long long49 = preciseDurationField17.getMillis(0L, 0L);
        long long50 = preciseDurationField17.getUnitMillis();
        long long52 = preciseDurationField17.getValueAsLong(908840217542409L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 50491123200004L + "'", long14 == 50491123200004L);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "years" + "'", str18, "years");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-9467020800000L) + "'", long50 == (-9467020800000L));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-96L) + "'", long52 == (-96L));
    }

    @Test
    public void test868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test868");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicTTimeNoMillis();
        boolean boolean1 = dateTimeFormatter0.isPrinter();
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology2.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology7 = gregorianChronology2.withZone(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.ISODateTimeFormat.basicDate();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10, 10);
        int int13 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfWeek();
        mutableDateTime9.addYears(1);
        java.lang.String str17 = dateTimeFormatter8.print((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter18.withZone(dateTimeZone21);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone23 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone21);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone21.getName(0L, locale25);
        java.lang.Object obj27 = dateTimeZone21.writeReplace();
        mutableDateTime9.setZone(dateTimeZone21);
        long long30 = dateTimeZone6.getMillisKeepLocal(dateTimeZone21, 0L);
        java.util.TimeZone timeZone31 = dateTimeZone21.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter0.withZone(dateTimeZone21);
        org.joda.time.format.DateTimeParser dateTimeParser33 = dateTimeFormatter0.getParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(gregorianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 14 + "'", int13 == 14);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "20250401" + "'", str17, "20250401");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(cachedDateTimeZone23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+02:09" + "'", str26, "+02:09");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-7739995L) + "'", long30 == (-7739995L));
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+02:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeParser33);
    }

    @Test
    public void test869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test869");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        mutableDateTime11.addSeconds(9);
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology21 = gregorianChronology16.withZone(dateTimeZone20);
        long long25 = gregorianChronology16.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField26 = gregorianChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology16.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter28.withZone(dateTimeZone31);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone31);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone31.getName(0L, locale35);
        org.joda.time.chrono.ZonedChronology zonedChronology37 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology16, dateTimeZone31);
        org.joda.time.DurationField durationField38 = zonedChronology37.weeks();
        org.joda.time.chrono.GregorianChronology gregorianChronology39 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField40 = gregorianChronology39.months();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology39.weekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = gregorianChronology39.getZone();
        org.joda.time.Chronology chronology43 = zonedChronology37.withZone(dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime11.toMutableDateTime(dateTimeZone42);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.yearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 910L + "'", long25 == 910L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+02:09" + "'", str36, "+02:09");
        org.junit.Assert.assertNotNull(zonedChronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(gregorianChronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test870");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = interval8.toPeriod(periodType9);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12, 10);
        int int15 = mutableDateTime11.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.dayOfWeek();
        boolean boolean18 = property16.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval19 = property16.toInterval();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = interval19.toPeriod(periodType20);
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval19);
        boolean boolean23 = interval8.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTime dateTime25 = readableInterval24.getEnd();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((-2678400000L));
        mutableDateTime27.setYear((-10));
        boolean boolean30 = readableInterval24.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder31.appendYearOfEra((int) ' ', (int) (byte) 23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap35 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder31.appendTimeZoneName(strMap35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str38 = dateTimeFieldType37.toString();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder36.appendFixedDecimal(dateTimeFieldType37, 20);
        int int41 = mutableDateTime27.get(dateTimeFieldType37);
        mutableDateTime27.setWeekyear(366);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 14 + "'", int15 == 14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "monthOfYear" + "'", str38, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12 + "'", int41 == 12);
    }

    @Test
    public void test871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test871");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0, chronology10);
        mutableDateTime11.setMonthOfYear(5);
        mutableDateTime11.setDayOfYear((int) (byte) 19);
        boolean boolean16 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime11.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.minuteOfDay();
        mutableDateTime20.addYears((int) (byte) 23);
        mutableDateTime20.setSecondOfDay((int) (byte) 15);
        boolean boolean26 = interval8.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Duration duration28 = readableInterval27.toDuration();
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30, 10);
        int int33 = mutableDateTime29.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime29.dayOfWeek();
        boolean boolean36 = property34.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval37 = property34.toInterval();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 0, chronology39);
        mutableDateTime40.setMonthOfYear(5);
        mutableDateTime40.setDayOfYear((int) (byte) 19);
        boolean boolean45 = mutableDateTime40.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone48 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime40.toMutableDateTime(dateTimeZone47);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.minuteOfDay();
        mutableDateTime49.addYears((int) (byte) 23);
        mutableDateTime49.setSecondOfDay((int) (byte) 15);
        boolean boolean55 = interval37.isBefore((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.ReadableInterval readableInterval56 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Duration duration57 = readableInterval56.toDuration();
        int int58 = duration28.compareTo((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration59 = duration28.toDuration();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 14 + "'", int33 == 14);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(cachedDateTimeZone48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(readableInterval56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(duration59);
    }

    @Test
    public void test872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test872");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        java.lang.String str5 = property3.toString();
        org.joda.time.DurationField durationField6 = property3.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime8 = property3.addWrapField((int) (byte) 0);
        java.lang.String str9 = property3.getName();
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology10.era();
        org.joda.time.DurationField durationField14 = gregorianChronology10.seconds();
        org.joda.time.DurationField durationField15 = gregorianChronology10.millis();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology10.secondOfDay();
        java.lang.Object obj17 = null;
        boolean boolean18 = gregorianChronology10.equals(obj17);
        org.joda.time.DateTimeZone dateTimeZone19 = gregorianChronology10.getZone();
        boolean boolean20 = property3.equals((java.lang.Object) dateTimeZone19);
        org.joda.time.DurationField durationField21 = property3.getLeapDurationField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfDay]" + "'", str5, "Property[secondOfDay]");
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondOfDay" + "'", str9, "secondOfDay");
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(durationField21);
    }

    @Test
    public void test873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test873");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean9 = dateTimeFieldType7.isSupported((org.joda.time.Chronology) gregorianChronology8);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        long long14 = dividedDateTimeField11.set((long) (byte) 4, (int) '#');
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.field.PreciseDurationField preciseDurationField17 = new org.joda.time.field.PreciseDurationField(durationFieldType15, (-9467020800000L));
        java.lang.String str18 = preciseDurationField17.getName();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology37.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology42 = gregorianChronology37.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology37.millisOfSecond();
        org.joda.time.MutableDateTime.Property property44 = new org.joda.time.MutableDateTime.Property(mutableDateTime30, dateTimeField43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField43.getType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField46 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, (org.joda.time.DurationField) preciseDurationField17, dateTimeFieldType45);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField48 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, 2922789);
        long long50 = offsetDateTimeField48.roundHalfEven((long) (byte) 5);
        long long52 = offsetDateTimeField48.roundFloor(6324013180800000L);
        java.lang.String str53 = offsetDateTimeField48.toString();
        int int55 = offsetDateTimeField48.get((long) 2005);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 50491123200004L + "'", long14 == 50491123200004L);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "years" + "'", str18, "years");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 946857600000L + "'", long50 == 946857600000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 6321804192000000L + "'", long52 == 6321804192000000L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "DateTimeField[yearOfEra]" + "'", str53, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2922808 + "'", int55 == 2922808);
    }

    @Test
    public void test874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test874");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        long long9 = gregorianChronology0.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField10 = gregorianChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology0.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter12.withZone(dateTimeZone15);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone15.getName(0L, locale19);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology0, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.chrono.GregorianChronology gregorianChronology23 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField24 = gregorianChronology23.months();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology23.weekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = gregorianChronology23.getZone();
        org.joda.time.Chronology chronology27 = zonedChronology21.withZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = zonedChronology21.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter29.withZone(dateTimeZone32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter29.withPivotYear((-11));
        boolean boolean36 = zonedChronology21.equals((java.lang.Object) (-11));
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime37.add(readableDuration38, 10);
        int int41 = mutableDateTime37.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime37.dayOfWeek();
        boolean boolean44 = property42.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField45 = property42.getField();
        org.joda.time.MutableDateTime mutableDateTime46 = property42.roundHalfEven();
        java.lang.String str47 = mutableDateTime46.toString();
        boolean boolean48 = zonedChronology21.equals((java.lang.Object) str47);
        org.joda.time.DurationField durationField49 = zonedChronology21.weekyears();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 910L + "'", long9 == 910L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+02:09" + "'", str20, "+02:09");
        org.junit.Assert.assertNotNull(zonedChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(gregorianChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutableDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 14 + "'", int41 == 14);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2024-04-02T00:00:00.000+16:00" + "'", str47, "2024-04-02T00:00:00.000+16:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test875");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        mutableDateTime3.addMonths((-28800000));
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime3.add(readableDuration14, 20);
        mutableDateTime3.addWeekyears(20);
        mutableDateTime3.setWeekyear(0);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime3.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone24 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone23);
        int int26 = cachedDateTimeZone24.getOffset((long) (byte) 5);
        mutableDateTime21.setZoneRetainFields((org.joda.time.DateTimeZone) cachedDateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(cachedDateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
    }

    @Test
    public void test876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test876");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = interval8.toPeriod(periodType9);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12, 10);
        int int15 = mutableDateTime11.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.dayOfWeek();
        boolean boolean18 = property16.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval19 = property16.toInterval();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = interval19.toPeriod(periodType20);
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval19);
        boolean boolean23 = interval8.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Duration duration24 = interval19.toDuration();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26, 10);
        int int29 = mutableDateTime25.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime25.dayOfWeek();
        boolean boolean32 = property30.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval33 = property30.toInterval();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = interval33.toPeriod(periodType34);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime36.add(readableDuration37, 10);
        int int40 = mutableDateTime36.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfWeek();
        boolean boolean43 = property41.equals((java.lang.Object) (-1));
        org.joda.time.Interval interval44 = property41.toInterval();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = interval44.toPeriod(periodType45);
        org.joda.time.ReadableInterval readableInterval47 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval44);
        boolean boolean48 = interval33.overlaps((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Duration duration49 = interval44.toDuration();
        int int50 = duration24.compareTo((org.joda.time.ReadableDuration) duration49);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 14 + "'", int15 == 14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 14 + "'", int29 == 14);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 14 + "'", int40 == 14);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(readableInterval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test877");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology8 = gregorianChronology3.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean12 = dateTimeFieldType10.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, (int) (short) 100);
        org.joda.time.DurationField durationField15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, durationField15, dateTimeFieldType16);
        mutableDateTime2.setRounding((org.joda.time.DateTimeField) remainderDateTimeField17);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology24 = gregorianChronology19.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology19.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean28 = dateTimeFieldType26.isSupported((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(dateTimeField25, dateTimeFieldType26, (int) (short) 100);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField30, durationField31, dateTimeFieldType32);
        org.joda.time.IllegalFieldValueException illegalFieldValueException37 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType32, (java.lang.Number) (-28800000L), (java.lang.Number) 29894400, (java.lang.Number) 18);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField17, dateTimeFieldType32, (int) (byte) 5);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime42.add(readablePeriod47, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str51 = mutableDateTime42.toString(dateTimeFormatter50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime42.yearOfCentury();
        int int53 = property52.getMinimumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.roundHalfEven();
        int int56 = property52.get();
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        long long60 = durationField57.getValueAsLong((-210867710400000L), (long) 99);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = unsupportedDateTimeField61.getType();
        java.lang.String str63 = unsupportedDateTimeField61.getName();
        java.util.Locale locale65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = unsupportedDateTimeField61.getAsText(436356909475200000L, locale65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuryOfEra field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "19700101T160000.000+1600" + "'", str51, "19700101T160000.000+1600");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-6682L) + "'", long60 == (-6682L));
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "centuryOfEra" + "'", str63, "centuryOfEra");
    }
}
