package org.joda.time;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        java.util.Locale locale32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = unsupportedDateTimeField30.getAsShortText((int) '4', locale32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setDateTime((int) (byte) 15, 67, (int) 'a', 37, 410, 292278993, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology12 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = gregorianChronology12.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology17 = gregorianChronology12.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = gregorianChronology12.withUTC();
        long long24 = gregorianChronology12.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        boolean boolean25 = durationFieldType7.isSupported((org.joda.time.Chronology) gregorianChronology12);
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = gregorianChronology12.getZone();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(gregorianChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1279002L + "'", long24 == 1279002L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        int int3 = mutableDateTime2.getYear();
        long long4 = mutableDateTime2.getMillis();
        java.lang.String str5 = mutableDateTime2.toString();
        int int6 = mutableDateTime2.getCenturyOfEra();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T02:09:00.000+02:09" + "'", str5, "1970-01-01T02:09:00.000+02:09");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 19 + "'", int6 == 19);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology12 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology12.yearOfEra();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray23 = dateTimeField13.add(readablePartial14, 0, intArray21, 0);
        int int24 = remainderDateTimeField10.getMaximumValue(readablePartial11, intArray21);
        org.joda.time.DateTimeField dateTimeField25 = remainderDateTimeField10.getWrappedField();
        org.joda.time.ReadablePartial readablePartial26 = null;
        int[] intArray30 = new int[] { (-11), (short) 10, '4' };
        int int31 = remainderDateTimeField10.getMinimumValue(readablePartial26, intArray30);
        org.joda.time.ReadablePartial readablePartial32 = null;
        int int33 = remainderDateTimeField10.getMinimumValue(readablePartial32);
        int int36 = remainderDateTimeField10.getDifference((long) (-1), (long) 100);
        long long38 = remainderDateTimeField10.roundFloor(0L);
        org.joda.time.ReadablePartial readablePartial39 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0, chronology41);
        mutableDateTime42.setMonthOfYear(5);
        mutableDateTime42.setDayOfYear((int) (byte) 19);
        boolean boolean47 = mutableDateTime42.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone50 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime42.toMutableDateTime(dateTimeZone49);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime51.minuteOfDay();
        int int53 = mutableDateTime51.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology54 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology54.dayOfWeek();
        mutableDateTime51.setRounding(dateTimeField55, 5);
        org.joda.time.ReadablePartial readablePartial58 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology59 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology59.yearOfEra();
        org.joda.time.ReadablePartial readablePartial61 = null;
        int[] intArray68 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray70 = dateTimeField60.add(readablePartial61, 0, intArray68, 0);
        int int71 = dateTimeField55.getMinimumValue(readablePartial58, intArray68);
        int int72 = remainderDateTimeField10.getMaximumValue(readablePartial39, intArray68);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(gregorianChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-11, 10, 52]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(cachedDateTimeZone50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(iSOChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(gregorianChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 99 + "'", int72 == 99);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        int int5 = mutableDateTime4.getCenturyOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology11 = gregorianChronology6.withZone(dateTimeZone10);
        long long15 = gregorianChronology6.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField16 = gregorianChronology6.years();
        org.joda.time.DateTime dateTime17 = mutableDateTime4.toDateTime((org.joda.time.Chronology) gregorianChronology6);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = gregorianChronology6.getDateTimeMillis(34, 0, (int) (byte) 6, 0, 57600, (int) '4', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57600 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 910L + "'", long15 == 910L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.Instant instant4 = mutableDateTime2.toInstant();
        mutableDateTime2.setMillisOfDay((int) (byte) 19);
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology7.era();
        org.joda.time.DurationField durationField11 = gregorianChronology7.seconds();
        org.joda.time.DurationField durationField12 = gregorianChronology7.millis();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology7.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str15 = dateTimeFieldType14.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dateTimeField13, dateTimeFieldType14, (int) (short) 100);
        org.joda.time.DurationField durationField18 = remainderDateTimeField17.getRangeDurationField();
        org.joda.time.DurationField durationField19 = remainderDateTimeField17.getDurationField();
        org.joda.time.chrono.GregorianChronology gregorianChronology20 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology20.monthOfYear();
        org.joda.time.DurationField durationField24 = gregorianChronology20.months();
        org.joda.time.chrono.GregorianChronology gregorianChronology25 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology25.secondOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology25.era();
        org.joda.time.DurationField durationField29 = gregorianChronology25.seconds();
        org.joda.time.DurationField durationField30 = gregorianChronology25.millis();
        org.joda.time.DateTimeField dateTimeField31 = gregorianChronology25.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str33 = dateTimeFieldType32.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField35 = new org.joda.time.field.RemainderDateTimeField(dateTimeField31, dateTimeFieldType32, (int) (short) 100);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField36 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField17, durationField24, dateTimeFieldType32);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField38 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField36, dateTimeFieldType37);
        int int39 = mutableDateTime2.get(dateTimeFieldType37);
        java.lang.String str40 = dateTimeFieldType37.getName();
        org.joda.time.DurationField durationField41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField42 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType37, durationField41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "monthOfYear" + "'", str15, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(gregorianChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(gregorianChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "monthOfYear" + "'", str33, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "era" + "'", str40, "era");
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = mutableDateTime0.isEqual((-7641L));
        boolean boolean8 = mutableDateTime0.isEqualNow();
        mutableDateTime0.setWeekyear(36499998);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean19 = dateTimeFieldType17.isSupported((org.joda.time.Chronology) gregorianChronology18);
        int int20 = mutableDateTime11.get(dateTimeFieldType17);
        java.lang.Number number22 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException24 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType17, (java.lang.Number) (-1.0f), number22, (java.lang.Number) (-1.0f));
        java.lang.String str25 = illegalFieldValueException24.getIllegalValueAsString();
        java.lang.String str26 = illegalFieldValueException24.getIllegalStringValue();
        boolean boolean27 = org.joda.time.IllegalInstantException.isIllegalInstant((java.lang.Throwable) illegalFieldValueException24);
        java.lang.String str28 = illegalFieldValueException24.getIllegalValueAsString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1.0" + "'", str25, "-1.0");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1.0" + "'", str28, "-1.0");
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        boolean boolean12 = preciseDurationField11.isPrecise();
        boolean boolean13 = preciseDurationField11.isSupported();
        long long16 = preciseDurationField11.add((long) 29, (-62071747199903L));
        // The following exception was thrown during execution in test generation
        try {
            long long18 = preciseDurationField11.getValueAsLong((-62166787187095L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 29L + "'", long16 == 29L);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("DurationField[months]", "", 0, (int) (byte) 0);
        java.lang.String str13 = fixedDateTimeZone11.getName((long) (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((-5), (-292275054), (int) (byte) 12, (int) (byte) 13, (int) (byte) 13, (int) (byte) 16, 0, (org.joda.time.DateTimeZone) fixedDateTimeZone11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology5.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gregorianChronology5.add(readablePeriod8, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        long long14 = dateTimeZone12.previousTransition(0L);
        java.lang.Object obj15 = dateTimeZone12.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology17 = gregorianChronology5.withZone(dateTimeZone12);
        mutableDateTime2.setChronology((org.joda.time.Chronology) gregorianChronology5);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime2.dayOfWeek();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime2.secondOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        org.joda.time.DurationField durationField11 = remainderDateTimeField10.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial12 = null;
        java.util.Locale locale14 = null;
        java.lang.String str15 = remainderDateTimeField10.getAsShortText(readablePartial12, (int) (byte) 5, locale14);
        java.lang.String str17 = remainderDateTimeField10.getAsShortText((long) (byte) 3);
        long long19 = remainderDateTimeField10.roundHalfCeiling((long) (-11));
        org.joda.time.ReadablePartial readablePartial20 = null;
        java.util.Locale locale22 = null;
        java.lang.String str23 = remainderDateTimeField10.getAsText(readablePartial20, 1970, locale22);
        org.joda.time.DurationField durationField24 = remainderDateTimeField10.getRangeDurationField();
        long long27 = remainderDateTimeField10.add(94694399995L, (long) (byte) 23);
        java.util.Locale locale29 = null;
        java.lang.String str30 = remainderDateTimeField10.getAsText((long) (-28800000), locale29);
        long long33 = remainderDateTimeField10.add(0L, (int) (byte) 3);
        org.joda.time.DurationField durationField34 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) 0, chronology36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundHalfFloor();
        java.lang.String str40 = property38.toString();
        org.joda.time.DateTimeField dateTimeField41 = property38.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property38.getFieldType();
        org.joda.time.chrono.GregorianChronology gregorianChronology44 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = gregorianChronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField46 = gregorianChronology44.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        long long50 = gregorianChronology44.add(readablePeriod47, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DurationField durationField51 = gregorianChronology44.days();
        org.joda.time.DurationField durationField52 = gregorianChronology44.months();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(10368000000L, (org.joda.time.Chronology) gregorianChronology44);
        boolean boolean54 = dateTimeFieldType42.isSupported((org.joda.time.Chronology) gregorianChronology44);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField56 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField10, durationField34, dateTimeFieldType42, 78660);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "5" + "'", str15, "5");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970" + "'", str23, "1970");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 94694422995L + "'", long27 == 94694422995L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3000L + "'", long33 == 3000L);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Property[secondOfDay]" + "'", str40, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(gregorianChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        long long14 = preciseDurationField11.add(2524556160000L, (-292275054));
        long long17 = preciseDurationField11.add(1969L, (int) (short) -1);
        long long20 = preciseDurationField11.add((long) 9, (long) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = preciseDurationField11.getValueAsLong(17124089L, (-136771200001L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2524556160000L + "'", long14 == 2524556160000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1969L + "'", long17 == 1969L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 9L + "'", long20 == 9L);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        long long13 = property12.getMillis();
        org.joda.time.ReadablePartial readablePartial14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int15 = property12.compareTo(readablePartial14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addHours(97);
        boolean boolean3 = mutableDateTime0.isAfterNow();
        int int4 = mutableDateTime0.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0, chronology7);
        mutableDateTime8.setMonthOfYear(5);
        mutableDateTime8.setDayOfYear((int) (byte) 19);
        boolean boolean13 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime8.toMutableDateTime(dateTimeZone15);
        int int18 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) mutableDateTime17);
        int int19 = mutableDateTime17.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime17.add(readableDuration20, 2);
        boolean boolean24 = mutableDateTime17.isEqual((-62071747199903L));
        mutableDateTime17.setSecondOfMinute((int) (short) 10);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime17);
        int int28 = mutableDateTime0.getMillisOfSecond();
        int int29 = mutableDateTime0.getYearOfEra();
        int int30 = mutableDateTime0.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 321 + "'", int28 == 321);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean19 = dateTimeFieldType17.isSupported((org.joda.time.Chronology) gregorianChronology18);
        int int20 = mutableDateTime11.get(dateTimeFieldType17);
        org.joda.time.chrono.GregorianChronology gregorianChronology21 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField22 = gregorianChronology21.months();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology21.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology21.clockhourOfDay();
        org.joda.time.DateTime dateTime27 = mutableDateTime11.toDateTime((org.joda.time.Chronology) gregorianChronology21);
        mutableDateTime11.setDate(52L);
        mutableDateTime11.setTime(32L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(gregorianChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.months();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeZone dateTimeZone3 = gregorianChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField8 = new org.joda.time.field.DividedDateTimeField(dateTimeField4, durationField5, dateTimeFieldType6, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0, chronology10);
        mutableDateTime11.setMonthOfYear(5);
        mutableDateTime11.setDayOfYear((int) (byte) 19);
        boolean boolean16 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime11.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.minuteOfDay();
        int int22 = mutableDateTime20.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfWeek();
        mutableDateTime20.setRounding(dateTimeField24, 5);
        int int27 = mutableDateTime20.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime20.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime20.set(dateTimeFieldType29, 0);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType29.getDurationType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField8, dateTimeFieldType29);
        long long36 = remainderDateTimeField33.getDifferenceAsLong(0L, (long) (byte) 3);
        int int38 = remainderDateTimeField33.get(106271L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.getDifferenceAsLong(2493331200000L, (long) 18);
        int int36 = unsupportedDateTimeField30.getDifference(39601970L, (-7740000L));
        org.joda.time.ReadablePartial readablePartial37 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int38 = unsupportedDateTimeField30.getMinimumValue(readablePartial37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str27, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 41555519L + "'", long33 == 41555519L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 789 + "'", int36 == 789);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology6 = gregorianChronology1.withZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = gregorianChronology1.withUTC();
        long long13 = gregorianChronology1.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField14 = gregorianChronology1.months();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16, 10);
        int int19 = mutableDateTime15.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.hourOfDay();
        org.joda.time.Interval interval21 = property20.toInterval();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        int int23 = mutableDateTime22.getMonthOfYear();
        boolean boolean24 = interval21.isAfter((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Interval interval25 = interval21.toInterval();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = interval21.toPeriod(periodType26);
        int[] intArray30 = gregorianChronology1.get((org.joda.time.ReadablePeriod) period27, (long) 29, (long) 14);
        int[] intArray33 = iSOChronology0.get((org.joda.time.ReadablePeriod) period27, 0L, 39601970L);
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1279002L + "'", long13 == 1279002L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 11, 0, 1, 970]");
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.addMinutes((int) 'a');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0, chronology8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.secondOfDay();
        int int11 = mutableDateTime9.getWeekOfWeekyear();
        mutableDateTime9.setMillis((long) (-2));
        boolean boolean14 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime9);
        mutableDateTime9.addWeeks((int) (byte) 19);
        boolean boolean17 = mutableDateTime9.isEqualNow();
        org.joda.time.DateTime dateTime18 = mutableDateTime9.toDateTime();
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfMonth();
        mutableDateTime4.setSecondOfDay(0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval6.toInterval();
        org.joda.time.DateTime dateTime12 = interval6.getStart();
        int int13 = dateTime12.getMinuteOfHour();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.util.GregorianCalendar gregorianCalendar1 = mutableDateTime0.toGregorianCalendar();
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) mutableDateTime0);
        long long3 = mutableDateTime0.getMillis();
        boolean boolean5 = mutableDateTime0.isAfter(1969000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str7 = dateTimeFieldType6.toString();
        boolean boolean8 = mutableDateTime0.isSupported(dateTimeFieldType6);
        int int9 = mutableDateTime0.getDayOfWeek();
        org.junit.Assert.assertNotNull(gregorianCalendar1);
        org.junit.Assert.assertNotNull(chronology2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1713359432344L + "'", long3 == 1713359432344L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "monthOfYear" + "'", str7, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.addMinutes((int) 'a');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0, chronology8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.secondOfDay();
        int int11 = mutableDateTime9.getWeekOfWeekyear();
        mutableDateTime9.setMillis((long) (-2));
        boolean boolean14 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime9);
        int int15 = mutableDateTime2.getMinuteOfHour();
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology16.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology16.era();
        org.joda.time.DurationField durationField20 = gregorianChronology16.seconds();
        org.joda.time.DurationField durationField21 = gregorianChronology16.millis();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology16.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str24 = dateTimeFieldType23.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField22, dateTimeFieldType23, (int) (short) 100);
        org.joda.time.DurationField durationField27 = remainderDateTimeField26.getRangeDurationField();
        int int28 = remainderDateTimeField26.getMaximumValue();
        long long30 = remainderDateTimeField26.roundCeiling((long) 2000);
        int int32 = remainderDateTimeField26.get(1712408905631L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) 0, chronology34);
        mutableDateTime35.setMonthOfYear(5);
        mutableDateTime35.setDayOfYear((int) (byte) 19);
        boolean boolean40 = mutableDateTime35.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone43 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime35.toMutableDateTime(dateTimeZone42);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.yearOfEra();
        org.joda.time.ReadableDuration readableDuration46 = null;
        mutableDateTime44.add(readableDuration46);
        mutableDateTime44.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology51 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean52 = dateTimeFieldType50.isSupported((org.joda.time.Chronology) gregorianChronology51);
        int int53 = mutableDateTime44.get(dateTimeFieldType50);
        java.lang.Number number55 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException57 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType50, (java.lang.Number) (-1.0f), number55, (java.lang.Number) (-1.0f));
        org.joda.time.field.DividedDateTimeField dividedDateTimeField58 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField26, dateTimeFieldType50);
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType50.getRangeDurationType();
        org.joda.time.IllegalFieldValueException illegalFieldValueException61 = new org.joda.time.IllegalFieldValueException(durationFieldType59, "16");
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.add(durationFieldType59, 99);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 37 + "'", int15 == 37);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "monthOfYear" + "'", str24, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 99 + "'", int28 == 99);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2000L + "'", long30 == 2000L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(cachedDateTimeZone43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(gregorianChronology51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType59);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology5.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gregorianChronology5.add(readablePeriod8, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        long long14 = dateTimeZone12.previousTransition(0L);
        java.lang.Object obj15 = dateTimeZone12.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology17 = gregorianChronology5.withZone(dateTimeZone12);
        mutableDateTime2.setChronology((org.joda.time.Chronology) gregorianChronology5);
        org.joda.time.DurationField durationField19 = gregorianChronology5.months();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = unsupportedDateTimeField30.getType();
        java.util.Locale locale37 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long38 = unsupportedDateTimeField30.set(20722348800129L, "19700101T020900.000+0209", locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str27, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        int int19 = mutableDateTime2.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DurationField durationField34 = unsupportedDateTimeField30.getLeapDurationField();
        org.joda.time.ReadablePartial readablePartial35 = null;
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial38 = null;
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology39.yearOfCentury();
        java.lang.String str41 = iSOChronology39.toString();
        org.joda.time.Chronology chronology42 = iSOChronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology39.yearOfEra();
        org.joda.time.ReadablePartial readablePartial44 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology46 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = gregorianChronology46.yearOfEra();
        org.joda.time.ReadablePartial readablePartial48 = null;
        int[] intArray55 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray57 = dateTimeField47.add(readablePartial48, 0, intArray55, 0);
        int[] intArray59 = dateTimeField43.addWrapPartial(readablePartial44, 70, intArray55, 0);
        int int60 = dateTimeField37.getMinimumValue(readablePartial38, intArray59);
        // The following exception was thrown during execution in test generation
        try {
            int int61 = unsupportedDateTimeField30.getMinimumValue(readablePartial35, intArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str27, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str41, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(gregorianChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.setMinuteOfHour(2024);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2024 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        mutableDateTime2.addWeeks(0);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime12.add(readableDuration13, 10);
        int int16 = mutableDateTime12.getWeekOfWeekyear();
        int int17 = mutableDateTime12.getMillisOfSecond();
        boolean boolean19 = mutableDateTime12.isAfter((long) 913);
        boolean boolean20 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.CENTURIES_TYPE;
        org.joda.time.chrono.GregorianChronology gregorianChronology22 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology22.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = gregorianChronology22.add(readablePeriod25, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology22.yearOfCentury();
        org.joda.time.DurationField durationField30 = gregorianChronology22.weekyears();
        org.joda.time.DurationField durationField31 = durationFieldType21.getField((org.joda.time.Chronology) gregorianChronology22);
        mutableDateTime12.setChronology((org.joda.time.Chronology) gregorianChronology22);
        org.joda.time.DurationField durationField33 = gregorianChronology22.weekyears();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology22.yearOfEra();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 616 + "'", int17 == 616);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(gregorianChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval6.toInterval();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = interval6.toPeriod(periodType12);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime14.add(readableDuration15, 10);
        int int18 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime14.hourOfDay();
        boolean boolean20 = interval6.isBefore((org.joda.time.ReadableInstant) mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicWeekDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.minuteOfDay();
        mutableDateTime12.addYears((int) (byte) 23);
        mutableDateTime12.setSecondOfDay((int) (byte) 15);
        org.joda.time.Chronology chronology18 = mutableDateTime12.getChronology();
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime12.add(readableDuration19);
        java.lang.String str21 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology18);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1993W032T000015+0000" + "'", str21, "1993W032T000015+0000");
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("+17:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"+17:00\" is malformed at \":00\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendClockhourOfDay(24);
        boolean boolean22 = dateTimeFormatterBuilder21.canBuildPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder21.appendPattern("");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder24.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder26.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder26.appendWeekOfWeekyear((int) '4');
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatterBuilder31.toParser();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) 0, chronology34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.roundHalfFloor();
        java.lang.String str38 = property36.toString();
        org.joda.time.DateTimeField dateTimeField39 = property36.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property36.getFieldType();
        org.joda.time.IllegalFieldValueException illegalFieldValueException42 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType40, "");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder31.appendShortText(dateTimeFieldType40);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder24.appendFixedSignedDecimal(dateTimeFieldType40, (int) 'a');
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeParser32);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Property[secondOfDay]" + "'", str38, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        int int60 = zeroIsMaxDateTimeField58.getLeapAmount(727401615000L);
        int int61 = zeroIsMaxDateTimeField58.getMaximumValue();
        long long63 = zeroIsMaxDateTimeField58.remainder(1713359432344L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 86400 + "'", int61 == 86400);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 344L + "'", long63 == 344L);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        int int5 = mutableDateTime4.getMinuteOfDay();
        int int6 = mutableDateTime4.getSecondOfDay();
        mutableDateTime4.setDate(0, 2, (int) (byte) 17);
        mutableDateTime4.setSecondOfDay(46);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0, chronology14);
        mutableDateTime15.setMonthOfYear(5);
        mutableDateTime15.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException22 = new org.joda.time.IllegalFieldValueException(durationFieldType20, "");
        java.lang.Throwable[] throwableArray23 = illegalFieldValueException22.getSuppressed();
        boolean boolean24 = mutableDateTime15.equals((java.lang.Object) illegalFieldValueException22);
        mutableDateTime15.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime15.add(readableDuration27);
        boolean boolean29 = mutableDateTime4.isEqual((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        long long32 = dateTimeZone30.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone33);
        int int35 = mutableDateTime34.getCenturyOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) 0, chronology37);
        mutableDateTime38.setMonthOfYear(5);
        mutableDateTime38.setDayOfYear((int) (byte) 19);
        boolean boolean43 = mutableDateTime38.isAfterNow();
        mutableDateTime38.addWeeks((int) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        mutableDateTime38.add(readablePeriod46);
        boolean boolean48 = mutableDateTime34.isBefore((org.joda.time.ReadableInstant) mutableDateTime38);
        mutableDateTime38.addHours(162);
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime38.toMutableDateTime();
        mutableDateTime4.setMillis((org.joda.time.ReadableInstant) mutableDateTime51);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20 + "'", int35 == 20);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mutableDateTime51);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        mutableDateTime2.addWeeks((int) (short) -1);
        java.lang.String str10 = mutableDateTime2.toString();
        long long11 = mutableDateTime2.getMillis();
        int int12 = mutableDateTime2.getYear();
        java.lang.Object obj13 = mutableDateTime2.clone();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-12T00:00:00.000Z" + "'", str10, "1970-01-12T00:00:00.000Z");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 950400000L + "'", long11 == 950400000L);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "1970-01-12T00:00:00.000Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-12T00:00:00.000Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-12T00:00:00.000Z");
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendMonthOfYear(0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder19.appendTwoDigitWeekyear((int) (byte) 11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        org.joda.time.DurationField durationField11 = remainderDateTimeField10.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial12 = null;
        java.util.Locale locale14 = null;
        java.lang.String str15 = remainderDateTimeField10.getAsShortText(readablePartial12, (int) (byte) 5, locale14);
        java.lang.String str17 = remainderDateTimeField10.getAsShortText((long) (byte) 3);
        long long19 = remainderDateTimeField10.roundHalfCeiling((long) (-11));
        org.joda.time.ReadablePartial readablePartial20 = null;
        java.util.Locale locale22 = null;
        java.lang.String str23 = remainderDateTimeField10.getAsText(readablePartial20, 1970, locale22);
        org.joda.time.DurationField durationField24 = remainderDateTimeField10.getRangeDurationField();
        long long27 = remainderDateTimeField10.add(94694399995L, (long) (byte) 23);
        org.joda.time.chrono.GregorianChronology gregorianChronology28 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gregorianChronology28.era();
        org.joda.time.DurationField durationField32 = gregorianChronology28.seconds();
        org.joda.time.DurationField durationField33 = gregorianChronology28.millis();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology28.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str36 = dateTimeFieldType35.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField38 = new org.joda.time.field.RemainderDateTimeField(dateTimeField34, dateTimeFieldType35, (int) (short) 100);
        org.joda.time.DurationField durationField39 = remainderDateTimeField38.getRangeDurationField();
        int int40 = remainderDateTimeField38.getMaximumValue();
        long long42 = remainderDateTimeField38.roundCeiling((long) 2000);
        int int44 = remainderDateTimeField38.get(1712408905631L);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) 0, chronology46);
        mutableDateTime47.setMonthOfYear(5);
        mutableDateTime47.setDayOfYear((int) (byte) 19);
        boolean boolean52 = mutableDateTime47.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone55 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone54);
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime47.toMutableDateTime(dateTimeZone54);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.yearOfEra();
        org.joda.time.ReadableDuration readableDuration58 = null;
        mutableDateTime56.add(readableDuration58);
        mutableDateTime56.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology63 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean64 = dateTimeFieldType62.isSupported((org.joda.time.Chronology) gregorianChronology63);
        int int65 = mutableDateTime56.get(dateTimeFieldType62);
        java.lang.Number number67 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException69 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType62, (java.lang.Number) (-1.0f), number67, (java.lang.Number) (-1.0f));
        org.joda.time.field.DividedDateTimeField dividedDateTimeField70 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField38, dateTimeFieldType62);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField71 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField10, dateTimeFieldType62);
        boolean boolean73 = zeroIsMaxDateTimeField71.isLeap(1712412000000L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "5" + "'", str15, "5");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970" + "'", str23, "1970");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 94694422995L + "'", long27 == 94694422995L);
        org.junit.Assert.assertNotNull(gregorianChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "monthOfYear" + "'", str36, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2000L + "'", long42 == 2000L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(cachedDateTimeZone55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(gregorianChronology63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1970 + "'", int65 == 1970);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter21.withZone(dateTimeZone24);
        int int26 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder0.append(dateTimeParser27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder0.appendSecondOfDay(236);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatterBuilder0.toFormatter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder0.appendCenturyOfEra(2000, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder0.appendFractionOfHour(714, 86399);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.util.GregorianCalendar gregorianCalendar1 = mutableDateTime0.toGregorianCalendar();
        mutableDateTime0.addWeeks(0);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0, chronology5);
        mutableDateTime6.setMonthOfYear(5);
        mutableDateTime6.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException13 = new org.joda.time.IllegalFieldValueException(durationFieldType11, "");
        java.lang.Throwable[] throwableArray14 = illegalFieldValueException13.getSuppressed();
        boolean boolean15 = mutableDateTime6.equals((java.lang.Object) illegalFieldValueException13);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime6.era();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18, 10);
        int int21 = mutableDateTime17.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.hourOfDay();
        org.joda.time.Interval interval23 = property22.toInterval();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        int int25 = mutableDateTime24.getMonthOfYear();
        boolean boolean26 = interval23.isAfter((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.Interval interval27 = interval23.toInterval();
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime28.add(readableDuration29, 10);
        int int32 = mutableDateTime28.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime28.hourOfDay();
        org.joda.time.Interval interval34 = property33.toInterval();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime35.add(readableDuration36, 10);
        int int39 = mutableDateTime35.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime35.hourOfDay();
        org.joda.time.Interval interval41 = property40.toInterval();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime();
        int int43 = mutableDateTime42.getMonthOfYear();
        boolean boolean44 = interval41.isAfter((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.Interval interval45 = interval41.toInterval();
        org.joda.time.Interval interval46 = interval41.toInterval();
        boolean boolean47 = interval34.isBefore((org.joda.time.ReadableInterval) interval41);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration49 = null;
        mutableDateTime48.add(readableDuration49, 10);
        int int52 = mutableDateTime48.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime48.hourOfDay();
        org.joda.time.Interval interval54 = property53.toInterval();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime();
        int int56 = mutableDateTime55.getMonthOfYear();
        boolean boolean57 = interval54.isAfter((org.joda.time.ReadableInstant) mutableDateTime55);
        org.joda.time.Interval interval58 = interval54.toInterval();
        org.joda.time.Interval interval59 = interval54.toInterval();
        boolean boolean60 = interval41.isAfter((org.joda.time.ReadableInterval) interval59);
        boolean boolean61 = interval27.overlaps((org.joda.time.ReadableInterval) interval59);
        org.joda.time.Duration duration62 = interval59.toDuration();
        org.joda.time.chrono.GregorianChronology gregorianChronology63 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField64 = gregorianChronology63.yearOfEra();
        org.joda.time.ReadablePartial readablePartial65 = null;
        int[] intArray72 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray74 = dateTimeField64.add(readablePartial65, 0, intArray72, 0);
        boolean boolean75 = duration62.equals((java.lang.Object) readablePartial65);
        java.lang.String str76 = duration62.toString();
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration62, 0);
        org.joda.time.Duration duration79 = duration62.toDuration();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration62);
        org.junit.Assert.assertNotNull(gregorianCalendar1);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 16 + "'", int32 == 16);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 16 + "'", int39 == 16);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mutableDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 16 + "'", int52 == 16);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(gregorianChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "PT3600S" + "'", str76, "PT3600S");
        org.junit.Assert.assertNotNull(duration79);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        org.joda.time.Chronology chronology13 = property12.getChronology();
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology14.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology19 = gregorianChronology14.withZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = gregorianChronology14.withUTC();
        long long26 = gregorianChronology14.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField27 = gregorianChronology14.months();
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime28.add(readableDuration29, 10);
        int int32 = mutableDateTime28.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime28.hourOfDay();
        org.joda.time.Interval interval34 = property33.toInterval();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        int int36 = mutableDateTime35.getMonthOfYear();
        boolean boolean37 = interval34.isAfter((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.Interval interval38 = interval34.toInterval();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = interval34.toPeriod(periodType39);
        int[] intArray43 = gregorianChronology14.get((org.joda.time.ReadablePeriod) period40, (long) 29, (long) 14);
        org.joda.time.Period period44 = period40.toPeriod();
        int[] intArray47 = chronology13.get((org.joda.time.ReadablePeriod) period44, (long) (short) 1, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField48 = chronology13.dayOfWeek();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1279002L + "'", long26 == 1279002L);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 16 + "'", int32 == 16);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 0, -2]");
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        int int7 = mutableDateTime2.getMillisOfDay();
        java.lang.String str9 = mutableDateTime2.toString("20250406");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime2.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.getMutableDateTime();
        boolean boolean12 = property10.isLeap();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "20250406" + "'", str9, "20250406");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        int int11 = remainderDateTimeField10.getDivisor();
        int int12 = remainderDateTimeField10.getMinimumValue();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0, chronology14);
        mutableDateTime15.setMonthOfYear(5);
        mutableDateTime15.setDayOfYear((int) (byte) 19);
        boolean boolean20 = mutableDateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone23 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime15.toMutableDateTime(dateTimeZone22);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.minuteOfDay();
        int int26 = mutableDateTime24.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfWeek();
        mutableDateTime24.setRounding(dateTimeField28, 5);
        int int31 = mutableDateTime24.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime24.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime24.set(dateTimeFieldType33, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology36 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology36.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology41 = gregorianChronology36.withZone(dateTimeZone40);
        long long45 = gregorianChronology36.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField46 = gregorianChronology36.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType33.getField((org.joda.time.Chronology) gregorianChronology36);
        java.lang.String str48 = dateTimeFieldType33.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField49 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField10, dateTimeFieldType33);
        long long52 = remainderDateTimeField10.set((-62071609478400000L), (int) (byte) 20);
        java.util.Locale locale54 = null;
        java.lang.String str55 = remainderDateTimeField10.getAsShortText((int) (byte) 3, locale54);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(cachedDateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 19 + "'", int31 == 19);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(gregorianChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 910L + "'", long45 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "era" + "'", str48, "era");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-62071609478380000L) + "'", long52 == (-62071609478380000L));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "3" + "'", str55, "3");
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.year();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone7.previousTransition(0L);
        java.lang.Object obj10 = dateTimeZone7.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone7);
        java.lang.String str13 = dateTimeZone7.getNameKey((long) (byte) 23);
        java.lang.String str15 = dateTimeZone7.getName(315705600019L);
        long long17 = dateTimeZone7.convertUTCToLocal((long) (byte) 17);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeUtils.getZone(dateTimeZone7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(2016, (-11), 18, (-28800000), (int) (byte) 8, 17, 12, dateTimeZone18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -28800000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 17L + "'", long17 == 17L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.addYears(1);
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime0.add(readableDuration8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        long long12 = dateTimeZone10.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone13 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        mutableDateTime0.setZoneRetainFields((org.joda.time.DateTimeZone) cachedDateTimeZone13);
        java.util.Locale locale16 = null;
        java.lang.String str17 = cachedDateTimeZone13.getName(52L, locale16);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology7.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = gregorianChronology7.add(readablePeriod10, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DurationField durationField14 = gregorianChronology7.days();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology7.year();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology7.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        int int21 = dateTimeZone19.getOffset((long) ' ');
        org.joda.time.Chronology chronology22 = gregorianChronology7.withZone(dateTimeZone19);
        java.lang.String str24 = dateTimeZone19.getShortName((long) 99);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(891, 94, 0, 330, 57600, (-5), (int) (byte) 9, dateTimeZone19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 330 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        java.lang.Object obj3 = dateTimeZone0.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone0);
        java.lang.String str6 = dateTimeZone0.getNameKey((long) (byte) 23);
        java.lang.String str8 = dateTimeZone0.getName(315705600019L);
        long long10 = dateTimeZone0.convertUTCToLocal((long) (byte) 17);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 0, chronology13);
        mutableDateTime14.setMonthOfYear(5);
        mutableDateTime14.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException21 = new org.joda.time.IllegalFieldValueException(durationFieldType19, "");
        java.lang.Throwable[] throwableArray22 = illegalFieldValueException21.getSuppressed();
        boolean boolean23 = mutableDateTime14.equals((java.lang.Object) illegalFieldValueException21);
        mutableDateTime14.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime14.add(readableDuration26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime14.add(durationFieldType28, 3);
        mutableDateTime14.addMillis((int) (byte) 23);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) 0, chronology34);
        mutableDateTime35.setMonthOfYear(5);
        mutableDateTime35.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException42 = new org.joda.time.IllegalFieldValueException(durationFieldType40, "");
        java.lang.Throwable[] throwableArray43 = illegalFieldValueException42.getSuppressed();
        boolean boolean44 = mutableDateTime35.equals((java.lang.Object) illegalFieldValueException42);
        mutableDateTime35.setSecondOfDay((int) (short) 10);
        mutableDateTime35.setWeekOfWeekyear((int) (short) 1);
        boolean boolean49 = mutableDateTime14.isAfter((org.joda.time.ReadableInstant) mutableDateTime35);
        int int50 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 17L + "'", long10 == 17L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.getDifferenceAsLong(2493331200000L, (long) 18);
        int int36 = unsupportedDateTimeField30.getDifference(39601970L, (-7740000L));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = unsupportedDateTimeField30.getAsShortText((long) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str27, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 41555519L + "'", long33 == 41555519L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 789 + "'", int36 == 789);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        int int21 = mutableDateTime2.getDayOfYear();
        int int22 = mutableDateTime2.getEra();
        mutableDateTime2.addMinutes(863);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(57);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        long long5 = dateTimeField2.add((long) (byte) 10, (long) 100);
        java.util.Locale locale8 = null;
        long long9 = dateTimeField2.set(9467028540L, "1", locale8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimeField2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 360000010L + "'", long5 == 360000010L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9467028540L + "'", long9 == 9467028540L);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        mutableDateTime3.addMonths((-28800000));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0, chronology15);
        mutableDateTime16.setMonthOfYear(5);
        mutableDateTime16.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException23 = new org.joda.time.IllegalFieldValueException(durationFieldType21, "");
        java.lang.Throwable[] throwableArray24 = illegalFieldValueException23.getSuppressed();
        boolean boolean25 = mutableDateTime16.equals((java.lang.Object) illegalFieldValueException23);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime16.dayOfYear();
        int int27 = property26.getMinimumValue();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 0, chronology30);
        mutableDateTime31.setMonthOfYear(5);
        mutableDateTime31.addMinutes((int) 'a');
        boolean boolean36 = interval28.contains((org.joda.time.ReadableInstant) mutableDateTime31);
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean19 = dateTimeFieldType17.isSupported((org.joda.time.Chronology) gregorianChronology18);
        int int20 = mutableDateTime11.get(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime11.hourOfDay();
        boolean boolean22 = property21.isLeap();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        int int24 = property21.getMinimumValue();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendClockhourOfDay(24);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTwoDigitWeekyear(410);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("DurationField[months]", "", 0, (int) (byte) 0);
        java.lang.String str6 = fixedDateTimeZone4.getName((long) (-1));
        int int8 = fixedDateTimeZone4.getOffsetFromLocal((long) '4');
        boolean boolean9 = fixedDateTimeZone4.isFixed();
        java.lang.Object obj10 = fixedDateTimeZone4.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        long long13 = fixedDateTimeZone4.previousTransition(21100L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 21100L + "'", long13 == 21100L);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.getDifferenceAsLong(2493331200000L, (long) 18);
        org.joda.time.DurationField durationField34 = unsupportedDateTimeField30.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale locale37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = unsupportedDateTimeField30.getAsShortText(readablePartial35, 913, locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str27, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 41555519L + "'", long33 == 41555519L);
        org.junit.Assert.assertNull(durationField34);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        long long14 = preciseDurationField11.add(2524556160000L, (-292275054));
        long long17 = preciseDurationField11.add(1969L, (int) (short) -1);
        long long20 = preciseDurationField11.add((long) 9, (long) 0);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.yearOfCentury();
        java.lang.String str23 = iSOChronology21.toString();
        org.joda.time.Chronology chronology24 = iSOChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.era();
        org.joda.time.DurationField durationField26 = iSOChronology21.centuries();
        int int27 = preciseDurationField11.compareTo(durationField26);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2524556160000L + "'", long14 == 2524556160000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1969L + "'", long17 == 1969L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 9L + "'", long20 == 9L);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str23, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter7.withZone(dateTimeZone10);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone12 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) cachedDateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str15 = dateTimeFieldType14.toString();
        boolean boolean16 = cachedDateTimeZone12.equals((java.lang.Object) dateTimeFieldType14);
        boolean boolean17 = cachedDateTimeZone12.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(2024, 94, 0, 8, 7740, 1, 39, (org.joda.time.DateTimeZone) cachedDateTimeZone12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7740 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(cachedDateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "monthOfYear" + "'", str15, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        long long14 = preciseDurationField11.add(2524556160000L, (-292275054));
        long long17 = preciseDurationField11.add((long) 57600000, (-62071747199903L));
        boolean boolean18 = preciseDurationField11.isSupported();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2524556160000L + "'", long14 == 2524556160000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 57600000L + "'", long17 == 57600000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.getDifferenceAsLong(2493331200000L, (long) 18);
        long long36 = unsupportedDateTimeField30.add(81522028800000L, 18);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = unsupportedDateTimeField30.roundCeiling((-3074436616636800000L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 41555519L + "'", long33 == 41555519L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 81522029880000L + "'", long36 == 81522029880000L);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval6.toInterval();
        long long12 = interval6.getEndMillis();
        org.joda.time.DateTime dateTime13 = interval6.getStart();
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        int int15 = dateTime13.getYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1713361860000L + "'", long12 == 1713361860000L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2024 + "'", int15 == 2024);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.timeParser();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
        java.lang.StringBuffer stringBuffer3 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0, chronology5);
        mutableDateTime6.setMonthOfYear(5);
        mutableDateTime6.setDayOfYear((int) (byte) 19);
        boolean boolean11 = mutableDateTime6.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone14 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime6.toMutableDateTime(dateTimeZone13);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.minuteOfDay();
        int int17 = mutableDateTime15.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology18.dayOfWeek();
        mutableDateTime15.setRounding(dateTimeField19, 5);
        int int22 = mutableDateTime15.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime15.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.add((int) (byte) 100);
        org.joda.time.DateTime dateTime26 = mutableDateTime25.toDateTime();
        mutableDateTime25.setYear((int) (byte) 6);
        boolean boolean30 = mutableDateTime25.isBefore(20952001140040L);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(stringBuffer3, (org.joda.time.ReadableInstant) mutableDateTime25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(cachedDateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 18 + "'", int22 == 18);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0, chronology5);
        mutableDateTime6.setMonthOfYear(5);
        mutableDateTime6.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException13 = new org.joda.time.IllegalFieldValueException(durationFieldType11, "");
        java.lang.Throwable[] throwableArray14 = illegalFieldValueException13.getSuppressed();
        boolean boolean15 = mutableDateTime6.equals((java.lang.Object) illegalFieldValueException13);
        mutableDateTime6.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime6.add(readableDuration18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableDateTime6.add(readablePeriod20, 0);
        mutableDateTime6.setYear((-28800000));
        mutableDateTime6.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0, chronology28);
        mutableDateTime29.setMonthOfYear(5);
        mutableDateTime29.setDayOfYear((int) (byte) 19);
        boolean boolean34 = mutableDateTime29.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone37 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime29.toMutableDateTime(dateTimeZone36);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.minuteOfDay();
        int int40 = mutableDateTime38.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.dayOfWeek();
        mutableDateTime38.setRounding(dateTimeField42, 5);
        int int45 = mutableDateTime38.getDayOfMonth();
        boolean boolean46 = mutableDateTime6.isAfter((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        long long49 = dateTimeZone47.previousTransition(0L);
        java.lang.Object obj50 = dateTimeZone47.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone47);
        java.lang.String str53 = dateTimeZone47.getNameKey((long) (byte) 23);
        mutableDateTime38.setZoneRetainFields(dateTimeZone47);
        org.joda.time.chrono.GregorianChronology gregorianChronology55 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField56 = gregorianChronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField57 = gregorianChronology55.secondOfDay();
        org.joda.time.DateTimeField dateTimeField58 = gregorianChronology55.era();
        org.joda.time.DurationField durationField59 = gregorianChronology55.seconds();
        org.joda.time.DurationField durationField60 = gregorianChronology55.millis();
        org.joda.time.DateTimeField dateTimeField61 = gregorianChronology55.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str63 = dateTimeFieldType62.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField65 = new org.joda.time.field.RemainderDateTimeField(dateTimeField61, dateTimeFieldType62, (int) (short) 100);
        org.joda.time.DurationField durationField66 = remainderDateTimeField65.getRangeDurationField();
        org.joda.time.DurationField durationField67 = remainderDateTimeField65.getDurationField();
        org.joda.time.chrono.GregorianChronology gregorianChronology68 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField69 = gregorianChronology68.yearOfEra();
        org.joda.time.DateTimeField dateTimeField70 = gregorianChronology68.secondOfDay();
        org.joda.time.DateTimeField dateTimeField71 = gregorianChronology68.monthOfYear();
        org.joda.time.DurationField durationField72 = gregorianChronology68.months();
        org.joda.time.chrono.GregorianChronology gregorianChronology73 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField74 = gregorianChronology73.yearOfEra();
        org.joda.time.DateTimeField dateTimeField75 = gregorianChronology73.secondOfDay();
        org.joda.time.DateTimeField dateTimeField76 = gregorianChronology73.era();
        org.joda.time.DurationField durationField77 = gregorianChronology73.seconds();
        org.joda.time.DurationField durationField78 = gregorianChronology73.millis();
        org.joda.time.DateTimeField dateTimeField79 = gregorianChronology73.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str81 = dateTimeFieldType80.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField83 = new org.joda.time.field.RemainderDateTimeField(dateTimeField79, dateTimeFieldType80, (int) (short) 100);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField84 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField65, durationField72, dateTimeFieldType80);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField86 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField84, dateTimeFieldType85);
        boolean boolean87 = mutableDateTime38.equals((java.lang.Object) dateTimeFieldType85);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder88 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType85);
        dateTimeFormatterBuilder88.clear();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(cachedDateTimeZone37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 18 + "'", int45 == 18);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(gregorianChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "monthOfYear" + "'", str63, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(gregorianChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(gregorianChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "monthOfYear" + "'", str81, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder88);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone2 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone1);
        boolean boolean4 = cachedDateTimeZone2.isStandardOffset((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0, chronology6);
        mutableDateTime7.setMonthOfYear(5);
        mutableDateTime7.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException14 = new org.joda.time.IllegalFieldValueException(durationFieldType12, "");
        java.lang.Throwable[] throwableArray15 = illegalFieldValueException14.getSuppressed();
        boolean boolean16 = mutableDateTime7.equals((java.lang.Object) illegalFieldValueException14);
        mutableDateTime7.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime7.add(readableDuration19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutableDateTime7.add(readablePeriod21, 0);
        mutableDateTime7.setYear((-28800000));
        mutableDateTime7.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 0, chronology29);
        mutableDateTime30.setMonthOfYear(5);
        mutableDateTime30.setDayOfYear((int) (byte) 19);
        boolean boolean35 = mutableDateTime30.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone38 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime30.toMutableDateTime(dateTimeZone37);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.minuteOfDay();
        int int41 = mutableDateTime39.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology42.dayOfWeek();
        mutableDateTime39.setRounding(dateTimeField43, 5);
        int int46 = mutableDateTime39.getDayOfMonth();
        boolean boolean47 = mutableDateTime7.isAfter((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        long long50 = dateTimeZone48.previousTransition(0L);
        java.lang.Object obj51 = dateTimeZone48.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(dateTimeZone48);
        java.lang.String str54 = dateTimeZone48.getNameKey((long) (byte) 23);
        mutableDateTime39.setZoneRetainFields(dateTimeZone48);
        boolean boolean56 = cachedDateTimeZone2.equals((java.lang.Object) mutableDateTime39);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime39.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime58 = property57.roundHalfFloor();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(cachedDateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(cachedDateTimeZone38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 18 + "'", int46 == 18);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        mutableDateTime12.setSecondOfMinute((int) '#');
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.yearOfCentury();
        java.lang.String str19 = iSOChronology17.toString();
        org.joda.time.Chronology chronology20 = iSOChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology17.yearOfEra();
        org.joda.time.ReadablePartial readablePartial22 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology24 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology24.yearOfEra();
        org.joda.time.ReadablePartial readablePartial26 = null;
        int[] intArray33 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray35 = dateTimeField25.add(readablePartial26, 0, intArray33, 0);
        int[] intArray37 = dateTimeField21.addWrapPartial(readablePartial22, 70, intArray33, 0);
        long long39 = dateTimeField21.roundHalfEven((long) 100);
        mutableDateTime12.setRounding(dateTimeField21);
        int int42 = dateTimeField21.getMaximumValue(100000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7740000 + "'", int13 == 7740000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+02:09]" + "'", str19, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(gregorianChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-7740000L) + "'", long39 == (-7740000L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 292278993 + "'", int42 == 292278993);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setSecondOfDay(12);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.dayOfYear();
        int int13 = property12.getMinimumValue();
        org.joda.time.Interval interval14 = property12.toInterval();
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = interval14.contains(readableInstant15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval14);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        mutableDateTime2.addWeekyears(46);
        int int18 = mutableDateTime2.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = mutableDateTime2.toString("PT1H");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7 + "'", int18 == 7);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = gregorianChronology1.months();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.weekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withZone(dateTimeZone7);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone9 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone7.getName(0L, locale11);
        java.lang.Object obj13 = dateTimeZone7.writeReplace();
        org.joda.time.Chronology chronology14 = gregorianChronology1.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, (org.joda.time.Chronology) gregorianChronology1);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(cachedDateTimeZone9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+02:09" + "'", str12, "+02:09");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getMonthOfYear();
        int int2 = mutableDateTime0.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2024 + "'", int2 == 2024);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.centuries();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology7.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology12 = gregorianChronology7.withZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = gregorianChronology7.withUTC();
        long long19 = gregorianChronology7.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField20 = gregorianChronology7.months();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22, 10);
        int int25 = mutableDateTime21.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime21.hourOfDay();
        org.joda.time.Interval interval27 = property26.toInterval();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime();
        int int29 = mutableDateTime28.getMonthOfYear();
        boolean boolean30 = interval27.isAfter((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.Interval interval31 = interval27.toInterval();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = interval27.toPeriod(periodType32);
        int[] intArray36 = gregorianChronology7.get((org.joda.time.ReadablePeriod) period33, (long) 29, (long) 14);
        int[] intArray39 = iSOChronology6.get((org.joda.time.ReadablePeriod) period33, 0L, 39601970L);
        int[] intArray41 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period33, (long) (short) 10);
        java.lang.String str42 = period33.toString();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1279002L + "'", long19 == 1279002L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 11, 0, 1, 970]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT1H" + "'", str42, "PT1H");
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addHours(97);
        boolean boolean3 = mutableDateTime0.isAfterNow();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0, chronology5);
        mutableDateTime6.setMonthOfYear(5);
        mutableDateTime6.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException13 = new org.joda.time.IllegalFieldValueException(durationFieldType11, "");
        java.lang.Throwable[] throwableArray14 = illegalFieldValueException13.getSuppressed();
        boolean boolean15 = mutableDateTime6.equals((java.lang.Object) illegalFieldValueException13);
        mutableDateTime6.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime6.add(readableDuration18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableDateTime6.add(readablePeriod20, 0);
        mutableDateTime6.setYear((-28800000));
        mutableDateTime6.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0, chronology28);
        mutableDateTime29.setMonthOfYear(5);
        mutableDateTime29.setDayOfYear((int) (byte) 19);
        boolean boolean34 = mutableDateTime29.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone37 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime29.toMutableDateTime(dateTimeZone36);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.minuteOfDay();
        int int40 = mutableDateTime38.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.dayOfWeek();
        mutableDateTime38.setRounding(dateTimeField42, 5);
        int int45 = mutableDateTime38.getDayOfMonth();
        boolean boolean46 = mutableDateTime6.isAfter((org.joda.time.ReadableInstant) mutableDateTime38);
        mutableDateTime38.setDayOfYear((int) (short) 100);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime38);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime38.setMinuteOfHour(391);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 391 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(cachedDateTimeZone37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 18 + "'", int45 == 18);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime2.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime2.toMutableDateTime();
        mutableDateTime22.addDays((int) (short) 100);
        boolean boolean25 = mutableDateTime22.isEqualNow();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean19 = dateTimeFieldType17.isSupported((org.joda.time.Chronology) gregorianChronology18);
        int int20 = mutableDateTime11.get(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime11.hourOfDay();
        int int22 = mutableDateTime11.getYear();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime11.year();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime11.millisOfDay();
        java.util.Locale locale25 = null;
        int int26 = property24.getMaximumTextLength(locale25);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = unsupportedDateTimeField30.getType();
        org.joda.time.DurationField durationField35 = unsupportedDateTimeField30.getLeapDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long37 = unsupportedDateTimeField30.remainder((-7754611807161L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNull(durationField35);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        mutableDateTime4.addHours((int) (byte) 23);
        org.joda.time.DateTime dateTime7 = mutableDateTime4.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime4.copy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime2.setZoneRetainFields(dateTimeZone21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) mutableDateTime34);
        mutableDateTime34.setYear((int) (byte) 10);
        int int44 = mutableDateTime34.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime34.minuteOfDay();
        mutableDateTime34.addYears((int) (byte) 13);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval6.toInterval();
        org.joda.time.DateTime dateTime12 = interval6.getStart();
        org.joda.time.MutableInterval mutableInterval13 = interval6.toMutableInterval();
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology14.era();
        org.joda.time.DurationField durationField18 = gregorianChronology14.seconds();
        org.joda.time.DurationField durationField19 = gregorianChronology14.centuries();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology14.dayOfMonth();
        org.joda.time.DurationField durationField21 = gregorianChronology14.years();
        org.joda.time.DurationField durationField22 = gregorianChronology14.millis();
        boolean boolean23 = mutableInterval13.equals((java.lang.Object) gregorianChronology14);
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.Chronology chronology28 = iSOChronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology25.yearOfEra();
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology32 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = gregorianChronology32.yearOfEra();
        org.joda.time.ReadablePartial readablePartial34 = null;
        int[] intArray41 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray43 = dateTimeField33.add(readablePartial34, 0, intArray41, 0);
        int[] intArray45 = dateTimeField29.addWrapPartial(readablePartial30, 70, intArray41, 0);
        // The following exception was thrown during execution in test generation
        try {
            gregorianChronology14.validate(readablePartial24, intArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(gregorianChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 97, 23, 5]");
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        java.lang.Object obj0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        long long7 = gregorianChronology1.add(readablePeriod4, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(obj0, (org.joda.time.Chronology) gregorianChronology1);
        mutableDateTime9.setSecondOfMinute((int) (byte) 13);
        org.joda.time.chrono.GregorianChronology gregorianChronology12 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology12.yearOfEra();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray23 = dateTimeField13.add(readablePartial14, 0, intArray21, 0);
        boolean boolean24 = dateTimeField13.isSupported();
        org.joda.time.ReadablePartial readablePartial25 = null;
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.yearOfCentury();
        java.lang.String str28 = iSOChronology26.toString();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology26.era();
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology32 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = gregorianChronology32.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology32.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology32.era();
        org.joda.time.DurationField durationField36 = gregorianChronology32.seconds();
        org.joda.time.DurationField durationField37 = gregorianChronology32.millis();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology32.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str40 = dateTimeFieldType39.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField42 = new org.joda.time.field.RemainderDateTimeField(dateTimeField38, dateTimeFieldType39, (int) (short) 100);
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology44 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = gregorianChronology44.yearOfEra();
        org.joda.time.ReadablePartial readablePartial46 = null;
        int[] intArray53 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray55 = dateTimeField45.add(readablePartial46, 0, intArray53, 0);
        int int56 = remainderDateTimeField42.getMaximumValue(readablePartial43, intArray53);
        int[] intArray58 = dateTimeField29.add(readablePartial30, (int) (short) 100, intArray53, (int) (byte) 0);
        int int59 = dateTimeField13.getMinimumValue(readablePartial25, intArray53);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) 0, chronology61);
        mutableDateTime62.setMonthOfYear(5);
        java.lang.Object obj65 = null;
        boolean boolean66 = mutableDateTime62.equals(obj65);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime62.add(durationFieldType67, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField71 = new org.joda.time.field.PreciseDurationField(durationFieldType67, (long) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField74 = new org.joda.time.field.RemainderDateTimeField(dateTimeField13, (org.joda.time.DurationField) preciseDurationField71, dateTimeFieldType72, 913);
        int int75 = mutableDateTime9.get(dateTimeFieldType72);
        java.lang.String str76 = dateTimeFieldType72.toString();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(gregorianChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[+02:09]" + "'", str28, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(gregorianChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "monthOfYear" + "'", str40, "monthOfYear");
        org.junit.Assert.assertNotNull(gregorianChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 99 + "'", int56 == 99);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "minuteOfHour" + "'", str76, "minuteOfHour");
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.addYears(1);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.millisOfSecond();
        mutableDateTime0.addDays((int) (byte) 0);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8, 10);
        int int11 = mutableDateTime7.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime7.hourOfDay();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        int int15 = mutableDateTime14.getMonthOfYear();
        boolean boolean16 = interval13.isAfter((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Interval interval17 = interval13.toInterval();
        org.joda.time.Interval interval18 = interval13.toInterval();
        boolean boolean19 = interval6.isBefore((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0, chronology21);
        mutableDateTime22.setMonthOfYear(5);
        mutableDateTime22.setDayOfYear((int) (byte) 19);
        boolean boolean27 = mutableDateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone30 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime22.toMutableDateTime(dateTimeZone29);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.minuteOfDay();
        boolean boolean33 = interval13.contains((org.joda.time.ReadableInstant) mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(cachedDateTimeZone30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        java.lang.Object obj3 = dateTimeZone0.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone0);
        java.lang.String str6 = dateTimeZone0.getNameKey((long) (byte) 23);
        java.lang.String str8 = dateTimeZone0.getName(315705600019L);
        long long11 = dateTimeZone0.convertLocalToUTC((long) 1969, true);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+02:09" + "'", str8, "+02:09");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-7738031L) + "'", long11 == (-7738031L));
        org.junit.Assert.assertNotNull(iSOChronology12);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType16, 3);
        mutableDateTime2.addMillis((int) (byte) 23);
        mutableDateTime2.setMillis((-62071609478380000L));
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationFieldType16);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.MutableDateTime mutableDateTime9 = property5.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime12 = property5.set("ISOChronology[DurationField[months]]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ISOChronology[DurationField[months]]\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.dayOfYear();
        org.joda.time.DateTime dateTime13 = mutableDateTime2.toDateTimeISO();
        org.joda.time.Instant instant14 = dateTime13.toInstant();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(instant14);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        mutableDateTime2.addWeeks((int) (byte) 8);
        int int23 = mutableDateTime2.getRoundingMode();
        int int24 = mutableDateTime2.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime2.yearOfEra();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 26 + "'", int24 == 26);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        boolean boolean15 = mutableDateTime12.isEqualNow();
        int int16 = mutableDateTime12.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime12.year();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7740000 + "'", int13 == 7740000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime3.add(durationFieldType12, (int) (byte) 0);
        org.joda.time.Instant instant15 = mutableDateTime3.toInstant();
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime3.getZone();
        int int17 = mutableDateTime3.getYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZone(dateTimeZone3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withOffsetParsed();
        java.lang.Appendable appendable8 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0, chronology10);
        mutableDateTime11.setMonthOfYear(5);
        mutableDateTime11.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime11.add(readablePeriod16, (int) (byte) 13);
        int int19 = mutableDateTime11.getDayOfYear();
        int int20 = mutableDateTime11.getYearOfCentury();
        int int21 = mutableDateTime11.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime11.add(readableDuration22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 0, chronology25);
        mutableDateTime26.setMonthOfYear(5);
        mutableDateTime26.setDayOfYear((int) (byte) 19);
        boolean boolean31 = mutableDateTime26.isAfterNow();
        java.util.GregorianCalendar gregorianCalendar32 = mutableDateTime26.toGregorianCalendar();
        boolean boolean33 = mutableDateTime11.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(appendable8, (org.joda.time.ReadableInstant) mutableDateTime26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 70 + "'", int20 == 70);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 129 + "'", int21 == 129);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        mutableDateTime4.addHours((int) (byte) 23);
        org.joda.time.DateTime dateTime7 = mutableDateTime4.toDateTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0, chronology9);
        mutableDateTime10.setMonthOfYear(5);
        mutableDateTime10.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException17 = new org.joda.time.IllegalFieldValueException(durationFieldType15, "");
        java.lang.Throwable[] throwableArray18 = illegalFieldValueException17.getSuppressed();
        boolean boolean19 = mutableDateTime10.equals((java.lang.Object) illegalFieldValueException17);
        mutableDateTime10.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime10.add(readableDuration22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableDateTime10.add(readablePeriod24, 0);
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime10.add(readableDuration27);
        int int29 = mutableDateTime10.getDayOfYear();
        int int30 = mutableDateTime10.getEra();
        mutableDateTime4.setDate((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime10.setMinuteOfHour(57);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 0, chronology16);
        mutableDateTime17.setMonthOfYear(5);
        mutableDateTime17.setDayOfYear((int) (byte) 19);
        boolean boolean22 = mutableDateTime17.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone25 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime17.toMutableDateTime(dateTimeZone24);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.yearOfEra();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime26.add(readableDuration28);
        mutableDateTime26.setHourOfDay((int) (short) 1);
        int int32 = mutableDateTime26.getMonthOfYear();
        org.joda.time.chrono.GregorianChronology gregorianChronology33 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology33.secondOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology33.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology38 = gregorianChronology33.withZone(dateTimeZone37);
        mutableDateTime26.setZoneRetainFields(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime11.toMutableDateTime(dateTimeZone37);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime40.setTime(9, (-4), (int) (byte) 10, 57601970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -4 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(cachedDateTimeZone25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(gregorianChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        mutableDateTime2.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        int int41 = mutableDateTime34.getDayOfMonth();
        boolean boolean42 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        long long45 = dateTimeZone43.previousTransition(0L);
        java.lang.Object obj46 = dateTimeZone43.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone43);
        java.lang.String str49 = dateTimeZone43.getNameKey((long) (byte) 23);
        mutableDateTime34.setZoneRetainFields(dateTimeZone43);
        org.joda.time.chrono.GregorianChronology gregorianChronology51 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology51.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = gregorianChronology51.secondOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gregorianChronology51.era();
        org.joda.time.DurationField durationField55 = gregorianChronology51.seconds();
        org.joda.time.DurationField durationField56 = gregorianChronology51.millis();
        org.joda.time.DateTimeField dateTimeField57 = gregorianChronology51.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str59 = dateTimeFieldType58.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField61 = new org.joda.time.field.RemainderDateTimeField(dateTimeField57, dateTimeFieldType58, (int) (short) 100);
        org.joda.time.DurationField durationField62 = remainderDateTimeField61.getRangeDurationField();
        org.joda.time.DurationField durationField63 = remainderDateTimeField61.getDurationField();
        org.joda.time.chrono.GregorianChronology gregorianChronology64 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField65 = gregorianChronology64.yearOfEra();
        org.joda.time.DateTimeField dateTimeField66 = gregorianChronology64.secondOfDay();
        org.joda.time.DateTimeField dateTimeField67 = gregorianChronology64.monthOfYear();
        org.joda.time.DurationField durationField68 = gregorianChronology64.months();
        org.joda.time.chrono.GregorianChronology gregorianChronology69 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField70 = gregorianChronology69.yearOfEra();
        org.joda.time.DateTimeField dateTimeField71 = gregorianChronology69.secondOfDay();
        org.joda.time.DateTimeField dateTimeField72 = gregorianChronology69.era();
        org.joda.time.DurationField durationField73 = gregorianChronology69.seconds();
        org.joda.time.DurationField durationField74 = gregorianChronology69.millis();
        org.joda.time.DateTimeField dateTimeField75 = gregorianChronology69.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str77 = dateTimeFieldType76.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField79 = new org.joda.time.field.RemainderDateTimeField(dateTimeField75, dateTimeFieldType76, (int) (short) 100);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField80 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField61, durationField68, dateTimeFieldType76);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField82 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField80, dateTimeFieldType81);
        boolean boolean83 = mutableDateTime34.equals((java.lang.Object) dateTimeFieldType81);
        mutableDateTime34.setSecondOfMinute(39);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 18 + "'", int41 == 18);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(gregorianChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "monthOfYear" + "'", str59, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(gregorianChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(gregorianChronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "monthOfYear" + "'", str77, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        java.lang.StringBuffer stringBuffer12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(stringBuffer12, readableInstant13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = gregorianChronology0.withUTC();
        long long10 = gregorianChronology0.add((long) 97, 2678400910L, (int) (byte) 15);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gregorianChronology0);
        mutableDateTime11.addMillis((int) (byte) 2);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        long long16 = dateTimeZone14.previousTransition(0L);
        java.lang.Object obj17 = dateTimeZone14.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime11, dateTimeZone14);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 40176013747L + "'", long10 == 40176013747L);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(obj17);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.getDifferenceAsLong(2493331200000L, (long) 18);
        long long36 = unsupportedDateTimeField30.add(81522028800000L, 18);
        org.joda.time.ReadablePartial readablePartial37 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology39 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology39.yearOfEra();
        org.joda.time.ReadablePartial readablePartial41 = null;
        int[] intArray48 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray50 = dateTimeField40.add(readablePartial41, 0, intArray48, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray52 = unsupportedDateTimeField30.add(readablePartial37, 0, intArray48, (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 41555519L + "'", long33 == 41555519L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 81522029880000L + "'", long36 == 81522029880000L);
        org.junit.Assert.assertNotNull(gregorianChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 97, 23, 5]");
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DurationField durationField34 = unsupportedDateTimeField30.getLeapDurationField();
        long long37 = unsupportedDateTimeField30.add((-61370611199985L), (int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = unsupportedDateTimeField30.getType();
        org.joda.time.DurationField durationField39 = unsupportedDateTimeField30.getDurationField();
        org.joda.time.ReadablePartial readablePartial40 = null;
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology42.yearOfCentury();
        java.lang.String str44 = iSOChronology42.toString();
        org.joda.time.Chronology chronology45 = iSOChronology42.withUTC();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology42.yearOfEra();
        org.joda.time.ReadablePartial readablePartial47 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology49 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology49.yearOfEra();
        org.joda.time.ReadablePartial readablePartial51 = null;
        int[] intArray58 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray60 = dateTimeField50.add(readablePartial51, 0, intArray58, 0);
        int[] intArray62 = dateTimeField46.addWrapPartial(readablePartial47, 70, intArray58, 0);
        java.util.Locale locale64 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray65 = unsupportedDateTimeField30.set(readablePartial40, 57, intArray58, "Saturday", locale64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-61370611259985L) + "'", long37 == (-61370611259985L));
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[+02:09]" + "'", str44, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(gregorianChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 97, 23, 5]");
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        int int18 = mutableDateTime11.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime11.set(dateTimeFieldType20, 0);
        mutableDateTime11.setDayOfYear((int) (byte) 20);
        int int25 = mutableDateTime11.getCenturyOfEra();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) 0, chronology27);
        mutableDateTime28.setMonthOfYear(5);
        mutableDateTime28.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException35 = new org.joda.time.IllegalFieldValueException(durationFieldType33, "");
        java.lang.Throwable[] throwableArray36 = illegalFieldValueException35.getSuppressed();
        boolean boolean37 = mutableDateTime28.equals((java.lang.Object) illegalFieldValueException35);
        mutableDateTime28.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime28.add(readableDuration40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        mutableDateTime28.add(readablePeriod42, 0);
        mutableDateTime28.setYear((-28800000));
        mutableDateTime28.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) 0, chronology50);
        mutableDateTime51.setMonthOfYear(5);
        mutableDateTime51.setDayOfYear((int) (byte) 19);
        boolean boolean56 = mutableDateTime51.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone59 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone58);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime51.toMutableDateTime(dateTimeZone58);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.minuteOfDay();
        int int62 = mutableDateTime60.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology63 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology63.dayOfWeek();
        mutableDateTime60.setRounding(dateTimeField64, 5);
        int int67 = mutableDateTime60.getDayOfMonth();
        boolean boolean68 = mutableDateTime28.isAfter((org.joda.time.ReadableInstant) mutableDateTime60);
        mutableDateTime60.setDayOfYear((int) (short) 100);
        java.lang.String str71 = mutableDateTime60.toString();
        int int72 = mutableDateTime60.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        long long75 = dateTimeZone73.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone76 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone73);
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone76);
        mutableDateTime60.setZoneRetainFields((org.joda.time.DateTimeZone) cachedDateTimeZone76);
        boolean boolean79 = mutableDateTime11.isEqual((org.joda.time.ReadableInstant) mutableDateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 18 + "'", int18 == 18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 19 + "'", int25 == 19);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(cachedDateTimeZone59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertNotNull(iSOChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 18 + "'", int67 == 18);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1970-04-10T21:51:00.005+00:00:00.005" + "'", str71, "1970-04-10T21:51:00.005+00:00:00.005");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        mutableDateTime3.addSeconds(10);
        mutableDateTime3.addWeekyears(20);
        int int16 = mutableDateTime3.getSecondOfDay();
        java.lang.String str18 = mutableDateTime3.toString("5");
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime3.millisOfSecond();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime3.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7750 + "'", int16 == 7750);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "5" + "'", str18, "5");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField5 = gregorianChronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology4.getZone();
        java.lang.String str8 = dateTimeZone7.toString();
        boolean boolean9 = iSOChronology0.equals((java.lang.Object) str8);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField11 = dateTimeField10.getDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.yearOfCentury();
        mutableDateTime0.setRounding(dateTimeField6);
        boolean boolean8 = mutableDateTime0.isBeforeNow();
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology9.era();
        org.joda.time.DurationField durationField13 = gregorianChronology9.seconds();
        org.joda.time.DurationField durationField14 = gregorianChronology9.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter15.withZone(dateTimeZone18);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone20 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone18);
        org.joda.time.Chronology chronology21 = gregorianChronology9.withZone(dateTimeZone18);
        boolean boolean23 = dateTimeZone18.isStandardOffset((long) 4);
        mutableDateTime0.setZone(dateTimeZone18);
        boolean boolean26 = dateTimeZone18.isStandardOffset((long) (byte) 16);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(cachedDateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime2.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime2.toMutableDateTime();
        mutableDateTime22.addDays((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime22.setDate(34, 34, (int) (byte) 8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        boolean boolean12 = preciseDurationField11.isPrecise();
        boolean boolean13 = preciseDurationField11.isSupported();
        long long16 = preciseDurationField11.getMillis((long) 57600, (long) '4');
        boolean boolean18 = preciseDurationField11.equals((java.lang.Object) 17124089L);
        long long21 = preciseDurationField11.getMillis(1712408918887L, (long) 5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        int int7 = mutableDateTime2.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.year();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime2.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        long long12 = dateTimeZone10.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone13 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone13);
        int int15 = mutableDateTime14.getCenturyOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology21 = gregorianChronology16.withZone(dateTimeZone20);
        long long25 = gregorianChronology16.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField26 = gregorianChronology16.years();
        org.joda.time.DateTime dateTime27 = mutableDateTime14.toDateTime((org.joda.time.Chronology) gregorianChronology16);
        boolean boolean28 = mutableDateTime14.isAfterNow();
        mutableDateTime2.setTime((org.joda.time.ReadableInstant) mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 19 + "'", int15 == 19);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 910L + "'", long25 == 910L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DurationField durationField34 = unsupportedDateTimeField30.getLeapDurationField();
        java.lang.String str35 = unsupportedDateTimeField30.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long38 = unsupportedDateTimeField30.set(37868342400000000L, "1970-01-01T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UnsupportedDateTimeField" + "'", str35, "UnsupportedDateTimeField");
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval6.toInterval();
        org.joda.time.DateTime dateTime12 = interval6.getStart();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.yearOfEra();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeField15.getAsShortText((int) '#', locale17);
        mutableDateTime13.setRounding(dateTimeField15, 5);
        int int21 = mutableDateTime13.getRoundingMode();
        boolean boolean22 = interval6.equals((java.lang.Object) int21);
        org.joda.time.Interval interval23 = interval6.toInterval();
        org.joda.time.Interval interval24 = interval6.toInterval();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) 0, chronology26);
        mutableDateTime27.setMonthOfYear(5);
        boolean boolean30 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "35" + "'", str18, "35");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        long long7 = gregorianChronology1.add(readablePeriod4, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DurationField durationField8 = gregorianChronology1.days();
        org.joda.time.DurationField durationField9 = gregorianChronology1.months();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(10368000000L, (org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateTimeZone dateTimeZone11 = gregorianChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology1.dayOfMonth();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.secondOfDay();
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.hourOfDay();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime();
        int int14 = mutableDateTime13.getMonthOfYear();
        boolean boolean15 = interval12.isAfter((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.Interval interval16 = interval12.toInterval();
        org.joda.time.Interval interval17 = interval12.toInterval();
        org.joda.time.DateTime dateTime18 = interval12.getStart();
        org.joda.time.MutableInterval mutableInterval19 = interval12.toMutableInterval();
        org.joda.time.Duration duration20 = interval12.toDuration();
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration20, 5);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(duration20);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        org.joda.time.DurationField durationField11 = remainderDateTimeField10.getRangeDurationField();
        org.joda.time.DurationField durationField12 = remainderDateTimeField10.getDurationField();
        org.joda.time.chrono.GregorianChronology gregorianChronology13 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = gregorianChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology13.monthOfYear();
        org.joda.time.DurationField durationField17 = gregorianChronology13.months();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology18.era();
        org.joda.time.DurationField durationField22 = gregorianChronology18.seconds();
        org.joda.time.DurationField durationField23 = gregorianChronology18.millis();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology18.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str26 = dateTimeFieldType25.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField28 = new org.joda.time.field.RemainderDateTimeField(dateTimeField24, dateTimeFieldType25, (int) (short) 100);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField29 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField10, durationField17, dateTimeFieldType25);
        long long32 = dividedDateTimeField29.add((long) (byte) -1, (long) 365);
        int int34 = dividedDateTimeField29.get(0L);
        org.joda.time.ReadablePartial readablePartial35 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology37.secondOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology37.era();
        org.joda.time.DurationField durationField41 = gregorianChronology37.seconds();
        org.joda.time.DurationField durationField42 = gregorianChronology37.centuries();
        org.joda.time.DurationField durationField43 = gregorianChronology37.halfdays();
        org.joda.time.Chronology chronology44 = gregorianChronology37.withUTC();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) 0, chronology47);
        mutableDateTime48.setMonthOfYear(5);
        mutableDateTime48.setDayOfYear((int) (byte) 19);
        boolean boolean53 = mutableDateTime48.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone56 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime57 = mutableDateTime48.toMutableDateTime(dateTimeZone55);
        int int58 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) mutableDateTime57);
        int int59 = mutableDateTime57.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration60 = null;
        mutableDateTime57.add(readableDuration60, 2);
        org.joda.time.MutableDateTime mutableDateTime63 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration64 = null;
        mutableDateTime63.add(readableDuration64, 10);
        int int67 = mutableDateTime63.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime63.hourOfDay();
        org.joda.time.Interval interval69 = property68.toInterval();
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime();
        int int71 = mutableDateTime70.getMonthOfYear();
        boolean boolean72 = interval69.isAfter((org.joda.time.ReadableInstant) mutableDateTime70);
        org.joda.time.Interval interval73 = interval69.toInterval();
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Period period75 = interval69.toPeriod(periodType74);
        mutableDateTime57.add((org.joda.time.ReadablePeriod) period75);
        org.joda.time.MutablePeriod mutablePeriod77 = period75.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod78 = mutablePeriod77.toMutablePeriod();
        int[] intArray80 = gregorianChronology37.get((org.joda.time.ReadablePeriod) mutablePeriod77, (-62071747199903L));
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray82 = dividedDateTimeField29.addWrapPartial(readablePartial35, 121, intArray80, (-3));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 121");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(gregorianChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "monthOfYear" + "'", str26, "monthOfYear");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 36499999L + "'", long32 == 36499999L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(cachedDateTimeZone56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 7740000 + "'", int58 == 7740000);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 19 + "'", int59 == 19);
        org.junit.Assert.assertNotNull(mutableDateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(interval69);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(mutablePeriod77);
        org.junit.Assert.assertNotNull(mutablePeriod78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 0, -102631, -5, -23, -59, -59, -903]");
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        long long14 = preciseDurationField11.add((-62071747199903L), (long) 31);
        boolean boolean16 = preciseDurationField11.equals((java.lang.Object) "years");
        long long19 = preciseDurationField11.add((-7730000L), (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-62071747199903L) + "'", long14 == (-62071747199903L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-7730000L) + "'", long19 == (-7730000L));
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = unsupportedDateTimeField30.getType();
        org.joda.time.DurationField durationField35 = unsupportedDateTimeField30.getLeapDurationField();
        long long38 = unsupportedDateTimeField30.add(725809896000L, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            long long40 = unsupportedDateTimeField30.remainder(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 725813016000L + "'", long38 == 725813016000L);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        org.joda.time.ReadablePartial readablePartial59 = null;
        int int60 = zeroIsMaxDateTimeField58.getMaximumValue(readablePartial59);
        long long62 = zeroIsMaxDateTimeField58.roundHalfEven((long) 86399);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 18 + "'", int37 == 18);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 86400 + "'", int60 == 86400);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 86000L + "'", long62 == 86000L);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        mutableDateTime2.addWeeks((int) (short) -1);
        java.lang.String str10 = mutableDateTime2.toString();
        long long11 = mutableDateTime2.getMillis();
        java.lang.String str12 = mutableDateTime2.toString();
        mutableDateTime2.addMonths((-28800000));
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16, 10);
        int int19 = mutableDateTime15.getWeekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.yearOfCentury();
        mutableDateTime15.setRounding(dateTimeField21);
        mutableDateTime15.setMillis((-1735689599965L));
        boolean boolean25 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-12T02:09:00.000+02:09" + "'", str10, "1970-01-12T02:09:00.000+02:09");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 950400000L + "'", long11 == 950400000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-12T02:09:00.000+02:09" + "'", str12, "1970-01-12T02:09:00.000+02:09");
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addHours(97);
        boolean boolean3 = mutableDateTime0.isAfterNow();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0, chronology5);
        mutableDateTime6.setMonthOfYear(5);
        mutableDateTime6.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException13 = new org.joda.time.IllegalFieldValueException(durationFieldType11, "");
        java.lang.Throwable[] throwableArray14 = illegalFieldValueException13.getSuppressed();
        boolean boolean15 = mutableDateTime6.equals((java.lang.Object) illegalFieldValueException13);
        mutableDateTime6.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime6.add(readableDuration18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableDateTime6.add(readablePeriod20, 0);
        mutableDateTime6.setYear((-28800000));
        mutableDateTime6.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0, chronology28);
        mutableDateTime29.setMonthOfYear(5);
        mutableDateTime29.setDayOfYear((int) (byte) 19);
        boolean boolean34 = mutableDateTime29.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone37 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime29.toMutableDateTime(dateTimeZone36);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.minuteOfDay();
        int int40 = mutableDateTime38.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.dayOfWeek();
        mutableDateTime38.setRounding(dateTimeField42, 5);
        int int45 = mutableDateTime38.getDayOfMonth();
        boolean boolean46 = mutableDateTime6.isAfter((org.joda.time.ReadableInstant) mutableDateTime38);
        mutableDateTime38.setDayOfYear((int) (short) 100);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime0.hourOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(cachedDateTimeZone37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 18 + "'", int45 == 18);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZone(dateTimeZone3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withOffsetParsed();
        java.io.Writer writer8 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0, chronology10);
        mutableDateTime11.setMonthOfYear(5);
        mutableDateTime11.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException18 = new org.joda.time.IllegalFieldValueException(durationFieldType16, "");
        java.lang.Throwable[] throwableArray19 = illegalFieldValueException18.getSuppressed();
        boolean boolean20 = mutableDateTime11.equals((java.lang.Object) illegalFieldValueException18);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime11.dayOfYear();
        org.joda.time.DateTime dateTime22 = mutableDateTime11.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(writer8, (org.joda.time.ReadableInstant) mutableDateTime11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology3.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = gregorianChronology3.add(readablePeriod7, (long) 100, (int) (byte) 3);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(105228000000L, (org.joda.time.Chronology) gregorianChronology3);
        org.joda.time.DurationField durationField12 = gregorianChronology3.millis();
        boolean boolean13 = dateTimeZone1.equals((java.lang.Object) durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.getDifferenceAsLong(2493331200000L, (long) 18);
        int int36 = unsupportedDateTimeField30.getDifference(39601970L, (-7740000L));
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology37.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology42 = gregorianChronology37.withZone(dateTimeZone41);
        long long46 = gregorianChronology37.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField47 = gregorianChronology37.centuries();
        org.joda.time.DurationField durationField48 = gregorianChronology37.days();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder49.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = dateTimeFormatterBuilder49.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration56 = null;
        mutableDateTime55.add(readableDuration56, 10);
        int int59 = mutableDateTime55.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime55.dayOfWeek();
        boolean boolean62 = property60.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField63 = property60.getField();
        org.joda.time.MutableDateTime mutableDateTime64 = property60.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property60.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = dateTimeFormatterBuilder49.appendSignedDecimal(dateTimeFieldType65, (int) (byte) 11, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.DividedDateTimeField dividedDateTimeField70 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) unsupportedDateTimeField30, durationField48, dateTimeFieldType65, (int) (byte) 23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field must be supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 41555519L + "'", long33 == 41555519L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 789 + "'", int36 == 789);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 910L + "'", long46 == 910L);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder68);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        java.lang.String str10 = mutableDateTime2.toString();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T02:09:00.000+02:09" + "'", str10, "1970-01-01T02:09:00.000+02:09");
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField(0L, 960);
        org.joda.time.ReadablePartial readablePartial62 = null;
        int int63 = zeroIsMaxDateTimeField58.getMinimumValue(readablePartial62);
        org.joda.time.ReadablePartial readablePartial64 = null;
        org.joda.time.chrono.ISOChronology iSOChronology66 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology66.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial68 = null;
        org.joda.time.chrono.ISOChronology iSOChronology69 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology69.yearOfCentury();
        java.lang.String str71 = iSOChronology69.toString();
        org.joda.time.Chronology chronology72 = iSOChronology69.withUTC();
        org.joda.time.DateTimeField dateTimeField73 = iSOChronology69.yearOfEra();
        org.joda.time.ReadablePartial readablePartial74 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology76 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField77 = gregorianChronology76.yearOfEra();
        org.joda.time.ReadablePartial readablePartial78 = null;
        int[] intArray85 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray87 = dateTimeField77.add(readablePartial78, 0, intArray85, 0);
        int[] intArray89 = dateTimeField73.addWrapPartial(readablePartial74, 70, intArray85, 0);
        int int90 = dateTimeField67.getMinimumValue(readablePartial68, intArray89);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray92 = zeroIsMaxDateTimeField58.addWrapField(readablePartial64, (int) 'a', intArray89, (int) (byte) 23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 18 + "'", int37 == 18);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 960000L + "'", long61 == 960000L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(iSOChronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(iSOChronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ISOChronology[+02:09]" + "'", str71, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(gregorianChronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str5 = dateTimeFieldType4.toString();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType4, 236, (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder8.appendTimeZoneOffset("-2", "PT3600S", false, 13, 19);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder8.appendMinuteOfHour(497);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0, chronology18);
        mutableDateTime19.setMonthOfYear(5);
        mutableDateTime19.setDayOfYear((int) (byte) 19);
        boolean boolean24 = mutableDateTime19.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone27 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime19.toMutableDateTime(dateTimeZone26);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.yearOfEra();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime28.add(readableDuration30);
        mutableDateTime28.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology35 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean36 = dateTimeFieldType34.isSupported((org.joda.time.Chronology) gregorianChronology35);
        int int37 = mutableDateTime28.get(dateTimeFieldType34);
        java.lang.Number number39 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException41 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType34, (java.lang.Number) (-1.0f), number39, (java.lang.Number) (-1.0f));
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.chrono.GregorianChronology gregorianChronology44 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone43);
        org.joda.time.DurationField durationField45 = gregorianChronology44.seconds();
        boolean boolean46 = dateTimeFieldType34.isSupported((org.joda.time.Chronology) gregorianChronology44);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder16.appendDecimal(dateTimeFieldType34, 0, 100);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "monthOfYear" + "'", str5, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(cachedDateTimeZone27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(gregorianChronology35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(gregorianChronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DurationField durationField34 = unsupportedDateTimeField30.getLeapDurationField();
        java.util.Locale locale35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = unsupportedDateTimeField30.getMaximumTextLength(locale35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNull(durationField34);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.MutableDateTime mutableDateTime8 = property5.roundHalfCeiling();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withZone(dateTimeZone12);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone14 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone12);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone12.getName(0L, locale16);
        mutableDateTime8.setZoneRetainFields(dateTimeZone12);
        int int19 = mutableDateTime8.getYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setDayOfMonth(789);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 789 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(cachedDateTimeZone14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+02:09" + "'", str17, "+02:09");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        mutableDateTime3.addSeconds(10);
        mutableDateTime3.addWeekyears(20);
        int int16 = mutableDateTime3.getSecondOfDay();
        int int17 = mutableDateTime3.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7750 + "'", int16 == 7750);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 129 + "'", int17 == 129);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = gregorianChronology0.add(readablePeriod6, (long) 20, 69);
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12, 10);
        int int15 = mutableDateTime11.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.dayOfWeek();
        boolean boolean18 = property16.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField19 = property16.getField();
        org.joda.time.MutableDateTime mutableDateTime20 = property16.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField23 = new org.joda.time.field.DividedDateTimeField(dateTimeField10, dateTimeFieldType21, (int) (byte) 6);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 20L + "'", long9 == 20L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        int int7 = mutableDateTime2.getMillisOfDay();
        java.lang.String str9 = mutableDateTime2.toString("20250406");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime2.dayOfMonth();
        int int11 = property10.getMinimumValueOverall();
        int int12 = property10.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime13 = property10.roundCeiling();
        mutableDateTime13.setTime((int) (byte) 11, (int) (byte) 1, 16, 7);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7740000 + "'", int7 == 7740000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "20250406" + "'", str9, "20250406");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        int int18 = mutableDateTime11.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.millisOfSecond();
        int int20 = mutableDateTime11.getDayOfYear();
        mutableDateTime11.addSeconds(0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 18 + "'", int18 == 18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 18 + "'", int20 == 18);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0, chronology5);
        mutableDateTime6.setMonthOfYear(5);
        mutableDateTime6.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException13 = new org.joda.time.IllegalFieldValueException(durationFieldType11, "");
        java.lang.Throwable[] throwableArray14 = illegalFieldValueException13.getSuppressed();
        boolean boolean15 = mutableDateTime6.equals((java.lang.Object) illegalFieldValueException13);
        mutableDateTime6.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime6.add(readableDuration18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableDateTime6.add(readablePeriod20, 0);
        mutableDateTime6.setYear((-28800000));
        mutableDateTime6.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0, chronology28);
        mutableDateTime29.setMonthOfYear(5);
        mutableDateTime29.setDayOfYear((int) (byte) 19);
        boolean boolean34 = mutableDateTime29.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone37 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime29.toMutableDateTime(dateTimeZone36);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.minuteOfDay();
        int int40 = mutableDateTime38.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.dayOfWeek();
        mutableDateTime38.setRounding(dateTimeField42, 5);
        int int45 = mutableDateTime38.getDayOfMonth();
        boolean boolean46 = mutableDateTime6.isAfter((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        long long49 = dateTimeZone47.previousTransition(0L);
        java.lang.Object obj50 = dateTimeZone47.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone47);
        java.lang.String str53 = dateTimeZone47.getNameKey((long) (byte) 23);
        mutableDateTime38.setZoneRetainFields(dateTimeZone47);
        org.joda.time.chrono.GregorianChronology gregorianChronology55 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField56 = gregorianChronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField57 = gregorianChronology55.secondOfDay();
        org.joda.time.DateTimeField dateTimeField58 = gregorianChronology55.era();
        org.joda.time.DurationField durationField59 = gregorianChronology55.seconds();
        org.joda.time.DurationField durationField60 = gregorianChronology55.millis();
        org.joda.time.DateTimeField dateTimeField61 = gregorianChronology55.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str63 = dateTimeFieldType62.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField65 = new org.joda.time.field.RemainderDateTimeField(dateTimeField61, dateTimeFieldType62, (int) (short) 100);
        org.joda.time.DurationField durationField66 = remainderDateTimeField65.getRangeDurationField();
        org.joda.time.DurationField durationField67 = remainderDateTimeField65.getDurationField();
        org.joda.time.chrono.GregorianChronology gregorianChronology68 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField69 = gregorianChronology68.yearOfEra();
        org.joda.time.DateTimeField dateTimeField70 = gregorianChronology68.secondOfDay();
        org.joda.time.DateTimeField dateTimeField71 = gregorianChronology68.monthOfYear();
        org.joda.time.DurationField durationField72 = gregorianChronology68.months();
        org.joda.time.chrono.GregorianChronology gregorianChronology73 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField74 = gregorianChronology73.yearOfEra();
        org.joda.time.DateTimeField dateTimeField75 = gregorianChronology73.secondOfDay();
        org.joda.time.DateTimeField dateTimeField76 = gregorianChronology73.era();
        org.joda.time.DurationField durationField77 = gregorianChronology73.seconds();
        org.joda.time.DurationField durationField78 = gregorianChronology73.millis();
        org.joda.time.DateTimeField dateTimeField79 = gregorianChronology73.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str81 = dateTimeFieldType80.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField83 = new org.joda.time.field.RemainderDateTimeField(dateTimeField79, dateTimeFieldType80, (int) (short) 100);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField84 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField65, durationField72, dateTimeFieldType80);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField86 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField84, dateTimeFieldType85);
        boolean boolean87 = mutableDateTime38.equals((java.lang.Object) dateTimeFieldType85);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder88 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType85);
        org.joda.time.IllegalFieldValueException illegalFieldValueException91 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType85, (java.lang.Number) 500000L, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(cachedDateTimeZone37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 18 + "'", int45 == 18);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(gregorianChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "monthOfYear" + "'", str63, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(gregorianChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(gregorianChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "monthOfYear" + "'", str81, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder88);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean19 = dateTimeFieldType17.isSupported((org.joda.time.Chronology) gregorianChronology18);
        int int20 = mutableDateTime11.get(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime11.hourOfDay();
        int int22 = mutableDateTime11.getYear();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime11.year();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 0, chronology25);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundHalfFloor();
        int int29 = mutableDateTime28.getMinuteOfDay();
        int int30 = mutableDateTime28.getSecondOfDay();
        mutableDateTime28.setDate(0, 2, (int) (byte) 17);
        mutableDateTime28.setSecondOfDay(46);
        long long37 = property23.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 129 + "'", int29 == 129);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 7740 + "'", int30 == 7740);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1969L + "'", long37 == 1969L);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.getDifferenceAsLong(2493331200000L, (long) 18);
        long long36 = unsupportedDateTimeField30.add(81522028800000L, 18);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = unsupportedDateTimeField30.getMinimumValue((long) (byte) 18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 41555519L + "'", long33 == 41555519L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 81522029880000L + "'", long36 == 81522029880000L);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        // The following exception was thrown during execution in test generation
        try {
            long long33 = unsupportedDateTimeField30.set(10180000L, "19700101T020900.000+0209");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str27, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        int int10 = mutableDateTime2.getDayOfYear();
        int int11 = mutableDateTime2.getYearOfCentury();
        org.joda.time.ReadableInstant readableInstant12 = null;
        mutableDateTime2.setDate(readableInstant12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 70 + "'", int11 == 70);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendMonthOfYear(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendMillisOfSecond((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField((long) 292278993, (int) (byte) 0);
        int int62 = zeroIsMaxDateTimeField58.getMinimumValue();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 292278993L + "'", long61 == 292278993L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        int int18 = mutableDateTime11.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime11.set(dateTimeFieldType20, 0);
        mutableDateTime11.setDayOfYear((int) (byte) 20);
        int int25 = mutableDateTime11.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.setMillisOfDay((-5));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -5 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 19 + "'", int25 == 19);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str11 = mutableDateTime2.toString(dateTimeFormatter10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.yearOfCentury();
        int int13 = property12.getMinimumValueOverall();
        java.lang.String str14 = property12.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.roundCeiling();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.yearOfEra();
        java.lang.String str17 = property16.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "19700101T000000.000Z" + "'", str11, "19700101T000000.000Z");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[yearOfCentury]" + "'", str14, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        int int5 = mutableDateTime4.getMinuteOfDay();
        int int6 = mutableDateTime4.getSecondOfDay();
        mutableDateTime4.setDate(0, 2, (int) (byte) 17);
        mutableDateTime4.setSecondOfDay(46);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0, chronology14);
        mutableDateTime15.setMonthOfYear(5);
        mutableDateTime15.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException22 = new org.joda.time.IllegalFieldValueException(durationFieldType20, "");
        java.lang.Throwable[] throwableArray23 = illegalFieldValueException22.getSuppressed();
        boolean boolean24 = mutableDateTime15.equals((java.lang.Object) illegalFieldValueException22);
        mutableDateTime15.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime15.add(readableDuration27);
        boolean boolean29 = mutableDateTime4.isEqual((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime4.add(readableDuration30);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = unsupportedDateTimeField30.getType();
        org.joda.time.DurationField durationField35 = unsupportedDateTimeField30.getLeapDurationField();
        long long38 = unsupportedDateTimeField30.add(725809896000L, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int40 = unsupportedDateTimeField30.getMinimumValue((long) (-3));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str27, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 725813016000L + "'", long38 == 725813016000L);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean19 = dateTimeFieldType17.isSupported((org.joda.time.Chronology) gregorianChronology18);
        int int20 = mutableDateTime11.get(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime11.hourOfDay();
        int int22 = mutableDateTime11.getYear();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime11.year();
        int int24 = property23.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.roundHalfCeiling();
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        java.lang.String str4 = property3.getAsShortText();
        int int5 = property3.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundHalfEven();
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 86399 + "'", int5 == 86399);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        mutableDateTime2.addWeeks((int) (byte) 8);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int24 = mutableDateTime2.get(dateTimeFieldType23);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDate(0, (int) (short) 0, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 26 + "'", int24 == 26);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        int int4 = mutableDateTime2.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.monthOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        int int60 = zeroIsMaxDateTimeField58.getLeapAmount(727401615000L);
        int int61 = zeroIsMaxDateTimeField58.getMaximumValue();
        long long63 = zeroIsMaxDateTimeField58.roundFloor(4800L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 86400 + "'", int61 == 86400);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 4000L + "'", long63 == 4000L);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        int int60 = zeroIsMaxDateTimeField58.getLeapAmount(727401615000L);
        long long62 = zeroIsMaxDateTimeField58.roundHalfEven((-62166787187095L));
        int int64 = zeroIsMaxDateTimeField58.getLeapAmount(30294673919999999L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-62166787187000L) + "'", long62 == (-62166787187000L));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology2.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = gregorianChronology2.add(readablePeriod5, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType0.getField((org.joda.time.Chronology) gregorianChronology2);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0, chronology15);
        mutableDateTime16.setMonthOfYear(5);
        mutableDateTime16.setDayOfYear((int) (byte) 19);
        boolean boolean21 = mutableDateTime16.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone24 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime16.toMutableDateTime(dateTimeZone23);
        int int26 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) mutableDateTime25);
        int int27 = mutableDateTime25.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime25.add(readableDuration28, 2);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutableDateTime31.add(readableDuration32, 10);
        int int35 = mutableDateTime31.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime31.hourOfDay();
        org.joda.time.Interval interval37 = property36.toInterval();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime();
        int int39 = mutableDateTime38.getMonthOfYear();
        boolean boolean40 = interval37.isAfter((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.Interval interval41 = interval37.toInterval();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = interval37.toPeriod(periodType42);
        mutableDateTime25.add((org.joda.time.ReadablePeriod) period43);
        int[] intArray46 = gregorianChronology2.get((org.joda.time.ReadablePeriod) period43, (long) 913);
        org.joda.time.DateTimeField dateTimeField47 = gregorianChronology2.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(gregorianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(cachedDateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
        org.junit.Assert.assertNotNull(mutableDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, 913]");
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.addYears(1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableDateTime0.add(readablePeriod8, 100);
        mutableDateTime0.setHourOfDay((int) (byte) 7);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.yearMonth();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableDateTime3.add(readablePeriod8, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str12 = mutableDateTime3.toString(dateTimeFormatter11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime3.yearOfCentury();
        java.lang.String str14 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology15.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology20 = gregorianChronology15.withZone(dateTimeZone19);
        long long24 = gregorianChronology15.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField25 = gregorianChronology15.centuries();
        org.joda.time.DurationField durationField26 = gregorianChronology15.days();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology15.monthOfYear();
        int int28 = mutableDateTime3.get(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "19700101T000000.000Z" + "'", str12, "19700101T000000.000Z");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01" + "'", str14, "1970-01");
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 910L + "'", long24 == 910L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter21.withZone(dateTimeZone24);
        int int26 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder0.append(dateTimeParser27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder0.appendYearOfEra(891, 1968);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder32.appendFractionOfMinute(7750, 77);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        long long6 = cachedDateTimeZone3.nextTransition((-62166787187000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-62166787187000L) + "'", long6 == (-62166787187000L));
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        org.joda.time.ReadablePartial readablePartial59 = null;
        int int60 = zeroIsMaxDateTimeField58.getMaximumValue(readablePartial59);
        int int62 = zeroIsMaxDateTimeField58.getLeapAmount((-7754611807161L));
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 86400 + "'", int60 == 86400);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DurationField durationField34 = unsupportedDateTimeField30.getLeapDurationField();
        long long37 = unsupportedDateTimeField30.add((-61370611199985L), (int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = unsupportedDateTimeField30.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long40 = unsupportedDateTimeField30.roundFloor(94670856000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str27, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-61370611259985L) + "'", long37 == (-61370611259985L));
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setDate(1712408953478L);
        int int3 = mutableDateTime0.getSecondOfMinute();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.ERAS_TYPE;
        java.lang.Number number6 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException8 = new org.joda.time.IllegalFieldValueException(durationFieldType4, (java.lang.Number) (byte) 10, number6, (java.lang.Number) 157766400000L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.add(durationFieldType4, (int) (byte) 16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(durationFieldType4);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDate();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2, 10);
        int int5 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addYears(1);
        java.lang.String str9 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withDefaultYear(0);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19710101" + "'", str9, "19710101");
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField(0L, 960);
        long long63 = zeroIsMaxDateTimeField58.roundHalfEven(121001L);
        long long65 = zeroIsMaxDateTimeField58.roundHalfEven(1712408905631L);
        long long68 = zeroIsMaxDateTimeField58.add((long) (byte) 19, (-52));
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 960000L + "'", long61 == 960000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 121000L + "'", long63 == 121000L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1712408906000L + "'", long65 == 1712408906000L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-51981L) + "'", long68 == (-51981L));
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter21.withZone(dateTimeZone24);
        int int26 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder0.append(dateTimeParser27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder0.appendSecondOfDay(236);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatterBuilder0.toFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter32.withZoneUTC();
        java.util.Locale locale34 = dateTimeFormatter33.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter33.withPivotYear((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(locale34);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval6.toInterval();
        org.joda.time.Interval interval12 = interval6.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = interval12.isBefore(readableInterval13);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.centuries();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology7.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology12 = gregorianChronology7.withZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = gregorianChronology7.withUTC();
        long long19 = gregorianChronology7.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField20 = gregorianChronology7.months();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22, 10);
        int int25 = mutableDateTime21.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime21.hourOfDay();
        org.joda.time.Interval interval27 = property26.toInterval();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime();
        int int29 = mutableDateTime28.getMonthOfYear();
        boolean boolean30 = interval27.isAfter((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.Interval interval31 = interval27.toInterval();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = interval27.toPeriod(periodType32);
        int[] intArray36 = gregorianChronology7.get((org.joda.time.ReadablePeriod) period33, (long) 29, (long) 14);
        int[] intArray39 = iSOChronology6.get((org.joda.time.ReadablePeriod) period33, 0L, 39601970L);
        int[] intArray41 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period33, (long) (short) 10);
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology0.millisOfSecond();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1279002L + "'", long19 == 1279002L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 11, 0, 1, 970]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField(0L, 960);
        org.joda.time.ReadablePartial readablePartial62 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology64 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField65 = gregorianChronology64.yearOfEra();
        org.joda.time.DateTimeField dateTimeField66 = gregorianChronology64.secondOfDay();
        org.joda.time.DateTimeField dateTimeField67 = gregorianChronology64.era();
        org.joda.time.DurationField durationField68 = gregorianChronology64.seconds();
        org.joda.time.DurationField durationField69 = gregorianChronology64.millis();
        org.joda.time.DateTimeField dateTimeField70 = gregorianChronology64.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str72 = dateTimeFieldType71.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField74 = new org.joda.time.field.RemainderDateTimeField(dateTimeField70, dateTimeFieldType71, (int) (short) 100);
        org.joda.time.DurationField durationField75 = remainderDateTimeField74.getRangeDurationField();
        org.joda.time.DurationField durationField76 = remainderDateTimeField74.getDurationField();
        int int78 = remainderDateTimeField74.get(40176013747L);
        org.joda.time.ReadablePartial readablePartial79 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology80 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField81 = gregorianChronology80.yearOfEra();
        org.joda.time.ReadablePartial readablePartial82 = null;
        int[] intArray89 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray91 = dateTimeField81.add(readablePartial82, 0, intArray89, 0);
        int int92 = remainderDateTimeField74.getMinimumValue(readablePartial79, intArray89);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = zeroIsMaxDateTimeField58.addWrapField(readablePartial62, 7750, intArray89, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 7750");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 960000L + "'", long61 == 960000L);
        org.junit.Assert.assertNotNull(gregorianChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "monthOfYear" + "'", str72, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 13 + "'", int78 == 13);
        org.junit.Assert.assertNotNull(gregorianChronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DurationField durationField34 = unsupportedDateTimeField30.getLeapDurationField();
        long long37 = unsupportedDateTimeField30.add((-61370611199985L), (int) (short) -1);
        int int40 = unsupportedDateTimeField30.getDifference(0L, 94694399995L);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str27, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-61370611259985L) + "'", long37 == (-61370611259985L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1578239) + "'", int40 == (-1578239));
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        long long14 = preciseDurationField11.add(2524556160000L, (-292275054));
        long long17 = preciseDurationField11.add(1969L, (int) (short) -1);
        long long20 = preciseDurationField11.add((long) 9, (long) 0);
        long long22 = preciseDurationField11.getMillis(77);
        org.joda.time.DurationFieldType durationFieldType23 = preciseDurationField11.getType();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2524556160000L + "'", long14 == 2524556160000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1969L + "'", long17 == 1969L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 9L + "'", long20 == 9L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType23);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField(0L, 960);
        long long63 = zeroIsMaxDateTimeField58.roundHalfEven(121001L);
        long long65 = zeroIsMaxDateTimeField58.roundHalfEven(1712408905631L);
        int int67 = zeroIsMaxDateTimeField58.getLeapAmount(1712408953478L);
        int int68 = zeroIsMaxDateTimeField58.getMinimumValue();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 960000L + "'", long61 == 960000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 121000L + "'", long63 == 121000L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1712408906000L + "'", long65 == 1712408906000L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        int int11 = remainderDateTimeField10.getDivisor();
        int int12 = remainderDateTimeField10.getMinimumValue();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0, chronology14);
        mutableDateTime15.setMonthOfYear(5);
        mutableDateTime15.setDayOfYear((int) (byte) 19);
        boolean boolean20 = mutableDateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone23 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime15.toMutableDateTime(dateTimeZone22);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.minuteOfDay();
        int int26 = mutableDateTime24.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfWeek();
        mutableDateTime24.setRounding(dateTimeField28, 5);
        int int31 = mutableDateTime24.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime24.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime24.set(dateTimeFieldType33, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology36 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology36.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology41 = gregorianChronology36.withZone(dateTimeZone40);
        long long45 = gregorianChronology36.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField46 = gregorianChronology36.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType33.getField((org.joda.time.Chronology) gregorianChronology36);
        java.lang.String str48 = dateTimeFieldType33.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField49 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField10, dateTimeFieldType33);
        org.joda.time.ReadablePartial readablePartial50 = null;
        java.util.Locale locale52 = null;
        java.lang.String str53 = dividedDateTimeField49.getAsText(readablePartial50, 57600000, locale52);
        long long56 = dividedDateTimeField49.add(950400000L, 0);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(cachedDateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 19 + "'", int31 == 19);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(gregorianChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 910L + "'", long45 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "era" + "'", str48, "era");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "57600000" + "'", str53, "57600000");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 950400000L + "'", long56 == 950400000L);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = unsupportedDateTimeField30.getType();
        org.joda.time.DurationField durationField35 = unsupportedDateTimeField30.getLeapDurationField();
        long long38 = unsupportedDateTimeField30.add(725809896000L, (int) '4');
        long long41 = unsupportedDateTimeField30.add(0L, 105148800000L);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str27, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 725813016000L + "'", long38 == 725813016000L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 6308928000000000L + "'", long41 == 6308928000000000L);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.getDifferenceAsLong(2493331200000L, (long) 18);
        long long36 = unsupportedDateTimeField30.add(81522028800000L, 18);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = unsupportedDateTimeField30.get(20722348800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str27, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 41555519L + "'", long33 == 41555519L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 81522029880000L + "'", long36 == 81522029880000L);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str11 = mutableDateTime2.toString(dateTimeFormatter10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = dateTimeFormatter10.parseLocalDate("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"hi!\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "19700101T000000.000Z" + "'", str11, "19700101T000000.000Z");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addHours(97);
        boolean boolean3 = mutableDateTime0.isAfterNow();
        int int4 = mutableDateTime0.getSecondOfMinute();
        int int5 = mutableDateTime0.getYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology6 = gregorianChronology1.withZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = gregorianChronology1.withUTC();
        long long13 = gregorianChronology1.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField14 = gregorianChronology1.months();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16, 10);
        int int19 = mutableDateTime15.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.hourOfDay();
        org.joda.time.Interval interval21 = property20.toInterval();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        int int23 = mutableDateTime22.getMonthOfYear();
        boolean boolean24 = interval21.isAfter((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Interval interval25 = interval21.toInterval();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = interval21.toPeriod(periodType26);
        int[] intArray30 = gregorianChronology1.get((org.joda.time.ReadablePeriod) period27, (long) 29, (long) 14);
        int[] intArray33 = iSOChronology0.get((org.joda.time.ReadablePeriod) period27, 0L, 39601970L);
        org.joda.time.DateTimeZone dateTimeZone34 = iSOChronology0.getZone();
        java.lang.String str36 = dateTimeZone34.getShortName((long) 69);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1279002L + "'", long13 == 1279002L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 11, 0, 1, 970]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology2.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = gregorianChronology2.add(readablePeriod5, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType0.getField((org.joda.time.Chronology) gregorianChronology2);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime13.add(readableDuration14, 10);
        int int17 = mutableDateTime13.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.hourOfDay();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        int int21 = mutableDateTime20.getMonthOfYear();
        boolean boolean22 = interval19.isAfter((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime23.add(readableDuration24, 10);
        int int27 = mutableDateTime23.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.hourOfDay();
        org.joda.time.Interval interval29 = property28.toInterval();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31, 10);
        int int34 = mutableDateTime30.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.hourOfDay();
        org.joda.time.Interval interval36 = property35.toInterval();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        int int38 = mutableDateTime37.getMonthOfYear();
        boolean boolean39 = interval36.isAfter((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.Interval interval40 = interval36.toInterval();
        org.joda.time.Interval interval41 = interval36.toInterval();
        boolean boolean42 = interval29.isBefore((org.joda.time.ReadableInterval) interval36);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutableDateTime43.add(readableDuration44, 10);
        int int47 = mutableDateTime43.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime43.hourOfDay();
        org.joda.time.Interval interval49 = property48.toInterval();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime();
        int int51 = mutableDateTime50.getMonthOfYear();
        boolean boolean52 = interval49.isAfter((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.Interval interval53 = interval49.toInterval();
        org.joda.time.Interval interval54 = interval49.toInterval();
        boolean boolean55 = interval36.isAfter((org.joda.time.ReadableInterval) interval54);
        java.lang.String str56 = interval36.toString();
        boolean boolean57 = interval19.isBefore((org.joda.time.ReadableInterval) interval36);
        long long58 = interval36.getEndMillis();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = interval36.toPeriod(periodType59);
        int[] intArray63 = gregorianChronology2.get((org.joda.time.ReadablePeriod) period60, 986L, (long) (byte) 100);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(gregorianChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mutableDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mutableDateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(interval49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T01:00:00.000Z" + "'", str56, "1970-01-01T00:00:00.000Z/1970-01-01T01:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 3600000L + "'", long58 == 3600000L);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, -886]");
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        java.lang.StringBuffer stringBuffer12 = null;
        org.joda.time.ReadablePartial readablePartial13 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(stringBuffer12, readablePartial13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str5 = dateTimeFieldType4.toString();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType4, 236, (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder0.appendWeekyear((int) (byte) 22, 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder12.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder12.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime18.add(readableDuration19, 10);
        int int22 = mutableDateTime18.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.dayOfWeek();
        boolean boolean25 = property23.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField26 = property23.getField();
        org.joda.time.MutableDateTime mutableDateTime27 = property23.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property23.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder12.appendSignedDecimal(dateTimeFieldType28, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 0, chronology33);
        mutableDateTime34.setMonthOfYear(5);
        mutableDateTime34.setDayOfYear((int) (byte) 19);
        boolean boolean39 = mutableDateTime34.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone42 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime34.toMutableDateTime(dateTimeZone41);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.minuteOfDay();
        int int45 = mutableDateTime43.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology46.dayOfWeek();
        mutableDateTime43.setRounding(dateTimeField47, 5);
        int int50 = mutableDateTime43.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime43.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime43.set(dateTimeFieldType52, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology55 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField56 = gregorianChronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField57 = gregorianChronology55.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology60 = gregorianChronology55.withZone(dateTimeZone59);
        long long64 = gregorianChronology55.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField65 = gregorianChronology55.dayOfYear();
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType52.getField((org.joda.time.Chronology) gregorianChronology55);
        java.lang.String str67 = dateTimeFieldType52.getName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder69 = dateTimeFormatterBuilder31.appendFixedDecimal(dateTimeFieldType52, (int) (byte) 3);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder70 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter71.withZone(dateTimeZone74);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone76 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone74);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) cachedDateTimeZone76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str79 = dateTimeFieldType78.toString();
        boolean boolean80 = cachedDateTimeZone76.equals((java.lang.Object) dateTimeFieldType78);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder82 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType78, 15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "monthOfYear" + "'", str5, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(cachedDateTimeZone42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 19 + "'", int50 == 19);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(gregorianChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 910L + "'", long64 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "era" + "'", str67, "era");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder69);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder70);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(cachedDateTimeZone76);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "monthOfYear" + "'", str79, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder82);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.Chronology chronology5 = iSOChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(483753599999L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology1.yearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfMinute();
        org.joda.time.Chronology chronology7 = gregorianChronology0.withUTC();
        org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology8.era();
        org.joda.time.DurationField durationField12 = gregorianChronology8.seconds();
        org.joda.time.DurationField durationField13 = gregorianChronology8.centuries();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology15.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology20 = gregorianChronology15.withZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = gregorianChronology15.withUTC();
        long long27 = gregorianChronology15.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField28 = gregorianChronology15.months();
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30, 10);
        int int33 = mutableDateTime29.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime29.hourOfDay();
        org.joda.time.Interval interval35 = property34.toInterval();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime();
        int int37 = mutableDateTime36.getMonthOfYear();
        boolean boolean38 = interval35.isAfter((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.Interval interval39 = interval35.toInterval();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = interval35.toPeriod(periodType40);
        int[] intArray44 = gregorianChronology15.get((org.joda.time.ReadablePeriod) period41, (long) 29, (long) 14);
        int[] intArray47 = iSOChronology14.get((org.joda.time.ReadablePeriod) period41, 0L, 39601970L);
        int[] intArray49 = gregorianChronology8.get((org.joda.time.ReadablePeriod) period41, (long) (short) 10);
        int[] intArray51 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period41, 950400000L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(gregorianChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1279002L + "'", long27 == 1279002L);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 11, 0, 1, 970]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 1, 4, 0, 0, 0, 0]");
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime3.add(durationFieldType12, (int) (byte) 0);
        org.joda.time.Instant instant15 = mutableDateTime3.toInstant();
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime3.getZone();
        boolean boolean18 = mutableDateTime3.isAfter((long) (byte) 15);
        int int19 = mutableDateTime3.getYearOfEra();
        int int20 = mutableDateTime3.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DurationField durationField34 = unsupportedDateTimeField30.getLeapDurationField();
        java.lang.String str35 = unsupportedDateTimeField30.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = unsupportedDateTimeField30.getAsText(70L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UnsupportedDateTimeField" + "'", str35, "UnsupportedDateTimeField");
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField(0L, 960);
        long long63 = zeroIsMaxDateTimeField58.remainder((-2177452800000L));
        long long65 = zeroIsMaxDateTimeField58.remainder(17L);
        long long67 = zeroIsMaxDateTimeField58.roundHalfFloor((-2678399990L));
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 18 + "'", int37 == 18);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 960000L + "'", long61 == 960000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 17L + "'", long65 == 17L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-2678400000L) + "'", long67 == (-2678400000L));
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.getDifferenceAsLong(2493331200000L, (long) 18);
        long long36 = unsupportedDateTimeField30.add(81522028800000L, 18);
        java.util.Locale locale38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = unsupportedDateTimeField30.getAsShortText(97, locale38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 41555519L + "'", long33 == 41555519L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 81522029880000L + "'", long36 == 81522029880000L);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.addMinutes((int) 'a');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0, chronology8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.secondOfDay();
        int int11 = mutableDateTime9.getWeekOfWeekyear();
        mutableDateTime9.setMillis((long) (-2));
        boolean boolean14 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime9);
        int int15 = mutableDateTime2.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime2.centuryOfEra();
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 46 + "'", int15 == 46);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        mutableDateTime11.setMillisOfSecond(99);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.setDayOfMonth(1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        java.lang.String str5 = property3.toString();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        java.lang.String str7 = property3.getAsString();
        org.joda.time.ReadablePartial readablePartial8 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int9 = property3.compareTo(readablePartial8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfDay]" + "'", str5, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7740" + "'", str7, "7740");
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        int int5 = mutableDateTime4.getCenturyOfEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0, chronology7);
        mutableDateTime8.setMonthOfYear(5);
        mutableDateTime8.setDayOfYear((int) (byte) 19);
        boolean boolean13 = mutableDateTime8.isAfterNow();
        mutableDateTime8.addWeeks((int) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime8.add(readablePeriod16);
        boolean boolean18 = mutableDateTime4.isBefore((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime8.addHours(162);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime8.toMutableDateTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology22 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology22.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology22.era();
        org.joda.time.DurationField durationField26 = gregorianChronology22.seconds();
        org.joda.time.DurationField durationField27 = gregorianChronology22.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter28.withZone(dateTimeZone31);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone31);
        org.joda.time.Chronology chronology34 = gregorianChronology22.withZone(dateTimeZone31);
        java.lang.String str35 = dateTimeZone31.toString();
        mutableDateTime8.setZone(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(gregorianChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+02:09" + "'", str35, "+02:09");
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.centuries();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology7.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology12 = gregorianChronology7.withZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = gregorianChronology7.withUTC();
        long long19 = gregorianChronology7.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField20 = gregorianChronology7.months();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22, 10);
        int int25 = mutableDateTime21.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime21.hourOfDay();
        org.joda.time.Interval interval27 = property26.toInterval();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime();
        int int29 = mutableDateTime28.getMonthOfYear();
        boolean boolean30 = interval27.isAfter((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.Interval interval31 = interval27.toInterval();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = interval27.toPeriod(periodType32);
        int[] intArray36 = gregorianChronology7.get((org.joda.time.ReadablePeriod) period33, (long) 29, (long) 14);
        int[] intArray39 = iSOChronology6.get((org.joda.time.ReadablePeriod) period33, 0L, 39601970L);
        int[] intArray41 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period33, (long) (short) 10);
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology0.millisOfDay();
        org.joda.time.Chronology chronology43 = gregorianChronology0.withUTC();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1279002L + "'", long19 == 1279002L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 11, 0, 1, 970]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology43);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        mutableDateTime12.setMillisOfDay(10);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7740000 + "'", int13 == 7740000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addHours(97);
        boolean boolean3 = mutableDateTime0.isAfterNow();
        int int4 = mutableDateTime0.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0, chronology7);
        mutableDateTime8.setMonthOfYear(5);
        mutableDateTime8.setDayOfYear((int) (byte) 19);
        boolean boolean13 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime8.toMutableDateTime(dateTimeZone15);
        int int18 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) mutableDateTime17);
        int int19 = mutableDateTime17.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime17.add(readableDuration20, 2);
        boolean boolean24 = mutableDateTime17.isEqual((-62071747199903L));
        mutableDateTime17.setSecondOfMinute((int) (short) 10);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime17);
        int int28 = mutableDateTime0.getMillisOfSecond();
        java.lang.String str29 = mutableDateTime0.toString();
        boolean boolean31 = mutableDateTime0.isEqual(30084134402000L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7740000 + "'", int18 == 7740000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-19T03:09:00.000+02:09" + "'", str29, "1970-01-19T03:09:00.000+02:09");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        mutableDateTime2.setMillisOfSecond((int) (byte) 0);
        int int9 = mutableDateTime2.getHourOfDay();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime2.setZoneRetainFields(dateTimeZone21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) mutableDateTime34);
        mutableDateTime34.setYear((int) (byte) 10);
        int int44 = mutableDateTime34.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime34.minuteOfDay();
        mutableDateTime34.setMillis(0L);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone1.previousTransition(0L);
        java.lang.Object obj4 = dateTimeZone1.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone1);
        java.lang.String str7 = dateTimeZone1.getNameKey((long) (byte) 23);
        java.lang.String str9 = dateTimeZone1.getName(315705600019L);
        long long11 = dateTimeZone1.convertUTCToLocal((long) (byte) 17);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 330, dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+02:09" + "'", str9, "+02:09");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7740017L + "'", long11 == 7740017L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime2.setZoneRetainFields(dateTimeZone21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) mutableDateTime34);
        mutableDateTime34.setYear((int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime34.isAfter(readableInstant44);
        int int46 = mutableDateTime34.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        mutableDateTime2.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        int int41 = mutableDateTime34.getDayOfMonth();
        boolean boolean42 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        long long45 = dateTimeZone43.previousTransition(0L);
        java.lang.Object obj46 = dateTimeZone43.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone43);
        java.lang.String str49 = dateTimeZone43.getNameKey((long) (byte) 23);
        mutableDateTime34.setZoneRetainFields(dateTimeZone43);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) 0, chronology52);
        mutableDateTime53.setMonthOfYear(5);
        mutableDateTime53.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException60 = new org.joda.time.IllegalFieldValueException(durationFieldType58, "");
        java.lang.Throwable[] throwableArray61 = illegalFieldValueException60.getSuppressed();
        boolean boolean62 = mutableDateTime53.equals((java.lang.Object) illegalFieldValueException60);
        mutableDateTime53.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration65 = null;
        mutableDateTime53.add(readableDuration65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        mutableDateTime53.add(readablePeriod67, 0);
        mutableDateTime53.setYear((-28800000));
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        mutableDateTime53.setZoneRetainFields(dateTimeZone72);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((long) 0, chronology75);
        mutableDateTime76.setMonthOfYear(5);
        mutableDateTime76.setDayOfYear((int) (byte) 19);
        boolean boolean81 = mutableDateTime76.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone84 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone83);
        org.joda.time.MutableDateTime mutableDateTime85 = mutableDateTime76.toMutableDateTime(dateTimeZone83);
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime85.minuteOfDay();
        int int87 = mutableDateTime85.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology88 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField89 = iSOChronology88.dayOfWeek();
        mutableDateTime85.setRounding(dateTimeField89, 5);
        mutableDateTime53.setMillis((org.joda.time.ReadableInstant) mutableDateTime85);
        mutableDateTime85.setYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter95 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecondMillis();
        java.lang.String str96 = mutableDateTime85.toString(dateTimeFormatter95);
        int int97 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) mutableDateTime85);
        org.joda.time.MutableDateTime mutableDateTime98 = new org.joda.time.MutableDateTime(dateTimeZone43);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 18 + "'", int41 == 18);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(cachedDateTimeZone84);
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
        org.junit.Assert.assertNotNull(iSOChronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeFormatter95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "21:51:00.005" + "'", str96, "21:51:00.005");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 7740000 + "'", int97 == 7740000);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField(0L, 960);
        long long63 = zeroIsMaxDateTimeField58.remainder((-2177452800000L));
        int int65 = zeroIsMaxDateTimeField58.get((long) (byte) 12);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 18 + "'", int37 == 18);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 960000L + "'", long61 == 960000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 86400 + "'", int65 == 86400);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone2 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone1);
        boolean boolean4 = cachedDateTimeZone2.isStandardOffset((-1L));
        long long6 = cachedDateTimeZone2.nextTransition((long) ' ');
        java.lang.String str8 = cachedDateTimeZone2.getNameKey(2524556170000L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0, chronology10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.secondOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime11.secondOfDay();
        boolean boolean14 = cachedDateTimeZone2.equals((java.lang.Object) property13);
        org.joda.time.DurationField durationField15 = property13.getLeapDurationField();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0, chronology17);
        mutableDateTime18.setMonthOfYear(5);
        mutableDateTime18.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableDateTime18.add(readablePeriod23, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str27 = mutableDateTime18.toString(dateTimeFormatter26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime18.yearOfCentury();
        int int29 = property13.compareTo((org.joda.time.ReadableInstant) mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(cachedDateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "19700101T020900.000+0209" + "'", str27, "19700101T020900.000+0209");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = mutableDateTime2.toString("UnsupportedDateTimeField");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: U");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendWeekOfWeekyear((int) '4');
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatterBuilder5.toParser();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0, chronology8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundHalfFloor();
        java.lang.String str12 = property10.toString();
        org.joda.time.DateTimeField dateTimeField13 = property10.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property10.getFieldType();
        org.joda.time.IllegalFieldValueException illegalFieldValueException16 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType14, "");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder5.appendShortText(dateTimeFieldType14);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder17.appendDayOfWeekShortText();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeParser6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[secondOfDay]" + "'", str12, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = gregorianChronology0.withUTC();
        long long12 = gregorianChronology0.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField13 = gregorianChronology0.months();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime14.add(readableDuration15, 10);
        int int18 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime14.hourOfDay();
        org.joda.time.Interval interval20 = property19.toInterval();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        int int22 = mutableDateTime21.getMonthOfYear();
        boolean boolean23 = interval20.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Interval interval24 = interval20.toInterval();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval20.toPeriod(periodType25);
        int[] intArray29 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period26, (long) 29, (long) 14);
        org.joda.time.PeriodType periodType30 = period26.getPeriodType();
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1279002L + "'", long12 == 1279002L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone23 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone22);
        boolean boolean25 = cachedDateTimeZone23.isStandardOffset((-1L));
        long long27 = cachedDateTimeZone23.nextTransition((long) ' ');
        int int29 = cachedDateTimeZone23.getStandardOffset(32L);
        mutableDateTime2.setZoneRetainFields((org.joda.time.DateTimeZone) cachedDateTimeZone23);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime2.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime32 = property31.getMutableDateTime();
        java.util.Locale locale33 = null;
        int int34 = property31.getMaximumShortTextLength(locale33);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(cachedDateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        java.lang.String str34 = unsupportedDateTimeField30.getName();
        long long37 = unsupportedDateTimeField30.getDifferenceAsLong((long) 1, 241920000000L);
        org.joda.time.ReadablePartial readablePartial38 = null;
        java.util.Locale locale39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = unsupportedDateTimeField30.getAsText(readablePartial38, locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "millisOfDay" + "'", str34, "millisOfDay");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-4031999L) + "'", long37 == (-4031999L));
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        mutableDateTime2.setMillisOfSecond((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime2.add(readablePeriod9);
        org.joda.time.Instant instant11 = mutableDateTime2.toInstant();
        int int12 = mutableDateTime2.getMinuteOfHour();
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        mutableDateTime7.addMonths(0);
        boolean boolean12 = mutableDateTime7.isAfterNow();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        boolean boolean12 = preciseDurationField11.isPrecise();
        boolean boolean13 = preciseDurationField11.isSupported();
        long long16 = preciseDurationField11.add((-7641L), 2024);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-7641L) + "'", long16 == (-7641L));
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendClockhourOfDay(24);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder19.appendTimeZoneShortName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder19.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder19.appendMonthOfYear(330);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6, 10);
        int int9 = mutableDateTime5.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime5.dayOfWeek();
        boolean boolean12 = property10.equals((java.lang.Object) (-1));
        org.joda.time.MutableDateTime mutableDateTime13 = property10.roundHalfCeiling();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter14.withZone(dateTimeZone17);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone17);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone17.getName(0L, locale21);
        mutableDateTime13.setZoneRetainFields(dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) 0, chronology26);
        mutableDateTime27.setMonthOfYear(5);
        mutableDateTime27.setDayOfYear((int) (byte) 19);
        boolean boolean32 = mutableDateTime27.isAfterNow();
        int int35 = dateTimeFormatter24.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime27, "monthOfYear", (int) (byte) 10);
        mutableDateTime27.addSeconds(10);
        mutableDateTime27.addWeekyears(20);
        int int40 = mutableDateTime27.getSecondOfDay();
        int int41 = mutableDateTime13.compareTo((org.joda.time.ReadableInstant) mutableDateTime27);
        boolean boolean42 = property3.equals((java.lang.Object) mutableDateTime13);
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime13.toMutableDateTime();
        org.joda.time.DateTime dateTime44 = mutableDateTime13.toDateTime();
        int int45 = mutableDateTime13.getYear();
        mutableDateTime13.setSecondOfMinute((int) (byte) 18);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "7740" + "'", str4, "7740");
        org.junit.Assert.assertNotNull(mutableDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+02:09" + "'", str22, "+02:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-11) + "'", int35 == (-11));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 7750 + "'", int40 == 7750);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology12 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = gregorianChronology12.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology17 = gregorianChronology12.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = gregorianChronology12.withUTC();
        long long24 = gregorianChronology12.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        boolean boolean25 = durationFieldType7.isSupported((org.joda.time.Chronology) gregorianChronology12);
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology12.dayOfYear();
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology27.era();
        org.joda.time.DurationField durationField31 = gregorianChronology27.seconds();
        org.joda.time.DurationField durationField32 = gregorianChronology27.centuries();
        org.joda.time.DateTimeField dateTimeField33 = gregorianChronology27.dayOfMonth();
        org.joda.time.DurationField durationField34 = gregorianChronology27.years();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology27.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = gregorianChronology27.getZone();
        org.joda.time.Chronology chronology37 = gregorianChronology12.withZone(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(gregorianChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1279002L + "'", long24 == 1279002L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        mutableDateTime12.setSecondOfMinute((int) (short) 10);
        org.joda.time.chrono.GregorianChronology gregorianChronology22 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology22.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology22.era();
        org.joda.time.DurationField durationField26 = gregorianChronology22.seconds();
        org.joda.time.DurationField durationField27 = gregorianChronology22.centuries();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology22.dayOfMonth();
        mutableDateTime12.setChronology((org.joda.time.Chronology) gregorianChronology22);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableDateTime12.add(readablePeriod30, (int) '4');
        org.joda.time.chrono.GregorianChronology gregorianChronology33 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology33.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = gregorianChronology33.add(readablePeriod36, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology33.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology33.hourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology33.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime12.toMutableDateTime((org.joda.time.Chronology) gregorianChronology33);
        org.joda.time.chrono.GregorianChronology gregorianChronology46 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = gregorianChronology46.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = gregorianChronology46.secondOfDay();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology46.era();
        org.joda.time.DurationField durationField50 = gregorianChronology46.seconds();
        org.joda.time.DurationField durationField51 = gregorianChronology46.millis();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        long long55 = gregorianChronology46.add(readablePeriod52, (long) 20, 69);
        org.joda.time.DateTimeField dateTimeField56 = gregorianChronology46.millisOfDay();
        org.joda.time.DateTimeField dateTimeField57 = gregorianChronology46.weekyear();
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime45.toMutableDateTime((org.joda.time.Chronology) gregorianChronology46);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7740000 + "'", int13 == 7740000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(gregorianChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(gregorianChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(gregorianChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 20L + "'", long55 == 20L);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.getDifferenceAsLong(2493331200000L, (long) 18);
        org.joda.time.DurationField durationField34 = unsupportedDateTimeField30.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale locale37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = unsupportedDateTimeField30.getAsText(readablePartial35, 14, locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 41555519L + "'", long33 == 41555519L);
        org.junit.Assert.assertNull(durationField34);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.dayOfMonth();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0, chronology15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.secondOfDay();
        java.lang.String str18 = property17.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime19.add(readableDuration20, 10);
        int int23 = mutableDateTime19.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime19.dayOfWeek();
        boolean boolean26 = property24.equals((java.lang.Object) (-1));
        org.joda.time.MutableDateTime mutableDateTime27 = property24.roundHalfCeiling();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter28.withZone(dateTimeZone31);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone31);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone31.getName(0L, locale35);
        mutableDateTime27.setZoneRetainFields(dateTimeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) 0, chronology40);
        mutableDateTime41.setMonthOfYear(5);
        mutableDateTime41.setDayOfYear((int) (byte) 19);
        boolean boolean46 = mutableDateTime41.isAfterNow();
        int int49 = dateTimeFormatter38.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime41, "monthOfYear", (int) (byte) 10);
        mutableDateTime41.addSeconds(10);
        mutableDateTime41.addWeekyears(20);
        int int54 = mutableDateTime41.getSecondOfDay();
        int int55 = mutableDateTime27.compareTo((org.joda.time.ReadableInstant) mutableDateTime41);
        boolean boolean56 = property17.equals((java.lang.Object) mutableDateTime27);
        org.joda.time.MutableDateTime mutableDateTime57 = mutableDateTime27.toMutableDateTime();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime2.setHourOfDay(0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "7740" + "'", str18, "7740");
        org.junit.Assert.assertNotNull(mutableDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+02:09" + "'", str36, "+02:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-11) + "'", int49 == (-11));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 7750 + "'", int54 == 7750);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(mutableDateTime57);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.util.GregorianCalendar gregorianCalendar1 = mutableDateTime0.toGregorianCalendar();
        boolean boolean2 = mutableDateTime0.isBeforeNow();
        int int3 = mutableDateTime0.getRoundingMode();
        int int4 = mutableDateTime0.getMinuteOfDay();
        org.junit.Assert.assertNotNull(gregorianCalendar1);
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 129 + "'", int4 == 129);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        mutableDateTime3.addMonths((-28800000));
        boolean boolean14 = mutableDateTime3.isBeforeNow();
        mutableDateTime3.addSeconds(236);
        int int17 = mutableDateTime3.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7976000 + "'", int17 == 7976000);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.util.GregorianCalendar gregorianCalendar1 = mutableDateTime0.toGregorianCalendar();
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) mutableDateTime0);
        java.lang.String str4 = mutableDateTime0.toString("1969");
        mutableDateTime0.addSeconds((int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0, chronology9);
        mutableDateTime10.setMonthOfYear(5);
        mutableDateTime10.setDayOfYear((int) (byte) 19);
        boolean boolean15 = mutableDateTime10.isAfterNow();
        int int18 = dateTimeFormatter7.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime10, "monthOfYear", (int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime10.add(durationFieldType19, (int) (byte) 0);
        org.joda.time.Instant instant22 = mutableDateTime10.toInstant();
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime10.getZone();
        boolean boolean25 = mutableDateTime10.isAfter((long) (byte) 15);
        int int26 = mutableDateTime10.getYearOfEra();
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime10);
        org.junit.Assert.assertNotNull(gregorianCalendar1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969" + "'", str4, "1969");
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-11) + "'", int18 == (-11));
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField(0L, 960);
        long long63 = zeroIsMaxDateTimeField58.remainder((-2177452800000L));
        long long65 = zeroIsMaxDateTimeField58.remainder(17L);
        long long68 = zeroIsMaxDateTimeField58.add(78770809884334L, 5L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 18 + "'", int37 == 18);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 960000L + "'", long61 == 960000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 17L + "'", long65 == 17L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 78770809889334L + "'", long68 == 78770809889334L);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.addYears(1);
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime0.add(readableDuration8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        long long12 = dateTimeZone10.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone13 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        mutableDateTime0.setZoneRetainFields((org.joda.time.DateTimeZone) cachedDateTimeZone13);
        int int16 = cachedDateTimeZone13.getOffset(5702400L);
        long long18 = cachedDateTimeZone13.nextTransition(0L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        mutableDateTime21.addWeeks((int) (short) -1);
        java.lang.String str29 = mutableDateTime21.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime21.toMutableDateTime(dateTimeZone30);
        int int32 = cachedDateTimeZone13.getOffset((org.joda.time.ReadableInstant) mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7740000 + "'", int16 == 7740000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-12T02:09:00.000+02:09" + "'", str29, "1970-01-12T02:09:00.000+02:09");
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7740000 + "'", int32 == 7740000);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        mutableDateTime3.addSeconds(10);
        mutableDateTime3.addWeekyears(20);
        int int16 = mutableDateTime3.getSecondOfDay();
        java.util.Locale locale18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = mutableDateTime3.toString("millisOfDay", locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7750 + "'", int16 == 7750);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        int int18 = mutableDateTime11.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime11.set(dateTimeFieldType20, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology23 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology23.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology28 = gregorianChronology23.withZone(dateTimeZone27);
        long long32 = gregorianChronology23.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField33 = gregorianChronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType20.getField((org.joda.time.Chronology) gregorianChronology23);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) 0, chronology36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.secondOfDay();
        org.joda.time.Instant instant39 = mutableDateTime37.toInstant();
        mutableDateTime37.setMillisOfDay((int) (byte) 19);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gregorianChronology42.era();
        org.joda.time.DurationField durationField46 = gregorianChronology42.seconds();
        org.joda.time.DurationField durationField47 = gregorianChronology42.millis();
        org.joda.time.DateTimeField dateTimeField48 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str50 = dateTimeFieldType49.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField52 = new org.joda.time.field.RemainderDateTimeField(dateTimeField48, dateTimeFieldType49, (int) (short) 100);
        org.joda.time.DurationField durationField53 = remainderDateTimeField52.getRangeDurationField();
        org.joda.time.DurationField durationField54 = remainderDateTimeField52.getDurationField();
        org.joda.time.chrono.GregorianChronology gregorianChronology55 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField56 = gregorianChronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField57 = gregorianChronology55.secondOfDay();
        org.joda.time.DateTimeField dateTimeField58 = gregorianChronology55.monthOfYear();
        org.joda.time.DurationField durationField59 = gregorianChronology55.months();
        org.joda.time.chrono.GregorianChronology gregorianChronology60 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField61 = gregorianChronology60.yearOfEra();
        org.joda.time.DateTimeField dateTimeField62 = gregorianChronology60.secondOfDay();
        org.joda.time.DateTimeField dateTimeField63 = gregorianChronology60.era();
        org.joda.time.DurationField durationField64 = gregorianChronology60.seconds();
        org.joda.time.DurationField durationField65 = gregorianChronology60.millis();
        org.joda.time.DateTimeField dateTimeField66 = gregorianChronology60.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str68 = dateTimeFieldType67.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField70 = new org.joda.time.field.RemainderDateTimeField(dateTimeField66, dateTimeFieldType67, (int) (short) 100);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField71 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField52, durationField59, dateTimeFieldType67);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField73 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField71, dateTimeFieldType72);
        int int74 = mutableDateTime37.get(dateTimeFieldType72);
        org.joda.time.chrono.GregorianChronology gregorianChronology75 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField76 = gregorianChronology75.yearOfEra();
        org.joda.time.DateTimeField dateTimeField77 = gregorianChronology75.secondOfDay();
        org.joda.time.DateTimeField dateTimeField78 = gregorianChronology75.era();
        org.joda.time.DurationField durationField79 = gregorianChronology75.seconds();
        org.joda.time.DurationField durationField80 = gregorianChronology75.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = dateTimeFormatter81.withZone(dateTimeZone84);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone86 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone84);
        org.joda.time.Chronology chronology87 = gregorianChronology75.withZone(dateTimeZone84);
        boolean boolean89 = dateTimeZone84.isStandardOffset((long) 4);
        mutableDateTime37.setZoneRetainFields(dateTimeZone84);
        org.joda.time.Chronology chronology91 = gregorianChronology23.withZone(dateTimeZone84);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 18 + "'", int18 == 18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(gregorianChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 910L + "'", long32 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "monthOfYear" + "'", str50, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(gregorianChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(gregorianChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "monthOfYear" + "'", str68, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(gregorianChronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTimeFormatter85);
        org.junit.Assert.assertNotNull(cachedDateTimeZone86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(chronology91);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeZone dateTimeZone2 = gregorianChronology0.getZone();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 10);
        int int7 = mutableDateTime3.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.hourOfDay();
        org.joda.time.Interval interval9 = property8.toInterval();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        int int11 = mutableDateTime10.getMonthOfYear();
        boolean boolean12 = interval9.isAfter((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.Interval interval13 = interval9.toInterval();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = interval9.toPeriod(periodType14);
        org.joda.time.Period period16 = period15.toPeriod();
        int[] intArray19 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period16, 20020L, (long) (byte) 14);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0, 0, 0, 0, -20, -6]");
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        mutableDateTime2.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        int int41 = mutableDateTime34.getDayOfMonth();
        boolean boolean42 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        mutableDateTime34.addDays(5);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 18 + "'", int41 == 18);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        mutableDateTime0.setZone(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        int int18 = mutableDateTime11.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfCeiling();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter21.withZone(dateTimeZone24);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone26 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone24);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone24.getName(0L, locale28);
        boolean boolean30 = property19.equals((java.lang.Object) 0L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 18 + "'", int18 == 18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(cachedDateTimeZone26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+02:09" + "'", str29, "+02:09");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendClockhourOfDay(24);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder19.appendTimeZoneShortName();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder19.appendTimeZoneShortName(strMap23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder19.appendClockhourOfDay(69);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        mutableDateTime4.setYear(0);
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology7.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology12 = gregorianChronology7.withZone(dateTimeZone11);
        long long16 = gregorianChronology7.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField17 = gregorianChronology7.years();
        long long22 = gregorianChronology7.getDateTimeMillis((int) '4', (int) (byte) 1, (int) (byte) 20, 18);
        org.joda.time.chrono.GregorianChronology gregorianChronology23 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology23.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology28 = gregorianChronology23.withZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = gregorianChronology23.withUTC();
        long long35 = gregorianChronology23.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField36 = gregorianChronology23.months();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime37.add(readableDuration38, 10);
        int int41 = mutableDateTime37.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime37.hourOfDay();
        org.joda.time.Interval interval43 = property42.toInterval();
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        int int45 = mutableDateTime44.getMonthOfYear();
        boolean boolean46 = interval43.isAfter((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Interval interval47 = interval43.toInterval();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = interval43.toPeriod(periodType48);
        int[] intArray52 = gregorianChronology23.get((org.joda.time.ReadablePeriod) period49, (long) 29, (long) 14);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) 0, chronology54);
        mutableDateTime55.setMonthOfYear(5);
        mutableDateTime55.setDayOfYear((int) (byte) 19);
        int int60 = mutableDateTime55.getMillisOfDay();
        java.lang.String str62 = mutableDateTime55.toString("20250406");
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime55.dayOfMonth();
        java.lang.String str64 = property63.getAsText();
        boolean boolean65 = period49.equals((java.lang.Object) property63);
        int[] intArray68 = gregorianChronology7.get((org.joda.time.ReadablePeriod) period49, (long) (short) 0, (long) (byte) 10);
        mutableDateTime4.add((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period70 = period49.toPeriod();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 910L + "'", long16 == 910L);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60524582399982L) + "'", long22 == (-60524582399982L));
        org.junit.Assert.assertNotNull(gregorianChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1279002L + "'", long35 == 1279002L);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(interval43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 7740000 + "'", int60 == 7740000);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "20250406" + "'", str62, "20250406");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "19" + "'", str64, "19");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(period70);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        long long14 = preciseDurationField11.add(2524556160000L, (-292275054));
        long long17 = preciseDurationField11.getMillis(1969, 0L);
        long long20 = preciseDurationField11.add((long) 67, 26L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2524556160000L + "'", long14 == 2524556160000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 67L + "'", long20 == 67L);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(10368000000L, dateTimeZone2);
        long long7 = dateTimeZone2.convertLocalToUTC((-28799087L), true);
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        int int9 = mutableDateTime8.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-28799092L) + "'", long7 == (-28799092L));
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8, 10);
        int int11 = mutableDateTime7.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime7.hourOfDay();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        int int15 = mutableDateTime14.getMonthOfYear();
        boolean boolean16 = interval13.isAfter((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Interval interval17 = interval13.toInterval();
        org.joda.time.Interval interval18 = interval13.toInterval();
        boolean boolean19 = interval6.isBefore((org.joda.time.ReadableInterval) interval13);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21, 10);
        int int24 = mutableDateTime20.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.hourOfDay();
        org.joda.time.Interval interval26 = property25.toInterval();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        int int28 = mutableDateTime27.getMonthOfYear();
        boolean boolean29 = interval26.isAfter((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.Interval interval30 = interval26.toInterval();
        org.joda.time.Interval interval31 = interval26.toInterval();
        boolean boolean32 = interval13.isAfter((org.joda.time.ReadableInterval) interval31);
        java.lang.String str33 = interval13.toString();
        org.joda.time.Duration duration34 = interval13.toDuration();
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration36 = duration34.toDuration();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mutableDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T02:00:00.000+02:09/1970-01-01T03:00:00.000+02:09" + "'", str33, "1970-01-01T02:00:00.000+02:09/1970-01-01T03:00:00.000+02:09");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration36);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField(0L, 960);
        long long63 = zeroIsMaxDateTimeField58.roundHalfEven(121001L);
        long long65 = zeroIsMaxDateTimeField58.roundHalfEven(1712408905631L);
        int int67 = zeroIsMaxDateTimeField58.getLeapAmount(1712408953478L);
        int int70 = zeroIsMaxDateTimeField58.getDifference(0L, 1712408953478L);
        int int71 = zeroIsMaxDateTimeField58.getMinimumValue();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 18 + "'", int37 == 18);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 960000L + "'", long61 == 960000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 121000L + "'", long63 == 121000L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1712408906000L + "'", long65 == 1712408906000L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1712408953) + "'", int70 == (-1712408953));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str11 = mutableDateTime2.toString(dateTimeFormatter10);
        java.lang.Appendable appendable12 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0, chronology14);
        mutableDateTime15.setMonthOfYear(5);
        mutableDateTime15.setMillis(0L);
        mutableDateTime15.setMillisOfSecond((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        mutableDateTime15.add(readablePeriod22);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter10.printTo(appendable12, (org.joda.time.ReadableInstant) mutableDateTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "19700101T020900.000+0209" + "'", str11, "19700101T020900.000+0209");
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        mutableDateTime2.setSecondOfDay((int) (byte) 23);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDayOfMonth(94);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 94 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = gregorianChronology0.add(readablePeriod3, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology0.year();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology11.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology16 = gregorianChronology11.withZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = gregorianChronology11.withUTC();
        long long23 = gregorianChronology11.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField24 = gregorianChronology11.months();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26, 10);
        int int29 = mutableDateTime25.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime25.hourOfDay();
        org.joda.time.Interval interval31 = property30.toInterval();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        int int33 = mutableDateTime32.getMonthOfYear();
        boolean boolean34 = interval31.isAfter((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Interval interval35 = interval31.toInterval();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = interval31.toPeriod(periodType36);
        int[] intArray40 = gregorianChronology11.get((org.joda.time.ReadablePeriod) period37, (long) 29, (long) 14);
        int[] intArray43 = iSOChronology10.get((org.joda.time.ReadablePeriod) period37, 0L, 39601970L);
        int[] intArray46 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period37, (long) 57600, (-1L));
        // The following exception was thrown during execution in test generation
        try {
            long long52 = gregorianChronology0.getDateTimeMillis((-62166787199995L), (int) 'a', 78660, 18, 75);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1279002L + "'", long23 == 1279002L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 11, 0, 1, 970]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, -57, -601]");
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        mutableDateTime12.setSecondOfMinute((int) (short) 10);
        org.joda.time.chrono.GregorianChronology gregorianChronology22 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology22.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology22.era();
        org.joda.time.DurationField durationField26 = gregorianChronology22.seconds();
        org.joda.time.DurationField durationField27 = gregorianChronology22.centuries();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology22.dayOfMonth();
        mutableDateTime12.setChronology((org.joda.time.Chronology) gregorianChronology22);
        mutableDateTime12.setMillisOfDay(2000);
        int int32 = mutableDateTime12.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7740000 + "'", int13 == 7740000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(gregorianChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendClockhourOfDay(24);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder19.appendTimeZoneShortName();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder19.appendTimeZoneShortName(strMap23);
        org.joda.time.DateTimeUtils.setDefaultTimeZoneNames(strMap23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        java.lang.String str34 = unsupportedDateTimeField30.getName();
        long long37 = unsupportedDateTimeField30.getDifferenceAsLong((long) 1, 241920000000L);
        java.util.Locale locale38 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int39 = unsupportedDateTimeField30.getMaximumTextLength(locale38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "millisOfDay" + "'", str34, "millisOfDay");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-4031999L) + "'", long37 == (-4031999L));
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.tTime();
        java.lang.Appendable appendable1 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 0, chronology3);
        mutableDateTime4.setMonthOfYear(5);
        mutableDateTime4.setDayOfYear((int) (byte) 19);
        boolean boolean9 = mutableDateTime4.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone12 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime4.toMutableDateTime(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.minuteOfDay();
        int int15 = mutableDateTime13.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfWeek();
        mutableDateTime13.setRounding(dateTimeField17, 5);
        int int20 = mutableDateTime13.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime13.millisOfSecond();
        mutableDateTime13.setTime((int) (byte) 0, (int) (byte) 1, 2, 1);
        mutableDateTime13.addWeeks((-5));
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(appendable1, (org.joda.time.ReadableInstant) mutableDateTime13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(cachedDateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 18 + "'", int20 == 18);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType16, 3);
        mutableDateTime2.addMillis((int) (byte) 23);
        org.joda.time.Chronology chronology21 = mutableDateTime2.getChronology();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        int int20 = mutableDateTime12.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7740000 + "'", int13 == 7740000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DurationField durationField34 = unsupportedDateTimeField30.getLeapDurationField();
        long long37 = unsupportedDateTimeField30.add((-61370611199985L), (int) (short) -1);
        int int40 = unsupportedDateTimeField30.getDifference(9467028540L, (-10540799981L));
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-61370611259985L) + "'", long37 == (-61370611259985L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 333463 + "'", int40 == 333463);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        mutableDateTime4.addHours((int) (byte) 23);
        org.joda.time.DateTime dateTime7 = mutableDateTime4.toDateTime();
        int int8 = dateTime7.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = mutableDateTime2.getZone();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField(0L, 960);
        long long63 = zeroIsMaxDateTimeField58.roundHalfEven(121001L);
        int int65 = zeroIsMaxDateTimeField58.getLeapAmount((-386577500000L));
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 18 + "'", int37 == 18);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 960000L + "'", long61 == 960000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 121000L + "'", long63 == 121000L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        java.lang.String str5 = property3.toString();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.MutableDateTime mutableDateTime8 = property3.set(365);
        long long9 = property3.getMillis();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfDay]" + "'", str5, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-7375000L) + "'", long9 == (-7375000L));
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean19 = dateTimeFieldType17.isSupported((org.joda.time.Chronology) gregorianChronology18);
        int int20 = mutableDateTime11.get(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime11.hourOfDay();
        boolean boolean22 = property21.isLeap();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        org.joda.time.DurationField durationField24 = property21.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField25 = property21.getField();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property21.getAsText(locale26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime13.add(readableDuration14, 10);
        int int17 = mutableDateTime13.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.hourOfDay();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        int int21 = mutableDateTime20.getMonthOfYear();
        boolean boolean22 = interval19.isAfter((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.Interval interval23 = interval19.toInterval();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime24.add(readableDuration25, 10);
        int int28 = mutableDateTime24.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.hourOfDay();
        org.joda.time.Interval interval30 = property29.toInterval();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutableDateTime31.add(readableDuration32, 10);
        int int35 = mutableDateTime31.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime31.hourOfDay();
        org.joda.time.Interval interval37 = property36.toInterval();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime();
        int int39 = mutableDateTime38.getMonthOfYear();
        boolean boolean40 = interval37.isAfter((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.Interval interval41 = interval37.toInterval();
        org.joda.time.Interval interval42 = interval37.toInterval();
        boolean boolean43 = interval30.isBefore((org.joda.time.ReadableInterval) interval37);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45, 10);
        int int48 = mutableDateTime44.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime44.hourOfDay();
        org.joda.time.Interval interval50 = property49.toInterval();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        int int52 = mutableDateTime51.getMonthOfYear();
        boolean boolean53 = interval50.isAfter((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.Interval interval54 = interval50.toInterval();
        org.joda.time.Interval interval55 = interval50.toInterval();
        boolean boolean56 = interval37.isAfter((org.joda.time.ReadableInterval) interval55);
        boolean boolean57 = interval23.overlaps((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration58 = interval55.toDuration();
        org.joda.time.chrono.GregorianChronology gregorianChronology59 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology59.yearOfEra();
        org.joda.time.ReadablePartial readablePartial61 = null;
        int[] intArray68 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray70 = dateTimeField60.add(readablePartial61, 0, intArray68, 0);
        boolean boolean71 = duration58.equals((java.lang.Object) readablePartial61);
        java.lang.String str72 = duration58.toString();
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration58, 0);
        mutableDateTime2.addDays(913);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mutableDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(interval50);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(gregorianChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT3600S" + "'", str72, "PT3600S");
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addHours(97);
        boolean boolean3 = mutableDateTime0.isAfterNow();
        int int4 = mutableDateTime0.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0, chronology7);
        mutableDateTime8.setMonthOfYear(5);
        mutableDateTime8.setDayOfYear((int) (byte) 19);
        boolean boolean13 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime8.toMutableDateTime(dateTimeZone15);
        int int18 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) mutableDateTime17);
        int int19 = mutableDateTime17.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime17.add(readableDuration20, 2);
        boolean boolean24 = mutableDateTime17.isEqual((-62071747199903L));
        mutableDateTime17.setSecondOfMinute((int) (short) 10);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime17);
        int int28 = mutableDateTime0.getMillisOfDay();
        int int29 = mutableDateTime0.getSecondOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7740000 + "'", int18 == 7740000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 11340000 + "'", int28 == 11340000);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 11340 + "'", int29 == 11340);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.dayOfYear();
        int int13 = property12.getMinimumValue();
        org.joda.time.Interval interval14 = property12.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 0, chronology16);
        mutableDateTime17.setMonthOfYear(5);
        mutableDateTime17.addMinutes((int) 'a');
        boolean boolean22 = interval14.contains((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime23.add(readableDuration24, 10);
        int int27 = mutableDateTime23.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.hourOfDay();
        org.joda.time.Interval interval29 = property28.toInterval();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime();
        int int31 = mutableDateTime30.getMonthOfYear();
        boolean boolean32 = interval29.isAfter((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.Interval interval33 = interval29.toInterval();
        org.joda.time.Interval interval34 = interval29.toInterval();
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.Period period36 = interval34.toPeriod();
        boolean boolean37 = interval14.isAfter((org.joda.time.ReadableInterval) interval34);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mutableDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addHours(97);
        boolean boolean3 = mutableDateTime0.isAfterNow();
        org.joda.time.DateTime dateTime4 = mutableDateTime0.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.months();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeZone dateTimeZone3 = gregorianChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField8 = new org.joda.time.field.DividedDateTimeField(dateTimeField4, durationField5, dateTimeFieldType6, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0, chronology10);
        mutableDateTime11.setMonthOfYear(5);
        mutableDateTime11.setDayOfYear((int) (byte) 19);
        boolean boolean16 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime11.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.minuteOfDay();
        int int22 = mutableDateTime20.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfWeek();
        mutableDateTime20.setRounding(dateTimeField24, 5);
        int int27 = mutableDateTime20.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime20.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime20.set(dateTimeFieldType29, 0);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType29.getDurationType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField8, dateTimeFieldType29);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField34 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField8);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = remainderDateTimeField34.set(13L, (-259286));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -259286 for monthOfYear must be in the range [0,9]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 18 + "'", int27 == 18);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType32);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField(0L, 960);
        long long63 = zeroIsMaxDateTimeField58.roundHalfEven(121001L);
        org.joda.time.ReadablePartial readablePartial64 = null;
        org.joda.time.chrono.ISOChronology iSOChronology65 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology65.yearOfCentury();
        java.lang.String str67 = iSOChronology65.toString();
        org.joda.time.Chronology chronology68 = iSOChronology65.withUTC();
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology65.yearOfEra();
        org.joda.time.ReadablePartial readablePartial70 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology72 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField73 = gregorianChronology72.yearOfEra();
        org.joda.time.ReadablePartial readablePartial74 = null;
        int[] intArray81 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray83 = dateTimeField73.add(readablePartial74, 0, intArray81, 0);
        int[] intArray85 = dateTimeField69.addWrapPartial(readablePartial70, 70, intArray81, 0);
        int int86 = zeroIsMaxDateTimeField58.getMaximumValue(readablePartial64, intArray81);
        int int88 = zeroIsMaxDateTimeField58.getMinimumValue(283824000000L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 18 + "'", int37 == 18);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 960000L + "'", long61 == 960000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 121000L + "'", long63 == 121000L);
        org.junit.Assert.assertNotNull(iSOChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ISOChronology[+02:09]" + "'", str67, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(gregorianChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 86400 + "'", int86 == 86400);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.addMinutes((int) 'a');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0, chronology8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.secondOfDay();
        int int11 = mutableDateTime9.getWeekOfWeekyear();
        mutableDateTime9.setMillis((long) (-2));
        boolean boolean14 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime9);
        int int15 = mutableDateTime2.getMinuteOfHour();
        org.joda.time.DateTime dateTime16 = mutableDateTime2.toDateTimeISO();
        mutableDateTime2.addMinutes(36499998);
        org.joda.time.DateTime dateTime19 = mutableDateTime2.toDateTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology20 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField21 = gregorianChronology20.months();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology20.minuteOfDay();
        int int24 = dateTimeField22.getMinimumValue((-1L));
        long long26 = dateTimeField22.roundCeiling((long) 100);
        org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeField22, (int) ' ', 5, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = dateTimeField22.getType();
        int int32 = mutableDateTime2.get(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 46 + "'", int15 == 46);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(gregorianChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 60000L + "'", long26 == 60000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 544 + "'", int32 == 544);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        int int10 = mutableDateTime2.getYear();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        int int12 = mutableDateTime2.getDayOfWeek();
        mutableDateTime2.setTime((int) (byte) 6, 18, (int) (byte) 21, 19);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime18.add(readableDuration19, 10);
        int int22 = mutableDateTime18.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.hourOfDay();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime();
        int int26 = mutableDateTime25.getMonthOfYear();
        boolean boolean27 = interval24.isAfter((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.Interval interval28 = interval24.toInterval();
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30, 10);
        int int33 = mutableDateTime29.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime29.hourOfDay();
        org.joda.time.Interval interval35 = property34.toInterval();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime36.add(readableDuration37, 10);
        int int40 = mutableDateTime36.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.hourOfDay();
        org.joda.time.Interval interval42 = property41.toInterval();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime();
        int int44 = mutableDateTime43.getMonthOfYear();
        boolean boolean45 = interval42.isAfter((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.Interval interval46 = interval42.toInterval();
        org.joda.time.Interval interval47 = interval42.toInterval();
        boolean boolean48 = interval35.isBefore((org.joda.time.ReadableInterval) interval42);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutableDateTime49.add(readableDuration50, 10);
        int int53 = mutableDateTime49.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime49.hourOfDay();
        org.joda.time.Interval interval55 = property54.toInterval();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime();
        int int57 = mutableDateTime56.getMonthOfYear();
        boolean boolean58 = interval55.isAfter((org.joda.time.ReadableInstant) mutableDateTime56);
        org.joda.time.Interval interval59 = interval55.toInterval();
        org.joda.time.Interval interval60 = interval55.toInterval();
        boolean boolean61 = interval42.isAfter((org.joda.time.ReadableInterval) interval60);
        boolean boolean62 = interval28.overlaps((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Duration duration63 = interval60.toDuration();
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration63);
        boolean boolean66 = mutableDateTime2.isBefore(1272672000026L);
        int int67 = mutableDateTime2.getDayOfYear();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(mutableDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(interval42);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mutableDateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField(0L, 960);
        long long63 = zeroIsMaxDateTimeField58.remainder((-2177452800000L));
        long long66 = zeroIsMaxDateTimeField58.add(4L, 75);
        long long68 = zeroIsMaxDateTimeField58.roundHalfEven(10518984000L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 18 + "'", int37 == 18);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 960000L + "'", long61 == 960000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 75004L + "'", long66 == 75004L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 10518984000L + "'", long68 == 10518984000L);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = unsupportedDateTimeField30.getType();
        org.joda.time.DurationField durationField35 = unsupportedDateTimeField30.getLeapDurationField();
        long long38 = unsupportedDateTimeField30.add(725809896000L, (int) '4');
        java.util.Locale locale41 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long42 = unsupportedDateTimeField30.set((long) 8, "46", locale41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 725813016000L + "'", long38 == 725813016000L);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime13.add(readableDuration14, 10);
        int int17 = mutableDateTime13.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.hourOfDay();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        int int21 = mutableDateTime20.getMonthOfYear();
        boolean boolean22 = interval19.isAfter((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.Interval interval23 = interval19.toInterval();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime24.add(readableDuration25, 10);
        int int28 = mutableDateTime24.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.hourOfDay();
        org.joda.time.Interval interval30 = property29.toInterval();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutableDateTime31.add(readableDuration32, 10);
        int int35 = mutableDateTime31.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime31.hourOfDay();
        org.joda.time.Interval interval37 = property36.toInterval();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime();
        int int39 = mutableDateTime38.getMonthOfYear();
        boolean boolean40 = interval37.isAfter((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.Interval interval41 = interval37.toInterval();
        org.joda.time.Interval interval42 = interval37.toInterval();
        boolean boolean43 = interval30.isBefore((org.joda.time.ReadableInterval) interval37);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45, 10);
        int int48 = mutableDateTime44.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime44.hourOfDay();
        org.joda.time.Interval interval50 = property49.toInterval();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        int int52 = mutableDateTime51.getMonthOfYear();
        boolean boolean53 = interval50.isAfter((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.Interval interval54 = interval50.toInterval();
        org.joda.time.Interval interval55 = interval50.toInterval();
        boolean boolean56 = interval37.isAfter((org.joda.time.ReadableInterval) interval55);
        boolean boolean57 = interval23.overlaps((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration58 = interval55.toDuration();
        org.joda.time.chrono.GregorianChronology gregorianChronology59 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology59.yearOfEra();
        org.joda.time.ReadablePartial readablePartial61 = null;
        int[] intArray68 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray70 = dateTimeField60.add(readablePartial61, 0, intArray68, 0);
        boolean boolean71 = duration58.equals((java.lang.Object) readablePartial61);
        java.lang.String str72 = duration58.toString();
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration58, 0);
        org.joda.time.Duration duration75 = duration58.toDuration();
        org.joda.time.Duration duration76 = duration75.toDuration();
        org.joda.time.Duration duration77 = duration76.toDuration();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mutableDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(interval50);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(gregorianChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT3600S" + "'", str72, "PT3600S");
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration77);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8, 10);
        int int11 = mutableDateTime7.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime7.hourOfDay();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        int int15 = mutableDateTime14.getMonthOfYear();
        boolean boolean16 = interval13.isAfter((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Interval interval17 = interval13.toInterval();
        org.joda.time.Interval interval18 = interval13.toInterval();
        boolean boolean19 = interval6.isBefore((org.joda.time.ReadableInterval) interval13);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21, 10);
        int int24 = mutableDateTime20.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.hourOfDay();
        org.joda.time.Interval interval26 = property25.toInterval();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        int int28 = mutableDateTime27.getMonthOfYear();
        boolean boolean29 = interval26.isAfter((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.Interval interval30 = interval26.toInterval();
        org.joda.time.Interval interval31 = interval26.toInterval();
        boolean boolean32 = interval13.isAfter((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Interval interval33 = interval13.toInterval();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mutableDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval33);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11, 10);
        int int14 = mutableDateTime10.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.hourOfDay();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18, 10);
        int int21 = mutableDateTime17.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.hourOfDay();
        org.joda.time.Interval interval23 = property22.toInterval();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        int int25 = mutableDateTime24.getMonthOfYear();
        boolean boolean26 = interval23.isAfter((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.Interval interval27 = interval23.toInterval();
        org.joda.time.Interval interval28 = interval23.toInterval();
        boolean boolean29 = interval16.isBefore((org.joda.time.ReadableInterval) interval23);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31, 10);
        int int34 = mutableDateTime30.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.hourOfDay();
        org.joda.time.Interval interval36 = property35.toInterval();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        int int38 = mutableDateTime37.getMonthOfYear();
        boolean boolean39 = interval36.isAfter((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.Interval interval40 = interval36.toInterval();
        org.joda.time.Interval interval41 = interval36.toInterval();
        boolean boolean42 = interval23.isAfter((org.joda.time.ReadableInterval) interval41);
        java.lang.String str43 = interval23.toString();
        boolean boolean44 = interval6.isBefore((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) 0, chronology46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.secondOfDay();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime47.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology50 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = gregorianChronology50.yearOfEra();
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology50.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        long long56 = gregorianChronology50.add(readablePeriod53, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        long long59 = dateTimeZone57.previousTransition(0L);
        java.lang.Object obj60 = dateTimeZone57.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone57);
        org.joda.time.Chronology chronology62 = gregorianChronology50.withZone(dateTimeZone57);
        mutableDateTime47.setChronology((org.joda.time.Chronology) gregorianChronology50);
        int int64 = mutableDateTime47.getDayOfWeek();
        boolean boolean65 = interval23.isAfter((org.joda.time.ReadableInstant) mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(interval23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mutableDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01T02:00:00.000+02:09/1970-01-01T03:00:00.000+02:09" + "'", str43, "1970-01-01T02:00:00.000+02:09/1970-01-01T03:00:00.000+02:09");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(gregorianChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L + "'", long56 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        mutableDateTime4.addHours((int) (byte) 23);
        org.joda.time.DateTime dateTime7 = mutableDateTime4.toDateTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0, chronology9);
        mutableDateTime10.setMonthOfYear(5);
        mutableDateTime10.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException17 = new org.joda.time.IllegalFieldValueException(durationFieldType15, "");
        java.lang.Throwable[] throwableArray18 = illegalFieldValueException17.getSuppressed();
        boolean boolean19 = mutableDateTime10.equals((java.lang.Object) illegalFieldValueException17);
        mutableDateTime10.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime10.add(readableDuration22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableDateTime10.add(readablePeriod24, 0);
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime10.add(readableDuration27);
        int int29 = mutableDateTime10.getDayOfYear();
        int int30 = mutableDateTime10.getEra();
        mutableDateTime4.setDate((org.joda.time.ReadableInstant) mutableDateTime10);
        boolean boolean33 = mutableDateTime10.isEqual(727401615000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        long long9 = gregorianChronology0.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField10 = gregorianChronology0.years();
        long long15 = gregorianChronology0.getDateTimeMillis((int) '4', (int) (byte) 1, (int) (byte) 20, 18);
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology21 = gregorianChronology16.withZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = gregorianChronology16.withUTC();
        long long28 = gregorianChronology16.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField29 = gregorianChronology16.months();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31, 10);
        int int34 = mutableDateTime30.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.hourOfDay();
        org.joda.time.Interval interval36 = property35.toInterval();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        int int38 = mutableDateTime37.getMonthOfYear();
        boolean boolean39 = interval36.isAfter((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.Interval interval40 = interval36.toInterval();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = interval36.toPeriod(periodType41);
        int[] intArray45 = gregorianChronology16.get((org.joda.time.ReadablePeriod) period42, (long) 29, (long) 14);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) 0, chronology47);
        mutableDateTime48.setMonthOfYear(5);
        mutableDateTime48.setDayOfYear((int) (byte) 19);
        int int53 = mutableDateTime48.getMillisOfDay();
        java.lang.String str55 = mutableDateTime48.toString("20250406");
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime48.dayOfMonth();
        java.lang.String str57 = property56.getAsText();
        boolean boolean58 = period42.equals((java.lang.Object) property56);
        int[] intArray61 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period42, (long) (short) 0, (long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long69 = gregorianChronology0.getDateTimeMillis(886, 410, (-292275054), 37, 99, 410, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 910L + "'", long9 == 910L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60524582399982L) + "'", long15 == (-60524582399982L));
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1279002L + "'", long28 == 1279002L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7740000 + "'", int53 == 7740000);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "20250406" + "'", str55, "20250406");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "19" + "'", str57, "19");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 0, 0, 0, 0, 0, 10]");
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DurationField durationField34 = unsupportedDateTimeField30.getLeapDurationField();
        long long37 = unsupportedDateTimeField30.add((-61370611199985L), (int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = unsupportedDateTimeField30.getType();
        org.joda.time.DurationField durationField39 = unsupportedDateTimeField30.getDurationField();
        org.joda.time.ReadablePartial readablePartial40 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology41 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology41.yearOfEra();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology41.secondOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology41.era();
        org.joda.time.DurationField durationField45 = gregorianChronology41.seconds();
        org.joda.time.DurationField durationField46 = gregorianChronology41.millis();
        org.joda.time.DateTimeField dateTimeField47 = gregorianChronology41.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str49 = dateTimeFieldType48.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField51 = new org.joda.time.field.RemainderDateTimeField(dateTimeField47, dateTimeFieldType48, (int) (short) 100);
        org.joda.time.DurationField durationField52 = remainderDateTimeField51.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial53 = null;
        java.util.Locale locale55 = null;
        java.lang.String str56 = remainderDateTimeField51.getAsShortText(readablePartial53, (int) (byte) 5, locale55);
        long long58 = remainderDateTimeField51.roundFloor(0L);
        org.joda.time.ReadablePartial readablePartial59 = null;
        java.util.Locale locale61 = null;
        java.lang.String str62 = remainderDateTimeField51.getAsShortText(readablePartial59, (int) (byte) 15, locale61);
        int int64 = remainderDateTimeField51.getLeapAmount(241920000000L);
        java.util.Locale locale67 = null;
        long long68 = remainderDateTimeField51.set(0L, "0", locale67);
        long long70 = remainderDateTimeField51.roundHalfFloor(8L);
        org.joda.time.ReadablePartial readablePartial71 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology72 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField73 = gregorianChronology72.yearOfEra();
        org.joda.time.DateTimeField dateTimeField74 = gregorianChronology72.secondOfDay();
        org.joda.time.DateTimeField dateTimeField75 = gregorianChronology72.era();
        org.joda.time.DurationField durationField76 = gregorianChronology72.seconds();
        org.joda.time.DurationField durationField77 = gregorianChronology72.millis();
        org.joda.time.DateTimeField dateTimeField78 = gregorianChronology72.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str80 = dateTimeFieldType79.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField82 = new org.joda.time.field.RemainderDateTimeField(dateTimeField78, dateTimeFieldType79, (int) (short) 100);
        org.joda.time.ReadablePartial readablePartial83 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology84 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField85 = gregorianChronology84.yearOfEra();
        org.joda.time.ReadablePartial readablePartial86 = null;
        int[] intArray93 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray95 = dateTimeField85.add(readablePartial86, 0, intArray93, 0);
        int int96 = remainderDateTimeField82.getMaximumValue(readablePartial83, intArray93);
        int int97 = remainderDateTimeField51.getMaximumValue(readablePartial71, intArray93);
        // The following exception was thrown during execution in test generation
        try {
            int int98 = unsupportedDateTimeField30.getMinimumValue(readablePartial40, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-61370611259985L) + "'", long37 == (-61370611259985L));
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(gregorianChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "monthOfYear" + "'", str49, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "5" + "'", str56, "5");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "15" + "'", str62, "15");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(gregorianChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "monthOfYear" + "'", str80, "monthOfYear");
        org.junit.Assert.assertNotNull(gregorianChronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 99 + "'", int96 == 99);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 99 + "'", int97 == 99);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundHalfEven();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.addYears(1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime0.setZone(dateTimeZone8);
        int int10 = mutableDateTime0.getDayOfMonth();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.Chronology chronology5 = iSOChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(483753599999L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology1.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.yearOfCentury();
        java.lang.String str12 = iSOChronology10.toString();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology10.era();
        org.joda.time.ReadablePartial readablePartial14 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology16.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology16.era();
        org.joda.time.DurationField durationField20 = gregorianChronology16.seconds();
        org.joda.time.DurationField durationField21 = gregorianChronology16.millis();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology16.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str24 = dateTimeFieldType23.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField22, dateTimeFieldType23, (int) (short) 100);
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology28 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology28.yearOfEra();
        org.joda.time.ReadablePartial readablePartial30 = null;
        int[] intArray37 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray39 = dateTimeField29.add(readablePartial30, 0, intArray37, 0);
        int int40 = remainderDateTimeField26.getMaximumValue(readablePartial27, intArray37);
        int[] intArray42 = dateTimeField13.add(readablePartial14, (int) (short) 100, intArray37, (int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = dateTimeField13.getType();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField45 = new org.joda.time.field.OffsetDateTimeField(dateTimeField9, dateTimeFieldType43, 23);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+02:09]" + "'", str12, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "monthOfYear" + "'", str24, "monthOfYear");
        org.junit.Assert.assertNotNull(gregorianChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval6.toInterval();
        org.joda.time.DateTime dateTime12 = interval6.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0, chronology14);
        mutableDateTime15.setMonthOfYear(5);
        mutableDateTime15.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException22 = new org.joda.time.IllegalFieldValueException(durationFieldType20, "");
        java.lang.Throwable[] throwableArray23 = illegalFieldValueException22.getSuppressed();
        boolean boolean24 = mutableDateTime15.equals((java.lang.Object) illegalFieldValueException22);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime15.dayOfYear();
        int int26 = property25.getMinimumValue();
        org.joda.time.Interval interval27 = property25.toInterval();
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        boolean boolean29 = interval6.overlaps((org.joda.time.ReadableInterval) interval27);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.months();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfMonth();
        java.lang.String str4 = gregorianChronology0.toString();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gregorianChronology0);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GregorianChronology[UTC]" + "'", str4, "GregorianChronology[UTC]");
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology6 = gregorianChronology1.withZone(dateTimeZone5);
        org.joda.time.Chronology chronology7 = gregorianChronology1.withUTC();
        long long13 = gregorianChronology1.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField14 = gregorianChronology1.months();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16, 10);
        int int19 = mutableDateTime15.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.hourOfDay();
        org.joda.time.Interval interval21 = property20.toInterval();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        int int23 = mutableDateTime22.getMonthOfYear();
        boolean boolean24 = interval21.isAfter((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Interval interval25 = interval21.toInterval();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = interval21.toPeriod(periodType26);
        int[] intArray30 = gregorianChronology1.get((org.joda.time.ReadablePeriod) period27, (long) 29, (long) 14);
        int[] intArray33 = iSOChronology0.get((org.joda.time.ReadablePeriod) period27, 0L, 39601970L);
        org.joda.time.DurationField durationField34 = iSOChronology0.centuries();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1279002L + "'", long13 == 1279002L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 11, 0, 1, 970]");
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology3.era();
        org.joda.time.DurationField durationField7 = gregorianChronology3.seconds();
        org.joda.time.DurationField durationField8 = gregorianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology3.era();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology3.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone15 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone14);
        java.lang.String str17 = cachedDateTimeZone15.getNameKey((long) (byte) 23);
        java.util.Locale locale19 = null;
        java.lang.String str20 = cachedDateTimeZone15.getShortName(315705600019L, locale19);
        boolean boolean21 = cachedDateTimeZone15.isFixed();
        org.joda.time.Chronology chronology22 = gregorianChronology3.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone15);
        java.lang.StringBuffer stringBuffer24 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) 0, chronology26);
        mutableDateTime27.setMonthOfYear(5);
        mutableDateTime27.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException34 = new org.joda.time.IllegalFieldValueException(durationFieldType32, "");
        java.lang.Throwable[] throwableArray35 = illegalFieldValueException34.getSuppressed();
        boolean boolean36 = mutableDateTime27.equals((java.lang.Object) illegalFieldValueException34);
        mutableDateTime27.setSecondOfDay((int) (short) 10);
        org.joda.time.chrono.GregorianChronology gregorianChronology39 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology39.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology39.secondOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology39.monthOfYear();
        org.joda.time.DateTime dateTime43 = mutableDateTime27.toDateTime((org.joda.time.Chronology) gregorianChronology39);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) 0, chronology45);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.secondOfDay();
        boolean boolean48 = mutableDateTime27.isBefore((org.joda.time.ReadableInstant) mutableDateTime46);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter23.printTo(stringBuffer24, (org.joda.time.ReadableInstant) mutableDateTime46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(cachedDateTimeZone15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.005" + "'", str20, "+00:00:00.005");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(gregorianChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.dayOfMonth();
        org.joda.time.DurationField durationField7 = gregorianChronology0.years();
        org.joda.time.DurationField durationField8 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology0.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0, chronology12);
        mutableDateTime13.setMonthOfYear(5);
        mutableDateTime13.setDayOfYear((int) (byte) 19);
        boolean boolean18 = mutableDateTime13.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone21 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime13.toMutableDateTime(dateTimeZone20);
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) mutableDateTime22);
        int int24 = mutableDateTime22.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime22.add(readableDuration25, 2);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime28.add(readableDuration29, 10);
        int int32 = mutableDateTime28.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime28.hourOfDay();
        org.joda.time.Interval interval34 = property33.toInterval();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        int int36 = mutableDateTime35.getMonthOfYear();
        boolean boolean37 = interval34.isAfter((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.Interval interval38 = interval34.toInterval();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = interval34.toPeriod(periodType39);
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period40);
        org.joda.time.MutablePeriod mutablePeriod42 = period40.toMutablePeriod();
        int[] intArray44 = gregorianChronology0.get((org.joda.time.ReadablePeriod) mutablePeriod42, (long) 15);
        org.joda.time.DurationField durationField45 = gregorianChronology0.minutes();
        org.joda.time.chrono.GregorianChronology gregorianChronology46 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField47 = gregorianChronology46.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = gregorianChronology46.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        long long52 = gregorianChronology46.add(readablePeriod49, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField53 = gregorianChronology46.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = gregorianChronology46.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = gregorianChronology46.year();
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.chrono.GregorianChronology gregorianChronology57 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = gregorianChronology57.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = gregorianChronology57.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology62 = gregorianChronology57.withZone(dateTimeZone61);
        org.joda.time.Chronology chronology63 = gregorianChronology57.withUTC();
        long long69 = gregorianChronology57.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField70 = gregorianChronology57.months();
        org.joda.time.MutableDateTime mutableDateTime71 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration72 = null;
        mutableDateTime71.add(readableDuration72, 10);
        int int75 = mutableDateTime71.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime71.hourOfDay();
        org.joda.time.Interval interval77 = property76.toInterval();
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime();
        int int79 = mutableDateTime78.getMonthOfYear();
        boolean boolean80 = interval77.isAfter((org.joda.time.ReadableInstant) mutableDateTime78);
        org.joda.time.Interval interval81 = interval77.toInterval();
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Period period83 = interval77.toPeriod(periodType82);
        int[] intArray86 = gregorianChronology57.get((org.joda.time.ReadablePeriod) period83, (long) 29, (long) 14);
        int[] intArray89 = iSOChronology56.get((org.joda.time.ReadablePeriod) period83, 0L, 39601970L);
        int[] intArray92 = gregorianChronology46.get((org.joda.time.ReadablePeriod) period83, (long) 57600, (-1L));
        long long95 = gregorianChronology0.add((org.joda.time.ReadablePeriod) period83, 121001L, 11340);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(cachedDateTimeZone21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7740000 + "'", int23 == 7740000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
        org.junit.Assert.assertNotNull(mutableDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(interval34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, 15]");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(gregorianChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L + "'", long52 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(iSOChronology56);
        org.junit.Assert.assertNotNull(gregorianChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1279002L + "'", long69 == 1279002L);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(interval77);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 0, 0, 0, 11, 0, 1, 970]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 0, 0, 0, 0, 0, -57, -601]");
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 40824121001L + "'", long95 == 40824121001L);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        mutableDateTime2.addWeeks((int) (short) -1);
        java.lang.String str10 = mutableDateTime2.toString();
        long long11 = mutableDateTime2.getMillis();
        java.lang.String str12 = mutableDateTime2.toString();
        org.joda.time.DateTime dateTime13 = mutableDateTime2.toDateTime();
        mutableDateTime2.setSecondOfDay(497);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-12T02:09:00.000+02:09" + "'", str10, "1970-01-12T02:09:00.000+02:09");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 950400000L + "'", long11 == 950400000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-12T02:09:00.000+02:09" + "'", str12, "1970-01-12T02:09:00.000+02:09");
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField8 = gregorianChronology7.months();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology7.weekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter10.withZone(dateTimeZone13);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone15 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone13);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone13.getName(0L, locale17);
        java.lang.Object obj19 = dateTimeZone13.writeReplace();
        org.joda.time.Chronology chronology20 = gregorianChronology7.withZone(dateTimeZone13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(365, (int) (byte) 5, 7976000, 913, 0, 333463, 18, chronology20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 913 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(cachedDateTimeZone15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+02:09" + "'", str18, "+02:09");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.addYears(1);
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime0.add(readableDuration8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        long long12 = dateTimeZone10.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone13 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        mutableDateTime0.setZoneRetainFields((org.joda.time.DateTimeZone) cachedDateTimeZone13);
        int int16 = cachedDateTimeZone13.getOffset(5702400L);
        long long18 = cachedDateTimeZone13.nextTransition(0L);
        boolean boolean19 = cachedDateTimeZone13.isFixed();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7740000 + "'", int16 == 7740000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        boolean boolean12 = preciseDurationField11.isPrecise();
        boolean boolean13 = preciseDurationField11.isSupported();
        long long16 = preciseDurationField11.getMillis((long) 57600, (long) '4');
        long long17 = preciseDurationField11.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType18 = preciseDurationField11.getType();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType18);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addHours(97);
        boolean boolean3 = mutableDateTime0.isAfterNow();
        int int4 = mutableDateTime0.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0, chronology7);
        mutableDateTime8.setMonthOfYear(5);
        mutableDateTime8.setDayOfYear((int) (byte) 19);
        boolean boolean13 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime8.toMutableDateTime(dateTimeZone15);
        int int18 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) mutableDateTime17);
        int int19 = mutableDateTime17.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime17.add(readableDuration20, 2);
        boolean boolean24 = mutableDateTime17.isEqual((-62071747199903L));
        mutableDateTime17.setSecondOfMinute((int) (short) 10);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime17);
        int int28 = mutableDateTime0.getMillisOfSecond();
        java.lang.String str29 = mutableDateTime0.toString();
        int int30 = mutableDateTime0.getSecondOfMinute();
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) mutableDateTime0);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime0.monthOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7740000 + "'", int18 == 7740000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-19T03:09:00.000+02:09" + "'", str29, "1970-01-19T03:09:00.000+02:09");
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        int int60 = zeroIsMaxDateTimeField58.getLeapAmount(727401615000L);
        int int63 = zeroIsMaxDateTimeField58.getDifference(8L, 9467028540L);
        int int65 = zeroIsMaxDateTimeField58.getMaximumValue(368164440000L);
        long long68 = zeroIsMaxDateTimeField58.add(913L, 0L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 18 + "'", int37 == 18);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-9467028) + "'", int63 == (-9467028));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 86400 + "'", int65 == 86400);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 913L + "'", long68 == 913L);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        mutableDateTime2.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        int int41 = mutableDateTime34.getDayOfMonth();
        boolean boolean42 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        mutableDateTime34.setDayOfYear((int) (short) 100);
        org.joda.time.Instant instant45 = mutableDateTime34.toInstant();
        boolean boolean47 = mutableDateTime34.isEqual(383942905481016000L);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 18 + "'", int41 == 18);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.MutableDateTime mutableDateTime8 = property5.roundHalfCeiling();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withZone(dateTimeZone12);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone14 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone12);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone12.getName(0L, locale16);
        mutableDateTime8.setZoneRetainFields(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0, chronology21);
        mutableDateTime22.setMonthOfYear(5);
        mutableDateTime22.setDayOfYear((int) (byte) 19);
        boolean boolean27 = mutableDateTime22.isAfterNow();
        int int30 = dateTimeFormatter19.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "monthOfYear", (int) (byte) 10);
        mutableDateTime22.addSeconds(10);
        mutableDateTime22.addWeekyears(20);
        int int35 = mutableDateTime22.getSecondOfDay();
        int int36 = mutableDateTime8.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) 0, chronology38);
        mutableDateTime39.setMonthOfYear(5);
        mutableDateTime39.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        mutableDateTime39.add(readablePeriod44, (int) (byte) 13);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime39.minuteOfDay();
        boolean boolean48 = mutableDateTime22.equals((java.lang.Object) mutableDateTime39);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime39.setTime(16, (int) (byte) 10, 886, 7750);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 886 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(cachedDateTimeZone14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+02:09" + "'", str17, "+02:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-11) + "'", int30 == (-11));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 7750 + "'", int35 == 7750);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addHours(97);
        boolean boolean3 = mutableDateTime0.isAfterNow();
        int int4 = mutableDateTime0.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0, chronology7);
        mutableDateTime8.setMonthOfYear(5);
        mutableDateTime8.setDayOfYear((int) (byte) 19);
        boolean boolean13 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime8.toMutableDateTime(dateTimeZone15);
        int int18 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) mutableDateTime17);
        int int19 = mutableDateTime17.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime17.add(readableDuration20, 2);
        boolean boolean24 = mutableDateTime17.isEqual((-62071747199903L));
        mutableDateTime17.setSecondOfMinute((int) (short) 10);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime17.addWeeks((int) (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7740000 + "'", int18 == 7740000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        int int18 = mutableDateTime11.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.millisOfSecond();
        mutableDateTime11.setTime((int) (byte) 0, (int) (byte) 1, 2, 1);
        mutableDateTime11.addWeeks((-5));
        java.util.GregorianCalendar gregorianCalendar27 = mutableDateTime11.toGregorianCalendar();
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 18 + "'", int18 == 18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(gregorianCalendar27);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        org.joda.time.DurationField durationField11 = remainderDateTimeField10.getRangeDurationField();
        java.util.Locale locale13 = null;
        java.lang.String str14 = remainderDateTimeField10.getAsShortText((int) (byte) 15, locale13);
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology15.era();
        org.joda.time.DurationField durationField19 = gregorianChronology15.seconds();
        org.joda.time.DurationField durationField20 = gregorianChronology15.millis();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology15.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str23 = dateTimeFieldType22.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField25 = new org.joda.time.field.RemainderDateTimeField(dateTimeField21, dateTimeFieldType22, (int) (short) 100);
        org.joda.time.DurationField durationField26 = remainderDateTimeField25.getRangeDurationField();
        org.joda.time.DurationField durationField27 = remainderDateTimeField25.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField29 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField10, durationField27, dateTimeFieldType28);
        org.joda.time.DurationField durationField30 = dividedDateTimeField29.getDurationField();
        long long33 = dividedDateTimeField29.getDifferenceAsLong(0L, 184082220000L);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) 0, chronology35);
        mutableDateTime36.setMonthOfYear(5);
        java.lang.Object obj39 = null;
        boolean boolean40 = mutableDateTime36.equals(obj39);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime36.add(durationFieldType41, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField45 = new org.joda.time.field.PreciseDurationField(durationFieldType41, (long) (short) 0);
        long long48 = preciseDurationField45.add(2524556160000L, (-292275054));
        long long51 = preciseDurationField45.add((long) 57600000, (-62071747199903L));
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = dateTimeFormatterBuilder52.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = dateTimeFormatterBuilder52.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = dateTimeFormatterBuilder57.appendTimeZoneShortName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder59 = dateTimeFormatterBuilder58.appendEraText();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) 0, chronology61);
        mutableDateTime62.setMonthOfYear(5);
        mutableDateTime62.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException69 = new org.joda.time.IllegalFieldValueException(durationFieldType67, "");
        java.lang.Throwable[] throwableArray70 = illegalFieldValueException69.getSuppressed();
        boolean boolean71 = mutableDateTime62.equals((java.lang.Object) illegalFieldValueException69);
        mutableDateTime62.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration74 = null;
        mutableDateTime62.add(readableDuration74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        mutableDateTime62.add(readablePeriod76, 0);
        org.joda.time.ReadableDuration readableDuration79 = null;
        mutableDateTime62.add(readableDuration79);
        java.util.Date date81 = mutableDateTime62.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime62.set(dateTimeFieldType82, 0);
        org.joda.time.chrono.ISOChronology iSOChronology85 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField86 = iSOChronology85.yearOfCentury();
        java.lang.String str87 = iSOChronology85.toString();
        org.joda.time.DurationField durationField88 = iSOChronology85.weeks();
        org.joda.time.DurationField durationField89 = iSOChronology85.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField90 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType82, durationField89);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder92 = dateTimeFormatterBuilder59.appendFixedSignedDecimal(dateTimeFieldType82, (int) (short) 10);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField94 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField29, (org.joda.time.DurationField) preciseDurationField45, dateTimeFieldType82, 70);
        long long97 = preciseDurationField45.add((long) 391, (int) (byte) 16);
        boolean boolean98 = preciseDurationField45.isPrecise();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "15" + "'", str14, "15");
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "monthOfYear" + "'", str23, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1840822L) + "'", long33 == (-1840822L));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 2524556160000L + "'", long48 == 2524556160000L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 57600000L + "'", long51 == 57600000L);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder57);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder58);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder59);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(iSOChronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ISOChronology[+02:09]" + "'", str87, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder92);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 391L + "'", long97 == 391L);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        long long14 = preciseDurationField11.add(2524556160000L, (-292275054));
        long long17 = preciseDurationField11.getMillis(1969, 0L);
        long long20 = preciseDurationField11.getMillis(0, (-320000L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2524556160000L + "'", long14 == 2524556160000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        int int60 = zeroIsMaxDateTimeField58.getLeapAmount(727401615000L);
        long long62 = zeroIsMaxDateTimeField58.roundHalfEven((-62166787187095L));
        int int63 = zeroIsMaxDateTimeField58.getMinimumValue();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 18 + "'", int37 == 18);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-62166787187000L) + "'", long62 == (-62166787187000L));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = gregorianChronology0.withUTC();
        long long12 = gregorianChronology0.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField13 = gregorianChronology0.months();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime14.add(readableDuration15, 10);
        int int18 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime14.hourOfDay();
        org.joda.time.Interval interval20 = property19.toInterval();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        int int22 = mutableDateTime21.getMonthOfYear();
        boolean boolean23 = interval20.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Interval interval24 = interval20.toInterval();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval20.toPeriod(periodType25);
        int[] intArray29 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period26, (long) 29, (long) 14);
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology0.weekyear();
        org.joda.time.DurationField durationField31 = gregorianChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField32 = gregorianChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1279002L + "'", long12 == 1279002L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone2 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone1);
        boolean boolean4 = cachedDateTimeZone2.isStandardOffset((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0, chronology6);
        mutableDateTime7.setMonthOfYear(5);
        mutableDateTime7.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException14 = new org.joda.time.IllegalFieldValueException(durationFieldType12, "");
        java.lang.Throwable[] throwableArray15 = illegalFieldValueException14.getSuppressed();
        boolean boolean16 = mutableDateTime7.equals((java.lang.Object) illegalFieldValueException14);
        mutableDateTime7.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime7.add(readableDuration19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutableDateTime7.add(readablePeriod21, 0);
        mutableDateTime7.setYear((-28800000));
        mutableDateTime7.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 0, chronology29);
        mutableDateTime30.setMonthOfYear(5);
        mutableDateTime30.setDayOfYear((int) (byte) 19);
        boolean boolean35 = mutableDateTime30.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone38 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime30.toMutableDateTime(dateTimeZone37);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.minuteOfDay();
        int int41 = mutableDateTime39.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology42.dayOfWeek();
        mutableDateTime39.setRounding(dateTimeField43, 5);
        int int46 = mutableDateTime39.getDayOfMonth();
        boolean boolean47 = mutableDateTime7.isAfter((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        long long50 = dateTimeZone48.previousTransition(0L);
        java.lang.Object obj51 = dateTimeZone48.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(dateTimeZone48);
        java.lang.String str54 = dateTimeZone48.getNameKey((long) (byte) 23);
        mutableDateTime39.setZoneRetainFields(dateTimeZone48);
        boolean boolean56 = cachedDateTimeZone2.equals((java.lang.Object) mutableDateTime39);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) 0, chronology58);
        mutableDateTime59.setMonthOfYear(5);
        mutableDateTime59.setDayOfYear((int) (byte) 19);
        boolean boolean64 = mutableDateTime59.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone67 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone66);
        org.joda.time.MutableDateTime mutableDateTime68 = mutableDateTime59.toMutableDateTime(dateTimeZone66);
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.chrono.GregorianChronology gregorianChronology70 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField71 = gregorianChronology70.yearOfEra();
        org.joda.time.DateTimeField dateTimeField72 = gregorianChronology70.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology75 = gregorianChronology70.withZone(dateTimeZone74);
        long long79 = gregorianChronology70.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField80 = gregorianChronology70.halfdays();
        org.joda.time.DurationField durationField81 = gregorianChronology70.days();
        org.joda.time.DateTimeField dateTimeField82 = gregorianChronology70.secondOfMinute();
        org.joda.time.DurationField durationField83 = durationFieldType69.getField((org.joda.time.Chronology) gregorianChronology70);
        mutableDateTime68.setChronology((org.joda.time.Chronology) gregorianChronology70);
        int int85 = mutableDateTime68.getSecondOfMinute();
        boolean boolean86 = mutableDateTime39.isBefore((org.joda.time.ReadableInstant) mutableDateTime68);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.year();
        int int88 = mutableDateTime68.get(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(cachedDateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(cachedDateTimeZone38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 18 + "'", int46 == 18);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(cachedDateTimeZone67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertNotNull(gregorianChronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 910L + "'", long79 == 910L);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1970 + "'", int88 == 1970);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.months();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology0.centuryOfEra();
        org.joda.time.DurationField durationField5 = gregorianChronology0.hours();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gregorianChronology0);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        java.util.Locale locale7 = null;
        int int8 = property5.getMaximumTextLength(locale7);
        java.util.Locale locale9 = null;
        int int10 = property5.getMaximumShortTextLength(locale9);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        java.util.Locale locale12 = null;
        java.lang.String str13 = remainderDateTimeField10.getAsShortText((long) (byte) 8, locale12);
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField15 = gregorianChronology14.months();
        long long18 = durationField15.getMillis((int) (short) -1, 0L);
        long long21 = durationField15.subtract(0L, (int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType22 = durationField15.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        org.joda.time.field.ScaledDurationField scaledDurationField26 = new org.joda.time.field.ScaledDurationField(durationField15, durationFieldType24, (int) (byte) 4);
        int int28 = scaledDurationField26.getValue(1712408905631L);
        long long31 = scaledDurationField26.add((long) (byte) 10, 4);
        boolean boolean32 = scaledDurationField26.isPrecise();
        long long34 = scaledDurationField26.getMillis(69);
        long long37 = scaledDurationField26.getMillis(36499999L, (-60524582399982L));
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 0, chronology39);
        mutableDateTime40.setMonthOfYear(5);
        mutableDateTime40.setDayOfYear((int) (byte) 19);
        boolean boolean45 = mutableDateTime40.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone48 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime40.toMutableDateTime(dateTimeZone47);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.yearOfEra();
        org.joda.time.ReadableDuration readableDuration51 = null;
        mutableDateTime49.add(readableDuration51);
        mutableDateTime49.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology56 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean57 = dateTimeFieldType55.isSupported((org.joda.time.Chronology) gregorianChronology56);
        int int58 = mutableDateTime49.get(dateTimeFieldType55);
        java.lang.Number number60 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException62 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType55, (java.lang.Number) (-1.0f), number60, (java.lang.Number) (-1.0f));
        org.joda.time.field.DividedDateTimeField dividedDateTimeField63 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField10, (org.joda.time.DurationField) scaledDurationField26, dateTimeFieldType55);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-2678400000L) + "'", long18 == (-2678400000L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-2678400000L) + "'", long21 == (-2678400000L));
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 162 + "'", int28 == 162);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 41904000010L + "'", long31 == 41904000010L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 725809896000L + "'", long34 == 725809896000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 383942905286400000L + "'", long37 == 383942905286400000L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(cachedDateTimeZone48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(gregorianChronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addHours(97);
        boolean boolean3 = mutableDateTime0.isAfterNow();
        int int4 = mutableDateTime0.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0, chronology7);
        mutableDateTime8.setMonthOfYear(5);
        mutableDateTime8.setDayOfYear((int) (byte) 19);
        boolean boolean13 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime8.toMutableDateTime(dateTimeZone15);
        int int18 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) mutableDateTime17);
        int int19 = mutableDateTime17.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime17.add(readableDuration20, 2);
        boolean boolean24 = mutableDateTime17.isEqual((-62071747199903L));
        mutableDateTime17.setSecondOfMinute((int) (short) 10);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime0.hourOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology29 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = gregorianChronology29.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology34 = gregorianChronology29.withZone(dateTimeZone33);
        org.joda.time.Chronology chronology35 = gregorianChronology29.withUTC();
        long long41 = gregorianChronology29.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField42 = gregorianChronology29.months();
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutableDateTime43.add(readableDuration44, 10);
        int int47 = mutableDateTime43.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime43.hourOfDay();
        org.joda.time.Interval interval49 = property48.toInterval();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime();
        int int51 = mutableDateTime50.getMonthOfYear();
        boolean boolean52 = interval49.isAfter((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.Interval interval53 = interval49.toInterval();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = interval49.toPeriod(periodType54);
        int[] intArray58 = gregorianChronology29.get((org.joda.time.ReadablePeriod) period55, (long) 29, (long) 14);
        org.joda.time.Period period59 = period55.toPeriod();
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.WEEKYEARS_TYPE;
        boolean boolean61 = period59.isSupported(durationFieldType60);
        mutableDateTime0.add(durationFieldType60, 0);
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) mutableDateTime0);
        org.joda.time.MutableDateTime mutableDateTime65 = mutableDateTime0.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7740000 + "'", int18 == 7740000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(gregorianChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1279002L + "'", long41 == 1279002L);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(interval49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DurationField durationField34 = unsupportedDateTimeField30.getLeapDurationField();
        java.util.Locale locale36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = unsupportedDateTimeField30.getAsShortText(557000000L, locale36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNull(durationField34);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.dayOfMonth();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0, chronology15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.secondOfDay();
        java.lang.String str18 = property17.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime19.add(readableDuration20, 10);
        int int23 = mutableDateTime19.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime19.dayOfWeek();
        boolean boolean26 = property24.equals((java.lang.Object) (-1));
        org.joda.time.MutableDateTime mutableDateTime27 = property24.roundHalfCeiling();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter28.withZone(dateTimeZone31);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone31);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone31.getName(0L, locale35);
        mutableDateTime27.setZoneRetainFields(dateTimeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) 0, chronology40);
        mutableDateTime41.setMonthOfYear(5);
        mutableDateTime41.setDayOfYear((int) (byte) 19);
        boolean boolean46 = mutableDateTime41.isAfterNow();
        int int49 = dateTimeFormatter38.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime41, "monthOfYear", (int) (byte) 10);
        mutableDateTime41.addSeconds(10);
        mutableDateTime41.addWeekyears(20);
        int int54 = mutableDateTime41.getSecondOfDay();
        int int55 = mutableDateTime27.compareTo((org.joda.time.ReadableInstant) mutableDateTime41);
        boolean boolean56 = property17.equals((java.lang.Object) mutableDateTime27);
        org.joda.time.MutableDateTime mutableDateTime57 = mutableDateTime27.toMutableDateTime();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime27);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "7740" + "'", str18, "7740");
        org.junit.Assert.assertNotNull(mutableDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+02:09" + "'", str36, "+02:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-11) + "'", int49 == (-11));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 7750 + "'", int54 == 7750);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(mutableDateTime57);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        int int10 = mutableDateTime2.getDayOfYear();
        int int11 = mutableDateTime2.getMinuteOfHour();
        mutableDateTime2.setSecondOfMinute(14);
        mutableDateTime2.setYear(54);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(10368000000L, dateTimeZone18);
        long long23 = dateTimeZone18.convertLocalToUTC((-28799087L), true);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime2.toMutableDateTime(dateTimeZone18);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDate((-9467028), 31, (int) (byte) 6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-28799092L) + "'", long23 == (-28799092L));
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.addYears(1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableDateTime0.add(readablePeriod8, 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone13 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone12);
        boolean boolean15 = cachedDateTimeZone13.isStandardOffset((-1L));
        long long17 = cachedDateTimeZone13.nextTransition((long) ' ');
        boolean boolean18 = cachedDateTimeZone13.isFixed();
        mutableDateTime0.setZoneRetainFields((org.joda.time.DateTimeZone) cachedDateTimeZone13);
        mutableDateTime0.addYears((int) (byte) -1);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(cachedDateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 32L + "'", long17 == 32L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = gregorianChronology0.withUTC();
        long long12 = gregorianChronology0.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField13 = gregorianChronology0.months();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime14.add(readableDuration15, 10);
        int int18 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime14.hourOfDay();
        org.joda.time.Interval interval20 = property19.toInterval();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        int int22 = mutableDateTime21.getMonthOfYear();
        boolean boolean23 = interval20.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Interval interval24 = interval20.toInterval();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval20.toPeriod(periodType25);
        int[] intArray29 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period26, (long) 29, (long) 14);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 0, chronology31);
        mutableDateTime32.setMonthOfYear(5);
        mutableDateTime32.setDayOfYear((int) (byte) 19);
        int int37 = mutableDateTime32.getMillisOfDay();
        java.lang.String str39 = mutableDateTime32.toString("20250406");
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime32.dayOfMonth();
        java.lang.String str41 = property40.getAsText();
        boolean boolean42 = period26.equals((java.lang.Object) property40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType44 = period26.getFieldType(365);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1279002L + "'", long12 == 1279002L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7740000 + "'", int37 == 7740000);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "20250406" + "'", str39, "20250406");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "19" + "'", str41, "19");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        int int4 = mutableDateTime2.getWeekOfWeekyear();
        java.lang.String str5 = mutableDateTime2.toString();
        int int6 = mutableDateTime2.getWeekOfWeekyear();
        org.joda.time.Instant instant7 = mutableDateTime2.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setHourOfDay(333463);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 333463 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T02:09:00.000+02:09" + "'", str5, "1970-01-01T02:09:00.000+02:09");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11, 10);
        int int14 = mutableDateTime10.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.hourOfDay();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        int int18 = mutableDateTime17.getMonthOfYear();
        boolean boolean19 = interval16.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21, 10);
        int int24 = mutableDateTime20.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.hourOfDay();
        org.joda.time.Interval interval26 = property25.toInterval();
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28, 10);
        int int31 = mutableDateTime27.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.hourOfDay();
        org.joda.time.Interval interval33 = property32.toInterval();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime();
        int int35 = mutableDateTime34.getMonthOfYear();
        boolean boolean36 = interval33.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.Interval interval37 = interval33.toInterval();
        org.joda.time.Interval interval38 = interval33.toInterval();
        boolean boolean39 = interval26.isBefore((org.joda.time.ReadableInterval) interval33);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime40.add(readableDuration41, 10);
        int int44 = mutableDateTime40.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime40.hourOfDay();
        org.joda.time.Interval interval46 = property45.toInterval();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        int int48 = mutableDateTime47.getMonthOfYear();
        boolean boolean49 = interval46.isAfter((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.Interval interval50 = interval46.toInterval();
        org.joda.time.Interval interval51 = interval46.toInterval();
        boolean boolean52 = interval33.isAfter((org.joda.time.ReadableInterval) interval51);
        java.lang.String str53 = interval33.toString();
        boolean boolean54 = interval16.isBefore((org.joda.time.ReadableInterval) interval33);
        long long55 = interval33.getEndMillis();
        boolean boolean56 = interval6.overlaps((org.joda.time.ReadableInterval) interval33);
        org.joda.time.MutableInterval mutableInterval57 = interval33.toMutableInterval();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mutableDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(interval33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mutableDateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(interval46);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T02:00:00.000+02:09/1970-01-01T03:00:00.000+02:09" + "'", str53, "1970-01-01T02:00:00.000+02:09/1970-01-01T03:00:00.000+02:09");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 3060000L + "'", long55 == 3060000L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(mutableInterval57);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval6.toInterval();
        org.joda.time.DateTime dateTime12 = interval6.getStart();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.yearOfEra();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeField15.getAsShortText((int) '#', locale17);
        mutableDateTime13.setRounding(dateTimeField15, 5);
        int int21 = mutableDateTime13.getRoundingMode();
        boolean boolean22 = interval6.equals((java.lang.Object) int21);
        org.joda.time.Interval interval23 = interval6.toInterval();
        org.joda.time.Interval interval24 = interval6.toInterval();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26, 10);
        int int29 = mutableDateTime25.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime25.hourOfDay();
        org.joda.time.Interval interval31 = property30.toInterval();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        int int33 = mutableDateTime32.getMonthOfYear();
        boolean boolean34 = interval31.isAfter((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Interval interval35 = interval31.toInterval();
        org.joda.time.Interval interval36 = interval31.toInterval();
        org.joda.time.DateTime dateTime37 = interval31.getStart();
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        org.joda.time.chrono.GregorianChronology gregorianChronology39 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology39.yearOfEra();
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeField40.getAsShortText((int) '#', locale42);
        mutableDateTime38.setRounding(dateTimeField40, 5);
        int int46 = mutableDateTime38.getRoundingMode();
        boolean boolean47 = interval31.equals((java.lang.Object) int46);
        org.joda.time.Interval interval48 = interval31.toInterval();
        boolean boolean49 = interval6.isBefore((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) 0, chronology51);
        mutableDateTime52.setMonthOfYear(5);
        mutableDateTime52.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException59 = new org.joda.time.IllegalFieldValueException(durationFieldType57, "");
        java.lang.Throwable[] throwableArray60 = illegalFieldValueException59.getSuppressed();
        boolean boolean61 = mutableDateTime52.equals((java.lang.Object) illegalFieldValueException59);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime52.dayOfYear();
        int int63 = property62.getMinimumValue();
        org.joda.time.Interval interval64 = property62.toInterval();
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime();
        java.util.GregorianCalendar gregorianCalendar66 = mutableDateTime65.toGregorianCalendar();
        boolean boolean67 = mutableDateTime65.isBeforeNow();
        int int68 = mutableDateTime65.getRoundingMode();
        boolean boolean69 = interval64.isBefore((org.joda.time.ReadableInstant) mutableDateTime65);
        boolean boolean70 = interval6.contains((org.joda.time.ReadableInterval) interval64);
        org.joda.time.DateTime dateTime71 = interval6.getEnd();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "35" + "'", str18, "35");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(gregorianChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "35" + "'", str43, "35");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(gregorianCalendar66);
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        mutableDateTime2.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        int int41 = mutableDateTime34.getDayOfMonth();
        boolean boolean42 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        long long45 = dateTimeZone43.previousTransition(0L);
        java.lang.Object obj46 = dateTimeZone43.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone43);
        java.lang.String str49 = dateTimeZone43.getNameKey((long) (byte) 23);
        mutableDateTime34.setZoneRetainFields(dateTimeZone43);
        org.joda.time.chrono.GregorianChronology gregorianChronology51 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology51.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = gregorianChronology51.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        long long57 = gregorianChronology51.add(readablePeriod54, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DurationField durationField58 = gregorianChronology51.days();
        org.joda.time.DateTimeField dateTimeField59 = gregorianChronology51.year();
        mutableDateTime34.setChronology((org.joda.time.Chronology) gregorianChronology51);
        org.joda.time.DateTimeField dateTimeField61 = gregorianChronology51.hourOfDay();
        org.joda.time.ReadablePartial readablePartial62 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology64 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField65 = gregorianChronology64.months();
        org.joda.time.DateTimeField dateTimeField66 = gregorianChronology64.weekyear();
        org.joda.time.DateTimeZone dateTimeZone67 = gregorianChronology64.getZone();
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration69 = null;
        mutableDateTime68.add(readableDuration69, 10);
        int int72 = mutableDateTime68.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime68.hourOfDay();
        org.joda.time.Interval interval74 = property73.toInterval();
        org.joda.time.MutableDateTime mutableDateTime75 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration76 = null;
        mutableDateTime75.add(readableDuration76, 10);
        int int79 = mutableDateTime75.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime75.hourOfDay();
        org.joda.time.Interval interval81 = property80.toInterval();
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime();
        int int83 = mutableDateTime82.getMonthOfYear();
        boolean boolean84 = interval81.isAfter((org.joda.time.ReadableInstant) mutableDateTime82);
        org.joda.time.Interval interval85 = interval81.toInterval();
        org.joda.time.Interval interval86 = interval81.toInterval();
        boolean boolean87 = interval74.isBefore((org.joda.time.ReadableInterval) interval81);
        org.joda.time.DateTime dateTime88 = interval74.getEnd();
        org.joda.time.Period period89 = interval74.toPeriod();
        int[] intArray92 = gregorianChronology64.get((org.joda.time.ReadablePeriod) period89, 105151900000L, 1712408953478L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = dateTimeField61.set(readablePartial62, 31, intArray92, 321);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 321 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 18 + "'", int41 == 18);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(gregorianChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 100L + "'", long57 == 100L);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(gregorianChronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(interval81);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[50, 11, 0, 4, 12, 17, 33, 478]");
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval6.toInterval();
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.Period period13 = interval11.toPeriod();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology15.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology20 = gregorianChronology15.withZone(dateTimeZone19);
        long long24 = gregorianChronology15.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField25 = gregorianChronology15.halfdays();
        org.joda.time.DurationField durationField26 = gregorianChronology15.days();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology15.secondOfMinute();
        org.joda.time.DurationField durationField28 = durationFieldType14.getField((org.joda.time.Chronology) gregorianChronology15);
        java.lang.String str29 = durationFieldType14.getName();
        int int30 = period13.get(durationFieldType14);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 910L + "'", long24 == 910L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "minutes" + "'", str29, "minutes");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        java.util.Locale locale15 = null;
        java.lang.String str16 = mutableDateTime11.toString("+02:09", locale15);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.setTime(0, 24, 40, (-1578239));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1578239 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+02:09" + "'", str16, "+02:09");
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        org.joda.time.ReadablePartial readablePartial59 = null;
        int int60 = zeroIsMaxDateTimeField58.getMaximumValue(readablePartial59);
        org.joda.time.ReadablePartial readablePartial61 = null;
        int int62 = zeroIsMaxDateTimeField58.getMaximumValue(readablePartial61);
        org.joda.time.ReadablePartial readablePartial63 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology64 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField65 = gregorianChronology64.months();
        org.joda.time.DateTimeField dateTimeField66 = gregorianChronology64.weekyear();
        org.joda.time.DateTimeZone dateTimeZone67 = gregorianChronology64.getZone();
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration69 = null;
        mutableDateTime68.add(readableDuration69, 10);
        int int72 = mutableDateTime68.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime68.hourOfDay();
        org.joda.time.Interval interval74 = property73.toInterval();
        org.joda.time.MutableDateTime mutableDateTime75 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration76 = null;
        mutableDateTime75.add(readableDuration76, 10);
        int int79 = mutableDateTime75.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime75.hourOfDay();
        org.joda.time.Interval interval81 = property80.toInterval();
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime();
        int int83 = mutableDateTime82.getMonthOfYear();
        boolean boolean84 = interval81.isAfter((org.joda.time.ReadableInstant) mutableDateTime82);
        org.joda.time.Interval interval85 = interval81.toInterval();
        org.joda.time.Interval interval86 = interval81.toInterval();
        boolean boolean87 = interval74.isBefore((org.joda.time.ReadableInterval) interval81);
        org.joda.time.DateTime dateTime88 = interval74.getEnd();
        org.joda.time.Period period89 = interval74.toPeriod();
        int[] intArray92 = gregorianChronology64.get((org.joda.time.ReadablePeriod) period89, 105151900000L, 1712408953478L);
        int int93 = zeroIsMaxDateTimeField58.getMinimumValue(readablePartial63, intArray92);
        int int95 = zeroIsMaxDateTimeField58.getLeapAmount((long) 292278993);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 18 + "'", int37 == 18);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 86400 + "'", int60 == 86400);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 86400 + "'", int62 == 86400);
        org.junit.Assert.assertNotNull(gregorianChronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(interval81);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[50, 11, 0, 4, 12, 17, 33, 478]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = gregorianChronology0.withUTC();
        long long12 = gregorianChronology0.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField13 = gregorianChronology0.months();
        org.joda.time.DateTimeField dateTimeField14 = gregorianChronology0.weekyear();
        org.joda.time.DurationField durationField15 = gregorianChronology0.weekyears();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gregorianChronology0);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1279002L + "'", long12 == 1279002L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        org.joda.time.DurationField durationField11 = remainderDateTimeField10.getRangeDurationField();
        java.util.Locale locale13 = null;
        java.lang.String str14 = remainderDateTimeField10.getAsShortText((int) (byte) 15, locale13);
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology15.era();
        org.joda.time.DurationField durationField19 = gregorianChronology15.seconds();
        org.joda.time.DurationField durationField20 = gregorianChronology15.millis();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology15.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str23 = dateTimeFieldType22.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField25 = new org.joda.time.field.RemainderDateTimeField(dateTimeField21, dateTimeFieldType22, (int) (short) 100);
        org.joda.time.DurationField durationField26 = remainderDateTimeField25.getRangeDurationField();
        org.joda.time.DurationField durationField27 = remainderDateTimeField25.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField29 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField10, durationField27, dateTimeFieldType28);
        org.joda.time.DurationField durationField30 = dividedDateTimeField29.getDurationField();
        org.joda.time.ReadablePartial readablePartial31 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology33 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology33.secondOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology33.dayOfWeek();
        long long41 = gregorianChronology33.getDateTimeMillis(5, 4, (int) (byte) 3, (int) (byte) 15);
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology33.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) 0, chronology46);
        mutableDateTime47.setMonthOfYear(5);
        mutableDateTime47.setDayOfYear((int) (byte) 19);
        boolean boolean52 = mutableDateTime47.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone55 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone54);
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime47.toMutableDateTime(dateTimeZone54);
        int int57 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) mutableDateTime56);
        int int58 = mutableDateTime56.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration59 = null;
        mutableDateTime56.add(readableDuration59, 2);
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration63 = null;
        mutableDateTime62.add(readableDuration63, 10);
        int int66 = mutableDateTime62.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime62.hourOfDay();
        org.joda.time.Interval interval68 = property67.toInterval();
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime();
        int int70 = mutableDateTime69.getMonthOfYear();
        boolean boolean71 = interval68.isAfter((org.joda.time.ReadableInstant) mutableDateTime69);
        org.joda.time.Interval interval72 = interval68.toInterval();
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = interval68.toPeriod(periodType73);
        mutableDateTime56.add((org.joda.time.ReadablePeriod) period74);
        org.joda.time.MutablePeriod mutablePeriod76 = period74.toMutablePeriod();
        int int78 = period74.getValue(0);
        int[] intArray81 = gregorianChronology33.get((org.joda.time.ReadablePeriod) period74, (long) 20, (long) 913);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray83 = dividedDateTimeField29.addWrapField(readablePartial31, (int) 'a', intArray81, (int) (byte) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "15" + "'", str14, "15");
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "monthOfYear" + "'", str23, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(gregorianChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-62001417599985L) + "'", long41 == (-62001417599985L));
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(cachedDateTimeZone55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 7740000 + "'", int57 == 7740000);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 19 + "'", int58 == 19);
        org.junit.Assert.assertNotNull(mutableDateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(interval68);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 0, 0, 0, 0, 0, 0, 893]");
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        boolean boolean12 = preciseDurationField11.isPrecise();
        boolean boolean13 = preciseDurationField11.isSupported();
        long long16 = preciseDurationField11.getMillis(1969, (long) 292278993);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendClockhourOfDay(24);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder19.appendTimeZoneShortName();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder19.appendTimeZoneShortName(strMap23);
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = dateTimeFormatterBuilder19.toPrinter();
        java.io.Writer writer26 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology28 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField29 = gregorianChronology28.months();
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology28.weekyear();
        org.joda.time.DateTimeZone dateTimeZone31 = gregorianChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField32 = gregorianChronology28.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter34.withZone(dateTimeZone37);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone39 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone37);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) cachedDateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str42 = dateTimeFieldType41.toString();
        boolean boolean43 = cachedDateTimeZone39.equals((java.lang.Object) dateTimeFieldType41);
        java.util.Locale locale44 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter25.printTo(writer26, 1712361600000L, (org.joda.time.Chronology) gregorianChronology28, 789, (org.joda.time.DateTimeZone) cachedDateTimeZone39, locale44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimePrinter25);
        org.junit.Assert.assertNotNull(gregorianChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(cachedDateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "monthOfYear" + "'", str42, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        java.lang.String str34 = unsupportedDateTimeField30.getName();
        long long37 = unsupportedDateTimeField30.getDifferenceAsLong((long) 1, 241920000000L);
        org.joda.time.DurationField durationField38 = unsupportedDateTimeField30.getLeapDurationField();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "millisOfDay" + "'", str34, "millisOfDay");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-4031999L) + "'", long37 == (-4031999L));
        org.junit.Assert.assertNull(durationField38);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableDateTime11.add(readablePeriod18, 5);
        int int21 = mutableDateTime11.getEra();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime11.millisOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        long long14 = preciseDurationField11.add(2524556160000L, (-292275054));
        long long17 = preciseDurationField11.getMillis(1969, 0L);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = preciseDurationField11.getValueAsLong(30294673919999999L, (long) (-320));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2524556160000L + "'", long14 == 2524556160000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.addHours(863);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime2.setZoneRetainFields(dateTimeZone21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType42.getDurationType();
        mutableDateTime34.add(durationFieldType43, 891);
        int int46 = mutableDateTime34.getMillisOfSecond();
        mutableDateTime34.addMinutes((int) (byte) 6);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime34.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime50 = property49.roundHalfEven();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.dayOfYear();
        int int13 = property12.getMinimumValue();
        org.joda.time.Interval interval14 = property12.toInterval();
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(mutableInterval15);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        int int5 = mutableDateTime4.getCenturyOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology11 = gregorianChronology6.withZone(dateTimeZone10);
        long long15 = gregorianChronology6.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField16 = gregorianChronology6.years();
        org.joda.time.DateTime dateTime17 = mutableDateTime4.toDateTime((org.joda.time.Chronology) gregorianChronology6);
        mutableDateTime4.setMinuteOfDay((int) (byte) 9);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime4.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 910L + "'", long15 == 910L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        int int10 = mutableDateTime2.getDayOfYear();
        int int11 = mutableDateTime2.getMinuteOfHour();
        mutableDateTime2.setSecondOfMinute(14);
        mutableDateTime2.setDayOfWeek((int) (byte) 5);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime2.copy();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        java.util.Locale locale15 = null;
        java.lang.String str16 = mutableDateTime11.toString("+02:09", locale15);
        boolean boolean18 = mutableDateTime11.isEqual((-60524582399982L));
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+02:09" + "'", str16, "+02:09");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.hourOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime4.millisOfSecond();
        int int7 = property6.getMaximumValue();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumShortTextLength(locale8);
        org.joda.time.MutableDateTime mutableDateTime11 = property6.set("8");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 999 + "'", int7 == 999);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDateTime((int) (byte) 21, 714, (-2), (int) (byte) 22, 94, 86400, 891);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 94 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str5 = dateTimeFieldType4.toString();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType4, 236, (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder0.appendWeekyear((int) (byte) 22, 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder0.appendTwoDigitYear(913, false);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder0.appendTimeZoneName();
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology16.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology16.era();
        org.joda.time.DurationField durationField20 = gregorianChronology16.seconds();
        org.joda.time.DurationField durationField21 = gregorianChronology16.millis();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology16.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str24 = dateTimeFieldType23.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField22, dateTimeFieldType23, (int) (short) 100);
        org.joda.time.DurationField durationField27 = remainderDateTimeField26.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = null;
        java.lang.String str31 = remainderDateTimeField26.getAsShortText(readablePartial28, (int) (byte) 5, locale30);
        java.lang.String str33 = remainderDateTimeField26.getAsShortText((long) (byte) 3);
        long long35 = remainderDateTimeField26.roundHalfCeiling((long) (-11));
        org.joda.time.ReadablePartial readablePartial36 = null;
        java.util.Locale locale38 = null;
        java.lang.String str39 = remainderDateTimeField26.getAsText(readablePartial36, 1970, locale38);
        org.joda.time.DurationField durationField40 = remainderDateTimeField26.getRangeDurationField();
        long long43 = remainderDateTimeField26.add(94694399995L, (long) (byte) 23);
        org.joda.time.chrono.GregorianChronology gregorianChronology44 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = gregorianChronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField46 = gregorianChronology44.secondOfDay();
        org.joda.time.DateTimeField dateTimeField47 = gregorianChronology44.era();
        org.joda.time.DurationField durationField48 = gregorianChronology44.seconds();
        org.joda.time.DurationField durationField49 = gregorianChronology44.millis();
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology44.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str52 = dateTimeFieldType51.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField54 = new org.joda.time.field.RemainderDateTimeField(dateTimeField50, dateTimeFieldType51, (int) (short) 100);
        org.joda.time.DurationField durationField55 = remainderDateTimeField54.getRangeDurationField();
        int int56 = remainderDateTimeField54.getMaximumValue();
        long long58 = remainderDateTimeField54.roundCeiling((long) 2000);
        int int60 = remainderDateTimeField54.get(1712408905631L);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) 0, chronology62);
        mutableDateTime63.setMonthOfYear(5);
        mutableDateTime63.setDayOfYear((int) (byte) 19);
        boolean boolean68 = mutableDateTime63.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone71 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone70);
        org.joda.time.MutableDateTime mutableDateTime72 = mutableDateTime63.toMutableDateTime(dateTimeZone70);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime72.yearOfEra();
        org.joda.time.ReadableDuration readableDuration74 = null;
        mutableDateTime72.add(readableDuration74);
        mutableDateTime72.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology79 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean80 = dateTimeFieldType78.isSupported((org.joda.time.Chronology) gregorianChronology79);
        int int81 = mutableDateTime72.get(dateTimeFieldType78);
        java.lang.Number number83 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException85 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType78, (java.lang.Number) (-1.0f), number83, (java.lang.Number) (-1.0f));
        org.joda.time.field.DividedDateTimeField dividedDateTimeField86 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField54, dateTimeFieldType78);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField87 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField26, dateTimeFieldType78);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder89 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType78, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal number of digits: 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "monthOfYear" + "'", str5, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "monthOfYear" + "'", str24, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "5" + "'", str31, "5");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970" + "'", str39, "1970");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 94694422995L + "'", long43 == 94694422995L);
        org.junit.Assert.assertNotNull(gregorianChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "monthOfYear" + "'", str52, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 99 + "'", int56 == 99);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 2000L + "'", long58 == 2000L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(cachedDateTimeZone71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(gregorianChronology79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1970 + "'", int81 == 1970);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = unsupportedDateTimeField30.getType();
        org.joda.time.DurationField durationField35 = unsupportedDateTimeField30.getLeapDurationField();
        org.joda.time.DurationField durationField36 = unsupportedDateTimeField30.getRangeDurationField();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:51:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+02:09]" + "'", str27, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNull(durationField35);
        org.junit.Assert.assertNull(durationField36);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        java.lang.String str5 = property3.toString();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property3.getFieldType();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType7, "");
        illegalFieldValueException9.prependMessage("16");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfDay]" + "'", str5, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekDate();
        org.joda.time.format.DateTimeParser dateTimeParser1 = dateTimeFormatter0.getParser();
        java.lang.String str3 = dateTimeFormatter0.print((-9467020800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withDefaultYear(75);
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.yearOfCentury();
        java.lang.String str8 = iSOChronology6.toString();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology6.year();
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology10.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology15 = gregorianChronology10.withZone(dateTimeZone14);
        org.joda.time.Chronology chronology16 = gregorianChronology10.withUTC();
        long long22 = gregorianChronology10.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField23 = gregorianChronology10.months();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime24.add(readableDuration25, 10);
        int int28 = mutableDateTime24.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.hourOfDay();
        org.joda.time.Interval interval30 = property29.toInterval();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        int int32 = mutableDateTime31.getMonthOfYear();
        boolean boolean33 = interval30.isAfter((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.Interval interval34 = interval30.toInterval();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = interval30.toPeriod(periodType35);
        int[] intArray39 = gregorianChronology10.get((org.joda.time.ReadablePeriod) period36, (long) 29, (long) 14);
        org.joda.time.Period period40 = period36.toPeriod();
        int[] intArray42 = iSOChronology6.get((org.joda.time.ReadablePeriod) period36, (long) (short) 0);
        org.joda.time.Chronology chronology43 = iSOChronology6.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter0.withChronology((org.joda.time.Chronology) iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeParser1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1670-W01-3" + "'", str3, "1670-W01-3");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[+02:09]" + "'", str8, "ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1279002L + "'", long22 == 1279002L);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime2.setZoneRetainFields(dateTimeZone21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType42.getDurationType();
        mutableDateTime34.add(durationFieldType43, 891);
        int int46 = mutableDateTime34.getMillisOfSecond();
        mutableDateTime34.addMinutes((int) (byte) 6);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) 0, chronology50);
        mutableDateTime51.setMonthOfYear(5);
        mutableDateTime51.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutableDateTime51.add(readablePeriod56, (int) (byte) 13);
        int int59 = mutableDateTime51.getDayOfYear();
        int int60 = mutableDateTime51.getYearOfCentury();
        mutableDateTime34.setTime((org.joda.time.ReadableInstant) mutableDateTime51);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 70 + "'", int60 == 70);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        int int10 = mutableDateTime2.getDayOfYear();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField12 = gregorianChronology11.months();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gregorianChronology11.dayOfMonth();
        java.lang.String str15 = gregorianChronology11.toString();
        org.joda.time.DateTime dateTime16 = mutableDateTime2.toDateTime((org.joda.time.Chronology) gregorianChronology11);
        int int17 = dateTime16.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GregorianChronology[UTC]" + "'", str15, "GregorianChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.dayOfYear();
        long long13 = property12.getMillis();
        int int14 = property12.get();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime15.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addHours(97);
        boolean boolean3 = mutableDateTime0.isAfterNow();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone8 = new org.joda.time.tz.FixedDateTimeZone("DurationField[months]", "", 0, (int) (byte) 0);
        java.lang.String str10 = fixedDateTimeZone8.getName((long) (-1));
        int int12 = fixedDateTimeZone8.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone8);
        long long15 = fixedDateTimeZone8.previousTransition((long) (-2));
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime0.toMutableDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone8);
        java.util.Date date17 = mutableDateTime16.toDate();
        mutableDateTime16.setMinuteOfDay((int) (byte) 13);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-2L) + "'", long15 == (-2L));
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Sun Jan 04 17:00:00 PST 1970");
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        org.joda.time.DurationField durationField11 = remainderDateTimeField10.getRangeDurationField();
        org.joda.time.DurationField durationField12 = remainderDateTimeField10.getDurationField();
        org.joda.time.chrono.GregorianChronology gregorianChronology13 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = gregorianChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology13.monthOfYear();
        org.joda.time.DurationField durationField17 = gregorianChronology13.months();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology18.era();
        org.joda.time.DurationField durationField22 = gregorianChronology18.seconds();
        org.joda.time.DurationField durationField23 = gregorianChronology18.millis();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology18.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str26 = dateTimeFieldType25.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField28 = new org.joda.time.field.RemainderDateTimeField(dateTimeField24, dateTimeFieldType25, (int) (short) 100);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField29 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField10, durationField17, dateTimeFieldType25);
        long long32 = dividedDateTimeField29.add((long) (byte) -1, (long) 365);
        long long34 = dividedDateTimeField29.roundFloor((long) 7750);
        long long37 = dividedDateTimeField29.add((-62071747199903L), 4);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField38 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField29);
        int int39 = dividedDateTimeField29.getDivisor();
        long long42 = dividedDateTimeField29.set(0L, (int) (byte) 7);
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology44 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField45 = gregorianChronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField46 = gregorianChronology44.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology49 = gregorianChronology44.withZone(dateTimeZone48);
        org.joda.time.Chronology chronology50 = gregorianChronology44.withUTC();
        long long56 = gregorianChronology44.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField57 = gregorianChronology44.months();
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration59 = null;
        mutableDateTime58.add(readableDuration59, 10);
        int int62 = mutableDateTime58.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime58.hourOfDay();
        org.joda.time.Interval interval64 = property63.toInterval();
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime();
        int int66 = mutableDateTime65.getMonthOfYear();
        boolean boolean67 = interval64.isAfter((org.joda.time.ReadableInstant) mutableDateTime65);
        org.joda.time.Interval interval68 = interval64.toInterval();
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = interval64.toPeriod(periodType69);
        int[] intArray73 = gregorianChronology44.get((org.joda.time.ReadablePeriod) period70, (long) 29, (long) 14);
        int int74 = dividedDateTimeField29.getMaximumValue(readablePartial43, intArray73);
        int int75 = dividedDateTimeField29.getMinimumValue();
        org.joda.time.DurationField durationField76 = dividedDateTimeField29.getRangeDurationField();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(gregorianChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "monthOfYear" + "'", str26, "monthOfYear");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 36499999L + "'", long32 == 36499999L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-62071746799903L) + "'", long37 == (-62071746799903L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 700000L + "'", long42 == 700000L);
        org.junit.Assert.assertNotNull(gregorianChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1279002L + "'", long56 == 1279002L);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(interval64);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 863 + "'", int74 == 863);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(durationField76);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        mutableDateTime2.addWeeks((int) (byte) 8);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int24 = mutableDateTime2.get(dateTimeFieldType23);
        int int25 = mutableDateTime2.getSecondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology26 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology26.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology31 = gregorianChronology26.withZone(dateTimeZone30);
        org.joda.time.Chronology chronology32 = gregorianChronology26.withUTC();
        long long38 = gregorianChronology26.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField39 = gregorianChronology26.months();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime40.add(readableDuration41, 10);
        int int44 = mutableDateTime40.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime40.hourOfDay();
        org.joda.time.Interval interval46 = property45.toInterval();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        int int48 = mutableDateTime47.getMonthOfYear();
        boolean boolean49 = interval46.isAfter((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.Interval interval50 = interval46.toInterval();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = interval46.toPeriod(periodType51);
        int[] intArray55 = gregorianChronology26.get((org.joda.time.ReadablePeriod) period52, (long) 29, (long) 14);
        mutableDateTime2.add((org.joda.time.ReadablePeriod) period52, (int) (byte) 1);
        org.joda.time.chrono.GregorianChronology gregorianChronology58 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField59 = gregorianChronology58.yearOfEra();
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology58.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology63 = gregorianChronology58.withZone(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField64 = gregorianChronology58.era();
        org.joda.time.DateTimeField dateTimeField65 = gregorianChronology58.millisOfSecond();
        org.joda.time.DurationField durationField66 = gregorianChronology58.halfdays();
        org.joda.time.DateTime dateTime67 = mutableDateTime2.toDateTime((org.joda.time.Chronology) gregorianChronology58);
        int int68 = dateTime67.getSecondOfMinute();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 26 + "'", int24 == 26);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(gregorianChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1279002L + "'", long38 == 1279002L);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(interval46);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertNotNull(gregorianChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(10368000000L, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0, chronology7);
        mutableDateTime8.setMonthOfYear(5);
        mutableDateTime8.setDayOfYear((int) (byte) 19);
        boolean boolean13 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime8.toMutableDateTime(dateTimeZone15);
        int int18 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) mutableDateTime17);
        int int19 = mutableDateTime17.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime17.add(readableDuration20, 2);
        boolean boolean24 = mutableDateTime17.isEqual((-62071747199903L));
        mutableDateTime17.setSecondOfMinute((int) (short) 10);
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology27.era();
        org.joda.time.DurationField durationField31 = gregorianChronology27.seconds();
        org.joda.time.DurationField durationField32 = gregorianChronology27.centuries();
        org.joda.time.DateTimeField dateTimeField33 = gregorianChronology27.dayOfMonth();
        mutableDateTime17.setChronology((org.joda.time.Chronology) gregorianChronology27);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        mutableDateTime17.add(readablePeriod35, (int) '4');
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime17.minuteOfDay();
        boolean boolean39 = mutableDateTime4.isBefore((org.joda.time.ReadableInstant) mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = gregorianChronology0.add(readablePeriod3, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10, 10);
        int int13 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfWeek();
        mutableDateTime9.addYears(1);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime9.add(readablePeriod17, 100);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone22 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone21);
        boolean boolean24 = cachedDateTimeZone22.isStandardOffset((-1L));
        long long26 = cachedDateTimeZone22.nextTransition((long) ' ');
        boolean boolean27 = cachedDateTimeZone22.isFixed();
        mutableDateTime9.setZoneRetainFields((org.joda.time.DateTimeZone) cachedDateTimeZone22);
        org.joda.time.Chronology chronology29 = gregorianChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone22);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.millisOfSecond();
        boolean boolean32 = cachedDateTimeZone22.equals((java.lang.Object) iSOChronology30);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(cachedDateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8, 10);
        int int11 = mutableDateTime7.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime7.hourOfDay();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        int int15 = mutableDateTime14.getMonthOfYear();
        boolean boolean16 = interval13.isAfter((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Interval interval17 = interval13.toInterval();
        org.joda.time.Interval interval18 = interval13.toInterval();
        boolean boolean19 = interval6.isBefore((org.joda.time.ReadableInterval) interval13);
        long long20 = interval13.getStartMillis();
        org.joda.time.DateTime dateTime21 = interval13.getStart();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23, 10);
        int int26 = mutableDateTime22.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.hourOfDay();
        org.joda.time.Interval interval28 = property27.toInterval();
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30, 10);
        int int33 = mutableDateTime29.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime29.hourOfDay();
        org.joda.time.Interval interval35 = property34.toInterval();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime();
        int int37 = mutableDateTime36.getMonthOfYear();
        boolean boolean38 = interval35.isAfter((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.Interval interval39 = interval35.toInterval();
        org.joda.time.Interval interval40 = interval35.toInterval();
        boolean boolean41 = interval28.isBefore((org.joda.time.ReadableInterval) interval35);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime42.add(readableDuration43, 10);
        int int46 = mutableDateTime42.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime42.hourOfDay();
        org.joda.time.Interval interval48 = property47.toInterval();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime();
        int int50 = mutableDateTime49.getMonthOfYear();
        boolean boolean51 = interval48.isAfter((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.Interval interval52 = interval48.toInterval();
        org.joda.time.Interval interval53 = interval48.toInterval();
        boolean boolean54 = interval35.isAfter((org.joda.time.ReadableInterval) interval53);
        java.lang.String str55 = interval35.toString();
        org.joda.time.Duration duration56 = interval35.toDuration();
        org.joda.time.Chronology chronology57 = interval35.getChronology();
        boolean boolean58 = interval13.isAfter((org.joda.time.ReadableInterval) interval35);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(mutableDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(interval48);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T01:00:00.000Z" + "'", str55, "1970-01-01T00:00:00.000Z/1970-01-01T01:00:00.000Z");
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = unsupportedDateTimeField30.getLeapAmount(900052L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str27, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        boolean boolean13 = mutableDateTime2.isEqual((long) (byte) 21);
        int int14 = mutableDateTime2.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime2.yearOfEra();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DurationField durationField34 = unsupportedDateTimeField30.getLeapDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long36 = unsupportedDateTimeField30.roundFloor(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str27, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNull(durationField34);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        mutableDateTime2.addWeeks((int) (short) -1);
        java.lang.String str10 = mutableDateTime2.toString();
        long long11 = mutableDateTime2.getMillis();
        java.lang.String str12 = mutableDateTime2.toString();
        org.joda.time.DateTime dateTime13 = mutableDateTime2.toDateTime();
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-12T00:00:00.000Z" + "'", str10, "1970-01-12T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 950400000L + "'", long11 == 950400000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-12T00:00:00.000Z" + "'", str12, "1970-01-12T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(415, 966, 20, (int) (byte) 18, 321, 714, 16, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 321 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6, 10);
        int int9 = mutableDateTime5.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime5.dayOfWeek();
        boolean boolean12 = property10.equals((java.lang.Object) (-1));
        org.joda.time.MutableDateTime mutableDateTime13 = property10.roundHalfCeiling();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter14.withZone(dateTimeZone17);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone17);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone17.getName(0L, locale21);
        mutableDateTime13.setZoneRetainFields(dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) 0, chronology26);
        mutableDateTime27.setMonthOfYear(5);
        mutableDateTime27.setDayOfYear((int) (byte) 19);
        boolean boolean32 = mutableDateTime27.isAfterNow();
        int int35 = dateTimeFormatter24.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime27, "monthOfYear", (int) (byte) 10);
        mutableDateTime27.addSeconds(10);
        mutableDateTime27.addWeekyears(20);
        int int40 = mutableDateTime27.getSecondOfDay();
        int int41 = mutableDateTime13.compareTo((org.joda.time.ReadableInstant) mutableDateTime27);
        boolean boolean42 = property3.equals((java.lang.Object) mutableDateTime13);
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime13.toMutableDateTime();
        org.joda.time.DateTime dateTime44 = mutableDateTime13.toDateTime();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) 0, chronology46);
        mutableDateTime47.setMonthOfYear(5);
        mutableDateTime47.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        mutableDateTime47.add(readablePeriod52, (int) (byte) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        java.lang.String str56 = mutableDateTime47.toString(dateTimeFormatter55);
        mutableDateTime47.addMinutes(20);
        boolean boolean59 = dateTime44.isAfter((org.joda.time.ReadableInstant) mutableDateTime47);
        int int60 = dateTime44.getYearOfCentury();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(mutableDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+02:09" + "'", str22, "+02:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-11) + "'", int35 == (-11));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "19700101T000000.000Z" + "'", str56, "19700101T000000.000Z");
// flaky:         org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 70 + "'", int60 == 70);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology5.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gregorianChronology5.add(readablePeriod8, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        long long14 = dateTimeZone12.previousTransition(0L);
        java.lang.Object obj15 = dateTimeZone12.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology17 = gregorianChronology5.withZone(dateTimeZone12);
        mutableDateTime2.setChronology((org.joda.time.Chronology) gregorianChronology5);
        int int19 = mutableDateTime2.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.MutableDateTime mutableDateTime8 = property5.roundHalfCeiling();
        mutableDateTime8.setMillis((long) 591);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        mutableDateTime12.setSecondOfMinute((int) (short) 10);
        org.joda.time.chrono.GregorianChronology gregorianChronology22 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology22.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology22.era();
        org.joda.time.DurationField durationField26 = gregorianChronology22.seconds();
        org.joda.time.DurationField durationField27 = gregorianChronology22.centuries();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology22.dayOfMonth();
        mutableDateTime12.setChronology((org.joda.time.Chronology) gregorianChronology22);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableDateTime12.add(readablePeriod30, (int) '4');
        org.joda.time.chrono.GregorianChronology gregorianChronology33 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology33.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = gregorianChronology33.add(readablePeriod36, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology33.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology33.hourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology33.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime12.toMutableDateTime((org.joda.time.Chronology) gregorianChronology33);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime12.centuryOfEra();
        int int47 = property46.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(gregorianChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(gregorianChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2922790 + "'", int47 == 2922790);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        int int10 = mutableDateTime2.getDayOfYear();
        int int11 = mutableDateTime2.getMinuteOfHour();
        mutableDateTime2.setSecondOfMinute(14);
        mutableDateTime2.setDayOfWeek((int) (byte) 5);
        mutableDateTime2.setSecondOfMinute((int) (byte) 8);
        org.joda.time.DateTime dateTime18 = mutableDateTime2.toDateTimeISO();
        mutableDateTime2.setSecondOfMinute((int) '4');
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 0, chronology23);
        mutableDateTime24.setMonthOfYear(5);
        mutableDateTime24.setDayOfYear((int) (byte) 19);
        boolean boolean29 = mutableDateTime24.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone32 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime24.toMutableDateTime(dateTimeZone31);
        int int34 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) mutableDateTime33);
        int int35 = mutableDateTime33.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime33.add(readableDuration36, 2);
        boolean boolean40 = mutableDateTime33.isEqual((-62071747199903L));
        int int41 = mutableDateTime33.getYearOfCentury();
        java.util.Date date42 = mutableDateTime33.toDate();
        mutableDateTime33.add(368151660000L);
        boolean boolean45 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) mutableDateTime33);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setMillisOfSecond(86399);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(cachedDateTimeZone32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 19 + "'", int35 == 19);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 70 + "'", int41 == 70);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Jan 18 16:00:00 PST 1970");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        mutableDateTime2.addWeeks((int) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableDateTime2.add(readablePeriod10);
        mutableDateTime2.setWeekyear(67);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime2.monthOfYear();
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.addYears(1);
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime0.add(readableDuration8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime0.millisOfSecond();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology5.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gregorianChronology5.add(readablePeriod8, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        long long14 = dateTimeZone12.previousTransition(0L);
        java.lang.Object obj15 = dateTimeZone12.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology17 = gregorianChronology5.withZone(dateTimeZone12);
        mutableDateTime2.setChronology((org.joda.time.Chronology) gregorianChronology5);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime2.yearOfEra();
        java.lang.String str20 = property19.getAsText();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        boolean boolean13 = mutableDateTime2.isEqual((long) (byte) 21);
        mutableDateTime2.setTime((long) 46);
        int int16 = mutableDateTime2.getDayOfMonth();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology1.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = gregorianChronology1.add(readablePeriod5, (long) 100, (int) (byte) 3);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(105228000000L, (org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology1.millisOfDay();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField(0L, 960);
        long long63 = zeroIsMaxDateTimeField58.roundHalfEven(121001L);
        long long66 = zeroIsMaxDateTimeField58.add((long) 57600000, (long) 54);
        java.util.Locale locale67 = null;
        int int68 = zeroIsMaxDateTimeField58.getMaximumShortTextLength(locale67);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 960000L + "'", long61 == 960000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 121000L + "'", long63 == 121000L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 57654000L + "'", long66 == 57654000L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        mutableDateTime2.addWeekyears(0);
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) mutableDateTime2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        mutableDateTime2.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        int int41 = mutableDateTime34.getDayOfMonth();
        boolean boolean42 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        mutableDateTime34.setDayOfYear((int) (short) 100);
        org.joda.time.Instant instant45 = mutableDateTime34.toInstant();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime34.dayOfMonth();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 0, chronology3);
        mutableDateTime4.setMonthOfYear(5);
        mutableDateTime4.addMinutes((int) 'a');
        int int9 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) mutableDateTime4);
        int int10 = mutableDateTime4.getDayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12, 10);
        int int15 = mutableDateTime11.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.hourOfDay();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime();
        int int19 = mutableDateTime18.getMonthOfYear();
        boolean boolean20 = interval17.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.Interval interval21 = interval17.toInterval();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23, 10);
        int int26 = mutableDateTime22.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.hourOfDay();
        org.joda.time.Interval interval28 = property27.toInterval();
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30, 10);
        int int33 = mutableDateTime29.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime29.hourOfDay();
        org.joda.time.Interval interval35 = property34.toInterval();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime();
        int int37 = mutableDateTime36.getMonthOfYear();
        boolean boolean38 = interval35.isAfter((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.Interval interval39 = interval35.toInterval();
        org.joda.time.Interval interval40 = interval35.toInterval();
        boolean boolean41 = interval28.isBefore((org.joda.time.ReadableInterval) interval35);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime42.add(readableDuration43, 10);
        int int46 = mutableDateTime42.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime42.hourOfDay();
        org.joda.time.Interval interval48 = property47.toInterval();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime();
        int int50 = mutableDateTime49.getMonthOfYear();
        boolean boolean51 = interval48.isAfter((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.Interval interval52 = interval48.toInterval();
        org.joda.time.Interval interval53 = interval48.toInterval();
        boolean boolean54 = interval35.isAfter((org.joda.time.ReadableInterval) interval53);
        boolean boolean55 = interval21.overlaps((org.joda.time.ReadableInterval) interval53);
        org.joda.time.Duration duration56 = interval53.toDuration();
        org.joda.time.chrono.GregorianChronology gregorianChronology57 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField58 = gregorianChronology57.yearOfEra();
        org.joda.time.ReadablePartial readablePartial59 = null;
        int[] intArray66 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray68 = dateTimeField58.add(readablePartial59, 0, intArray66, 0);
        boolean boolean69 = duration56.equals((java.lang.Object) readablePartial59);
        java.lang.String str70 = duration56.toString();
        long long71 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration56);
        org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration73 = null;
        mutableDateTime72.add(readableDuration73, 10);
        int int76 = mutableDateTime72.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime72.hourOfDay();
        org.joda.time.Interval interval78 = property77.toInterval();
        org.joda.time.MutableDateTime mutableDateTime79 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration80 = null;
        mutableDateTime79.add(readableDuration80, 10);
        int int83 = mutableDateTime79.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime79.hourOfDay();
        org.joda.time.Interval interval85 = property84.toInterval();
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime();
        int int87 = mutableDateTime86.getMonthOfYear();
        boolean boolean88 = interval85.isAfter((org.joda.time.ReadableInstant) mutableDateTime86);
        org.joda.time.Interval interval89 = interval85.toInterval();
        org.joda.time.Interval interval90 = interval85.toInterval();
        boolean boolean91 = interval78.isBefore((org.joda.time.ReadableInterval) interval85);
        org.joda.time.DateTime dateTime92 = interval78.getEnd();
        long long93 = interval78.toDurationMillis();
        boolean boolean94 = duration56.equals((java.lang.Object) long93);
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration56, (int) (byte) -1);
        org.joda.time.Period period97 = duration56.toPeriod();
        org.joda.time.Period period98 = period97.toPeriod();
        org.joda.time.PeriodType periodType99 = period98.getPeriodType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 121 + "'", int10 == 121);
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(mutableDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(interval48);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(gregorianChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "PT3600S" + "'", str70, "PT3600S");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 3600000L + "'", long71 == 3600000L);
        org.junit.Assert.assertNotNull(mutableDateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(interval85);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 3600000L + "'", long93 == 3600000L);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(period97);
        org.junit.Assert.assertNotNull(period98);
        org.junit.Assert.assertNotNull(periodType99);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.Instant instant4 = mutableDateTime2.toInstant();
        long long5 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        long long9 = gregorianChronology0.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField10 = gregorianChronology0.years();
        long long15 = gregorianChronology0.getDateTimeMillis((int) '4', (int) (byte) 1, (int) (byte) 20, 18);
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology21 = gregorianChronology16.withZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = gregorianChronology16.withUTC();
        long long28 = gregorianChronology16.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField29 = gregorianChronology16.months();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31, 10);
        int int34 = mutableDateTime30.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.hourOfDay();
        org.joda.time.Interval interval36 = property35.toInterval();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        int int38 = mutableDateTime37.getMonthOfYear();
        boolean boolean39 = interval36.isAfter((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.Interval interval40 = interval36.toInterval();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = interval36.toPeriod(periodType41);
        int[] intArray45 = gregorianChronology16.get((org.joda.time.ReadablePeriod) period42, (long) 29, (long) 14);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) 0, chronology47);
        mutableDateTime48.setMonthOfYear(5);
        mutableDateTime48.setDayOfYear((int) (byte) 19);
        int int53 = mutableDateTime48.getMillisOfDay();
        java.lang.String str55 = mutableDateTime48.toString("20250406");
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime48.dayOfMonth();
        java.lang.String str57 = property56.getAsText();
        boolean boolean58 = period42.equals((java.lang.Object) property56);
        int[] intArray61 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period42, (long) (short) 0, (long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gregorianChronology0);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 910L + "'", long9 == 910L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60524582399982L) + "'", long15 == (-60524582399982L));
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1279002L + "'", long28 == 1279002L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "20250406" + "'", str55, "20250406");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "19" + "'", str57, "19");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 0, 0, 0, 0, 0, 10]");
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(10368000000L, dateTimeZone2);
        long long7 = dateTimeZone2.convertLocalToUTC((-28799087L), true);
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime8.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-28799092L) + "'", long7 == (-28799092L));
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        int int2 = mutableDateTime1.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.dayOfMonth();
        org.joda.time.DurationField durationField7 = gregorianChronology0.years();
        org.joda.time.DurationField durationField8 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology0.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0, chronology12);
        mutableDateTime13.setMonthOfYear(5);
        mutableDateTime13.setDayOfYear((int) (byte) 19);
        boolean boolean18 = mutableDateTime13.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone21 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime13.toMutableDateTime(dateTimeZone20);
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) mutableDateTime22);
        int int24 = mutableDateTime22.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime22.add(readableDuration25, 2);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime28.add(readableDuration29, 10);
        int int32 = mutableDateTime28.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime28.hourOfDay();
        org.joda.time.Interval interval34 = property33.toInterval();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        int int36 = mutableDateTime35.getMonthOfYear();
        boolean boolean37 = interval34.isAfter((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.Interval interval38 = interval34.toInterval();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = interval34.toPeriod(periodType39);
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period40);
        org.joda.time.MutablePeriod mutablePeriod42 = period40.toMutablePeriod();
        int[] intArray44 = gregorianChronology0.get((org.joda.time.ReadablePeriod) mutablePeriod42, (long) 15);
        org.joda.time.DateTimeField dateTimeField45 = gregorianChronology0.monthOfYear();
        org.joda.time.DurationField durationField46 = gregorianChronology0.centuries();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(cachedDateTimeZone21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
        org.junit.Assert.assertNotNull(mutableDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(interval34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, 15]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology1.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = gregorianChronology1.add(readablePeriod5, (long) 100, (int) (byte) 3);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(105228000000L, (org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DurationField durationField10 = gregorianChronology1.millis();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = gregorianChronology1.getDateTimeMillis(26, 13, 2922790, (int) (byte) 12, (int) '4', 0, (int) (byte) 17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 13 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.MutableDateTime mutableDateTime8 = property5.roundHalfCeiling();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withZone(dateTimeZone12);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone14 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone12);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone12.getName(0L, locale16);
        mutableDateTime8.setZoneRetainFields(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0, chronology21);
        mutableDateTime22.setMonthOfYear(5);
        mutableDateTime22.setDayOfYear((int) (byte) 19);
        boolean boolean27 = mutableDateTime22.isAfterNow();
        int int30 = dateTimeFormatter19.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "monthOfYear", (int) (byte) 10);
        mutableDateTime22.addSeconds(10);
        mutableDateTime22.addWeekyears(20);
        int int35 = mutableDateTime22.getSecondOfDay();
        int int36 = mutableDateTime8.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) 0, chronology38);
        mutableDateTime39.setMonthOfYear(5);
        mutableDateTime39.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        mutableDateTime39.add(readablePeriod44, (int) (byte) 13);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime39.minuteOfDay();
        boolean boolean48 = mutableDateTime22.equals((java.lang.Object) mutableDateTime39);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime39.setDateTime(97, 69, 12, (int) (byte) 9, 75, 18, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 75 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(cachedDateTimeZone14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+02:09" + "'", str17, "+02:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-11) + "'", int30 == (-11));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField(0L, 960);
        long long63 = zeroIsMaxDateTimeField58.remainder((-2177452800000L));
        long long65 = zeroIsMaxDateTimeField58.remainder(17L);
        long long67 = zeroIsMaxDateTimeField58.roundHalfCeiling(60556118407740L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 960000L + "'", long61 == 960000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 17L + "'", long65 == 17L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 60556118408000L + "'", long67 == 60556118408000L);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean19 = dateTimeFieldType17.isSupported((org.joda.time.Chronology) gregorianChronology18);
        int int20 = mutableDateTime11.get(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime11.hourOfDay();
        org.joda.time.DurationField durationField22 = property21.getRangeDurationField();
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField(0L, 960);
        long long63 = zeroIsMaxDateTimeField58.roundHalfEven(121001L);
        long long65 = zeroIsMaxDateTimeField58.roundHalfEven(1712408905631L);
        int int66 = zeroIsMaxDateTimeField58.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial67 = null;
        int int68 = zeroIsMaxDateTimeField58.getMinimumValue(readablePartial67);
        long long70 = zeroIsMaxDateTimeField58.roundHalfCeiling(105062400913L);
        int int71 = zeroIsMaxDateTimeField58.getMaximumValue();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 960000L + "'", long61 == 960000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 121000L + "'", long63 == 121000L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1712408906000L + "'", long65 == 1712408906000L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 86400 + "'", int66 == 86400);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 105062401000L + "'", long70 == 105062401000L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 86400 + "'", int71 == 86400);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.getDifferenceAsLong(2493331200000L, (long) 18);
        int int36 = unsupportedDateTimeField30.getDifference(39601970L, (-7740000L));
        org.joda.time.DurationField durationField37 = unsupportedDateTimeField30.getLeapDurationField();
        org.joda.time.ReadablePartial readablePartial38 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology39 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology39.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology39.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        long long45 = gregorianChronology39.add(readablePeriod42, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DurationField durationField46 = gregorianChronology39.days();
        org.joda.time.DateTimeField dateTimeField47 = gregorianChronology39.year();
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration49 = null;
        mutableDateTime48.add(readableDuration49, 10);
        int int52 = mutableDateTime48.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime48.hourOfDay();
        org.joda.time.Interval interval54 = property53.toInterval();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime();
        int int56 = mutableDateTime55.getMonthOfYear();
        boolean boolean57 = interval54.isAfter((org.joda.time.ReadableInstant) mutableDateTime55);
        org.joda.time.Interval interval58 = interval54.toInterval();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = interval54.toPeriod(periodType59);
        int[] intArray62 = gregorianChronology39.get((org.joda.time.ReadablePeriod) period60, (-62071747199903L));
        // The following exception was thrown during execution in test generation
        try {
            int int63 = unsupportedDateTimeField30.getMaximumValue(readablePartial38, intArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str27, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 41555519L + "'", long33 == 41555519L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 789 + "'", int36 == 789);
        org.junit.Assert.assertNull(durationField37);
        org.junit.Assert.assertNotNull(gregorianChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L + "'", long45 == 100L);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(interval54);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, -102631, -5, -23, -59, -59, -903]");
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8, 10);
        int int11 = mutableDateTime7.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime7.hourOfDay();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        int int15 = mutableDateTime14.getMonthOfYear();
        boolean boolean16 = interval13.isAfter((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Interval interval17 = interval13.toInterval();
        org.joda.time.Interval interval18 = interval13.toInterval();
        boolean boolean19 = interval6.isBefore((org.joda.time.ReadableInterval) interval13);
        long long20 = interval13.getStartMillis();
        java.lang.String str21 = interval13.toString();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T01:00:00.000Z" + "'", str21, "1970-01-01T00:00:00.000Z/1970-01-01T01:00:00.000Z");
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean19 = dateTimeFieldType17.isSupported((org.joda.time.Chronology) gregorianChronology18);
        int int20 = mutableDateTime11.get(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime11.hourOfDay();
        java.util.Date date22 = mutableDateTime11.toDate();
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Jan 18 17:00:00 PST 1970");
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        java.lang.Object obj3 = dateTimeZone0.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone0);
        java.lang.String str6 = dateTimeZone0.getNameKey((long) (byte) 23);
        java.lang.String str8 = dateTimeZone0.getName(315705600019L);
        long long10 = dateTimeZone0.convertUTCToLocal((long) (byte) 17);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone11.isLocalDateTimeGap(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 17L + "'", long10 == 17L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        int int18 = mutableDateTime11.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.millisOfSecond();
        org.joda.time.chrono.GregorianChronology gregorianChronology20 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology20.era();
        org.joda.time.DurationField durationField24 = gregorianChronology20.seconds();
        org.joda.time.DurationField durationField25 = gregorianChronology20.millis();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology20.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str28 = dateTimeFieldType27.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField30 = new org.joda.time.field.RemainderDateTimeField(dateTimeField26, dateTimeFieldType27, (int) (short) 100);
        org.joda.time.DurationField durationField31 = remainderDateTimeField30.getRangeDurationField();
        int int32 = remainderDateTimeField30.getMaximumValue();
        java.util.Locale locale34 = null;
        java.lang.String str35 = remainderDateTimeField30.getAsText((long) (byte) 23, locale34);
        java.lang.String str36 = remainderDateTimeField30.getName();
        long long38 = remainderDateTimeField30.remainder(315705060000L);
        org.joda.time.MutableDateTime.Property property39 = new org.joda.time.MutableDateTime.Property(mutableDateTime11, (org.joda.time.DateTimeField) remainderDateTimeField30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(gregorianChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "monthOfYear" + "'", str28, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 99 + "'", int32 == 99);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "monthOfYear" + "'", str36, "monthOfYear");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime0.getZone();
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.hourOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime4.millisOfSecond();
        int int7 = property6.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime9 = property6.roundHalfCeiling();
        int int10 = mutableDateTime9.getDayOfMonth();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 999 + "'", int7 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = gregorianChronology0.withUTC();
        long long12 = gregorianChronology0.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField13 = gregorianChronology0.months();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime14.add(readableDuration15, 10);
        int int18 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime14.hourOfDay();
        org.joda.time.Interval interval20 = property19.toInterval();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        int int22 = mutableDateTime21.getMonthOfYear();
        boolean boolean23 = interval20.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Interval interval24 = interval20.toInterval();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval20.toPeriod(periodType25);
        int[] intArray29 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period26, (long) 29, (long) 14);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 0, chronology31);
        mutableDateTime32.setMonthOfYear(5);
        mutableDateTime32.setDayOfYear((int) (byte) 19);
        int int37 = mutableDateTime32.getMillisOfDay();
        java.lang.String str39 = mutableDateTime32.toString("20250406");
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime32.dayOfMonth();
        java.lang.String str41 = property40.getAsText();
        boolean boolean42 = period26.equals((java.lang.Object) property40);
        org.joda.time.DurationField durationField43 = property40.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime44 = property40.roundHalfCeiling();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1279002L + "'", long12 == 1279002L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "20250406" + "'", str39, "20250406");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "19" + "'", str41, "19");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(durationField43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        int int5 = mutableDateTime4.getCenturyOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology11 = gregorianChronology6.withZone(dateTimeZone10);
        long long15 = gregorianChronology6.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField16 = gregorianChronology6.years();
        org.joda.time.DateTime dateTime17 = mutableDateTime4.toDateTime((org.joda.time.Chronology) gregorianChronology6);
        mutableDateTime4.addYears(0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 910L + "'", long15 == 910L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        int int4 = mutableDateTime2.getWeekOfWeekyear();
        java.lang.String str5 = mutableDateTime2.toString();
        int int6 = mutableDateTime2.getWeekOfWeekyear();
        org.joda.time.Instant instant7 = mutableDateTime2.toInstant();
        mutableDateTime2.addMinutes(97);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str5, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.ReadablePartial readablePartial2 = null;
        int[] intArray9 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray11 = dateTimeField1.add(readablePartial2, 0, intArray9, 0);
        boolean boolean12 = dateTimeField1.isSupported();
        org.joda.time.ReadablePartial readablePartial13 = null;
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.yearOfCentury();
        java.lang.String str16 = iSOChronology14.toString();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology14.era();
        org.joda.time.ReadablePartial readablePartial18 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology20 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology20.era();
        org.joda.time.DurationField durationField24 = gregorianChronology20.seconds();
        org.joda.time.DurationField durationField25 = gregorianChronology20.millis();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology20.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str28 = dateTimeFieldType27.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField30 = new org.joda.time.field.RemainderDateTimeField(dateTimeField26, dateTimeFieldType27, (int) (short) 100);
        org.joda.time.ReadablePartial readablePartial31 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology32 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = gregorianChronology32.yearOfEra();
        org.joda.time.ReadablePartial readablePartial34 = null;
        int[] intArray41 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray43 = dateTimeField33.add(readablePartial34, 0, intArray41, 0);
        int int44 = remainderDateTimeField30.getMaximumValue(readablePartial31, intArray41);
        int[] intArray46 = dateTimeField17.add(readablePartial18, (int) (short) 100, intArray41, (int) (byte) 0);
        int int47 = dateTimeField1.getMinimumValue(readablePartial13, intArray41);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) 0, chronology49);
        mutableDateTime50.setMonthOfYear(5);
        java.lang.Object obj53 = null;
        boolean boolean54 = mutableDateTime50.equals(obj53);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime50.add(durationFieldType55, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField59 = new org.joda.time.field.PreciseDurationField(durationFieldType55, (long) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField62 = new org.joda.time.field.RemainderDateTimeField(dateTimeField1, (org.joda.time.DurationField) preciseDurationField59, dateTimeFieldType60, 913);
        org.joda.time.IllegalFieldValueException illegalFieldValueException66 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType60, (java.lang.Number) 252460800000L, (java.lang.Number) 231458400000L, (java.lang.Number) (-2000L));
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str16, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(gregorianChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "monthOfYear" + "'", str28, "monthOfYear");
        org.junit.Assert.assertNotNull(gregorianChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 99 + "'", int44 == 99);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DurationField durationField34 = unsupportedDateTimeField30.getLeapDurationField();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale locale37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = unsupportedDateTimeField30.getAsText(readablePartial35, 999, locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str27, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNull(durationField34);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.addYears(1);
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime0.add(readableDuration8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        long long12 = dateTimeZone10.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone13 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        mutableDateTime0.setZoneRetainFields((org.joda.time.DateTimeZone) cachedDateTimeZone13);
        int int16 = cachedDateTimeZone13.getStandardOffset(30294673919999999L);
        int int18 = cachedDateTimeZone13.getStandardOffset((long) (-292275054));
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone2 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) cachedDateTimeZone2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0, chronology5);
        mutableDateTime6.setMonthOfYear(5);
        mutableDateTime6.setMillis(0L);
        int int11 = mutableDateTime6.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime6.year();
        int int13 = mutableDateTime6.getDayOfMonth();
        int int14 = cachedDateTimeZone2.getOffset((org.joda.time.ReadableInstant) mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(cachedDateTimeZone2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval6.toInterval();
        org.joda.time.DateTime dateTime12 = interval6.getStart();
        int int13 = dateTime12.getYearOfEra();
        int int14 = dateTime12.getDayOfWeek();
        int int15 = dateTime12.getWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.getDifferenceAsLong(2493331200000L, (long) 18);
        long long36 = unsupportedDateTimeField30.add((long) 2024, 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+00:00:00.005]" + "'", str27, "ISOChronology[+00:00:00.005]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 41555519L + "'", long33 == 41555519L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2024L + "'", long36 == 2024L);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone2 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone1);
        boolean boolean4 = cachedDateTimeZone2.isStandardOffset((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0, chronology6);
        mutableDateTime7.setMonthOfYear(5);
        mutableDateTime7.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException14 = new org.joda.time.IllegalFieldValueException(durationFieldType12, "");
        java.lang.Throwable[] throwableArray15 = illegalFieldValueException14.getSuppressed();
        boolean boolean16 = mutableDateTime7.equals((java.lang.Object) illegalFieldValueException14);
        mutableDateTime7.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime7.add(readableDuration19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutableDateTime7.add(readablePeriod21, 0);
        mutableDateTime7.setYear((-28800000));
        mutableDateTime7.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 0, chronology29);
        mutableDateTime30.setMonthOfYear(5);
        mutableDateTime30.setDayOfYear((int) (byte) 19);
        boolean boolean35 = mutableDateTime30.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone38 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime30.toMutableDateTime(dateTimeZone37);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.minuteOfDay();
        int int41 = mutableDateTime39.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology42.dayOfWeek();
        mutableDateTime39.setRounding(dateTimeField43, 5);
        int int46 = mutableDateTime39.getDayOfMonth();
        boolean boolean47 = mutableDateTime7.isAfter((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        long long50 = dateTimeZone48.previousTransition(0L);
        java.lang.Object obj51 = dateTimeZone48.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(dateTimeZone48);
        java.lang.String str54 = dateTimeZone48.getNameKey((long) (byte) 23);
        mutableDateTime39.setZoneRetainFields(dateTimeZone48);
        boolean boolean56 = cachedDateTimeZone2.equals((java.lang.Object) mutableDateTime39);
        mutableDateTime39.setMillisOfDay((int) (byte) 15);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(cachedDateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(cachedDateTimeZone38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 19 + "'", int46 == 19);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        mutableDateTime2.setHourOfDay((int) (byte) 16);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        long long14 = preciseDurationField11.add((-62071747199903L), (long) 31);
        long long15 = preciseDurationField11.getUnitMillis();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-62071747199903L) + "'", long14 == (-62071747199903L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime2.secondOfMinute();
        long long22 = property21.remainder();
        java.util.Locale locale23 = null;
        java.lang.String str24 = property21.getAsShortText(locale23);
        java.util.Locale locale25 = null;
        java.lang.String str26 = property21.getAsShortText(locale25);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 5L + "'", long22 == 5L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "10" + "'", str24, "10");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "10" + "'", str26, "10");
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.millisOfSecond();
        org.joda.time.DurationField durationField7 = gregorianChronology0.weeks();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gregorianChronology0);
        java.util.Locale locale9 = null;
        java.util.Calendar calendar10 = mutableDateTime8.toCalendar(locale9);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=14,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=14,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        java.util.Locale locale7 = null;
        int int8 = property5.getMaximumTextLength(locale7);
        java.lang.String str9 = property5.toString();
        int int10 = property5.get();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[hourOfDay]" + "'", str9, "Property[hourOfDay]");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DurationField durationField34 = unsupportedDateTimeField30.getLeapDurationField();
        long long37 = unsupportedDateTimeField30.add((-61370611199985L), (int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = unsupportedDateTimeField30.getType();
        org.joda.time.DurationField durationField39 = unsupportedDateTimeField30.getDurationField();
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.Locale locale42 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = unsupportedDateTimeField30.getAsShortText(readablePartial40, 39, locale42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+00:00:00.005]" + "'", str27, "ISOChronology[+00:00:00.005]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-61370611259985L) + "'", long37 == (-61370611259985L));
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone23 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone22);
        boolean boolean25 = cachedDateTimeZone23.isStandardOffset((-1L));
        long long27 = cachedDateTimeZone23.nextTransition((long) ' ');
        int int29 = cachedDateTimeZone23.getStandardOffset(32L);
        mutableDateTime2.setZoneRetainFields((org.joda.time.DateTimeZone) cachedDateTimeZone23);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime2.millisOfSecond();
        int int32 = mutableDateTime2.getDayOfYear();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(cachedDateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8, 10);
        int int11 = mutableDateTime7.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime7.hourOfDay();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        int int15 = mutableDateTime14.getMonthOfYear();
        boolean boolean16 = interval13.isAfter((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Interval interval17 = interval13.toInterval();
        org.joda.time.Interval interval18 = interval13.toInterval();
        boolean boolean19 = interval6.isBefore((org.joda.time.ReadableInterval) interval13);
        org.joda.time.DateTime dateTime20 = interval6.getEnd();
        org.joda.time.Period period21 = interval6.toPeriod();
        java.lang.String str22 = interval6.toString();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.000+00:00:00.005/1970-01-01T01:00:00.000+00:00:00.005" + "'", str22, "1970-01-01T00:00:00.000+00:00:00.005/1970-01-01T01:00:00.000+00:00:00.005");
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        mutableDateTime12.setSecondOfMinute((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        mutableDateTime12.add(readablePeriod22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime12.year();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setWeekOfWeekyear(86399);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        java.lang.String str5 = property3.toString();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.MutableDateTime mutableDateTime8 = property3.set(365);
        int int9 = mutableDateTime8.getSecondOfDay();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException12 = new org.joda.time.IllegalFieldValueException(durationFieldType10, "");
        org.joda.time.IllegalFieldValueException illegalFieldValueException14 = new org.joda.time.IllegalFieldValueException(durationFieldType10, "minutes");
        org.joda.time.DurationFieldType durationFieldType15 = illegalFieldValueException14.getDurationFieldType();
        boolean boolean16 = mutableDateTime8.equals((java.lang.Object) illegalFieldValueException14);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfDay]" + "'", str5, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 365 + "'", int9 == 365);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendClockhourOfDay(24);
        boolean boolean22 = dateTimeFormatterBuilder21.canBuildPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder21.appendPattern("");
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap25 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.DateTimeUtils.setDefaultTimeZoneNames(strMap25);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder24.appendTimeZoneName(strMap25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval6.toInterval();
        org.joda.time.DateTime dateTime12 = interval6.getStart();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.yearOfEra();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeField15.getAsShortText((int) '#', locale17);
        mutableDateTime13.setRounding(dateTimeField15, 5);
        int int21 = mutableDateTime13.getRoundingMode();
        boolean boolean22 = interval6.equals((java.lang.Object) int21);
        org.joda.time.Interval interval23 = interval6.toInterval();
        org.joda.time.Interval interval24 = interval6.toInterval();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26, 10);
        int int29 = mutableDateTime25.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime25.hourOfDay();
        org.joda.time.Interval interval31 = property30.toInterval();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        int int33 = mutableDateTime32.getMonthOfYear();
        boolean boolean34 = interval31.isAfter((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Interval interval35 = interval31.toInterval();
        org.joda.time.Interval interval36 = interval31.toInterval();
        org.joda.time.DateTime dateTime37 = interval31.getStart();
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        org.joda.time.chrono.GregorianChronology gregorianChronology39 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology39.yearOfEra();
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeField40.getAsShortText((int) '#', locale42);
        mutableDateTime38.setRounding(dateTimeField40, 5);
        int int46 = mutableDateTime38.getRoundingMode();
        boolean boolean47 = interval31.equals((java.lang.Object) int46);
        org.joda.time.Interval interval48 = interval31.toInterval();
        boolean boolean49 = interval6.isBefore((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        long long51 = interval48.toDurationMillis();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "35" + "'", str18, "35");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(gregorianChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "35" + "'", str43, "35");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3600000L + "'", long51 == 3600000L);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField(0L, 960);
        long long63 = zeroIsMaxDateTimeField58.roundHalfEven(121001L);
        long long65 = zeroIsMaxDateTimeField58.roundHalfEven(1712408905631L);
        int int66 = zeroIsMaxDateTimeField58.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial67 = null;
        int int68 = zeroIsMaxDateTimeField58.getMinimumValue(readablePartial67);
        long long70 = zeroIsMaxDateTimeField58.roundHalfCeiling(105062400913L);
        org.joda.time.DurationField durationField71 = zeroIsMaxDateTimeField58.getRangeDurationField();
        long long74 = zeroIsMaxDateTimeField58.getDifferenceAsLong((-908902379980790000L), 7741000L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 960000L + "'", long61 == 960000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 121000L + "'", long63 == 121000L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1712408906000L + "'", long65 == 1712408906000L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 86400 + "'", int66 == 86400);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 105062401000L + "'", long70 == 105062401000L);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-908902379988531L) + "'", long74 == (-908902379988531L));
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.addYears(1);
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime0.add(readableDuration8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        long long12 = dateTimeZone10.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone13 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        mutableDateTime0.setZoneRetainFields((org.joda.time.DateTimeZone) cachedDateTimeZone13);
        int int16 = cachedDateTimeZone13.getOffset(5702400L);
        long long18 = cachedDateTimeZone13.nextTransition(0L);
        org.joda.time.DateTimeZone dateTimeZone19 = cachedDateTimeZone13.getUncachedZone();
        java.lang.Object obj20 = null;
        boolean boolean21 = dateTimeZone19.equals(obj20);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendClockhourOfDay(24);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder19.appendMillisOfDay(15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatterBuilder19.toFormatter();
        java.io.Writer writer25 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) 0, chronology27);
        mutableDateTime28.setMonthOfYear(5);
        mutableDateTime28.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException35 = new org.joda.time.IllegalFieldValueException(durationFieldType33, "");
        java.lang.Throwable[] throwableArray36 = illegalFieldValueException35.getSuppressed();
        boolean boolean37 = mutableDateTime28.equals((java.lang.Object) illegalFieldValueException35);
        mutableDateTime28.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime28.add(readableDuration40);
        mutableDateTime28.addWeekyears(46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) 0, chronology46);
        mutableDateTime47.setMonthOfYear(5);
        mutableDateTime47.setDayOfYear((int) (byte) 19);
        boolean boolean52 = mutableDateTime47.isAfterNow();
        int int55 = dateTimeFormatter44.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime47, "monthOfYear", (int) (byte) 10);
        mutableDateTime47.addSeconds(10);
        mutableDateTime47.addWeekyears(20);
        int int60 = mutableDateTime47.getSecondOfDay();
        java.lang.String str62 = mutableDateTime47.toString("5");
        boolean boolean64 = mutableDateTime47.isEqual((long) 14);
        int int65 = mutableDateTime28.compareTo((org.joda.time.ReadableInstant) mutableDateTime47);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter24.printTo(writer25, (org.joda.time.ReadableInstant) mutableDateTime47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-11) + "'", int55 == (-11));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "5" + "'", str62, "5");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.MutableDateTime mutableDateTime8 = property5.roundHalfCeiling();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withZone(dateTimeZone12);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone14 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone12);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone12.getName(0L, locale16);
        mutableDateTime8.setZoneRetainFields(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0, chronology21);
        mutableDateTime22.setMonthOfYear(5);
        mutableDateTime22.setDayOfYear((int) (byte) 19);
        boolean boolean27 = mutableDateTime22.isAfterNow();
        int int30 = dateTimeFormatter19.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "monthOfYear", (int) (byte) 10);
        mutableDateTime22.addSeconds(10);
        mutableDateTime22.addWeekyears(20);
        int int35 = mutableDateTime22.getSecondOfDay();
        int int36 = mutableDateTime8.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTimeField dateTimeField37 = mutableDateTime22.getRoundingField();
        mutableDateTime22.setMillisOfSecond(236);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(cachedDateTimeZone14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+02:09" + "'", str17, "+02:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-11) + "'", int30 == (-11));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(dateTimeField37);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        mutableDateTime3.addSeconds(10);
        mutableDateTime3.addWeekyears(20);
        int int16 = mutableDateTime3.getSecondOfDay();
        java.lang.String str18 = mutableDateTime3.toString("5");
        boolean boolean20 = mutableDateTime3.isEqual((long) 14);
        boolean boolean21 = mutableDateTime3.isEqualNow();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23, 10);
        int int26 = mutableDateTime22.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.hourOfDay();
        org.joda.time.Interval interval28 = property27.toInterval();
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30, 10);
        int int33 = mutableDateTime29.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime29.hourOfDay();
        org.joda.time.Interval interval35 = property34.toInterval();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime();
        int int37 = mutableDateTime36.getMonthOfYear();
        boolean boolean38 = interval35.isAfter((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.Interval interval39 = interval35.toInterval();
        org.joda.time.Interval interval40 = interval35.toInterval();
        boolean boolean41 = interval28.isBefore((org.joda.time.ReadableInterval) interval35);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime42.add(readableDuration43, 10);
        int int46 = mutableDateTime42.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime42.hourOfDay();
        org.joda.time.Interval interval48 = property47.toInterval();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime();
        int int50 = mutableDateTime49.getMonthOfYear();
        boolean boolean51 = interval48.isAfter((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.Interval interval52 = interval48.toInterval();
        org.joda.time.Interval interval53 = interval48.toInterval();
        boolean boolean54 = interval35.isAfter((org.joda.time.ReadableInterval) interval53);
        org.joda.time.ReadableInterval readableInterval55 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval53);
        org.joda.time.DateTime dateTime56 = readableInterval55.getEnd();
        boolean boolean57 = mutableDateTime3.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = mutableDateTime3.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "5" + "'", str18, "5");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mutableDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(mutableDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(interval48);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(readableInterval55);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        int int4 = mutableDateTime2.getWeekOfWeekyear();
        java.lang.String str5 = mutableDateTime2.toString();
        mutableDateTime2.setDayOfYear((int) ' ');
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.005+00:00:00.005" + "'", str5, "1970-01-01T00:00:00.005+00:00:00.005");
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        int int3 = mutableDateTime2.getYear();
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) mutableDateTime2);
        int int5 = mutableDateTime2.getMillisOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone23 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone22);
        boolean boolean25 = cachedDateTimeZone23.isStandardOffset((-1L));
        long long27 = cachedDateTimeZone23.nextTransition((long) ' ');
        int int29 = cachedDateTimeZone23.getStandardOffset(32L);
        mutableDateTime2.setZoneRetainFields((org.joda.time.DateTimeZone) cachedDateTimeZone23);
        java.lang.String str32 = cachedDateTimeZone23.getShortName((long) 46);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(cachedDateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.005" + "'", str32, "+00:00:00.005");
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.dayOfYear();
        int int13 = property12.getMinimumValue();
        org.joda.time.Interval interval14 = property12.toInterval();
        java.lang.String str15 = property12.toString();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[dayOfYear]" + "'", str15, "Property[dayOfYear]");
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.util.GregorianCalendar gregorianCalendar1 = mutableDateTime0.toGregorianCalendar();
        boolean boolean2 = mutableDateTime0.isBeforeNow();
        boolean boolean4 = mutableDateTime0.isBefore((long) (byte) 6);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDayOfMonth((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianCalendar1);
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        long long14 = preciseDurationField11.add(2524556160000L, (-292275054));
        long long17 = preciseDurationField11.getMillis(1969, 0L);
        long long20 = preciseDurationField11.getMillis(259286399L, (long) 86418);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2524556160000L + "'", long14 == 2524556160000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology0.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gregorianChronology0);
        java.util.GregorianCalendar gregorianCalendar9 = mutableDateTime8.toGregorianCalendar();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(gregorianCalendar9);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        int int5 = mutableDateTime0.getMillisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0, chronology7);
        mutableDateTime8.setMonthOfYear(5);
        mutableDateTime8.setMillis(0L);
        int int13 = mutableDateTime8.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.year();
        boolean boolean15 = mutableDateTime0.isEqual((org.joda.time.ReadableInstant) mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType16, 3);
        mutableDateTime2.addMillis((int) (byte) 23);
        int int21 = mutableDateTime2.getYear();
        boolean boolean23 = mutableDateTime2.isEqual((-62071609478400000L));
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology12 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = gregorianChronology12.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology17 = gregorianChronology12.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = gregorianChronology12.withUTC();
        long long24 = gregorianChronology12.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        boolean boolean25 = durationFieldType7.isSupported((org.joda.time.Chronology) gregorianChronology12);
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology12.era();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(gregorianChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1279002L + "'", long24 == 1279002L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        mutableDateTime12.setSecondOfMinute((int) (short) 10);
        org.joda.time.chrono.GregorianChronology gregorianChronology22 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology22.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology22.era();
        org.joda.time.DurationField durationField26 = gregorianChronology22.seconds();
        org.joda.time.DurationField durationField27 = gregorianChronology22.centuries();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology22.dayOfMonth();
        mutableDateTime12.setChronology((org.joda.time.Chronology) gregorianChronology22);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableDateTime12.add(readablePeriod30, (int) '4');
        org.joda.time.chrono.GregorianChronology gregorianChronology33 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology33.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = gregorianChronology33.add(readablePeriod36, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology33.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology33.hourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology33.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime12.toMutableDateTime((org.joda.time.Chronology) gregorianChronology33);
        int int46 = mutableDateTime12.getDayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder47.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder47.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = dateTimeFormatterBuilder52.appendYear((int) (byte) 1, (int) (byte) 19);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = dateTimeFormatterBuilder52.appendTimeZoneId();
        boolean boolean57 = mutableDateTime12.equals((java.lang.Object) dateTimeFormatterBuilder56);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(gregorianChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(gregorianChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 19 + "'", int46 == 19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        long long14 = preciseDurationField11.add(2524556160000L, (-292275054));
        long long17 = preciseDurationField11.add(1969L, (int) (short) -1);
        long long20 = preciseDurationField11.add((long) 9, (long) 0);
        long long22 = preciseDurationField11.getMillis(77);
        long long23 = preciseDurationField11.getUnitMillis();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2524556160000L + "'", long14 == 2524556160000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1969L + "'", long17 == 1969L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 9L + "'", long20 == 9L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(391L, dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDayOfWeek(11340000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 11340000 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.addMinutes((int) (short) -1);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone7 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone6);
        boolean boolean9 = cachedDateTimeZone7.isStandardOffset((-1L));
        long long11 = cachedDateTimeZone7.nextTransition((long) ' ');
        java.lang.String str13 = cachedDateTimeZone7.getNameKey(2524556170000L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0, chronology15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.secondOfDay();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime16.secondOfDay();
        boolean boolean19 = cachedDateTimeZone7.equals((java.lang.Object) property18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property18.getFieldType();
        boolean boolean21 = mutableDateTime0.isSupported(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(cachedDateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.getDifferenceAsLong(2493331200000L, (long) 18);
        long long36 = unsupportedDateTimeField30.add(81522028800000L, 18);
        org.joda.time.DurationField durationField37 = unsupportedDateTimeField30.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = unsupportedDateTimeField30.getMinimumValue(913L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+00:00:00.005]" + "'", str27, "ISOChronology[+00:00:00.005]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 41555519L + "'", long33 == 41555519L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 81522029880000L + "'", long36 == 81522029880000L);
        org.junit.Assert.assertNull(durationField37);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime2.secondOfMinute();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 0, chronology23);
        mutableDateTime24.setMonthOfYear(5);
        mutableDateTime24.setDayOfYear((int) (byte) 19);
        boolean boolean29 = mutableDateTime24.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone32 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime24.toMutableDateTime(dateTimeZone31);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.yearOfEra();
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutableDateTime33.add(readableDuration35);
        mutableDateTime33.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology40 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean41 = dateTimeFieldType39.isSupported((org.joda.time.Chronology) gregorianChronology40);
        int int42 = mutableDateTime33.get(dateTimeFieldType39);
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) mutableDateTime33);
        mutableDateTime2.addMonths(14);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(cachedDateTimeZone32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology0.dayOfWeek();
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField6 = gregorianChronology5.months();
        long long9 = durationField6.getMillis((int) (short) -1, 0L);
        long long12 = durationField6.subtract(0L, (int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType13 = durationField6.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField6, durationFieldType15, (int) (byte) 4);
        int int19 = scaledDurationField17.getValue(1712408905631L);
        long long22 = scaledDurationField17.getDifferenceAsLong(94670856000L, 0L);
        long long24 = scaledDurationField17.getMillis(0L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) 0, chronology26);
        mutableDateTime27.setMonthOfYear(5);
        mutableDateTime27.setDayOfYear((int) (byte) 19);
        boolean boolean32 = mutableDateTime27.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone35 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime27.toMutableDateTime(dateTimeZone34);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.yearOfEra();
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime36.add(readableDuration38);
        mutableDateTime36.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology43 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean44 = dateTimeFieldType42.isSupported((org.joda.time.Chronology) gregorianChronology43);
        int int45 = mutableDateTime36.get(dateTimeFieldType42);
        java.lang.Number number47 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException49 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType42, (java.lang.Number) (-1.0f), number47, (java.lang.Number) (-1.0f));
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.chrono.GregorianChronology gregorianChronology52 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone51);
        org.joda.time.DurationField durationField53 = gregorianChronology52.seconds();
        boolean boolean54 = dateTimeFieldType42.isSupported((org.joda.time.Chronology) gregorianChronology52);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField56 = new org.joda.time.field.DividedDateTimeField(dateTimeField4, (org.joda.time.DurationField) scaledDurationField17, dateTimeFieldType42, (int) (byte) 100);
        int int57 = dividedDateTimeField56.getMaximumValue();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-2678400000L) + "'", long9 == (-2678400000L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-2678400000L) + "'", long12 == (-2678400000L));
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 162 + "'", int19 == 162);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 8L + "'", long22 == 8L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(cachedDateTimeZone35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(gregorianChronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(gregorianChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long60 = zeroIsMaxDateTimeField58.roundFloor(1L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField5 = gregorianChronology4.months();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology4.getZone();
        java.lang.String str8 = dateTimeZone7.toString();
        boolean boolean9 = iSOChronology0.equals((java.lang.Object) str8);
        org.joda.time.DurationField durationField10 = iSOChronology0.years();
        org.joda.time.Chronology chronology11 = iSOChronology0.withUTC();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(gregorianChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        mutableDateTime2.addWeeks((int) (byte) 8);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int24 = mutableDateTime2.get(dateTimeFieldType23);
        java.lang.Number number25 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException27 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType23, number25, "16");
        java.lang.String str28 = illegalFieldValueException27.getIllegalValueAsString();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 26 + "'", int24 == 26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "null" + "'", str28, "null");
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        int int18 = mutableDateTime11.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.add((int) (byte) 100);
        mutableDateTime21.add((long) 6);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime24.add(readableDuration25, 10);
        int int28 = mutableDateTime24.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.hourOfDay();
        org.joda.time.Interval interval30 = property29.toInterval();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        int int32 = mutableDateTime31.getMonthOfYear();
        boolean boolean33 = interval30.isAfter((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.Interval interval34 = interval30.toInterval();
        org.joda.time.Interval interval35 = interval30.toInterval();
        org.joda.time.DateTime dateTime36 = interval30.getStart();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        org.joda.time.chrono.GregorianChronology gregorianChronology38 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology38.yearOfEra();
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeField39.getAsShortText((int) '#', locale41);
        mutableDateTime37.setRounding(dateTimeField39, 5);
        int int45 = mutableDateTime37.getRoundingMode();
        boolean boolean46 = interval30.equals((java.lang.Object) int45);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = interval30.toPeriod(periodType47);
        mutableDateTime21.add((org.joda.time.ReadablePeriod) period48, (int) (byte) 4);
        org.joda.time.chrono.GregorianChronology gregorianChronology51 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology51.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = gregorianChronology51.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = gregorianChronology51.millisOfDay();
        org.joda.time.DateTime dateTime55 = mutableDateTime21.toDateTime((org.joda.time.Chronology) gregorianChronology51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 18 + "'", int18 == 18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(gregorianChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "35" + "'", str42, "35");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(gregorianChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.centuries();
        org.joda.time.DurationField durationField6 = gregorianChronology0.halfdays();
        org.joda.time.Chronology chronology7 = gregorianChronology0.withUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0, chronology9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfFloor();
        java.lang.String str13 = property11.toString();
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfFloor();
        boolean boolean16 = gregorianChronology0.equals((java.lang.Object) mutableDateTime15);
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology0.millisOfDay();
        org.joda.time.ReadablePartial readablePartial18 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology20 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField21 = gregorianChronology20.months();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology20.weekyear();
        long long25 = dateTimeField22.set((long) 5, 0);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeField22.getAsShortText((int) (byte) 0, locale27);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology31 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = gregorianChronology31.yearOfEra();
        org.joda.time.ReadablePartial readablePartial33 = null;
        int[] intArray40 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray42 = dateTimeField32.add(readablePartial33, 0, intArray40, 0);
        int[] intArray44 = dateTimeField22.add(readablePartial29, 10, intArray40, 0);
        java.util.Locale locale46 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray47 = dateTimeField17.set(readablePartial18, 11340, intArray44, "19710101", locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11340");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[secondOfDay]" + "'", str13, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(gregorianChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-62166787199995L) + "'", long25 == (-62166787199995L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertNotNull(gregorianChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 97, 23, 5]");
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        org.joda.time.IllegalFieldValueException illegalFieldValueException7 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType4, (java.lang.Number) 60000L, "100");
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = illegalFieldValueException7.getDateTimeFieldType();
        illegalFieldValueException7.prependMessage("-1.0");
        java.lang.Number number11 = illegalFieldValueException7.getUpperBound();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNull(number11);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology1.dayOfWeek();
        org.joda.time.Chronology chronology5 = gregorianChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology7.era();
        org.joda.time.DurationField durationField11 = gregorianChronology7.seconds();
        org.joda.time.DurationField durationField12 = gregorianChronology7.millis();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology7.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str15 = dateTimeFieldType14.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dateTimeField13, dateTimeFieldType14, (int) (short) 100);
        int int18 = remainderDateTimeField17.getDivisor();
        int int19 = remainderDateTimeField17.getMinimumValue();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0, chronology21);
        mutableDateTime22.setMonthOfYear(5);
        mutableDateTime22.setDayOfYear((int) (byte) 19);
        boolean boolean27 = mutableDateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone30 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime22.toMutableDateTime(dateTimeZone29);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.minuteOfDay();
        int int33 = mutableDateTime31.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfWeek();
        mutableDateTime31.setRounding(dateTimeField35, 5);
        int int38 = mutableDateTime31.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime31.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime31.set(dateTimeFieldType40, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology43 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology43.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = gregorianChronology43.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology48 = gregorianChronology43.withZone(dateTimeZone47);
        long long52 = gregorianChronology43.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField53 = gregorianChronology43.dayOfYear();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType40.getField((org.joda.time.Chronology) gregorianChronology43);
        java.lang.String str55 = dateTimeFieldType40.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField56 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField17, dateTimeFieldType40);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType40.getField(chronology57);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField59 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField6, dateTimeFieldType40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.DividedDateTimeField dividedDateTimeField61 = new org.joda.time.field.DividedDateTimeField(dateTimeField0, dateTimeFieldType40, (int) (byte) 14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "monthOfYear" + "'", str15, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(cachedDateTimeZone30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 18 + "'", int38 == 18);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(gregorianChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 910L + "'", long52 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "era" + "'", str55, "era");
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.addYears(1);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.addWrapField(7740000);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.MutableDateTime mutableDateTime8 = property5.roundHalfCeiling();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withZone(dateTimeZone12);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone14 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone12);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone12.getName(0L, locale16);
        mutableDateTime8.setZoneRetainFields(dateTimeZone12);
        int int19 = mutableDateTime8.getYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0, chronology21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfFloor();
        java.lang.String str25 = property23.toString();
        org.joda.time.DateTimeField dateTimeField26 = property23.getField();
        org.joda.time.MutableDateTime mutableDateTime27 = property23.roundHalfFloor();
        boolean boolean28 = mutableDateTime8.isAfter((org.joda.time.ReadableInstant) mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(cachedDateTimeZone14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+02:09" + "'", str17, "+02:09");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Property[secondOfDay]" + "'", str25, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.util.GregorianCalendar gregorianCalendar1 = mutableDateTime0.toGregorianCalendar();
        boolean boolean2 = mutableDateTime0.isBeforeNow();
        boolean boolean4 = mutableDateTime0.isBefore((long) (byte) 6);
        int int5 = mutableDateTime0.getHourOfDay();
        mutableDateTime0.setMinuteOfDay((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setMonthOfYear(23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 23 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianCalendar1);
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        int int11 = remainderDateTimeField10.getDivisor();
        int int12 = remainderDateTimeField10.getMinimumValue();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0, chronology14);
        mutableDateTime15.setMonthOfYear(5);
        mutableDateTime15.setDayOfYear((int) (byte) 19);
        boolean boolean20 = mutableDateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone23 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime15.toMutableDateTime(dateTimeZone22);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.minuteOfDay();
        int int26 = mutableDateTime24.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfWeek();
        mutableDateTime24.setRounding(dateTimeField28, 5);
        int int31 = mutableDateTime24.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime24.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime24.set(dateTimeFieldType33, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology36 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology36.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology41 = gregorianChronology36.withZone(dateTimeZone40);
        long long45 = gregorianChronology36.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField46 = gregorianChronology36.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType33.getField((org.joda.time.Chronology) gregorianChronology36);
        java.lang.String str48 = dateTimeFieldType33.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField49 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField10, dateTimeFieldType33);
        long long52 = remainderDateTimeField10.set((-62071609478400000L), (int) (byte) 20);
        long long55 = remainderDateTimeField10.add(140008L, 0);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(cachedDateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 18 + "'", int31 == 18);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(gregorianChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 910L + "'", long45 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "era" + "'", str48, "era");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-62071609478380000L) + "'", long52 == (-62071609478380000L));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 140008L + "'", long55 == 140008L);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.months();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeZone dateTimeZone3 = gregorianChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField8 = new org.joda.time.field.DividedDateTimeField(dateTimeField4, durationField5, dateTimeFieldType6, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0, chronology10);
        mutableDateTime11.setMonthOfYear(5);
        mutableDateTime11.setDayOfYear((int) (byte) 19);
        boolean boolean16 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone19 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime11.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.minuteOfDay();
        int int22 = mutableDateTime20.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfWeek();
        mutableDateTime20.setRounding(dateTimeField24, 5);
        int int27 = mutableDateTime20.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime20.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime20.set(dateTimeFieldType29, 0);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType29.getDurationType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField33 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField8, dateTimeFieldType29);
        long long36 = remainderDateTimeField33.getDifferenceAsLong(0L, (long) (byte) 3);
        long long38 = remainderDateTimeField33.remainder(500000L);
        long long40 = remainderDateTimeField33.roundHalfCeiling(16968L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(cachedDateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 18 + "'", int27 == 18);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 259700000L + "'", long38 == 259700000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-259200000L) + "'", long40 == (-259200000L));
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime2.secondOfMinute();
        int int22 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Instant instant23 = mutableDateTime2.toInstant();
        boolean boolean25 = mutableDateTime2.isEqual((long) (byte) 19);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone30 = new org.joda.time.tz.FixedDateTimeZone("DurationField[months]", "", 0, (int) (byte) 0);
        java.lang.String str32 = fixedDateTimeZone30.getName((long) (-1));
        int int34 = fixedDateTimeZone30.getOffsetFromLocal((long) (byte) 0);
        boolean boolean35 = mutableDateTime2.equals((java.lang.Object) (byte) 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addHours(97);
        boolean boolean3 = mutableDateTime0.isAfterNow();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone8 = new org.joda.time.tz.FixedDateTimeZone("DurationField[months]", "", 0, (int) (byte) 0);
        java.lang.String str10 = fixedDateTimeZone8.getName((long) (-1));
        int int12 = fixedDateTimeZone8.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone8);
        long long15 = fixedDateTimeZone8.previousTransition((long) (-2));
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime0.toMutableDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone8);
        java.util.Date date17 = mutableDateTime16.toDate();
        mutableDateTime16.setYear(2861);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-2L) + "'", long15 == (-2L));
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Sun Jan 04 17:00:00 PST 1970");
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str5 = dateTimeFieldType4.toString();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType4, 236, (int) (byte) 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder8.appendTimeZoneOffset("-2", "PT3600S", false, 13, 19);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendMinuteOfDay((int) (byte) 22);
        org.joda.time.chrono.GregorianChronology gregorianChronology17 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology17.dayOfWeek();
        org.joda.time.chrono.GregorianChronology gregorianChronology22 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField23 = gregorianChronology22.months();
        long long26 = durationField23.getMillis((int) (short) -1, 0L);
        long long29 = durationField23.subtract(0L, (int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType30 = durationField23.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType31.getDurationType();
        org.joda.time.field.ScaledDurationField scaledDurationField34 = new org.joda.time.field.ScaledDurationField(durationField23, durationFieldType32, (int) (byte) 4);
        int int36 = scaledDurationField34.getValue(1712408905631L);
        long long39 = scaledDurationField34.getDifferenceAsLong(94670856000L, 0L);
        long long41 = scaledDurationField34.getMillis(0L);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) 0, chronology43);
        mutableDateTime44.setMonthOfYear(5);
        mutableDateTime44.setDayOfYear((int) (byte) 19);
        boolean boolean49 = mutableDateTime44.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone52 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone51);
        org.joda.time.MutableDateTime mutableDateTime53 = mutableDateTime44.toMutableDateTime(dateTimeZone51);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.yearOfEra();
        org.joda.time.ReadableDuration readableDuration55 = null;
        mutableDateTime53.add(readableDuration55);
        mutableDateTime53.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology60 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean61 = dateTimeFieldType59.isSupported((org.joda.time.Chronology) gregorianChronology60);
        int int62 = mutableDateTime53.get(dateTimeFieldType59);
        java.lang.Number number64 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException66 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType59, (java.lang.Number) (-1.0f), number64, (java.lang.Number) (-1.0f));
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.chrono.GregorianChronology gregorianChronology69 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone68);
        org.joda.time.DurationField durationField70 = gregorianChronology69.seconds();
        boolean boolean71 = dateTimeFieldType59.isSupported((org.joda.time.Chronology) gregorianChronology69);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField73 = new org.joda.time.field.DividedDateTimeField(dateTimeField21, (org.joda.time.DurationField) scaledDurationField34, dateTimeFieldType59, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder74 = dateTimeFormatterBuilder14.appendText(dateTimeFieldType59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder77 = dateTimeFormatterBuilder74.appendWeekyear((int) (short) 10, (int) (byte) 1);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "monthOfYear" + "'", str5, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(gregorianChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(gregorianChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-2678400000L) + "'", long26 == (-2678400000L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-2678400000L) + "'", long29 == (-2678400000L));
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 162 + "'", int36 == 162);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 8L + "'", long39 == 8L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(cachedDateTimeZone52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(gregorianChronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1970 + "'", int62 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(gregorianChronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder74);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder77);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        int int10 = mutableDateTime2.getDayOfYear();
        int int11 = mutableDateTime2.getYearOfCentury();
        int int12 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime2.add(readableDuration13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 0, chronology16);
        mutableDateTime17.setMonthOfYear(5);
        mutableDateTime17.setDayOfYear((int) (byte) 19);
        boolean boolean22 = mutableDateTime17.isAfterNow();
        java.util.GregorianCalendar gregorianCalendar23 = mutableDateTime17.toGregorianCalendar();
        boolean boolean24 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime17.addSeconds(0);
        mutableDateTime17.addMinutes((int) (byte) 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 70 + "'", int11 == 70);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology1.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = gregorianChronology1.add(readablePeriod5, (long) 100, (int) (byte) 3);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(105228000000L, (org.joda.time.Chronology) gregorianChronology1);
        mutableDateTime9.setMillisOfSecond((int) (byte) 14);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        mutableDateTime2.addWeeks((int) (short) -1);
        java.lang.String str10 = mutableDateTime2.toString();
        long long11 = mutableDateTime2.getMillis();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.millisOfSecond();
        int int13 = mutableDateTime2.getDayOfYear();
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-12T00:00:00.000Z" + "'", str10, "1970-01-12T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 950400000L + "'", long11 == 950400000L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter21.withZone(dateTimeZone24);
        int int26 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder0.append(dateTimeParser27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder0.appendSecondOfDay(236);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatterBuilder0.toFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter32.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter32.withPivotYear(1);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        boolean boolean13 = mutableDateTime2.isEqual((long) (byte) 21);
        mutableDateTime2.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime2.weekOfWeekyear();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.months();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology0.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology7.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = gregorianChronology7.add(readablePeriod10, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField14 = gregorianChronology7.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType5.getField((org.joda.time.Chronology) gregorianChronology7);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        int int31 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) mutableDateTime30);
        int int32 = mutableDateTime30.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime30.add(readableDuration33, 2);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime36.add(readableDuration37, 10);
        int int40 = mutableDateTime36.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.hourOfDay();
        org.joda.time.Interval interval42 = property41.toInterval();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime();
        int int44 = mutableDateTime43.getMonthOfYear();
        boolean boolean45 = interval42.isAfter((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.Interval interval46 = interval42.toInterval();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = interval42.toPeriod(periodType47);
        mutableDateTime30.add((org.joda.time.ReadablePeriod) period48);
        int[] intArray51 = gregorianChronology7.get((org.joda.time.ReadablePeriod) period48, (long) 913);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone56 = new org.joda.time.tz.FixedDateTimeZone("DurationField[months]", "", 0, (int) (byte) 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology57 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField58 = gregorianChronology57.months();
        long long61 = durationField58.getMillis((int) (short) -1, 0L);
        long long64 = durationField58.subtract(0L, (int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType65 = durationField58.getType();
        boolean boolean66 = fixedDateTimeZone56.equals((java.lang.Object) durationFieldType65);
        boolean boolean67 = period48.isSupported(durationFieldType65);
        int[] intArray69 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period48, 7740000L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 19 + "'", int32 == 19);
        org.junit.Assert.assertNotNull(mutableDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(interval42);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 0, 0, 913]");
        org.junit.Assert.assertNotNull(gregorianChronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-2678400000L) + "'", long61 == (-2678400000L));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-2678400000L) + "'", long64 == (-2678400000L));
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 2, 9, 0, 0]");
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder5.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12, 10);
        int int15 = mutableDateTime11.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.dayOfWeek();
        boolean boolean18 = property16.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField19 = property16.getField();
        org.joda.time.MutableDateTime mutableDateTime20 = property16.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder5.appendSignedDecimal(dateTimeFieldType21, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder24.appendClockhourOfDay(24);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder24.appendTimeZoneShortName();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap28 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder24.appendTimeZoneShortName(strMap28);
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = dateTimeFormatterBuilder24.toPrinter();
        boolean boolean31 = property3.equals((java.lang.Object) dateTimeFormatterBuilder24);
        boolean boolean32 = dateTimeFormatterBuilder24.canBuildPrinter();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimePrinter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.getDifferenceAsLong(2493331200000L, (long) 18);
        int int36 = unsupportedDateTimeField30.getDifference(39601970L, (-7740000L));
        org.joda.time.DurationField durationField37 = unsupportedDateTimeField30.getLeapDurationField();
        org.joda.time.ReadablePartial readablePartial38 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology40 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology40.yearOfEra();
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology40.secondOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology40.era();
        org.joda.time.DurationField durationField44 = gregorianChronology40.seconds();
        org.joda.time.DurationField durationField45 = gregorianChronology40.millis();
        org.joda.time.DateTimeField dateTimeField46 = gregorianChronology40.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str48 = dateTimeFieldType47.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField50 = new org.joda.time.field.RemainderDateTimeField(dateTimeField46, dateTimeFieldType47, (int) (short) 100);
        org.joda.time.DurationField durationField51 = remainderDateTimeField50.getRangeDurationField();
        int int52 = remainderDateTimeField50.getMaximumValue();
        long long54 = remainderDateTimeField50.roundFloor(2440588L);
        boolean boolean55 = remainderDateTimeField50.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField57 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField50, dateTimeFieldType56);
        org.joda.time.DurationField durationField58 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField61 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField57, durationField58, dateTimeFieldType59, 2);
        org.joda.time.ReadablePartial readablePartial62 = null;
        org.joda.time.chrono.ISOChronology iSOChronology64 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField65 = iSOChronology64.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial66 = null;
        org.joda.time.chrono.ISOChronology iSOChronology67 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField68 = iSOChronology67.yearOfCentury();
        java.lang.String str69 = iSOChronology67.toString();
        org.joda.time.Chronology chronology70 = iSOChronology67.withUTC();
        org.joda.time.DateTimeField dateTimeField71 = iSOChronology67.yearOfEra();
        org.joda.time.ReadablePartial readablePartial72 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology74 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField75 = gregorianChronology74.yearOfEra();
        org.joda.time.ReadablePartial readablePartial76 = null;
        int[] intArray83 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray85 = dateTimeField75.add(readablePartial76, 0, intArray83, 0);
        int[] intArray87 = dateTimeField71.addWrapPartial(readablePartial72, 70, intArray83, 0);
        int int88 = dateTimeField65.getMinimumValue(readablePartial66, intArray87);
        int[] intArray90 = dividedDateTimeField57.addWrapPartial(readablePartial62, (-292275054), intArray87, 0);
        java.util.Locale locale92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray93 = unsupportedDateTimeField30.set(readablePartial38, 57601970, intArray90, "1976-366T16:44:24.000Z", locale92);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str27, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 41555519L + "'", long33 == 41555519L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 789 + "'", int36 == 789);
        org.junit.Assert.assertNull(durationField37);
        org.junit.Assert.assertNotNull(gregorianChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "monthOfYear" + "'", str48, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 99 + "'", int52 == 99);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 2440000L + "'", long54 == 2440000L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(iSOChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(iSOChronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ISOChronology[DurationField[months]]" + "'", str69, "ISOChronology[DurationField[months]]");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(gregorianChronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 0, 97, 23, 5]");
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.Instant instant4 = mutableDateTime2.toInstant();
        mutableDateTime2.setWeekyear((-11));
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0, chronology8);
        mutableDateTime9.setMonthOfYear(5);
        mutableDateTime9.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException16 = new org.joda.time.IllegalFieldValueException(durationFieldType14, "");
        java.lang.Throwable[] throwableArray17 = illegalFieldValueException16.getSuppressed();
        boolean boolean18 = mutableDateTime9.equals((java.lang.Object) illegalFieldValueException16);
        int int19 = mutableDateTime9.getDayOfWeek();
        mutableDateTime9.setTime((int) (byte) 6, 18, (int) (byte) 21, 19);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26, 10);
        int int29 = mutableDateTime25.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime25.hourOfDay();
        org.joda.time.Interval interval31 = property30.toInterval();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        int int33 = mutableDateTime32.getMonthOfYear();
        boolean boolean34 = interval31.isAfter((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Interval interval35 = interval31.toInterval();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime36.add(readableDuration37, 10);
        int int40 = mutableDateTime36.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.hourOfDay();
        org.joda.time.Interval interval42 = property41.toInterval();
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutableDateTime43.add(readableDuration44, 10);
        int int47 = mutableDateTime43.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime43.hourOfDay();
        org.joda.time.Interval interval49 = property48.toInterval();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime();
        int int51 = mutableDateTime50.getMonthOfYear();
        boolean boolean52 = interval49.isAfter((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.Interval interval53 = interval49.toInterval();
        org.joda.time.Interval interval54 = interval49.toInterval();
        boolean boolean55 = interval42.isBefore((org.joda.time.ReadableInterval) interval49);
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration57 = null;
        mutableDateTime56.add(readableDuration57, 10);
        int int60 = mutableDateTime56.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime56.hourOfDay();
        org.joda.time.Interval interval62 = property61.toInterval();
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime();
        int int64 = mutableDateTime63.getMonthOfYear();
        boolean boolean65 = interval62.isAfter((org.joda.time.ReadableInstant) mutableDateTime63);
        org.joda.time.Interval interval66 = interval62.toInterval();
        org.joda.time.Interval interval67 = interval62.toInterval();
        boolean boolean68 = interval49.isAfter((org.joda.time.ReadableInterval) interval67);
        boolean boolean69 = interval35.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration70 = interval67.toDuration();
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration70);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration70);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(mutableDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(interval49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(mutableDateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(interval62);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(duration70);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        mutableDateTime12.setSecondOfMinute((int) (short) 10);
        int int22 = mutableDateTime12.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime12.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology18 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean19 = dateTimeFieldType17.isSupported((org.joda.time.Chronology) gregorianChronology18);
        int int20 = mutableDateTime11.get(dateTimeFieldType17);
        java.lang.Number number22 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException24 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType17, (java.lang.Number) (-1.0f), number22, (java.lang.Number) (-1.0f));
        org.joda.time.chrono.GregorianChronology gregorianChronology25 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology25.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology30 = gregorianChronology25.withZone(dateTimeZone29);
        long long34 = gregorianChronology25.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField35 = gregorianChronology25.halfdays();
        org.joda.time.DurationField durationField36 = gregorianChronology25.days();
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology25.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType17.getField((org.joda.time.Chronology) gregorianChronology25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(gregorianChronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(gregorianChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 910L + "'", long34 == 910L);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        int int13 = mutableDateTime11.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfWeek();
        mutableDateTime11.setRounding(dateTimeField15, 5);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableDateTime11.add(readablePeriod18, 5);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime11.dayOfWeek();
        mutableDateTime11.setMillisOfDay((int) (byte) 11);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.MutableDateTime mutableDateTime8 = property5.roundHalfCeiling();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withZone(dateTimeZone12);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone14 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone12);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone12.getName(0L, locale16);
        mutableDateTime8.setZoneRetainFields(dateTimeZone12);
        mutableDateTime8.setMinuteOfDay(12);
        int int21 = mutableDateTime8.getEra();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(cachedDateTimeZone14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+02:09" + "'", str17, "+02:09");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.addMinutes((int) 'a');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0, chronology8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.secondOfDay();
        int int11 = mutableDateTime9.getWeekOfWeekyear();
        mutableDateTime9.setMillis((long) (-2));
        boolean boolean14 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime9);
        mutableDateTime9.addWeeks((int) (byte) 19);
        boolean boolean17 = mutableDateTime9.isEqualNow();
        boolean boolean18 = mutableDateTime9.isBeforeNow();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime9.centuryOfEra();
        boolean boolean21 = mutableDateTime9.isAfter(3600000L);
        int int22 = mutableDateTime9.getWeekyear();
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addHours(97);
        boolean boolean3 = mutableDateTime0.isAfterNow();
        int int4 = mutableDateTime0.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0, chronology7);
        mutableDateTime8.setMonthOfYear(5);
        mutableDateTime8.setDayOfYear((int) (byte) 19);
        boolean boolean13 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime8.toMutableDateTime(dateTimeZone15);
        int int18 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) mutableDateTime17);
        int int19 = mutableDateTime17.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime17.add(readableDuration20, 2);
        boolean boolean24 = mutableDateTime17.isEqual((-62071747199903L));
        mutableDateTime17.setSecondOfMinute((int) (short) 10);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime17);
        java.util.Locale locale29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = mutableDateTime17.toString("", locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        mutableDateTime12.setSecondOfMinute((int) (short) 10);
        int int22 = mutableDateTime12.getMinuteOfDay();
        int int23 = mutableDateTime12.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 70 + "'", int23 == 70);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        boolean boolean13 = mutableDateTime2.isEqual((long) (byte) 21);
        mutableDateTime2.setTime((long) 46);
        java.util.Locale locale17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = mutableDateTime2.toString("ISOChronology[DurationField[months]]", locale17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: I");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = gregorianChronology0.withUTC();
        long long10 = gregorianChronology0.add((long) 97, 2678400910L, (int) (byte) 15);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gregorianChronology0);
        mutableDateTime11.addMillis((int) (byte) 2);
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology14.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology19 = gregorianChronology14.withZone(dateTimeZone18);
        long long23 = gregorianChronology14.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField24 = gregorianChronology14.years();
        long long29 = gregorianChronology14.getDateTimeMillis((int) '4', (int) (byte) 1, (int) (byte) 20, 18);
        org.joda.time.chrono.GregorianChronology gregorianChronology30 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField31 = gregorianChronology30.yearOfEra();
        org.joda.time.DateTimeField dateTimeField32 = gregorianChronology30.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology35 = gregorianChronology30.withZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = gregorianChronology30.withUTC();
        long long42 = gregorianChronology30.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField43 = gregorianChronology30.months();
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45, 10);
        int int48 = mutableDateTime44.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime44.hourOfDay();
        org.joda.time.Interval interval50 = property49.toInterval();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        int int52 = mutableDateTime51.getMonthOfYear();
        boolean boolean53 = interval50.isAfter((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.Interval interval54 = interval50.toInterval();
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = interval50.toPeriod(periodType55);
        int[] intArray59 = gregorianChronology30.get((org.joda.time.ReadablePeriod) period56, (long) 29, (long) 14);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) 0, chronology61);
        mutableDateTime62.setMonthOfYear(5);
        mutableDateTime62.setDayOfYear((int) (byte) 19);
        int int67 = mutableDateTime62.getMillisOfDay();
        java.lang.String str69 = mutableDateTime62.toString("20250406");
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime62.dayOfMonth();
        java.lang.String str71 = property70.getAsText();
        boolean boolean72 = period56.equals((java.lang.Object) property70);
        int[] intArray75 = gregorianChronology14.get((org.joda.time.ReadablePeriod) period56, (long) (short) 0, (long) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.months();
        boolean boolean77 = period56.equals((java.lang.Object) durationFieldType76);
        mutableDateTime11.add((org.joda.time.ReadablePeriod) period56, (-1));
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 40176013747L + "'", long10 == 40176013747L);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 910L + "'", long23 == 910L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60524582399982L) + "'", long29 == (-60524582399982L));
        org.junit.Assert.assertNotNull(gregorianChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1279002L + "'", long42 == 1279002L);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(interval50);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "20250406" + "'", str69, "20250406");
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "19" + "'", str71, "19");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        long long9 = gregorianChronology0.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField10 = gregorianChronology0.years();
        long long15 = gregorianChronology0.getDateTimeMillis((int) '4', (int) (byte) 1, (int) (byte) 20, 18);
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology21 = gregorianChronology16.withZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = gregorianChronology16.withUTC();
        long long28 = gregorianChronology16.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField29 = gregorianChronology16.months();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31, 10);
        int int34 = mutableDateTime30.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.hourOfDay();
        org.joda.time.Interval interval36 = property35.toInterval();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        int int38 = mutableDateTime37.getMonthOfYear();
        boolean boolean39 = interval36.isAfter((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.Interval interval40 = interval36.toInterval();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = interval36.toPeriod(periodType41);
        int[] intArray45 = gregorianChronology16.get((org.joda.time.ReadablePeriod) period42, (long) 29, (long) 14);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) 0, chronology47);
        mutableDateTime48.setMonthOfYear(5);
        mutableDateTime48.setDayOfYear((int) (byte) 19);
        int int53 = mutableDateTime48.getMillisOfDay();
        java.lang.String str55 = mutableDateTime48.toString("20250406");
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime48.dayOfMonth();
        java.lang.String str57 = property56.getAsText();
        boolean boolean58 = period42.equals((java.lang.Object) property56);
        int[] intArray61 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period42, (long) (short) 0, (long) (byte) 10);
        org.joda.time.Chronology chronology62 = gregorianChronology0.withUTC();
        org.joda.time.DurationField durationField63 = gregorianChronology0.days();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 910L + "'", long9 == 910L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60524582399982L) + "'", long15 == (-60524582399982L));
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1279002L + "'", long28 == 1279002L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "20250406" + "'", str55, "20250406");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "19" + "'", str57, "19");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField(0L, 960);
        long long63 = zeroIsMaxDateTimeField58.roundHalfEven(121001L);
        long long65 = zeroIsMaxDateTimeField58.roundHalfCeiling(20020L);
        java.util.Locale locale66 = null;
        int int67 = zeroIsMaxDateTimeField58.getMaximumTextLength(locale66);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 960000L + "'", long61 == 960000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 121000L + "'", long63 == 121000L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 20000L + "'", long65 == 20000L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        int int11 = remainderDateTimeField10.getDivisor();
        int int12 = remainderDateTimeField10.getMinimumValue();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0, chronology14);
        mutableDateTime15.setMonthOfYear(5);
        mutableDateTime15.setDayOfYear((int) (byte) 19);
        boolean boolean20 = mutableDateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone23 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime15.toMutableDateTime(dateTimeZone22);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.minuteOfDay();
        int int26 = mutableDateTime24.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfWeek();
        mutableDateTime24.setRounding(dateTimeField28, 5);
        int int31 = mutableDateTime24.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime24.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime24.set(dateTimeFieldType33, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology36 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology36.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology41 = gregorianChronology36.withZone(dateTimeZone40);
        long long45 = gregorianChronology36.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField46 = gregorianChronology36.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType33.getField((org.joda.time.Chronology) gregorianChronology36);
        java.lang.String str48 = dateTimeFieldType33.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField49 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField10, dateTimeFieldType33);
        java.lang.String str50 = remainderDateTimeField10.getName();
        long long52 = remainderDateTimeField10.roundFloor((long) (-259286));
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(cachedDateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 19 + "'", int31 == 19);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(gregorianChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 910L + "'", long45 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "era" + "'", str48, "era");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "monthOfYear" + "'", str50, "monthOfYear");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-260000L) + "'", long52 == (-260000L));
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        int int10 = mutableDateTime2.getDayOfYear();
        int int11 = mutableDateTime2.getMinuteOfHour();
        mutableDateTime2.setSecondOfMinute(14);
        mutableDateTime2.setDayOfWeek((int) (byte) 5);
        mutableDateTime2.setSecondOfMinute((int) (byte) 8);
        org.joda.time.DateTime dateTime18 = mutableDateTime2.toDateTimeISO();
        int int19 = mutableDateTime2.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval6.toInterval();
        org.joda.time.Interval interval12 = interval6.toInterval();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime13.add(readableDuration14, 10);
        int int17 = mutableDateTime13.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.hourOfDay();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        int int21 = mutableDateTime20.getMonthOfYear();
        boolean boolean22 = interval19.isAfter((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime23.add(readableDuration24, 10);
        int int27 = mutableDateTime23.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.hourOfDay();
        org.joda.time.Interval interval29 = property28.toInterval();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31, 10);
        int int34 = mutableDateTime30.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.hourOfDay();
        org.joda.time.Interval interval36 = property35.toInterval();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        int int38 = mutableDateTime37.getMonthOfYear();
        boolean boolean39 = interval36.isAfter((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.Interval interval40 = interval36.toInterval();
        org.joda.time.Interval interval41 = interval36.toInterval();
        boolean boolean42 = interval29.isBefore((org.joda.time.ReadableInterval) interval36);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutableDateTime43.add(readableDuration44, 10);
        int int47 = mutableDateTime43.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime43.hourOfDay();
        org.joda.time.Interval interval49 = property48.toInterval();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime();
        int int51 = mutableDateTime50.getMonthOfYear();
        boolean boolean52 = interval49.isAfter((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.Interval interval53 = interval49.toInterval();
        org.joda.time.Interval interval54 = interval49.toInterval();
        boolean boolean55 = interval36.isAfter((org.joda.time.ReadableInterval) interval54);
        java.lang.String str56 = interval36.toString();
        boolean boolean57 = interval19.isBefore((org.joda.time.ReadableInterval) interval36);
        boolean boolean58 = interval12.isBefore((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) 0, chronology61);
        mutableDateTime62.setMonthOfYear(5);
        mutableDateTime62.setDayOfYear((int) (byte) 19);
        boolean boolean67 = mutableDateTime62.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone70 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone69);
        org.joda.time.MutableDateTime mutableDateTime71 = mutableDateTime62.toMutableDateTime(dateTimeZone69);
        int int72 = dateTimeZone59.getOffset((org.joda.time.ReadableInstant) mutableDateTime71);
        int int73 = mutableDateTime71.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration74 = null;
        mutableDateTime71.add(readableDuration74, 2);
        boolean boolean78 = mutableDateTime71.isEqual((-62071747199903L));
        boolean boolean79 = interval12.isAfter((org.joda.time.ReadableInstant) mutableDateTime71);
        boolean boolean81 = mutableDateTime71.isAfter(0L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mutableDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mutableDateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(interval49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T01:00:00.000Z" + "'", str56, "1970-01-01T00:00:00.000Z/1970-01-01T01:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(cachedDateTimeZone70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 19 + "'", int73 == 19);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval6.toInterval();
        org.joda.time.DateTime dateTime12 = interval6.getStart();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.yearOfEra();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeField15.getAsShortText((int) '#', locale17);
        mutableDateTime13.setRounding(dateTimeField15, 5);
        int int21 = mutableDateTime13.getRoundingMode();
        boolean boolean22 = interval6.equals((java.lang.Object) int21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval6.toPeriod(periodType23);
        int int25 = period24.size();
        org.joda.time.Period period26 = period24.toPeriod();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "35" + "'", str18, "35");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Interval interval10 = interval6.toInterval();
        long long11 = interval10.toDurationMillis();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3600000L + "'", long11 == 3600000L);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        mutableDateTime2.setWeekOfWeekyear((int) (short) 1);
        boolean boolean16 = mutableDateTime2.isAfterNow();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder17.appendYear(24, 20);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder20.appendText(dateTimeFieldType21);
        int int23 = mutableDateTime2.get(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter21.withZone(dateTimeZone24);
        int int26 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder0.append(dateTimeParser27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder0.appendSecondOfDay(236);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatterBuilder0.toFormatter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) (byte) 12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder0.appendFractionOfSecond(19, 236);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder37.appendFixedSignedDecimal(dateTimeFieldType38, (int) (byte) 22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField5 = iSOChronology0.hours();
        org.joda.time.DurationField durationField6 = iSOChronology0.eras();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        int int7 = mutableDateTime2.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.year();
        int int9 = mutableDateTime2.getDayOfMonth();
        int int10 = mutableDateTime2.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setHourOfDay((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.dayOfYear();
        long long13 = property12.getMillis();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.addWrapField(36499998);
        long long16 = property12.getMillis();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 31363200000L + "'", long16 == 31363200000L);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendClockhourOfDay(24);
        boolean boolean22 = dateTimeFormatterBuilder21.canBuildPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder21.appendPattern("");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder24.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder25.appendClockhourOfHalfday((int) (byte) 6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZone(dateTimeZone3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(17);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter4.getZone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0, chronology9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.secondOfDay();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime10.secondOfDay();
        java.lang.String str13 = dateTimeFormatter4.print((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime10.setWeekyear(3);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-001T02:09:00.000+02:09" + "'", str13, "1970-001T02:09:00.000+02:09");
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        mutableDateTime12.setSecondOfMinute((int) (short) 10);
        org.joda.time.chrono.GregorianChronology gregorianChronology22 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology22.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology22.era();
        org.joda.time.DurationField durationField26 = gregorianChronology22.seconds();
        org.joda.time.DurationField durationField27 = gregorianChronology22.centuries();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology22.dayOfMonth();
        mutableDateTime12.setChronology((org.joda.time.Chronology) gregorianChronology22);
        mutableDateTime12.setMillisOfDay(2000);
        mutableDateTime12.addMonths(863);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(gregorianChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        org.joda.time.ReadablePartial readablePartial59 = null;
        int int60 = zeroIsMaxDateTimeField58.getMaximumValue(readablePartial59);
        org.joda.time.ReadablePartial readablePartial61 = null;
        int int62 = zeroIsMaxDateTimeField58.getMaximumValue(readablePartial61);
        int int64 = zeroIsMaxDateTimeField58.get(0L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 86400 + "'", int60 == 86400);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 86400 + "'", int62 == 86400);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 86400 + "'", int64 == 86400);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.MutableDateTime mutableDateTime9 = property5.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime10 = property5.getMutableDateTime();
        java.util.Locale locale12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime13 = property5.set("21:51:00.005", locale12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"21:51:00.005\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter21.withZone(dateTimeZone24);
        int int26 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder0.append(dateTimeParser27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder0.appendSecondOfDay(236);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatterBuilder0.toFormatter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder0.appendCenturyOfEra(2000, (int) (byte) 10);
        boolean boolean36 = dateTimeFormatterBuilder35.canBuildPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder35.appendLiteral("1970-01-12T02:09:00.000+02:09");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.dayOfWeek();
        org.joda.time.Chronology chronology4 = gregorianChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology6.era();
        org.joda.time.DurationField durationField10 = gregorianChronology6.seconds();
        org.joda.time.DurationField durationField11 = gregorianChronology6.millis();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology6.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str14 = dateTimeFieldType13.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField12, dateTimeFieldType13, (int) (short) 100);
        int int17 = remainderDateTimeField16.getDivisor();
        int int18 = remainderDateTimeField16.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0, chronology20);
        mutableDateTime21.setMonthOfYear(5);
        mutableDateTime21.setDayOfYear((int) (byte) 19);
        boolean boolean26 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone29 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.minuteOfDay();
        int int32 = mutableDateTime30.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfWeek();
        mutableDateTime30.setRounding(dateTimeField34, 5);
        int int37 = mutableDateTime30.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime30.set(dateTimeFieldType39, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology47 = gregorianChronology42.withZone(dateTimeZone46);
        long long51 = gregorianChronology42.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField((org.joda.time.Chronology) gregorianChronology42);
        java.lang.String str54 = dateTimeFieldType39.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField16, dateTimeFieldType39);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField58 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField5, dateTimeFieldType39);
        long long61 = zeroIsMaxDateTimeField58.addWrapField(0L, 960);
        long long63 = zeroIsMaxDateTimeField58.roundHalfEven(121001L);
        long long65 = zeroIsMaxDateTimeField58.roundHalfEven(1712408905631L);
        int int68 = zeroIsMaxDateTimeField58.getDifference((long) 54, (long) 1036800);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(cachedDateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 910L + "'", long51 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "era" + "'", str54, "era");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 960000L + "'", long61 == 960000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 121000L + "'", long63 == 121000L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1712408906000L + "'", long65 == 1712408906000L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1036) + "'", int68 == (-1036));
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        org.joda.time.DurationField durationField11 = remainderDateTimeField10.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial12 = null;
        java.util.Locale locale14 = null;
        java.lang.String str15 = remainderDateTimeField10.getAsShortText(readablePartial12, (int) (byte) 5, locale14);
        java.lang.String str17 = remainderDateTimeField10.getAsShortText((long) (byte) 3);
        long long19 = remainderDateTimeField10.roundHalfCeiling((long) (-11));
        org.joda.time.ReadablePartial readablePartial20 = null;
        java.util.Locale locale22 = null;
        java.lang.String str23 = remainderDateTimeField10.getAsText(readablePartial20, 1970, locale22);
        org.joda.time.DurationField durationField24 = remainderDateTimeField10.getRangeDurationField();
        long long27 = remainderDateTimeField10.add(94694399995L, (long) (byte) 23);
        org.joda.time.chrono.GregorianChronology gregorianChronology28 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = gregorianChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gregorianChronology28.era();
        org.joda.time.DurationField durationField32 = gregorianChronology28.seconds();
        org.joda.time.DurationField durationField33 = gregorianChronology28.millis();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology28.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str36 = dateTimeFieldType35.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField38 = new org.joda.time.field.RemainderDateTimeField(dateTimeField34, dateTimeFieldType35, (int) (short) 100);
        org.joda.time.DurationField durationField39 = remainderDateTimeField38.getRangeDurationField();
        int int40 = remainderDateTimeField38.getMaximumValue();
        long long42 = remainderDateTimeField38.roundCeiling((long) 2000);
        int int44 = remainderDateTimeField38.get(1712408905631L);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) 0, chronology46);
        mutableDateTime47.setMonthOfYear(5);
        mutableDateTime47.setDayOfYear((int) (byte) 19);
        boolean boolean52 = mutableDateTime47.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone55 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone54);
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime47.toMutableDateTime(dateTimeZone54);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.yearOfEra();
        org.joda.time.ReadableDuration readableDuration58 = null;
        mutableDateTime56.add(readableDuration58);
        mutableDateTime56.setHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.chrono.GregorianChronology gregorianChronology63 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        boolean boolean64 = dateTimeFieldType62.isSupported((org.joda.time.Chronology) gregorianChronology63);
        int int65 = mutableDateTime56.get(dateTimeFieldType62);
        java.lang.Number number67 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException69 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType62, (java.lang.Number) (-1.0f), number67, (java.lang.Number) (-1.0f));
        org.joda.time.field.DividedDateTimeField dividedDateTimeField70 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField38, dateTimeFieldType62);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField71 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField10, dateTimeFieldType62);
        long long74 = zeroIsMaxDateTimeField71.add((-5L), 20711721602000L);
        long long77 = zeroIsMaxDateTimeField71.addWrapField((long) (-4), 18);
        org.joda.time.DurationField durationField78 = zeroIsMaxDateTimeField71.getDurationField();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "5" + "'", str15, "5");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970" + "'", str23, "1970");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 94694422995L + "'", long27 == 94694422995L);
        org.junit.Assert.assertNotNull(gregorianChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "monthOfYear" + "'", str36, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2000L + "'", long42 == 2000L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(cachedDateTimeZone55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(gregorianChronology63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1970 + "'", int65 == 1970);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 20711721601999995L + "'", long74 == 20711721601999995L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-82004L) + "'", long77 == (-82004L));
        org.junit.Assert.assertNotNull(durationField78);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = property5.equals((java.lang.Object) (-1));
        java.lang.String str8 = property5.getAsText();
        org.joda.time.MutableDateTime mutableDateTime9 = property5.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime9.getZone();
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Thursday" + "'", str8, "Thursday");
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendWeekOfWeekyear((int) '4');
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatterBuilder5.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder7.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime13.add(readableDuration14, 10);
        int int17 = mutableDateTime13.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.dayOfWeek();
        boolean boolean20 = property18.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField21 = property18.getField();
        org.joda.time.MutableDateTime mutableDateTime22 = property18.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property18.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder7.appendSignedDecimal(dateTimeFieldType23, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder26.appendClockhourOfDay(24);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder26.appendTimeZoneShortName();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap30 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder26.appendTimeZoneShortName(strMap30);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeParser6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        int int12 = mutableDateTime2.getDayOfWeek();
        int int13 = mutableDateTime2.getHourOfDay();
        int int14 = mutableDateTime2.getDayOfWeek();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        mutableDateTime2.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        int int41 = mutableDateTime34.getDayOfMonth();
        boolean boolean42 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        long long45 = dateTimeZone43.previousTransition(0L);
        java.lang.Object obj46 = dateTimeZone43.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone43);
        java.lang.String str49 = dateTimeZone43.getNameKey((long) (byte) 23);
        mutableDateTime34.setZoneRetainFields(dateTimeZone43);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) 0, chronology52);
        mutableDateTime53.setMonthOfYear(5);
        mutableDateTime53.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException60 = new org.joda.time.IllegalFieldValueException(durationFieldType58, "");
        java.lang.Throwable[] throwableArray61 = illegalFieldValueException60.getSuppressed();
        boolean boolean62 = mutableDateTime53.equals((java.lang.Object) illegalFieldValueException60);
        mutableDateTime53.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration65 = null;
        mutableDateTime53.add(readableDuration65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        mutableDateTime53.add(readablePeriod67, 0);
        mutableDateTime53.setYear((-28800000));
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        mutableDateTime53.setZoneRetainFields(dateTimeZone72);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((long) 0, chronology75);
        mutableDateTime76.setMonthOfYear(5);
        mutableDateTime76.setDayOfYear((int) (byte) 19);
        boolean boolean81 = mutableDateTime76.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone84 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone83);
        org.joda.time.MutableDateTime mutableDateTime85 = mutableDateTime76.toMutableDateTime(dateTimeZone83);
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime85.minuteOfDay();
        int int87 = mutableDateTime85.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology88 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField89 = iSOChronology88.dayOfWeek();
        mutableDateTime85.setRounding(dateTimeField89, 5);
        mutableDateTime53.setMillis((org.joda.time.ReadableInstant) mutableDateTime85);
        mutableDateTime85.setYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter95 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecondMillis();
        java.lang.String str96 = mutableDateTime85.toString(dateTimeFormatter95);
        int int97 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) mutableDateTime85);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime85.setDayOfWeek((-1578239));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1578239 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(obj46);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(cachedDateTimeZone84);
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
        org.junit.Assert.assertNotNull(iSOChronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeFormatter95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "00:00:00.005" + "'", str96, "00:00:00.005");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone2 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone1);
        java.lang.String str4 = cachedDateTimeZone2.getNameKey((long) (byte) 23);
        boolean boolean5 = cachedDateTimeZone2.isFixed();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology7.yearOfEra();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeField8.getAsShortText((int) '#', locale10);
        mutableDateTime6.setRounding(dateTimeField8, 5);
        int int14 = mutableDateTime6.getRoundingMode();
        boolean boolean15 = cachedDateTimeZone2.equals((java.lang.Object) mutableDateTime6);
        int int16 = mutableDateTime6.getHourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeFormatter17.getZone();
        mutableDateTime6.setZone(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(cachedDateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "35" + "'", str11, "35");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.ReadablePartial readablePartial2 = null;
        int[] intArray9 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray11 = dateTimeField1.add(readablePartial2, 0, intArray9, 0);
        boolean boolean12 = dateTimeField1.isSupported();
        org.joda.time.ReadablePartial readablePartial13 = null;
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.yearOfCentury();
        java.lang.String str16 = iSOChronology14.toString();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology14.era();
        org.joda.time.ReadablePartial readablePartial18 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology20 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology20.era();
        org.joda.time.DurationField durationField24 = gregorianChronology20.seconds();
        org.joda.time.DurationField durationField25 = gregorianChronology20.millis();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology20.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str28 = dateTimeFieldType27.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField30 = new org.joda.time.field.RemainderDateTimeField(dateTimeField26, dateTimeFieldType27, (int) (short) 100);
        org.joda.time.ReadablePartial readablePartial31 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology32 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField33 = gregorianChronology32.yearOfEra();
        org.joda.time.ReadablePartial readablePartial34 = null;
        int[] intArray41 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray43 = dateTimeField33.add(readablePartial34, 0, intArray41, 0);
        int int44 = remainderDateTimeField30.getMaximumValue(readablePartial31, intArray41);
        int[] intArray46 = dateTimeField17.add(readablePartial18, (int) (short) 100, intArray41, (int) (byte) 0);
        int int47 = dateTimeField1.getMinimumValue(readablePartial13, intArray41);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) 0, chronology49);
        mutableDateTime50.setMonthOfYear(5);
        java.lang.Object obj53 = null;
        boolean boolean54 = mutableDateTime50.equals(obj53);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime50.add(durationFieldType55, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField59 = new org.joda.time.field.PreciseDurationField(durationFieldType55, (long) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField62 = new org.joda.time.field.RemainderDateTimeField(dateTimeField1, (org.joda.time.DurationField) preciseDurationField59, dateTimeFieldType60, 913);
        java.util.Locale locale63 = null;
        int int64 = dateTimeField1.getMaximumShortTextLength(locale63);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(gregorianChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "monthOfYear" + "'", str28, "monthOfYear");
        org.junit.Assert.assertNotNull(gregorianChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 99 + "'", int44 == 99);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        int int2 = dateTimeZone0.getOffset((long) ' ');
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0, chronology6);
        mutableDateTime7.setMonthOfYear(5);
        mutableDateTime7.setDayOfYear((int) (byte) 19);
        boolean boolean12 = mutableDateTime7.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone15 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime7.toMutableDateTime(dateTimeZone14);
        int int17 = dateTimeZone4.getOffset((org.joda.time.ReadableInstant) mutableDateTime16);
        int int18 = mutableDateTime16.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime16.add(readableDuration19, 2);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23, 10);
        int int26 = mutableDateTime22.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.hourOfDay();
        org.joda.time.Interval interval28 = property27.toInterval();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        int int30 = mutableDateTime29.getMonthOfYear();
        boolean boolean31 = interval28.isAfter((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.Interval interval32 = interval28.toInterval();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = interval28.toPeriod(periodType33);
        mutableDateTime16.add((org.joda.time.ReadablePeriod) period34);
        long long38 = gregorianChronology3.add((org.joda.time.ReadablePeriod) period34, (long) 75, 16);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(cachedDateTimeZone15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(mutableDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 57600075L + "'", long38 == 57600075L);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        java.lang.Object obj5 = null;
        boolean boolean6 = mutableDateTime2.equals(obj5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.HOURS_TYPE;
        mutableDateTime2.add(durationFieldType7, (int) (short) 10);
        org.joda.time.field.PreciseDurationField preciseDurationField11 = new org.joda.time.field.PreciseDurationField(durationFieldType7, (long) (short) 0);
        long long14 = preciseDurationField11.add(2524556160000L, (-292275054));
        long long17 = preciseDurationField11.getMillis(1969, 0L);
        org.joda.time.DurationFieldType durationFieldType18 = preciseDurationField11.getType();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2524556160000L + "'", long14 == 2524556160000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType18);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime3.add(durationFieldType12, (int) (byte) 0);
        org.joda.time.Instant instant15 = mutableDateTime3.toInstant();
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime3.getZone();
        mutableDateTime3.addDays((int) (short) 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.Chronology chronology6 = gregorianChronology0.withUTC();
        long long12 = gregorianChronology0.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField13 = gregorianChronology0.months();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime14.add(readableDuration15, 10);
        int int18 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime14.hourOfDay();
        org.joda.time.Interval interval20 = property19.toInterval();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        int int22 = mutableDateTime21.getMonthOfYear();
        boolean boolean23 = interval20.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Interval interval24 = interval20.toInterval();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval20.toPeriod(periodType25);
        int[] intArray29 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period26, (long) 29, (long) 14);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException32 = new org.joda.time.IllegalFieldValueException(durationFieldType30, "");
        java.lang.Throwable[] throwableArray33 = illegalFieldValueException32.getSuppressed();
        java.lang.Number number34 = illegalFieldValueException32.getIllegalNumberValue();
        java.lang.String str35 = illegalFieldValueException32.getIllegalValueAsString();
        boolean boolean36 = period26.equals((java.lang.Object) str35);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1279002L + "'", long12 == 1279002L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNull(number34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = gregorianChronology0.add(readablePeriod3, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone7.previousTransition(0L);
        java.lang.Object obj10 = dateTimeZone7.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology12 = gregorianChronology0.withZone(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(iSOChronology13);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("-292275054");
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (int) (byte) 13);
        int int10 = mutableDateTime2.getDayOfYear();
        int int11 = mutableDateTime2.getYearOfCentury();
        int int12 = mutableDateTime2.getWeekyear();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 70 + "'", int11 == 70);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology0.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gregorianChronology0);
        org.joda.time.DurationField durationField9 = gregorianChronology0.minutes();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        mutableDateTime12.setSecondOfMinute((int) (short) 10);
        org.joda.time.chrono.GregorianChronology gregorianChronology22 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology22.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology22.era();
        org.joda.time.DurationField durationField26 = gregorianChronology22.seconds();
        org.joda.time.DurationField durationField27 = gregorianChronology22.centuries();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology22.dayOfMonth();
        mutableDateTime12.setChronology((org.joda.time.Chronology) gregorianChronology22);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableDateTime12.add(readablePeriod30, (int) '4');
        org.joda.time.chrono.GregorianChronology gregorianChronology33 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology33.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = gregorianChronology33.add(readablePeriod36, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology33.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology33.hourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology33.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime12.toMutableDateTime((org.joda.time.Chronology) gregorianChronology33);
        org.joda.time.DurationField durationField46 = gregorianChronology33.minutes();
        org.joda.time.DateTimeField dateTimeField47 = gregorianChronology33.era();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(gregorianChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(gregorianChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.addYears(1);
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime0.add(readableDuration8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        long long12 = dateTimeZone10.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone13 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        mutableDateTime0.setZoneRetainFields((org.joda.time.DateTimeZone) cachedDateTimeZone13);
        int int16 = cachedDateTimeZone13.getOffset(5702400L);
        java.lang.String str17 = cachedDateTimeZone13.getID();
        int int19 = cachedDateTimeZone13.getOffset(0L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.SECONDS_TYPE;
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology3.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = gregorianChronology3.add(readablePeriod7, (long) 100, (int) (byte) 3);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(105228000000L, (org.joda.time.Chronology) gregorianChronology3);
        org.joda.time.DurationField durationField12 = gregorianChronology3.millis();
        int int13 = unsupportedDurationField1.compareTo(durationField12);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = unsupportedDurationField1.getDifference((long) 15, (long) 20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: seconds field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfWeek();
        boolean boolean7 = mutableDateTime0.isEqual((-7641L));
        boolean boolean8 = mutableDateTime0.isEqualNow();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 0, chronology11);
        mutableDateTime12.setMonthOfYear(5);
        mutableDateTime12.setMillis(0L);
        mutableDateTime12.setMillisOfSecond((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableDateTime12.add(readablePeriod19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 0, chronology22);
        mutableDateTime23.setMonthOfYear(5);
        mutableDateTime23.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException30 = new org.joda.time.IllegalFieldValueException(durationFieldType28, "");
        java.lang.Throwable[] throwableArray31 = illegalFieldValueException30.getSuppressed();
        boolean boolean32 = mutableDateTime23.equals((java.lang.Object) illegalFieldValueException30);
        int int33 = mutableDateTime23.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime23.dayOfYear();
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableInstant) mutableDateTime23);
        boolean boolean36 = mutableDateTime0.isBefore((org.joda.time.ReadableInstant) mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone10 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime2.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        mutableDateTime11.addYears((int) (byte) 23);
        mutableDateTime11.setMillisOfDay(17);
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime11.getZone();
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(cachedDateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        mutableDateTime2.setYear((-28800000));
        mutableDateTime2.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0, chronology24);
        mutableDateTime25.setMonthOfYear(5);
        mutableDateTime25.setDayOfYear((int) (byte) 19);
        boolean boolean30 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone33 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime25.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        int int36 = mutableDateTime34.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfWeek();
        mutableDateTime34.setRounding(dateTimeField38, 5);
        int int41 = mutableDateTime34.getDayOfMonth();
        boolean boolean42 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.Chronology chronology43 = mutableDateTime34.getChronology();
        boolean boolean44 = mutableDateTime34.isEqualNow();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(cachedDateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.dayOfMonth();
        org.joda.time.DurationField durationField7 = gregorianChronology0.years();
        org.joda.time.DurationField durationField8 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology0.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = gregorianChronology0.getZone();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology11.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology16 = gregorianChronology11.withZone(dateTimeZone15);
        long long20 = gregorianChronology11.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DurationField durationField21 = gregorianChronology11.years();
        long long26 = gregorianChronology11.getDateTimeMillis((int) '4', (int) (byte) 1, (int) (byte) 20, 18);
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology27.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology32 = gregorianChronology27.withZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = gregorianChronology27.withUTC();
        long long39 = gregorianChronology27.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField40 = gregorianChronology27.months();
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration42 = null;
        mutableDateTime41.add(readableDuration42, 10);
        int int45 = mutableDateTime41.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime41.hourOfDay();
        org.joda.time.Interval interval47 = property46.toInterval();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime();
        int int49 = mutableDateTime48.getMonthOfYear();
        boolean boolean50 = interval47.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Interval interval51 = interval47.toInterval();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval47.toPeriod(periodType52);
        int[] intArray56 = gregorianChronology27.get((org.joda.time.ReadablePeriod) period53, (long) 29, (long) 14);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) 0, chronology58);
        mutableDateTime59.setMonthOfYear(5);
        mutableDateTime59.setDayOfYear((int) (byte) 19);
        int int64 = mutableDateTime59.getMillisOfDay();
        java.lang.String str66 = mutableDateTime59.toString("20250406");
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime59.dayOfMonth();
        java.lang.String str68 = property67.getAsText();
        boolean boolean69 = period53.equals((java.lang.Object) property67);
        int[] intArray72 = gregorianChronology11.get((org.joda.time.ReadablePeriod) period53, (long) (short) 0, (long) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.months();
        boolean boolean74 = period53.equals((java.lang.Object) durationFieldType73);
        int[] intArray76 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period53, (-908902379980790000L));
        org.joda.time.DateTimeField dateTimeField77 = gregorianChronology0.dayOfYear();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 910L + "'", long20 == 910L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60524582399982L) + "'", long26 == (-60524582399982L));
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1279002L + "'", long39 == 1279002L);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(interval47);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "20250406" + "'", str66, "20250406");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "19" + "'", str68, "19");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, -1502814781, -4, -23, -59, -50, 0]");
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        int int11 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime3, "monthOfYear", (int) (byte) 10);
        mutableDateTime3.addMonths((-28800000));
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime3.add(readableDuration14, 20);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.addWrapField(57600000);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-11) + "'", int11 == (-11));
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology1.dayOfWeek();
        long long9 = gregorianChronology1.getDateTimeMillis(5, 4, (int) (byte) 3, (int) (byte) 15);
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology1.clockhourOfHalfday();
        int int12 = gregorianChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology1.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = gregorianChronology1.getZone();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(1712408904132L, (org.joda.time.Chronology) gregorianChronology1);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-62001417599985L) + "'", long9 == (-62001417599985L));
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.era();
        org.joda.time.DurationField durationField4 = gregorianChronology0.seconds();
        org.joda.time.DurationField durationField5 = gregorianChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, dateTimeFieldType7, (int) (short) 100);
        int int11 = remainderDateTimeField10.getDivisor();
        int int12 = remainderDateTimeField10.getMinimumValue();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0, chronology14);
        mutableDateTime15.setMonthOfYear(5);
        mutableDateTime15.setDayOfYear((int) (byte) 19);
        boolean boolean20 = mutableDateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone23 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime15.toMutableDateTime(dateTimeZone22);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.minuteOfDay();
        int int26 = mutableDateTime24.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfWeek();
        mutableDateTime24.setRounding(dateTimeField28, 5);
        int int31 = mutableDateTime24.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime24.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.era();
        mutableDateTime24.set(dateTimeFieldType33, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology36 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology36.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology41 = gregorianChronology36.withZone(dateTimeZone40);
        long long45 = gregorianChronology36.add((long) (short) 10, 100L, (int) (byte) 9);
        org.joda.time.DateTimeField dateTimeField46 = gregorianChronology36.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType33.getField((org.joda.time.Chronology) gregorianChronology36);
        java.lang.String str48 = dateTimeFieldType33.getName();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField49 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField10, dateTimeFieldType33);
        boolean boolean51 = dividedDateTimeField49.isLeap(81522029880000L);
        int int52 = dividedDateTimeField49.getMaximumValue();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(cachedDateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 19 + "'", int31 == 19);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(gregorianChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 910L + "'", long45 == 910L);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "era" + "'", str48, "era");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 863 + "'", int52 == 863);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime2.secondOfMinute();
        int int22 = mutableDateTime2.getMinuteOfDay();
        org.joda.time.Instant instant23 = mutableDateTime2.toInstant();
        boolean boolean25 = mutableDateTime2.isEqual((long) (byte) 19);
        int int26 = mutableDateTime2.getMillisOfSecond();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        mutableDateTime12.setSecondOfMinute((int) (short) 10);
        mutableDateTime12.addWeekyears((int) (byte) 20);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0, chronology2);
        mutableDateTime3.setMonthOfYear(5);
        mutableDateTime3.setDayOfYear((int) (byte) 19);
        boolean boolean8 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, 2);
        boolean boolean19 = mutableDateTime12.isEqual((-62071747199903L));
        mutableDateTime12.setSecondOfMinute((int) (short) 10);
        org.joda.time.chrono.GregorianChronology gregorianChronology22 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField23 = gregorianChronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology22.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology22.era();
        org.joda.time.DurationField durationField26 = gregorianChronology22.seconds();
        org.joda.time.DurationField durationField27 = gregorianChronology22.centuries();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology22.dayOfMonth();
        mutableDateTime12.setChronology((org.joda.time.Chronology) gregorianChronology22);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableDateTime12.add(readablePeriod30, (int) '4');
        org.joda.time.chrono.GregorianChronology gregorianChronology33 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology33.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = gregorianChronology33.add(readablePeriod36, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField40 = gregorianChronology33.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology33.hourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gregorianChronology33.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime12.toMutableDateTime((org.joda.time.Chronology) gregorianChronology33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = mutableDateTime12.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(gregorianChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(gregorianChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.hourOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getMonthOfYear();
        boolean boolean9 = interval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Interval interval10 = interval6.toInterval();
        org.joda.time.Interval interval11 = interval6.toInterval();
        org.joda.time.DateTime dateTime12 = interval6.getStart();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.yearOfEra();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeField15.getAsShortText((int) '#', locale17);
        mutableDateTime13.setRounding(dateTimeField15, 5);
        int int21 = mutableDateTime13.getRoundingMode();
        boolean boolean22 = interval6.equals((java.lang.Object) int21);
        org.joda.time.Interval interval23 = interval6.toInterval();
        org.joda.time.Interval interval24 = interval6.toInterval();
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime26.add(readableDuration27, 10);
        int int30 = mutableDateTime26.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime26.hourOfDay();
        org.joda.time.Interval interval32 = property31.toInterval();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime();
        int int34 = mutableDateTime33.getMonthOfYear();
        boolean boolean35 = interval32.isAfter((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.Interval interval36 = interval32.toInterval();
        org.joda.time.Interval interval37 = interval32.toInterval();
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.Period period39 = interval37.toPeriod();
        boolean boolean40 = interval24.contains((org.joda.time.ReadableInterval) interval37);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "35" + "'", str18, "35");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(interval32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(24, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) 2);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 10);
        int int10 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfWeek();
        boolean boolean13 = property11.equals((java.lang.Object) (-1));
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType16, (int) (byte) 11, (int) (byte) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, (int) (byte) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter21.withZone(dateTimeZone24);
        int int26 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder0.append(dateTimeParser27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder0.appendSecondOfDay(236);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder0.appendLiteral("ISOChronology[+02:09]");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology3.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6, 10);
        int int9 = mutableDateTime5.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime5.hourOfDay();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime12.add(readableDuration13, 10);
        int int16 = mutableDateTime12.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime12.hourOfDay();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime();
        int int20 = mutableDateTime19.getMonthOfYear();
        boolean boolean21 = interval18.isAfter((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.Interval interval22 = interval18.toInterval();
        org.joda.time.Interval interval23 = interval18.toInterval();
        boolean boolean24 = interval11.isBefore((org.joda.time.ReadableInterval) interval18);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26, 10);
        int int29 = mutableDateTime25.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime25.hourOfDay();
        org.joda.time.Interval interval31 = property30.toInterval();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        int int33 = mutableDateTime32.getMonthOfYear();
        boolean boolean34 = interval31.isAfter((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Interval interval35 = interval31.toInterval();
        org.joda.time.Interval interval36 = interval31.toInterval();
        boolean boolean37 = interval18.isAfter((org.joda.time.ReadableInterval) interval36);
        java.lang.String str38 = interval18.toString();
        org.joda.time.Duration duration39 = interval18.toDuration();
        org.joda.time.Period period40 = duration39.toPeriod();
        int[] intArray43 = gregorianChronology3.get((org.joda.time.ReadablePeriod) period40, (long) 986, (long) 7740);
        org.joda.time.DurationField durationField44 = gregorianChronology3.millis();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(gregorianChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutableDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T01:00:00.000Z" + "'", str38, "1970-01-01T00:00:00.000Z/1970-01-01T01:00:00.000Z");
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 0, 0, 6, 754]");
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.millisOfSecond();
        org.joda.time.DurationField durationField7 = gregorianChronology0.weeks();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gregorianChronology0);
        int int9 = mutableDateTime8.getSecondOfDay();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology5 = gregorianChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.millisOfSecond();
        org.joda.time.DurationField durationField7 = gregorianChronology0.weeks();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gregorianChronology0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.millisOfSecond();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.getDifferenceAsLong(2493331200000L, (long) 18);
        org.joda.time.ReadablePartial readablePartial34 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology36 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology36.secondOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology36.dayOfWeek();
        long long44 = gregorianChronology36.getDateTimeMillis(5, 4, (int) (byte) 3, (int) (byte) 15);
        org.joda.time.DateTimeField dateTimeField45 = gregorianChronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gregorianChronology36.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) 0, chronology49);
        mutableDateTime50.setMonthOfYear(5);
        mutableDateTime50.setDayOfYear((int) (byte) 19);
        boolean boolean55 = mutableDateTime50.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone58 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone57);
        org.joda.time.MutableDateTime mutableDateTime59 = mutableDateTime50.toMutableDateTime(dateTimeZone57);
        int int60 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) mutableDateTime59);
        int int61 = mutableDateTime59.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration62 = null;
        mutableDateTime59.add(readableDuration62, 2);
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration66 = null;
        mutableDateTime65.add(readableDuration66, 10);
        int int69 = mutableDateTime65.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime65.hourOfDay();
        org.joda.time.Interval interval71 = property70.toInterval();
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime();
        int int73 = mutableDateTime72.getMonthOfYear();
        boolean boolean74 = interval71.isAfter((org.joda.time.ReadableInstant) mutableDateTime72);
        org.joda.time.Interval interval75 = interval71.toInterval();
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = interval71.toPeriod(periodType76);
        mutableDateTime59.add((org.joda.time.ReadablePeriod) period77);
        org.joda.time.MutablePeriod mutablePeriod79 = period77.toMutablePeriod();
        int int81 = period77.getValue(0);
        int[] intArray84 = gregorianChronology36.get((org.joda.time.ReadablePeriod) period77, (long) 20, (long) 913);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray86 = unsupportedDateTimeField30.add(readablePartial34, 17, intArray84, 14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: millisOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[UTC]" + "'", str27, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 41555519L + "'", long33 == 41555519L);
        org.junit.Assert.assertNotNull(gregorianChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-62001417599985L) + "'", long44 == (-62001417599985L));
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(cachedDateTimeZone58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 19 + "'", int61 == 19);
        org.junit.Assert.assertNotNull(mutableDateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(interval71);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, 0, 0, 0, 0, 0, 893]");
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.previousTransition(0L);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        mutableDateTime4.setYear(0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.dayOfWeek();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0, chronology9);
        mutableDateTime10.setMonthOfYear(5);
        mutableDateTime10.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException17 = new org.joda.time.IllegalFieldValueException(durationFieldType15, "");
        java.lang.Throwable[] throwableArray18 = illegalFieldValueException17.getSuppressed();
        boolean boolean19 = mutableDateTime10.equals((java.lang.Object) illegalFieldValueException17);
        mutableDateTime10.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime10.add(readableDuration22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableDateTime10.add(readablePeriod24, 0);
        mutableDateTime10.setYear((-28800000));
        mutableDateTime10.addWeeks((int) (byte) 8);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 0, chronology32);
        mutableDateTime33.setMonthOfYear(5);
        mutableDateTime33.setDayOfYear((int) (byte) 19);
        boolean boolean38 = mutableDateTime33.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone41 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime33.toMutableDateTime(dateTimeZone40);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.minuteOfDay();
        int int44 = mutableDateTime42.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology45.dayOfWeek();
        mutableDateTime42.setRounding(dateTimeField46, 5);
        int int49 = mutableDateTime42.getDayOfMonth();
        boolean boolean50 = mutableDateTime10.isAfter((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        long long53 = dateTimeZone51.previousTransition(0L);
        java.lang.Object obj54 = dateTimeZone51.writeReplace();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone51);
        java.lang.String str57 = dateTimeZone51.getNameKey((long) (byte) 23);
        mutableDateTime42.setZoneRetainFields(dateTimeZone51);
        org.joda.time.chrono.GregorianChronology gregorianChronology59 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField60 = gregorianChronology59.yearOfEra();
        org.joda.time.DateTimeField dateTimeField61 = gregorianChronology59.secondOfDay();
        org.joda.time.DateTimeField dateTimeField62 = gregorianChronology59.era();
        org.joda.time.DurationField durationField63 = gregorianChronology59.seconds();
        org.joda.time.DurationField durationField64 = gregorianChronology59.millis();
        org.joda.time.DateTimeField dateTimeField65 = gregorianChronology59.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str67 = dateTimeFieldType66.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField69 = new org.joda.time.field.RemainderDateTimeField(dateTimeField65, dateTimeFieldType66, (int) (short) 100);
        org.joda.time.DurationField durationField70 = remainderDateTimeField69.getRangeDurationField();
        org.joda.time.DurationField durationField71 = remainderDateTimeField69.getDurationField();
        org.joda.time.chrono.GregorianChronology gregorianChronology72 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField73 = gregorianChronology72.yearOfEra();
        org.joda.time.DateTimeField dateTimeField74 = gregorianChronology72.secondOfDay();
        org.joda.time.DateTimeField dateTimeField75 = gregorianChronology72.monthOfYear();
        org.joda.time.DurationField durationField76 = gregorianChronology72.months();
        org.joda.time.chrono.GregorianChronology gregorianChronology77 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField78 = gregorianChronology77.yearOfEra();
        org.joda.time.DateTimeField dateTimeField79 = gregorianChronology77.secondOfDay();
        org.joda.time.DateTimeField dateTimeField80 = gregorianChronology77.era();
        org.joda.time.DurationField durationField81 = gregorianChronology77.seconds();
        org.joda.time.DurationField durationField82 = gregorianChronology77.millis();
        org.joda.time.DateTimeField dateTimeField83 = gregorianChronology77.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str85 = dateTimeFieldType84.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField87 = new org.joda.time.field.RemainderDateTimeField(dateTimeField83, dateTimeFieldType84, (int) (short) 100);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField88 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField69, durationField76, dateTimeFieldType84);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField90 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField88, dateTimeFieldType89);
        boolean boolean91 = mutableDateTime42.equals((java.lang.Object) dateTimeFieldType89);
        int int92 = mutableDateTime42.getDayOfMonth();
        boolean boolean93 = mutableDateTime4.isBefore((org.joda.time.ReadableInstant) mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(cachedDateTimeZone41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(iSOChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 19 + "'", int49 == 19);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(obj54);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "UTC" + "'", str57, "UTC");
        org.junit.Assert.assertNotNull(gregorianChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "monthOfYear" + "'", str67, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(gregorianChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(gregorianChronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "monthOfYear" + "'", str85, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 19 + "'", int92 == 19);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setMillis(0L);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(durationFieldType7, "");
        java.lang.Throwable[] throwableArray10 = illegalFieldValueException9.getSuppressed();
        boolean boolean11 = mutableDateTime2.equals((java.lang.Object) illegalFieldValueException9);
        mutableDateTime2.setSecondOfDay((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime2.add(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime2.add(readableDuration19);
        java.util.Date date21 = mutableDateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType22, 0);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.yearOfCentury();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DurationField durationField28 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField29 = iSOChronology25.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField29);
        long long33 = unsupportedDateTimeField30.add((long) 40, 349200019L);
        org.joda.time.DurationField durationField34 = unsupportedDateTimeField30.getLeapDurationField();
        long long37 = unsupportedDateTimeField30.add((-61370611199985L), (int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = unsupportedDateTimeField30.getType();
        org.joda.time.DurationField durationField39 = unsupportedDateTimeField30.getDurationField();
        long long42 = unsupportedDateTimeField30.add(0L, 75L);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 16:00:10 PST 1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[UTC]" + "'", str27, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 20952001140040L + "'", long33 == 20952001140040L);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-61370611259985L) + "'", long37 == (-61370611259985L));
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 4500000L + "'", long42 == 4500000L);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = gregorianChronology1.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = gregorianChronology1.add(readablePeriod5, (long) 100, (int) (byte) 3);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(105228000000L, (org.joda.time.Chronology) gregorianChronology1);
        org.joda.time.DurationField durationField10 = gregorianChronology1.millis();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology1.millisOfDay();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = gregorianChronology0.add(readablePeriod3, (long) (short) 100, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology0.year();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology11.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.Chronology chronology16 = gregorianChronology11.withZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = gregorianChronology11.withUTC();
        long long23 = gregorianChronology11.getDateTimeMillis((long) 1969, 0, (int) (byte) 21, 19, 2);
        org.joda.time.DurationField durationField24 = gregorianChronology11.months();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26, 10);
        int int29 = mutableDateTime25.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime25.hourOfDay();
        org.joda.time.Interval interval31 = property30.toInterval();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        int int33 = mutableDateTime32.getMonthOfYear();
        boolean boolean34 = interval31.isAfter((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Interval interval35 = interval31.toInterval();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = interval31.toPeriod(periodType36);
        int[] intArray40 = gregorianChronology11.get((org.joda.time.ReadablePeriod) period37, (long) 29, (long) 14);
        int[] intArray43 = iSOChronology10.get((org.joda.time.ReadablePeriod) period37, 0L, 39601970L);
        int[] intArray46 = gregorianChronology0.get((org.joda.time.ReadablePeriod) period37, (long) 57600, (-1L));
        org.joda.time.DateTimeField dateTimeField47 = gregorianChronology0.weekOfWeekyear();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1279002L + "'", long23 == 1279002L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, -15]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 11, 0, 1, 970]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, -57, -601]");
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1, 10);
        int int4 = mutableDateTime0.getWeekOfWeekyear();
        mutableDateTime0.setYear(0);
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField8 = gregorianChronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gregorianChronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gregorianChronology7.era();
        org.joda.time.DurationField durationField11 = gregorianChronology7.seconds();
        org.joda.time.DurationField durationField12 = gregorianChronology7.millis();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology7.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str15 = dateTimeFieldType14.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField17 = new org.joda.time.field.RemainderDateTimeField(dateTimeField13, dateTimeFieldType14, (int) (short) 100);
        org.joda.time.DurationField durationField18 = remainderDateTimeField17.getRangeDurationField();
        org.joda.time.DurationField durationField19 = remainderDateTimeField17.getDurationField();
        int int21 = remainderDateTimeField17.get(40176013747L);
        org.joda.time.ReadablePartial readablePartial22 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology23 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology23.yearOfEra();
        org.joda.time.ReadablePartial readablePartial25 = null;
        int[] intArray32 = new int[] { (short) 0, 0, 'a', (byte) 23, 5 };
        int[] intArray34 = dateTimeField24.add(readablePartial25, 0, intArray32, 0);
        int int35 = remainderDateTimeField17.getMinimumValue(readablePartial22, intArray32);
        long long38 = remainderDateTimeField17.set((long) 57600000, 67);
        org.joda.time.MutableDateTime.Property property39 = new org.joda.time.MutableDateTime.Property(mutableDateTime0, (org.joda.time.DateTimeField) remainderDateTimeField17);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "monthOfYear" + "'", str15, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(gregorianChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 97, 23, 5]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 57667000L + "'", long38 == 57667000L);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.addMinutes((int) 'a');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0, chronology8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.secondOfDay();
        int int11 = mutableDateTime9.getWeekOfWeekyear();
        mutableDateTime9.setMillis((long) (-2));
        boolean boolean14 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime9);
        int int15 = mutableDateTime2.getMinuteOfHour();
        org.joda.time.DateTime dateTime16 = mutableDateTime2.toDateTimeISO();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime2.centuryOfEra();
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 37 + "'", int15 == 37);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0, chronology1);
        mutableDateTime2.setMonthOfYear(5);
        mutableDateTime2.setDayOfYear((int) (byte) 19);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        mutableDateTime2.addWeeks((int) (short) -1);
        java.lang.String str10 = mutableDateTime2.toString();
        long long11 = mutableDateTime2.getMillis();
        java.lang.String str12 = mutableDateTime2.toString();
        org.joda.time.chrono.GregorianChronology gregorianChronology13 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = gregorianChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology13.era();
        org.joda.time.DurationField durationField17 = gregorianChronology13.seconds();
        org.joda.time.DurationField durationField18 = gregorianChronology13.millis();
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology13.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str21 = dateTimeFieldType20.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField23 = new org.joda.time.field.RemainderDateTimeField(dateTimeField19, dateTimeFieldType20, (int) (short) 100);
        org.joda.time.DurationField durationField24 = remainderDateTimeField23.getRangeDurationField();
        org.joda.time.DurationField durationField25 = remainderDateTimeField23.getDurationField();
        org.joda.time.chrono.GregorianChronology gregorianChronology26 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology26.secondOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology26.monthOfYear();
        org.joda.time.DurationField durationField30 = gregorianChronology26.months();
        org.joda.time.chrono.GregorianChronology gregorianChronology31 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField32 = gregorianChronology31.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = gregorianChronology31.secondOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology31.era();
        org.joda.time.DurationField durationField35 = gregorianChronology31.seconds();
        org.joda.time.DurationField durationField36 = gregorianChronology31.millis();
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology31.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str39 = dateTimeFieldType38.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField41 = new org.joda.time.field.RemainderDateTimeField(dateTimeField37, dateTimeFieldType38, (int) (short) 100);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField42 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField23, durationField30, dateTimeFieldType38);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField44 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField42, dateTimeFieldType43);
        int int45 = mutableDateTime2.get(dateTimeFieldType43);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-12T00:00:00.000Z" + "'", str10, "1970-01-12T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 950400000L + "'", long11 == 950400000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-12T00:00:00.000Z" + "'", str12, "1970-01-12T00:00:00.000Z");
        org.junit.Assert.assertNotNull(gregorianChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "monthOfYear" + "'", str21, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(gregorianChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(gregorianChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "monthOfYear" + "'", str39, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }
}
