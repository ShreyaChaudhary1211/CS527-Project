/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 30 00:35:13 GMT 2024
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-99);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-99)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[54];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      assertEquals(100, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)123);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)123;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-55);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 2153, (int) (byte)0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((-205), byteArray0, false);
      base64_0.setInitialBuffer(byteArray0, (-205), (-205));
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.setInitialBuffer(byteArray1, (-378), 0);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (byte) (-18), 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(20, byteArray1.length);
      
      base64_0.decode(byteArray1, (int) (byte)0, 776);
      int int0 = base64_0.readResults(byteArray0, (byte)0, 776);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)55;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short) (-4162), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)125;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals((short)125, bigInteger0.shortValue());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)72, (byte)48, (byte)61, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64((-4551));
      byte[] byteArray0 = base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64 base64_0 = new Base64(6);
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(5, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1, (int) (byte)0, 418);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      
      int int0 = base64_0.avail();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, 1);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-1526), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardNonBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 1295, 1295);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2341), (byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)116, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AAAAAAAAAAAAAA==\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, false);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)79);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)12);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      base64_0.decode(byteArray3, (int) (byte)0, 418);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray3);
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1, 1, 505);
      assertEquals(20, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-50);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 1325);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.setInitialBuffer(byteArray1, 8184, 0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1399, 1399);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1399
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[39];
      Base64 base64_0 = new Base64(27, byteArray0, true);
      base64_0.encode(byteArray0, 1235, (-1));
      base64_0.decode(byteArray0, (-1297), (-57));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      Base64 base64_0 = new Base64((-62));
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 24, 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      Base64 base64_0 = new Base64((byte)93, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[39];
      Base64 base64_0 = new Base64((-1), byteArray0, true);
      base64_0.encode(byteArray0, (-142), (-142));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[50];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 14, 14);
      base64_0.encode(byteArray1, 93, (-25));
      assertEquals(70, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[39];
      Base64 base64_0 = new Base64(27, byteArray0, true);
      base64_0.encode(byteArray0, 12, 27);
      base64_0.encode(byteArray0, 1235, (-1));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(149, byteArray0, true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(643, byteArray0, false);
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.discardNonBase64(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.discardNonBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)9;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)32;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)103}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)13, (byte)103}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64();
      try { 
        base64_0.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)124);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-54));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)126;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 790);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-31);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 167, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (-1), (-1));
      base64_0.encode(byteArray0, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      base64_0.setInitialBuffer(byteArray0, 7, 7);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.setInitialBuffer((byte[]) null, 7, (-700));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64((-116), byteArray0);
      base64_0.decode(byteArray0, (-1406), (-112));
      int int0 = base64_0.readResults(byteArray0, (-116), (-1406));
      assertEquals((-1), int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1, (int) (byte)0, 776);
      base64_0.readResults(byteArray0, 7, (byte)0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[36];
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, (-2854), (-2854));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray1, (int) (byte)0, 86);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64((byte)126, byteArray0, false);
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[39];
      Base64 base64_0 = new Base64((-1), byteArray0, true);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1379), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Cg==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64((-1396));
      byte[] byteArray0 = base64_0.encode((byte[]) null);
      assertNull(byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-288), (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
  }
}
