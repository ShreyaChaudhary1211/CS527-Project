/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 19:34:32 GMT 2024
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.google.common.base.Predicate;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EquivalenceMethod;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.Property;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamedType_ESTest extends NamedType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "&c!7cp:1T5;SQw;", "&c!7cp:1T5;SQw;", 0, 0);
      boolean boolean0 = namedType0.isNamedType();
      assertEquals("&c!7cp:1T5;SQw;", namedType0.getReferenceName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "boolean", "Not declared as a type name", 0, 0);
      String string0 = namedType0.toAnnotationString();
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Named type with empty name component", 1, 0);
      EquivalenceMethod equivalenceMethod0 = EquivalenceMethod.IDENTITY;
      namedType0.checkEquivalenceHelper(noResolvedType0, equivalenceMethod0);
      assertEquals("Not declared as a constructor", namedType0.getReferenceName());
      assertTrue(namedType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Unknown class name", 1, 0);
      Node node0 = new Node(16);
      namedType0.defineDeclaredProperty("Unknown class name", noResolvedType0, node0);
      jSTypeRegistry0.forwardDeclareType("Named type with empty name component");
      namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo", "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo", (-1442), (-1442));
      namedType0.hashCode();
      assertEquals("com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, ":tP\"`{d$f;lv$8D&eu", ":tP\"`{d$f;lv$8D&eu", 52, 3780);
      JSType jSType0 = namedType0.getReferencedType();
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[4] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      namedType0.defineProperty("Named type with empty name component", jSType0, true, node0);
      boolean boolean0 = namedType0.defineProperty("Unknown class name", jSType0, true, node0);
      assertTrue(boolean0);
      assertEquals(":tP\"`{d$f;lv$8D&eu", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Unknown class name", 1, 0);
      jSTypeRegistry0.forwardDeclareType("Named type with empty name component");
      namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertTrue(namedType0.isNativeObjectType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.setLastGeneration(false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "RangeError", "Named type with empty name component", 1, 1);
      namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertTrue(namedType0.isNativeObjectType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      jSTypeRegistry0.setLastGeneration(false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Not declared as a constructor", 1, 0);
      namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "prototype", "Not declared as a constructor", 1, 1);
      namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      noResolvedType0.setPrototype(errorFunctionType0, (Node) null);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "prototype", "Not declared as a constructor", 1, 1);
      namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[5] = (JSType) noResolvedType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, jSTypeArray0);
      noResolvedType0.setPrototype(functionType0, (Node) null);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "prototype", "Not declared as a constructor", 1, 1);
      namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "number", "number", 1, 0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      boolean boolean0 = namedType0.setValidator(predicate0);
      assertTrue(boolean0);
      
      namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertEquals("number", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a constructor", 0, 0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      namedType0.setValidator(predicate0);
      jSTypeRegistry0.forwardDeclareType("Named type with empty name component");
      namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "&Q", 2759, 2759);
      JSType[] jSTypeArray0 = new JSType[6];
      Node node0 = new Node(0);
      Property property0 = new Property("J>{AXTqb=BGDo", jSTypeArray0[0], true, node0);
      namedType0.getTypedefType(simpleErrorReporter0, property0, "B");
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 0, 0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      namedType0.resolveInternal(simpleErrorReporter0, noObjectType0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      boolean boolean0 = namedType0.setValidator(predicate0);
      assertTrue(namedType0.isResolved());
      assertFalse(boolean0);
  }
}
