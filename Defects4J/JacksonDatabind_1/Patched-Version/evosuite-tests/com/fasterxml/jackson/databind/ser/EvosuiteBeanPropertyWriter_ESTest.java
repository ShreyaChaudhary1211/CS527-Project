/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 31 01:33:03 GMT 2024
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuiteBeanPropertyWriter_ESTest extends EvosuiteBeanPropertyWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("8nB[.|,}e(*ruPMO|", (AnnotationIntrospector) null, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      JsonSerializer<InputStream> jsonSerializer0 = (JsonSerializer<InputStream>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, true, (Object) null);
      PropertySerializerMap propertySerializerMap0 = PropertySerializerMap.emptyMap();
      Class<JsonAutoDetect.Visibility> class0 = JsonAutoDetect.Visibility.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationConfig serializationConfig0 = objectMapper0.getSerializationConfig();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      beanPropertyWriter0._findAndAddDynamic(propertySerializerMap0, class0, defaultSerializerProvider_Impl1);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("nB[.|,}e(*ruPMO", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      JsonSerializer<Class<Module>> jsonSerializer0 = (JsonSerializer<Class<Module>>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, "nB[.|,}e(*ruPMO");
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, asExternalTypeSerializer0, (JavaType) null, false, dOMSerializer0);
      beanPropertyWriter0.getViews();
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("nB[.|,}e(*ruPMO", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, "");
      JsonSerializer<Class<Module>> jsonSerializer0 = (JsonSerializer<Class<Module>>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, asPropertyTypeSerializer0, (JavaType) null, false, "");
      beanPropertyWriter0.getWrapperName();
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("8nB[.|,}e(*ruPMOnB[.|,}e(*ruPMOy5tfoZ.M'Tn", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, (TypeSerializer) null, (JavaType) null, false, (Object) null);
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = beanPropertyWriter0.getAnnotation(class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("via method ", (AnnotationIntrospector) null, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, (TypeSerializer) null, (JavaType) null, true, (Object) null);
      UnwrappingBeanPropertyWriter unwrappingBeanPropertyWriter0 = new UnwrappingBeanPropertyWriter(beanPropertyWriter0, (NameTransformer) null);
      SerializedString serializedString0 = unwrappingBeanPropertyWriter0.getSerializedName();
      assertTrue(unwrappingBeanPropertyWriter0.willSuppressNulls());
      assertNotNull(serializedString0);
      assertFalse(unwrappingBeanPropertyWriter0.isRequired());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("nB[.|,}e(*ruPMO", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, "");
      JsonSerializer<Class<Module>> jsonSerializer0 = (JsonSerializer<Class<Module>>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, asPropertyTypeSerializer0, (JavaType) null, false, "");
      beanPropertyWriter0.isRequired((AnnotationIntrospector) null);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("8nB[.|,}e(*ruPMOnB[.|,}e(*ruPMOy5tfoZ.M'Tn", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      Class<DecimalNode> class0 = DecimalNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonSerializer<CoreXMLSerializers.XMLGregorianCalendarSerializer> jsonSerializer0 = (JsonSerializer<CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonSerializer0).toString();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, jsonSerializer0, (TypeSerializer) null, simpleType0, false, jsonSerializer0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.depositSchemaProperty(objectNode0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertNull(objectNode0.numberType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("8nB[.|,}e(*ruPMOnB[.|,}e(*ruPMOy5tfoZ.M'Tn", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, (TypeSerializer) null, (JavaType) null, false, "}UXfxU2*l`Z");
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("8nB[.|,}e(*ruPMOnB[.|,}e(*ruPMOy5tfoZ.M'Tn", "8nB[.|,}e(*ruPMOnB[.|,}e(*ruPMOy5tfoZ.M'Tn");
      NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
      UnwrappingBeanPropertyWriter unwrappingBeanPropertyWriter0 = new UnwrappingBeanPropertyWriter(beanPropertyWriter0, nameTransformer_Chained0);
      JavaType javaType0 = unwrappingBeanPropertyWriter0.getType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("", annotationIntrospector0, true);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, (TypeSerializer) null, (JavaType) null, true, annotationMap0);
      BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0.unwrappingWriter((NameTransformer) null);
      assertFalse(beanPropertyWriter1.isRequired());
      assertTrue(beanPropertyWriter1.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("com.fsterx.jackon.databind.ser.std.StdJdkSerializer$AtomScIntegerSerialize", (AnnotationIntrospector) null, true);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, (TypeSerializer) null, (JavaType) null, true, "com.fsterx.jackon.databind.ser.std.StdJdkSerializer$AtomScIntegerSerialize");
      beanPropertyWriter0.setNonTrivialBaseType((JavaType) null);
      assertFalse(beanPropertyWriter0.isRequired());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("", annotationIntrospector0, true);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, (TypeSerializer) null, (JavaType) null, true, annotationIntrospector0);
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = beanPropertyWriter0.getContextAnnotation(class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("nB[.|,}e(*ruPMO", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, "");
      JsonSerializer<Class<Module>> jsonSerializer0 = (JsonSerializer<Class<Module>>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, asPropertyTypeSerializer0, (JavaType) null, false, "");
      boolean boolean0 = beanPropertyWriter0.willSuppressNulls();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("com.fasterxl.jackson.databind.ser.std.StdJdkSerializers$AtomScIntegerSerialize", (AnnotationIntrospector) null, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanPropertyWriter beanPropertyWriter0 = null;
      try {
        beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, (TypeSerializer) null, (JavaType) null, true, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("8nB[.|,}e(*ruPMOnB[.|,}e(*ruPMOy5tfoZ.M'Tn", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, (TypeSerializer) null, (JavaType) null, false, "}UXfxU2*l`Z");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("8nB[.|,}e(*ruPMOnB[.|,}e(*ruPMOy5tfoZ.M'Tn", "8nB[.|,}e(*ruPMOnB[.|,}e(*ruPMOy5tfoZ.M'Tn");
      NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      beanPropertyWriter1._internalSettings = hashMap0;
      UnwrappingBeanPropertyWriter unwrappingBeanPropertyWriter0 = new UnwrappingBeanPropertyWriter(beanPropertyWriter1, nameTransformer_Chained0);
      assertFalse(unwrappingBeanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("com.fasterxl.jackson.databind.ser.std.StdJdkSerializers$AtomScIntegerSerialize", (AnnotationIntrospector) null, false);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, (TypeSerializer) null, (JavaType) null, false, "com.fasterxl.jackson.databind.ser.std.StdJdkSerializers$AtomScIntegerSerialize");
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("com.fasterxl.jackson.databind.ser.std.StdJdkSerializers$AtomScIntegerSerialize", "com.fasterxl.jackson.databind.ser.std.StdJdkSerializers$AtomScIntegerSerialize");
      BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0.rename(nameTransformer0);
      assertEquals("com.fasterxl.jackson.databind.ser.std.StdJdkSerializers$AtomScIntegerSerializecom.fasterxl.jackson.databind.ser.std.StdJdkSerializers$AtomScIntegerSerializecom.fasterxl.jackson.databind.ser.std.StdJdkSerializers$AtomScIntegerSerialize", beanPropertyWriter1.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("com.fasterxl.jackson.databind.ser.std.StdJdkSerializers$AtomScIntegerSerialize", (AnnotationIntrospector) null, false);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, (TypeSerializer) null, (JavaType) null, false, "com.fasterxl.jackson.databind.ser.std.StdJdkSerializers$AtomScIntegerSerialize");
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0.rename(nameTransformer0);
      assertSame(beanPropertyWriter1, beanPropertyWriter0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("via meth-d ", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      JsonSerializer<ObjectReader> jsonSerializer0 = (JsonSerializer<ObjectReader>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonSerializer0).toString();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, annotationMap0);
      JsonSerializer<Object> jsonSerializer1 = beanPropertyWriter0.getSerializer();
      beanPropertyWriter0.assignSerializer(jsonSerializer1);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("nB[.|,}e(*ruPO", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, "");
      Integer integer0 = new Integer(2147483645);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, asPropertyTypeSerializer0, (JavaType) null, false, integer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_UNKNOWN_SERIALIZER);
      // Undeclared exception!
      try { 
        beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not override serializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("nB[.|,}e(*ruPMO", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, "nB[.|,}e(*ruPMO");
      JsonSerializer<Class<Module>> jsonSerializer0 = (JsonSerializer<Class<Module>>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, asPropertyTypeSerializer0, (JavaType) null, false, "nB[.|,}e(*ruPMO");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertTrue(beanPropertyWriter0.hasNullSerializer());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("nB[.|,}e(*ruPMO", (AnnotationIntrospector) null, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, "nB[.|,}e(*ruPMO");
      JsonSerializer<Class<Module>> jsonSerializer0 = (JsonSerializer<Class<Module>>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, asPropertyTypeSerializer0, (JavaType) null, true, "nB[.|,}e(*ruPMO");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      // Undeclared exception!
      try { 
        beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_UNKNOWN_SERIALIZER);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not override null serializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("gbDi$@D$bIe0gbDi$@D$bIe0", (AnnotationIntrospector) null, false);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, (TypeSerializer) null, (JavaType) null, false, (Object) null);
      beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) null);
      assertEquals("gbDi$@D$bIe0gbDi$@D$bIe0", beanPropertyWriter0.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("8nB[.|,}e(*ruPMOnB[.|,}e(*ruPMOy5tfoZ.M'Tn", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      Class<DecimalNode> class0 = DecimalNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonSerializer<CoreXMLSerializers.XMLGregorianCalendarSerializer> jsonSerializer0 = (JsonSerializer<CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, jsonSerializer0, (TypeSerializer) null, simpleType0, false, jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base(defaultSerializerProvider_Impl0);
      beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) jsonObjectFormatVisitor_Base0);
      assertEquals("8nB[.|,}e(*ruPMOnB[.|,}e(*ruPMOy5tfoZ.M'Tn", beanPropertyWriter0.getName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("nB[.|,}e(*ruPMO", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, "nB[.|,}e(*ruPMO");
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, dOMSerializer0, asExternalTypeSerializer0, (JavaType) null, false, classNameIdResolver0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      beanPropertyWriter0._internalSettings = hashMap0;
      Object object0 = new Object();
      Object object1 = beanPropertyWriter0.getInternalSetting(object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("nB[.|,}e(*ruPMO", annotationIntrospector0, true);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, "nB[.|,}e(*ruPMO");
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, dOMSerializer0, asExternalTypeSerializer0, (JavaType) null, true, annotatedField0);
      Object object0 = beanPropertyWriter0.getInternalSetting((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("nB[.|,}e(*ruPMO", (AnnotationIntrospector) null, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      JsonSerializer<Class<Module>> jsonSerializer0 = (JsonSerializer<Class<Module>>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, "nB[.|,}e(*ruPMO");
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, asExternalTypeSerializer0, (JavaType) null, true, dOMSerializer0);
      beanPropertyWriter0.setInternalSetting((Object) null, (Object) null);
      Object object0 = beanPropertyWriter0.setInternalSetting("nB[.|,}e(*ruPMO", "nB[.|,}e(*ruPMO");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("8nB[.|,}e(*ruPMOnB[.|,}e(*ruPMOy5tfoZ.M'Tn", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      JsonSerializer<DecimalNode> jsonSerializer0 = (JsonSerializer<DecimalNode>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, (Object) null);
      Object object0 = beanPropertyWriter0.removeInternalSetting((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("8nB[.|,}e(*ruPMOnB[.|,}e(*ruPMOy5tfoZ.M'Tn", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      JsonSerializer<DecimalNode> jsonSerializer0 = (JsonSerializer<DecimalNode>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, (Object) null);
      beanPropertyWriter0.setInternalSetting((Object) null, (Object) null);
      Object object0 = beanPropertyWriter0.removeInternalSetting((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("8nB[.|,}e(*ruPMOnB[.|,}e(*ruPMOy5tfoZ.M'Tn", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      JsonSerializer<String> jsonSerializer0 = (JsonSerializer<String>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, (Object) null);
      beanPropertyWriter0.setInternalSetting(pOJOPropertyBuilder0, (Object) null);
      Object object0 = beanPropertyWriter0.removeInternalSetting((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("nB[.|,}e(*ruPMO", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, "");
      Integer integer0 = new Integer(2147483645);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, asPropertyTypeSerializer0, (JavaType) null, true, integer0);
      boolean boolean0 = beanPropertyWriter0.hasSerializer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("field \"", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, "field \"");
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, dOMSerializer0, asExternalTypeSerializer0, (JavaType) null, false, classNameIdResolver0);
      boolean boolean0 = beanPropertyWriter0.hasSerializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("nB[.|,}e(*ruPMO", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, "nB[.|,}e(*ruPMO");
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, dOMSerializer0, asExternalTypeSerializer0, (JavaType) null, false, classNameIdResolver0);
      boolean boolean0 = beanPropertyWriter0.hasNullSerializer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("nB[.|,}e(*ruPMO", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, "nB[.|,}e(*ruPMO");
      JsonSerializer<Class<Module>> jsonSerializer0 = (JsonSerializer<Class<Module>>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, asPropertyTypeSerializer0, (JavaType) null, false, "nB[.|,}e(*ruPMO");
      assertFalse(beanPropertyWriter0.hasNullSerializer());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      boolean boolean0 = beanPropertyWriter0.hasNullSerializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("bv", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      Class<DecimalNode> class0 = DecimalNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, (JsonSerializer<?>) null, (TypeSerializer) null, simpleType0, false, (Object) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.depositSchemaProperty(objectNode0, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("nB[.|,}e(*ruPMO", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, "nB[.|,}e(*ruPMO");
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, dOMSerializer0, asExternalTypeSerializer0, (JavaType) null, false, classNameIdResolver0);
      Class<?> class0 = beanPropertyWriter0.getRawSerializationType();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("8nB[.|,}e(*ruPMO|", (AnnotationIntrospector) null, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      JsonSerializer<InputStream> jsonSerializer0 = (JsonSerializer<InputStream>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, true, (Object) null);
      // Undeclared exception!
      try { 
        beanPropertyWriter0.getPropertyType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector", (AnnotationIntrospector) null, false);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, (TypeSerializer) null, (JavaType) null, false, (Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.depositSchemaProperty((ObjectNode) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("bv", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      Class<DecimalNode> class0 = DecimalNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_UNKNOWN_SERIALIZER, (TypeSerializer) null, simpleType0, false, simpleType0);
      beanPropertyWriter0.depositSchemaProperty(objectNode0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertFalse(objectNode0.booleanValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("8nB[.|,}e(*ruPMOnB[.|,}e(*ruPMOy5tfoZ.M'Tn", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, (TypeSerializer) null, (JavaType) null, false, (Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        beanPropertyWriter0.serializeAsPlaceholder(annotatedField0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("nB[.|,}e(*ruPO", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, "");
      Integer integer0 = new Integer(2147483645);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, asPropertyTypeSerializer0, (JavaType) null, false, integer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("4}*Vp@;K@p&|x@xB75");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      beanPropertyWriter0.assignNullSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      try { 
        beanPropertyWriter0.serializeAsPlaceholder(jsonEncoding0, jsonGenerator0, defaultSerializerProvider_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.ser.impl.FailingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("8nB[.|,}e(*ruPMOnB[.|,}e(*ruPMOy5tfoZ.M'Tn", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      Class<DecimalNode> class0 = DecimalNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonSerializer<CoreXMLSerializers.XMLGregorianCalendarSerializer> jsonSerializer0 = (JsonSerializer<CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, simpleType0, jsonSerializer0, (TypeSerializer) null, simpleType0, false, jsonSerializer0);
      beanPropertyWriter0._nonTrivialBaseType = (JavaType) simpleType0;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PropertySerializerMap propertySerializerMap0 = PropertySerializerMap.emptyMap();
      // Undeclared exception!
      try { 
        beanPropertyWriter0._findAndAddDynamic(propertySerializerMap0, class0, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("nB[.|,}e(*ruPMO", annotationIntrospector0, true);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, "nB[.|,}e(*ruPMO");
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, dOMSerializer0, asExternalTypeSerializer0, (JavaType) null, true, annotatedField0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      try { 
        beanPropertyWriter0.serializeAsColumn(pOJOPropertyBuilder0, (JsonGenerator) null, serializerProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("nB[.|,}e(*ruPMO", annotationIntrospector0, true);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, "nB[.|,}e(*ruPMO");
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, dOMSerializer0, asExternalTypeSerializer0, (JavaType) null, true, annotatedField0);
      BigDecimal bigDecimal0 = new BigDecimal((-2135350969));
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      try { 
        beanPropertyWriter0._handleSelfReference(decimalNode0, dOMSerializer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Direct self-reference leading to cycle
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("8nB[.|,}e(*ruPMOnB[.|,}e(*ruPMOy5tfoZ.M'Tn", (AnnotationIntrospector) null, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      JsonSerializer<ObjectIdGenerators.IntSequenceGenerator> jsonSerializer0 = (JsonSerializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, true, jsonSerializer0);
      JsonSerializer<Annotation> jsonSerializer1 = (JsonSerializer<Annotation>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonSerializer1).usesObjectId();
      try { 
        beanPropertyWriter0._handleSelfReference((Object) null, jsonSerializer1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Direct self-reference leading to cycle
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("via meth-d ", (AnnotationIntrospector) null, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      JsonSerializer<ObjectReader> jsonSerializer0 = (JsonSerializer<ObjectReader>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, annotationMap0);
      // Undeclared exception!
      try { 
        beanPropertyWriter0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }
}
