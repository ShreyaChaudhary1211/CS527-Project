package org.apache.commons.csv;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.Token token6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token7 = cSVLexer5.nextToken(token6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        org.apache.commons.csv.Token token10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token11 = cSVLexer5.nextToken(token10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = new org.apache.commons.csv.CSVParser("hi!", cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean8 = cSVLexer5.ignoreEmptyLines;
        // The following exception was thrown during execution in test generation
        try {
            int int9 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        java.io.Reader reader12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable13 = cSVFormat11.parse(reader12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        java.lang.StringBuilder stringBuilder12 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVLexer5.trimTrailingSpaces(stringBuilder12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.Token token10 = new org.apache.commons.csv.Token();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token11 = cSVLexer5.nextToken(token10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token14 = cSVLexer5.nextToken(token13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        java.io.Reader reader13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable14 = cSVFormat12.parse(reader13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVLexer4.format;
        org.apache.commons.csv.Token token8 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type9 = token8.type;
        java.lang.String str10 = token8.toString();
        boolean boolean11 = token8.isReady;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token12 = cSVLexer4.nextToken(token8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type9.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "INVALID []" + "'", str10, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = cSVLexer4.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type15 = token14.type;
        java.lang.String str16 = token14.toString();
        org.apache.commons.csv.Token.Type type17 = token14.type;
        java.lang.StringBuilder stringBuilder18 = token14.content;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token19 = cSVLexer5.nextToken(token14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type15.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "INVALID []" + "'", str16, "INVALID []");
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type17.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder18);
        org.junit.Assert.assertEquals(stringBuilder18.toString(), "");
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat2);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormat2.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormatBuilder4.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = null;
        org.apache.commons.csv.CSVLexer cSVLexer7 = new org.apache.commons.csv.CSVLexer(cSVFormat5, extendedBufferedReader6);
        boolean boolean9 = cSVLexer7.isEscape(0);
        boolean boolean11 = cSVLexer7.isEscape(0);
        boolean boolean13 = cSVLexer7.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer7.format;
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) cSVFormat14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type14 = token13.type;
        java.lang.String str15 = token13.toString();
        org.apache.commons.csv.Token.Type type16 = token13.type;
        java.lang.StringBuilder stringBuilder17 = token13.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder17);
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type20 = token19.type;
        java.lang.String str21 = token19.toString();
        org.apache.commons.csv.Token.Type type22 = org.apache.commons.csv.Token.Type.EORECORD;
        token19.type = type22;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token24 = cSVLexer5.nextToken(token19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type14.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "INVALID []" + "'", str15, "INVALID []");
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type16.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder17);
        org.junit.Assert.assertEquals(stringBuilder17.toString(), "");
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type20.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "INVALID []" + "'", str21, "INVALID []");
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type22.equals(org.apache.commons.csv.Token.Type.EORECORD));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type14 = token13.type;
        java.lang.String str15 = token13.toString();
        org.apache.commons.csv.Token.Type type16 = token13.type;
        java.lang.StringBuilder stringBuilder17 = token13.content;
        token13.isReady = true;
        token13.isReady = true;
        boolean boolean22 = token13.isReady;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token23 = cSVLexer5.nextToken(token13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type14.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "INVALID []" + "'", str15, "INVALID []");
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type16.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder17);
        org.junit.Assert.assertEquals(stringBuilder17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.apache.commons.csv.CSVFormat cSVFormat0 = null;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVLexer cSVLexer2 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.Token token11 = new org.apache.commons.csv.Token();
        token11.isReady = false;
        org.apache.commons.csv.Token.Type type14 = org.apache.commons.csv.Token.Type.INVALID;
        token11.type = type14;
        org.apache.commons.csv.Token token16 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type17 = token16.type;
        java.lang.String str18 = token16.toString();
        org.apache.commons.csv.Token.Type type19 = org.apache.commons.csv.Token.Type.EORECORD;
        token16.type = type19;
        token11.type = type19;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token22 = cSVLexer5.nextToken(token11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type14.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type17.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "INVALID []" + "'", str18, "INVALID []");
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type19.equals(org.apache.commons.csv.Token.Type.EORECORD));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isEscaping();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        java.lang.String str4 = cSVFormat0.getNullToString();
        boolean boolean5 = cSVFormat0.isCommentingEnabled();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) (short) 1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token16 = cSVLexer5.nextToken(token12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isWhitespace(6);
        java.lang.StringBuilder stringBuilder6 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVLexer3.trimTrailingSpaces(stringBuilder6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.io.Reader reader14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable15 = cSVFormat13.parse(reader14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean15 = cSVLexer5.readEndOfLine((int) (byte) 0);
        boolean boolean17 = cSVLexer5.isEndOfFile(100);
        org.apache.commons.csv.Token token18 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type19 = token18.type;
        java.lang.String str20 = token18.toString();
        boolean boolean21 = token18.isReady;
        java.lang.String str22 = token18.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token23 = cSVLexer5.nextToken(token18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type19.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "INVALID []" + "'", str20, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "INVALID []" + "'", str22, "INVALID []");
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVLexer4.format;
        org.apache.commons.csv.Token token8 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type9 = token8.type;
        token8.isReady = false;
        boolean boolean12 = token8.isReady;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token13 = cSVLexer4.nextToken(token8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type9.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        java.lang.StringBuilder stringBuilder14 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVLexer5.trimTrailingSpaces(stringBuilder14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isCommentStart((int) ',');
        boolean boolean19 = cSVLexer15.ignoreSurroundingSpaces;
        org.apache.commons.csv.Token token20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token21 = cSVLexer15.nextToken(token20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int12 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean7 = cSVLexer3.isEscape((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = cSVLexer3.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        boolean boolean15 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) 'a');
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = token12.type;
        token12.isReady = false;
        boolean boolean16 = token12.isReady;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token17 = cSVLexer5.nextToken(token12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type13.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        // The following exception was thrown during execution in test generation
        try {
            long long12 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isCommentStart(1);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) ',');
        org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type14 = token13.type;
        java.lang.String str15 = token13.toString();
        token13.isReady = false;
        java.lang.String str18 = token13.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token19 = cSVLexer5.nextToken(token13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type14.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "INVALID []" + "'", str15, "INVALID []");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "INVALID []" + "'", str18, "INVALID []");
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        org.apache.commons.csv.Token token17 = new org.apache.commons.csv.Token();
        token17.isReady = false;
        org.apache.commons.csv.Token.Type type20 = org.apache.commons.csv.Token.Type.INVALID;
        token17.type = type20;
        org.apache.commons.csv.Token token22 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type23 = token22.type;
        java.lang.String str24 = token22.toString();
        org.apache.commons.csv.Token.Type type25 = org.apache.commons.csv.Token.Type.EORECORD;
        token22.type = type25;
        token17.type = type25;
        java.lang.StringBuilder stringBuilder28 = token17.content;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token29 = cSVLexer15.nextToken(token17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type20.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type23.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "INVALID []" + "'", str24, "INVALID []");
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type25.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder28);
        org.junit.Assert.assertEquals(stringBuilder28.toString(), "");
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        boolean boolean14 = cSVLexer5.readEndOfLine((int) (byte) 1);
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        boolean boolean17 = cSVLexer5.isDelimiter(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote15 = null;
        org.apache.commons.csv.Quote quote24 = null;
        org.apache.commons.csv.Quote quote33 = null;
        org.apache.commons.csv.Quote quote42 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote42, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote33, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray55);
        org.apache.commons.csv.Quote quote60 = null;
        org.apache.commons.csv.Quote quote69 = null;
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat83 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote69, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder84 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote60, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder85 = cSVFormatBuilder57.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder86 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote24, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray82);
        org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote15, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray82);
        java.lang.String str88 = cSVFormat12.format((java.lang.Object[]) strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder89 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat12);
        boolean boolean90 = cSVFormat12.getIgnoreSurroundingSpaces();
        java.lang.Object[] objArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = cSVFormat12.format(objArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(cSVFormatBuilder85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertNotNull(cSVFormatBuilder89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = cSVLexer15.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.isEscape((int) (short) 10);
        boolean boolean15 = cSVLexer5.isStartOfLine(100);
        org.apache.commons.csv.Token token16 = new org.apache.commons.csv.Token();
        token16.isReady = false;
        org.apache.commons.csv.Token.Type type19 = org.apache.commons.csv.Token.Type.INVALID;
        token16.type = type19;
        org.apache.commons.csv.Token token21 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type22 = token21.type;
        java.lang.String str23 = token21.toString();
        org.apache.commons.csv.Token.Type type24 = org.apache.commons.csv.Token.Type.EORECORD;
        token21.type = type24;
        token16.type = type24;
        boolean boolean27 = token16.isReady;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token28 = cSVLexer5.nextToken(token16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type19.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type22.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "INVALID []" + "'", str23, "INVALID []");
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type24.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = cSVLexer5.in;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(extendedBufferedReader13);
        org.junit.Assert.assertNull(extendedBufferedReader14);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean10 = cSVLexer5.ignoreEmptyLines;
        java.lang.Class<?> wildcardClass11 = cSVLexer5.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.io.Reader reader14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable15 = cSVFormat13.parse(reader14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.StringBuilder stringBuilder9 = token7.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder9);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = cSVLexer3.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        org.apache.commons.csv.Token token15 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type16 = token15.type;
        java.lang.String str17 = token15.toString();
        org.apache.commons.csv.Token.Type type18 = token15.type;
        java.lang.StringBuilder stringBuilder19 = token15.content;
        java.lang.StringBuilder stringBuilder20 = token15.content;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token21 = cSVLexer5.nextToken(token15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type16.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "INVALID []" + "'", str17, "INVALID []");
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type18.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder19);
        org.junit.Assert.assertEquals(stringBuilder19.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder20);
        org.junit.Assert.assertEquals(stringBuilder20.toString(), "");
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEndOfFile((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type20 = token19.type;
        java.lang.String str21 = token19.toString();
        boolean boolean22 = token19.isReady;
        java.lang.String str23 = token19.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token24 = cSVLexer18.nextToken(token19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type20.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "INVALID []" + "'", str21, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "INVALID []" + "'", str23, "INVALID []");
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isWhitespace((int) '\\');
        // The following exception was thrown during execution in test generation
        try {
            int int16 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader32 = cSVLexer19.in;
        boolean boolean34 = cSVLexer19.isStartOfLine((int) '\n');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(extendedBufferedReader32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        boolean boolean17 = cSVLexer5.isWhitespace((int) '\r');
        // The following exception was thrown during execution in test generation
        try {
            int int18 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean17 = cSVLexer5.isQuoteChar(6);
        org.apache.commons.csv.Token token18 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type19 = token18.type;
        java.lang.String str20 = token18.toString();
        org.apache.commons.csv.Token.Type type21 = token18.type;
        java.lang.StringBuilder stringBuilder22 = token18.content;
        token18.isReady = true;
        token18.isReady = true;
        boolean boolean27 = token18.isReady;
        org.apache.commons.csv.Token.Type type28 = token18.type;
        java.lang.String str29 = token18.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token30 = cSVLexer5.nextToken(token18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type19.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "INVALID []" + "'", str20, "INVALID []");
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder22);
        org.junit.Assert.assertEquals(stringBuilder22.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type28.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "INVALID []" + "'", str29, "INVALID []");
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean7 = cSVLexer3.isDelimiter(0);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = cSVLexer3.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = new org.apache.commons.csv.CSVParser("INVALID []", cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isCommentStart((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        // The following exception was thrown during execution in test generation
        try {
            long long6 = cSVLexer3.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat0.getNullToString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat0.toBuilder();
        java.lang.Class<?> wildcardClass17 = cSVFormatBuilder16.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean16 = cSVLexer5.ignoreEmptyLines;
        boolean boolean18 = cSVLexer5.isDelimiter((int) '\t');
        // The following exception was thrown during execution in test generation
        try {
            long long19 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        boolean boolean13 = cSVLexer5.readEndOfLine(10);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        java.lang.String str14 = cSVFormat12.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str14, "Delimiter=<,> QuoteChar=<\">");
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = cSVLexer15.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        token12.isReady = false;
        token12.isReady = true;
        token12.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token18 = cSVLexer5.nextToken(token12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.isDelimiter((int) (byte) 10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getNullToString();
        java.lang.String[] strArray15 = null;
        java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null;
        org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) (byte) 100);
        boolean boolean20 = cSVRecord19.isConsistent();
        java.util.Spliterator<java.lang.String> strSpliterator21 = cSVRecord19.spliterator();
        boolean boolean22 = cSVRecord19.isConsistent();
        boolean boolean23 = cSVRecord19.isConsistent();
        long long24 = cSVRecord19.getRecordNumber();
        long long25 = cSVRecord19.getRecordNumber();
        boolean boolean26 = cSVFormat13.equals((java.lang.Object) cSVRecord19);
        java.lang.Character char27 = cSVFormat13.getCommentStart();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(char27);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isQuoteChar((int) '4');
        boolean boolean19 = cSVLexer15.ignoreSurroundingSpaces;
        // The following exception was thrown during execution in test generation
        try {
            int int20 = cSVLexer15.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        org.apache.commons.csv.Token token15 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type16 = token15.type;
        token15.isReady = false;
        boolean boolean19 = token15.isReady;
        java.lang.StringBuilder stringBuilder20 = token15.content;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token21 = cSVLexer5.nextToken(token15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type16.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(stringBuilder20);
        org.junit.Assert.assertEquals(stringBuilder20.toString(), "");
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine(0);
        boolean boolean8 = cSVLexer4.isEndOfFile((int) (byte) 1);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVLexer4.format;
        java.lang.Class<?> wildcardClass10 = cSVFormat9.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        org.apache.commons.csv.Token token15 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type16 = token15.type;
        java.lang.String str17 = token15.toString();
        org.apache.commons.csv.Token.Type type18 = org.apache.commons.csv.Token.Type.EORECORD;
        token15.type = type18;
        java.lang.StringBuilder stringBuilder20 = token15.content;
        token15.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token22 = cSVLexer5.nextToken(token15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type16.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "INVALID []" + "'", str17, "INVALID []");
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type18.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder20);
        org.junit.Assert.assertEquals(stringBuilder20.toString(), "");
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = cSVLexer5.in;
        boolean boolean16 = cSVLexer5.isEndOfFile(10);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(extendedBufferedReader13);
        org.junit.Assert.assertNull(extendedBufferedReader14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean12 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder14 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormatBuilder14);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean15 = cSVLexer5.readEndOfLine((int) (byte) 0);
        boolean boolean17 = cSVLexer5.isEndOfFile(100);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isCommentStart((int) ',');
        boolean boolean20 = cSVLexer15.readEndOfLine((int) (short) 1);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean10 = cSVLexer5.ignoreEmptyLines;
        boolean boolean11 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = token12.type;
        java.lang.StringBuilder stringBuilder14 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder14);
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type13.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder14);
        org.junit.Assert.assertEquals(stringBuilder14.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        org.apache.commons.csv.Token token17 = new org.apache.commons.csv.Token();
        token17.isReady = false;
        token17.isReady = true;
        token17.isReady = true;
        boolean boolean24 = token17.isReady;
        token17.reset();
        org.apache.commons.csv.Token token26 = new org.apache.commons.csv.Token();
        token26.isReady = false;
        org.apache.commons.csv.Token.Type type29 = org.apache.commons.csv.Token.Type.INVALID;
        token26.type = type29;
        token17.type = type29;
        token17.isReady = false;
        java.lang.StringBuilder stringBuilder34 = token17.content;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token35 = cSVLexer5.nextToken(token17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type29.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder34);
        org.junit.Assert.assertEquals(stringBuilder34.toString(), "");
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.CSVParser cSVParser14 = new org.apache.commons.csv.CSVParser("Delimiter=<,> QuoteChar=<\">", cSVFormat13);
        long long15 = cSVParser14.getRecordNumber();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean17 = cSVLexer5.isQuoteChar(6);
        boolean boolean18 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        token19.isReady = false;
        token19.isReady = true;
        token19.isReady = true;
        boolean boolean26 = token19.isReady;
        token19.reset();
        org.apache.commons.csv.Token token28 = new org.apache.commons.csv.Token();
        token28.isReady = false;
        org.apache.commons.csv.Token.Type type31 = org.apache.commons.csv.Token.Type.INVALID;
        token28.type = type31;
        token19.type = type31;
        token19.isReady = false;
        org.apache.commons.csv.Token token36 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type37 = token36.type;
        java.lang.String str38 = token36.toString();
        org.apache.commons.csv.Token.Type type39 = org.apache.commons.csv.Token.Type.EORECORD;
        token36.type = type39;
        org.apache.commons.csv.Token.Type type41 = token36.type;
        token19.type = type41;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token43 = cSVLexer5.nextToken(token19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type31.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type37.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "INVALID []" + "'", str38, "INVALID []");
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type39.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type41.equals(org.apache.commons.csv.Token.Type.EORECORD));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) (short) 1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        token12.isReady = false;
        token12.isReady = true;
        token12.isReady = true;
        boolean boolean19 = token12.isReady;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token20 = cSVLexer5.nextToken(token12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat2);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormat2.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormatBuilder4.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = null;
        org.apache.commons.csv.CSVLexer cSVLexer7 = new org.apache.commons.csv.CSVLexer(cSVFormat5, extendedBufferedReader6);
        boolean boolean9 = cSVLexer7.isEscape(0);
        boolean boolean11 = cSVLexer7.isEscape(0);
        boolean boolean13 = cSVLexer7.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer7.format;
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        boolean boolean17 = cSVFormat14.isCommentingEnabled();
        boolean boolean18 = cSVFormat14.isEscaping();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser19 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote15 = null;
        org.apache.commons.csv.Quote quote24 = null;
        org.apache.commons.csv.Quote quote33 = null;
        org.apache.commons.csv.Quote quote42 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote42, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote33, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray55);
        org.apache.commons.csv.Quote quote60 = null;
        org.apache.commons.csv.Quote quote69 = null;
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat83 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote69, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder84 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote60, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder85 = cSVFormatBuilder57.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder86 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote24, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray82);
        org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote15, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray82);
        java.lang.String str88 = cSVFormat12.format((java.lang.Object[]) strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder89 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat12);
        boolean boolean90 = cSVFormat12.getIgnoreSurroundingSpaces();
        java.lang.String str91 = cSVFormat12.toString();
        java.io.Reader reader92 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable93 = cSVFormat12.parse(reader92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(cSVFormatBuilder85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertNotNull(cSVFormatBuilder89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str91, "Delimiter=<,> QuoteChar=<\">");
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.StringBuilder stringBuilder9 = token7.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder9);
        boolean boolean12 = cSVLexer3.isEndOfFile((int) (byte) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer3.format;
        java.lang.Class<?> wildcardClass14 = cSVLexer3.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean12 = cSVLexer5.ignoreSurroundingSpaces;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader32 = cSVLexer19.in;
        // The following exception was thrown during execution in test generation
        try {
            int int33 = cSVLexer19.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(extendedBufferedReader32);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isCommentStart((int) (short) 10);
        boolean boolean14 = cSVLexer5.isCommentStart(0);
        boolean boolean15 = cSVLexer5.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        boolean boolean14 = cSVLexer5.isCommentStart((int) ',');
        boolean boolean16 = cSVLexer5.isEscape((-2));
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        boolean boolean8 = cSVLexer5.isEndOfFile((-1));
        org.apache.commons.csv.Token token9 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type10 = token9.type;
        java.lang.String str11 = token9.toString();
        org.apache.commons.csv.Token.Type type12 = token9.type;
        java.lang.StringBuilder stringBuilder13 = token9.content;
        token9.isReady = true;
        token9.isReady = true;
        org.apache.commons.csv.Token.Type type18 = token9.type;
        org.apache.commons.csv.Token.Type type19 = null;
        token9.type = type19;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token21 = cSVLexer5.nextToken(token9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type10.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "INVALID []" + "'", str11, "INVALID []");
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type12.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder13);
        org.junit.Assert.assertEquals(stringBuilder13.toString(), "");
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type18.equals(org.apache.commons.csv.Token.Type.INVALID));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat13.toString();
        java.lang.Class<?> wildcardClass16 = cSVFormat13.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str15, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        java.lang.String str1 = cSVFormat0.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean5 = cSVFormat0.isCommentingEnabled();
        java.lang.String[] strArray6 = cSVFormat0.getHeader();
        java.io.Reader reader7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable8 = cSVFormat0.parse(reader7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored" + "'", str1, "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored");
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strArray6);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        boolean boolean8 = cSVLexer5.isWhitespace((int) '\\');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader9 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(extendedBufferedReader9);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean17 = cSVLexer5.isEscape(6);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isCommentStart((int) (byte) 0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean11 = cSVLexer5.isWhitespace(6);
        boolean boolean13 = cSVLexer5.isEndOfFile(0);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.isEndOfFile(100);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = cSVLexer15.in;
        boolean boolean20 = cSVLexer15.isDelimiter(0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(extendedBufferedReader18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isWhitespace((int) '\\');
        org.apache.commons.csv.Token token16 = new org.apache.commons.csv.Token();
        java.lang.StringBuilder stringBuilder17 = token16.content;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token18 = cSVLexer5.nextToken(token16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(stringBuilder17);
        org.junit.Assert.assertEquals(stringBuilder17.toString(), "");
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormatBuilder4.build();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormatBuilder4.build();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        java.lang.String[] strArray8 = cSVFormat6.getHeader();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader9 = null;
        org.apache.commons.csv.CSVLexer cSVLexer10 = new org.apache.commons.csv.CSVLexer(cSVFormat6, extendedBufferedReader9);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = cSVLexer10.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray8);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isEndOfFile((int) ',');
        boolean boolean17 = cSVLexer5.isEndOfFile((int) (byte) 0);
        boolean boolean19 = cSVLexer5.isEscape((int) ',');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean7 = cSVLexer3.isDelimiter((int) (byte) -1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        boolean boolean9 = cSVLexer5.isEndOfFile((int) (byte) 100);
        boolean boolean10 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.Token token17 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type18 = token17.type;
        java.lang.String str19 = token17.toString();
        org.apache.commons.csv.Token.Type type20 = org.apache.commons.csv.Token.Type.COMMENT;
        token17.type = type20;
        token17.reset();
        org.apache.commons.csv.Token.Type type23 = token17.type;
        token17.isReady = false;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token26 = cSVLexer5.nextToken(token17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type18.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "INVALID []" + "'", str19, "INVALID []");
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type20.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type23.equals(org.apache.commons.csv.Token.Type.INVALID));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = new org.apache.commons.csv.CSVParser("\r\n", cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean16 = cSVLexer5.ignoreEmptyLines;
        boolean boolean18 = cSVLexer5.isStartOfLine((int) (short) 100);
        org.apache.commons.csv.Token token19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token20 = cSVLexer5.nextToken(token19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine(0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer4.in;
        // The following exception was thrown during execution in test generation
        try {
            int int8 = cSVLexer4.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(extendedBufferedReader7);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        boolean boolean13 = cSVLexer6.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer6.format;
        boolean boolean15 = cSVFormat14.isQuoting();
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("[hi!]", cSVFormat14);
        java.io.Reader reader17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable18 = cSVFormat14.parse(reader17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("", cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder17 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder19 = cSVFormatBuilder17.withRecordSeparator("hi!\t\thi!\t\thi!\thi!");
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormatBuilder17);
        org.junit.Assert.assertNotNull(cSVFormatBuilder19);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = new org.apache.commons.csv.CSVParser("Delimiter=<,> QuoteChar=<\">", cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isEndOfFile((int) ',');
        boolean boolean17 = cSVLexer5.isDelimiter((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat0.getNullToString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat0.toBuilder();
        java.io.Reader reader17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable18 = cSVFormatBuilder16.parse(reader17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isQuoteChar((int) '4');
        boolean boolean19 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean21 = cSVLexer15.isEscape((int) '#');
        boolean boolean23 = cSVLexer15.readEndOfLine((int) '\f');
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVFormat12.isCommentingEnabled();
        java.lang.Character char14 = cSVFormat12.getEscape();
        boolean boolean15 = cSVFormat12.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isEndOfFile((int) ',');
        boolean boolean17 = cSVLexer5.isEndOfFile((int) (byte) 0);
        boolean boolean19 = cSVLexer5.isWhitespace((int) (byte) 10);
        boolean boolean20 = cSVLexer5.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader32 = cSVLexer19.in;
        boolean boolean34 = cSVLexer19.isCommentStart((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = cSVLexer19.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(extendedBufferedReader32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        boolean boolean8 = cSVLexer3.isQuoteChar((int) '4');
        boolean boolean10 = cSVLexer3.isWhitespace((int) (byte) 10);
        org.apache.commons.csv.Token token11 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type12 = token11.type;
        java.lang.String str13 = token11.toString();
        token11.isReady = false;
        java.lang.String str16 = token11.toString();
        java.lang.String str17 = token11.toString();
        boolean boolean18 = token11.isReady;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token19 = cSVLexer3.nextToken(token11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type12.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "INVALID []" + "'", str13, "INVALID []");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "INVALID []" + "'", str16, "INVALID []");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "INVALID []" + "'", str17, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isEndOfFile((int) ',');
        boolean boolean17 = cSVLexer5.isDelimiter((int) (byte) 10);
        org.apache.commons.csv.Token token18 = new org.apache.commons.csv.Token();
        token18.isReady = false;
        org.apache.commons.csv.Token.Type type21 = org.apache.commons.csv.Token.Type.INVALID;
        token18.type = type21;
        org.apache.commons.csv.Token token23 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type24 = token23.type;
        java.lang.String str25 = token23.toString();
        org.apache.commons.csv.Token.Type type26 = org.apache.commons.csv.Token.Type.EORECORD;
        token23.type = type26;
        token18.type = type26;
        org.apache.commons.csv.Token.Type type29 = token18.type;
        java.lang.String str30 = token18.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token31 = cSVLexer5.nextToken(token18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type24.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "INVALID []" + "'", str25, "INVALID []");
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type26.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type29.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "EORECORD []" + "'", str30, "EORECORD []");
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean18 = cSVLexer5.isEndOfFile((int) (short) 10);
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type20 = token19.type;
        java.lang.String str21 = token19.toString();
        boolean boolean22 = token19.isReady;
        java.lang.String str23 = token19.toString();
        java.lang.StringBuilder stringBuilder24 = token19.content;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token25 = cSVLexer5.nextToken(token19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type20.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "INVALID []" + "'", str21, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "INVALID []" + "'", str23, "INVALID []");
        org.junit.Assert.assertNotNull(stringBuilder24);
        org.junit.Assert.assertEquals(stringBuilder24.toString(), "");
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean8 = cSVLexer5.ignoreEmptyLines;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        boolean boolean14 = cSVLexer5.readEndOfLine((int) (byte) 1);
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        boolean boolean17 = cSVLexer5.isDelimiter((int) '\t');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        java.lang.Character char19 = cSVFormat13.getCommentStart();
        java.lang.String str20 = cSVFormat13.toString();
        java.lang.String[] strArray21 = cSVFormat13.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str20, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNull(strArray21);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat7);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader9 = null;
        org.apache.commons.csv.CSVLexer cSVLexer10 = new org.apache.commons.csv.CSVLexer(cSVFormat7, extendedBufferedReader9);
        boolean boolean12 = cSVLexer10.isEndOfFile((int) '\n');
        boolean boolean13 = cSVLexer10.ignoreEmptyLines;
        org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type15 = token14.type;
        java.lang.StringBuilder stringBuilder16 = token14.content;
        cSVLexer10.trimTrailingSpaces(stringBuilder16);
        cSVLexer4.trimTrailingSpaces(stringBuilder16);
        boolean boolean20 = cSVLexer4.isEscape(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type15.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder16);
        org.junit.Assert.assertEquals(stringBuilder16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean5 = cSVLexer4.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVLexer5.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader9 = cSVLexer5.in;
        boolean boolean11 = cSVLexer5.isCommentStart((-2));
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(extendedBufferedReader9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        boolean boolean8 = cSVLexer3.isQuoteChar((int) '4');
        boolean boolean9 = cSVLexer3.ignoreEmptyLines;
        java.lang.StringBuilder stringBuilder10 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVLexer3.trimTrailingSpaces(stringBuilder10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormatBuilder4.build();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormatBuilder4.build();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        java.lang.String[] strArray8 = cSVFormat6.getHeader();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader9 = null;
        org.apache.commons.csv.CSVLexer cSVLexer10 = new org.apache.commons.csv.CSVLexer(cSVFormat6, extendedBufferedReader9);
        java.lang.Character char11 = cSVFormat6.getEscape();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader12 = null;
        org.apache.commons.csv.CSVLexer cSVLexer13 = new org.apache.commons.csv.CSVLexer(cSVFormat6, extendedBufferedReader12);
        java.lang.Object[] objArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = cSVFormat6.format(objArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray8);
        org.junit.Assert.assertNull(char11);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.isEndOfFile(100);
        boolean boolean19 = cSVLexer15.isQuoteChar((int) '\"');
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine(0);
        boolean boolean8 = cSVLexer4.isEndOfFile((int) (byte) 1);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVLexer4.format;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = cSVLexer4.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean11 = cSVLexer5.isWhitespace(6);
        boolean boolean13 = cSVLexer5.isEndOfFile(0);
        boolean boolean15 = cSVLexer5.isWhitespace((int) 'a');
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer5.isWhitespace((int) '\\');
        // The following exception was thrown during execution in test generation
        try {
            long long19 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = cSVFormatBuilder2.withEscape('\\');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = cSVFormatBuilder6.withQuoteChar('\b');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormatBuilder8.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader10 = null;
        org.apache.commons.csv.CSVLexer cSVLexer11 = new org.apache.commons.csv.CSVLexer(cSVFormat9, extendedBufferedReader10);
        java.io.Reader reader12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable13 = cSVFormat9.parse(reader12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
        org.junit.Assert.assertNotNull(cSVFormatBuilder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = cSVLexer5.in;
        boolean boolean16 = cSVLexer5.isQuoteChar((int) '#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(extendedBufferedReader13);
        org.junit.Assert.assertNull(extendedBufferedReader14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = null;
        org.apache.commons.csv.CSVLexer cSVLexer14 = new org.apache.commons.csv.CSVLexer(cSVFormat12, extendedBufferedReader13);
        boolean boolean16 = cSVLexer14.isEndOfFile(1);
        org.apache.commons.csv.Token token17 = new org.apache.commons.csv.Token();
        java.lang.String str18 = token17.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token19 = cSVLexer14.nextToken(token17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "INVALID []" + "'", str18, "INVALID []");
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        token19.isReady = false;
        token19.isReady = true;
        token19.reset();
        java.lang.StringBuilder stringBuilder25 = token19.content;
        cSVLexer18.trimTrailingSpaces(stringBuilder25);
        boolean boolean28 = cSVLexer18.isEndOfFile((int) (short) 100);
        boolean boolean30 = cSVLexer18.isStartOfLine((int) (short) 0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(stringBuilder25);
        org.junit.Assert.assertEquals(stringBuilder25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        boolean boolean2 = cSVFormat1.isQuoting();
        org.apache.commons.csv.CSVParser cSVParser3 = new org.apache.commons.csv.CSVParser("Delimiter=< > Escape=<\b> QuoteChar=<a> CommentStart=<\t>", cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat0.getNullToString();
        java.lang.Character char16 = cSVFormat0.getCommentStart();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(char16);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.apache.commons.csv.Quote quote2 = null;
        org.apache.commons.csv.Quote quote11 = null;
        org.apache.commons.csv.Quote quote20 = null;
        org.apache.commons.csv.Quote quote29 = null;
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote29, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray42);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder44 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote20, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray42);
        org.apache.commons.csv.Quote quote47 = null;
        org.apache.commons.csv.Quote quote56 = null;
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat70 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote56, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder71 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote47, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder72 = cSVFormatBuilder44.withHeader(strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder73 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote11, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat74 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray69);
        org.apache.commons.csv.Quote quote75 = cSVFormat74.getQuotePolicy();
        java.lang.String[] strArray76 = cSVFormat74.getHeader();
        java.lang.String[] strArray77 = cSVFormat74.getHeader();
        boolean boolean78 = cSVFormat74.isQuoting();
        org.apache.commons.csv.CSVFormat cSVFormat79 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder80 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat79);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder81 = cSVFormat79.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormatBuilder81.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader83 = null;
        org.apache.commons.csv.CSVLexer cSVLexer84 = new org.apache.commons.csv.CSVLexer(cSVFormat82, extendedBufferedReader83);
        boolean boolean85 = cSVLexer84.ignoreEmptyLines;
        boolean boolean87 = cSVLexer84.isEndOfFile((int) (short) 10);
        boolean boolean89 = cSVLexer84.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat90 = cSVLexer84.format;
        boolean boolean92 = cSVLexer84.isEscape((int) (short) 10);
        boolean boolean94 = cSVLexer84.isStartOfLine(100);
        boolean boolean95 = cSVLexer84.ignoreSurroundingSpaces;
        boolean boolean96 = cSVFormat74.equals((java.lang.Object) cSVLexer84);
        boolean boolean98 = cSVLexer84.readEndOfLine((int) ' ');
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(cSVFormatBuilder72);
        org.junit.Assert.assertNull(quote75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormatBuilder81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(cSVFormat90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        boolean boolean16 = cSVLexer5.isStartOfLine((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isQuoteChar((int) '4');
        boolean boolean19 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean21 = cSVLexer15.isEscape((int) '#');
        org.apache.commons.csv.Token token22 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type23 = org.apache.commons.csv.Token.Type.TOKEN;
        token22.type = type23;
        java.lang.String str25 = token22.toString();
        java.lang.StringBuilder stringBuilder26 = token22.content;
        org.apache.commons.csv.Token token27 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type28 = token27.type;
        java.lang.String str29 = token27.toString();
        boolean boolean30 = token27.isReady;
        java.lang.String str31 = token27.toString();
        org.apache.commons.csv.Token token32 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type33 = org.apache.commons.csv.Token.Type.COMMENT;
        token32.type = type33;
        token27.type = type33;
        token22.type = type33;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token37 = cSVLexer15.nextToken(token22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type23.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "TOKEN []" + "'", str25, "TOKEN []");
        org.junit.Assert.assertNotNull(stringBuilder26);
        org.junit.Assert.assertEquals(stringBuilder26.toString(), "");
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type28.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "INVALID []" + "'", str29, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "INVALID []" + "'", str31, "INVALID []");
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type33.equals(org.apache.commons.csv.Token.Type.COMMENT));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader8 = cSVLexer5.in;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertNull(extendedBufferedReader8);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat2);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormat2.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = cSVFormatBuilder4.withRecordSeparator('\b');
        org.apache.commons.csv.Quote quote7 = org.apache.commons.csv.Quote.MINIMAL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = cSVFormatBuilder6.withQuotePolicy(quote7);
        org.apache.commons.csv.Quote quote17 = null;
        org.apache.commons.csv.Quote quote26 = null;
        org.apache.commons.csv.Quote quote35 = null;
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat49 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote35, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray48);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder50 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote26, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray48);
        org.apache.commons.csv.CSVFormat cSVFormat51 = new org.apache.commons.csv.CSVFormat('\f', (java.lang.Character) '\\', quote17, (java.lang.Character) '\\', (java.lang.Character) '\f', true, true, "hi!,,hi!,,hi!,hi!", "Delimiter=<,> QuoteChar=<\">", strArray48);
        org.apache.commons.csv.CSVFormat cSVFormat52 = new org.apache.commons.csv.CSVFormat('4', (java.lang.Character) ',', quote7, (java.lang.Character) '\r', (java.lang.Character) ' ', false, true, "COMMENT []", "TOKEN []", strArray48);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader53 = null;
        org.apache.commons.csv.CSVLexer cSVLexer54 = new org.apache.commons.csv.CSVLexer(cSVFormat52, extendedBufferedReader53);
        org.apache.commons.csv.Token token55 = new org.apache.commons.csv.Token();
        token55.isReady = false;
        org.apache.commons.csv.Token.Type type58 = org.apache.commons.csv.Token.Type.INVALID;
        token55.type = type58;
        org.apache.commons.csv.Token.Type type60 = org.apache.commons.csv.Token.Type.INVALID;
        token55.type = type60;
        java.lang.StringBuilder stringBuilder62 = token55.content;
        java.lang.StringBuilder stringBuilder63 = token55.content;
        boolean boolean64 = token55.isReady;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token65 = cSVLexer54.nextToken(token55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
        org.junit.Assert.assertTrue("'" + quote7 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote7.equals(org.apache.commons.csv.Quote.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormatBuilder8);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type58.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type60.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder62);
        org.junit.Assert.assertEquals(stringBuilder62.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder63);
        org.junit.Assert.assertEquals(stringBuilder63.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat1, extendedBufferedReader3);
        java.lang.String str5 = cSVFormat1.getNullToString();
        java.lang.String str6 = cSVFormat1.toString();
        org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser("hi!,,hi!,,hi!,hi!", cSVFormat1);
        org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord();
        long long9 = cSVParser7.getRecordNumber();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str6, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVRecord8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        boolean boolean8 = cSVLexer5.isEndOfFile((-1));
        boolean boolean9 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer5.isDelimiter((int) (byte) 100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        // The following exception was thrown during execution in test generation
        try {
            int int12 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.Token token6 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type7 = token6.type;
        java.lang.String str8 = token6.toString();
        org.apache.commons.csv.Token.Type type9 = org.apache.commons.csv.Token.Type.EORECORD;
        token6.type = type9;
        java.lang.StringBuilder stringBuilder11 = token6.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        char char14 = cSVFormat13.getDelimiter();
        java.lang.String str15 = cSVFormat13.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type7.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INVALID []" + "'", str8, "INVALID []");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type9.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + ',' + "'", char14 == ',');
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\r\n" + "'", str15, "\r\n");
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.isWhitespace((int) (short) 0);
        boolean boolean18 = cSVLexer5.isCommentStart(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        java.lang.String[] strArray2 = cSVFormat0.getHeader();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = cSVLexer4.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(extendedBufferedReader5);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.isEscape((int) (short) 10);
        boolean boolean15 = cSVLexer5.isDelimiter((-2));
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        boolean boolean13 = cSVLexer5.readEndOfLine(10);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer5.format;
        boolean boolean16 = cSVLexer5.isQuoteChar((int) (short) 1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.readEndOfLine((int) ',');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        boolean boolean7 = cSVLexer3.ignoreSurroundingSpaces;
        boolean boolean9 = cSVLexer3.isQuoteChar((int) (byte) 100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean14 = cSVFormat13.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isCommentStart((int) ',');
        // The following exception was thrown during execution in test generation
        try {
            int int19 = cSVLexer15.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.Token token6 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type7 = token6.type;
        java.lang.String str8 = token6.toString();
        org.apache.commons.csv.Token.Type type9 = org.apache.commons.csv.Token.Type.EORECORD;
        token6.type = type9;
        java.lang.StringBuilder stringBuilder11 = token6.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        char char14 = cSVFormat13.getDelimiter();
        java.lang.Character char15 = cSVFormat13.getEscape();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type7.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INVALID []" + "'", str8, "INVALID []");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type9.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + ',' + "'", char14 == ',');
        org.junit.Assert.assertNull(char15);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader12 = cSVLexer5.in;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(extendedBufferedReader12);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder13 = cSVFormat12.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder14 = cSVFormat12.toBuilder();
        boolean boolean15 = cSVFormat12.isQuoting();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder13);
        org.junit.Assert.assertNotNull(cSVFormatBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat1, extendedBufferedReader3);
        java.lang.String str5 = cSVFormat1.getNullToString();
        java.lang.String str6 = cSVFormat1.toString();
        org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser("hi!,,hi!,,hi!,hi!", cSVFormat1);
        org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord();
        boolean boolean9 = cSVRecord8.isConsistent();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str6, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVRecord8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        boolean boolean8 = cSVLexer3.isQuoteChar((int) '4');
        boolean boolean9 = cSVLexer3.ignoreEmptyLines;
        boolean boolean11 = cSVLexer3.isStartOfLine((-1));
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = token12.type;
        java.lang.String str14 = token12.toString();
        org.apache.commons.csv.Token.Type type15 = org.apache.commons.csv.Token.Type.EORECORD;
        token12.type = type15;
        java.lang.StringBuilder stringBuilder17 = token12.content;
        token12.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token19 = cSVLexer3.nextToken(token12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type13.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "INVALID []" + "'", str14, "INVALID []");
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type15.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder17);
        org.junit.Assert.assertEquals(stringBuilder17.toString(), "");
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean7 = cSVLexer5.ignoreSurroundingSpaces;
        // The following exception was thrown during execution in test generation
        try {
            int int8 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        boolean boolean18 = cSVLexer5.isWhitespace((int) '\n');
        // The following exception was thrown during execution in test generation
        try {
            long long19 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getNullToString();
        java.lang.Character char15 = cSVFormat13.getEscape();
        char char16 = cSVFormat13.getDelimiter();
        org.apache.commons.csv.Quote quote17 = cSVFormat13.getQuotePolicy();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + ',' + "'", char16 == ',');
        org.junit.Assert.assertNull(quote17);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean12 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type14 = org.apache.commons.csv.Token.Type.TOKEN;
        token13.type = type14;
        java.lang.StringBuilder stringBuilder16 = token13.content;
        token13.isReady = false;
        token13.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token20 = cSVLexer5.nextToken(token13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type14.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder16);
        org.junit.Assert.assertEquals(stringBuilder16.toString(), "");
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine(0);
        boolean boolean8 = cSVLexer4.isEndOfFile((int) (byte) 1);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVLexer4.format;
        java.io.Reader reader10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable11 = cSVFormat9.parse(reader10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.isWhitespace((int) (short) -1);
        org.apache.commons.csv.Token token17 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type18 = token17.type;
        java.lang.String str19 = token17.toString();
        org.apache.commons.csv.Token.Type type20 = org.apache.commons.csv.Token.Type.EORECORD;
        token17.type = type20;
        java.lang.StringBuilder stringBuilder22 = token17.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder22);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type18.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "INVALID []" + "'", str19, "INVALID []");
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type20.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder22);
        org.junit.Assert.assertEquals(stringBuilder22.toString(), "");
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        boolean boolean18 = cSVLexer5.isWhitespace((int) '\n');
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type20 = token19.type;
        java.lang.String str21 = token19.toString();
        org.apache.commons.csv.Token.Type type22 = org.apache.commons.csv.Token.Type.COMMENT;
        token19.type = type22;
        token19.reset();
        org.apache.commons.csv.Token.Type type25 = token19.type;
        token19.isReady = false;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token28 = cSVLexer5.nextToken(token19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type20.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "INVALID []" + "'", str21, "INVALID []");
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type22.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type25.equals(org.apache.commons.csv.Token.Type.INVALID));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean7 = cSVLexer3.isDelimiter(0);
        boolean boolean8 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader9 = cSVLexer3.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(extendedBufferedReader9);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine(0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer4.in;
        boolean boolean9 = cSVLexer4.readEndOfLine((int) '\b');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean12 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean14 = cSVLexer5.isStartOfLine((-2));
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean12 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type15 = token14.type;
        java.lang.String str16 = token14.toString();
        org.apache.commons.csv.Token.Type type17 = token14.type;
        java.lang.StringBuilder stringBuilder18 = token14.content;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token19 = cSVLexer5.nextToken(token14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type15.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "INVALID []" + "'", str16, "INVALID []");
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type17.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder18);
        org.junit.Assert.assertEquals(stringBuilder18.toString(), "");
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder13 = cSVFormat12.toBuilder();
        boolean boolean14 = cSVFormat12.isCommentingEnabled();
        java.lang.String str15 = cSVFormat12.toString();
        boolean boolean16 = cSVFormat12.isQuoting();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str15, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        boolean boolean17 = cSVLexer5.isWhitespace((int) '\r');
        boolean boolean19 = cSVLexer5.isEndOfFile((int) (byte) 1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        boolean boolean14 = cSVLexer5.readEndOfLine((int) (byte) 1);
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        boolean boolean17 = cSVLexer5.isStartOfLine(10);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder19 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat18);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = cSVFormat18.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormatBuilder20.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader22 = null;
        org.apache.commons.csv.CSVLexer cSVLexer23 = new org.apache.commons.csv.CSVLexer(cSVFormat21, extendedBufferedReader22);
        boolean boolean25 = cSVLexer23.isEscape(0);
        boolean boolean27 = cSVLexer23.isEscape((int) '#');
        boolean boolean28 = cSVLexer23.ignoreEmptyLines;
        boolean boolean29 = cSVLexer23.ignoreSurroundingSpaces;
        org.apache.commons.csv.Token token30 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type31 = token30.type;
        java.lang.StringBuilder stringBuilder32 = token30.content;
        cSVLexer23.trimTrailingSpaces(stringBuilder32);
        cSVLexer5.trimTrailingSpaces(stringBuilder32);
        org.apache.commons.csv.Token token35 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type36 = token35.type;
        java.lang.String str37 = token35.toString();
        token35.isReady = false;
        token35.isReady = true;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token42 = cSVLexer5.nextToken(token35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormatBuilder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type31.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder32);
        org.junit.Assert.assertEquals(stringBuilder32.toString(), "");
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type36.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "INVALID []" + "'", str37, "INVALID []");
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        java.lang.String str4 = cSVFormat0.getNullToString();
        java.lang.String str5 = cSVFormat0.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = cSVFormat0.toBuilder();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str5, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.StringBuilder stringBuilder9 = token7.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer3.format;
        boolean boolean13 = cSVLexer3.isDelimiter((int) '\r');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean10 = cSVLexer5.ignoreEmptyLines;
        boolean boolean11 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = token12.type;
        java.lang.StringBuilder stringBuilder14 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder14);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type13.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder14);
        org.junit.Assert.assertEquals(stringBuilder14.toString(), "");
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat13.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder16.withEscape((java.lang.Character) '\\');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = cSVFormatBuilder16.withCommentStart((java.lang.Character) ',');
        java.io.Reader reader21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable22 = cSVFormatBuilder16.parse(reader21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The comment start character and the delimiter cannot be the same (',')");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str15, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormatBuilder20);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isWhitespace((int) (short) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean14 = cSVFormat13.isEscaping();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.ignoreSurroundingSpaces;
        // The following exception was thrown during execution in test generation
        try {
            int int14 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isStartOfLine((int) (byte) 1);
        boolean boolean12 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean11 = cSVLexer5.isWhitespace(6);
        boolean boolean13 = cSVLexer5.isEndOfFile(0);
        boolean boolean15 = cSVLexer5.isWhitespace((int) 'a');
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer5.isWhitespace((int) '\\');
        boolean boolean20 = cSVLexer5.isQuoteChar((int) '\\');
        org.apache.commons.csv.Token token21 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type22 = token21.type;
        token21.isReady = false;
        boolean boolean25 = token21.isReady;
        token21.isReady = false;
        token21.isReady = false;
        java.lang.String str30 = token21.toString();
        org.apache.commons.csv.Token.Type type31 = token21.type;
        java.lang.StringBuilder stringBuilder32 = token21.content;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token33 = cSVLexer5.nextToken(token21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type22.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "INVALID []" + "'", str30, "INVALID []");
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type31.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder32);
        org.junit.Assert.assertEquals(stringBuilder32.toString(), "");
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.Token token6 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type7 = token6.type;
        java.lang.String str8 = token6.toString();
        org.apache.commons.csv.Token.Type type9 = org.apache.commons.csv.Token.Type.EORECORD;
        token6.type = type9;
        java.lang.StringBuilder stringBuilder11 = token6.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type7.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INVALID []" + "'", str8, "INVALID []");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type9.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str14, "Delimiter=<,> QuoteChar=<\">");
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF;
        char char1 = cSVFormat0.getDelimiter();
        char char2 = cSVFormat0.getDelimiter();
        java.lang.Character char3 = cSVFormat0.getCommentStart();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isDelimiter((int) (short) 0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + '\t' + "'", char1 == '\t');
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + '\t' + "'", char2 == '\t');
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("", cSVFormat13);
        boolean boolean17 = cSVFormat13.isCommentingEnabled();
        java.lang.String str18 = cSVFormat13.getNullToString();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean18 = cSVLexer5.isEndOfFile((int) (short) 10);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer5.in;
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVLexer5.format;
        // The following exception was thrown during execution in test generation
        try {
            int int21 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = null;
        org.apache.commons.csv.CSVLexer cSVLexer14 = new org.apache.commons.csv.CSVLexer(cSVFormat12, extendedBufferedReader13);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = cSVLexer14.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormatBuilder4.build();
        char char6 = cSVFormat5.getDelimiter();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = null;
        org.apache.commons.csv.CSVLexer cSVLexer8 = new org.apache.commons.csv.CSVLexer(cSVFormat5, extendedBufferedReader7);
        java.lang.Character char9 = cSVFormat5.getCommentStart();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + ',' + "'", char6 == ',');
        org.junit.Assert.assertNull(char9);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.CSVParser cSVParser14 = new org.apache.commons.csv.CSVParser("Delimiter=<,> QuoteChar=<\">", cSVFormat13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap15 = cSVParser14.getHeaderMap();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isCommentStart(1);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) (short) -1);
        boolean boolean14 = cSVLexer5.isQuoteChar(0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader15 = cSVLexer5.in;
        org.apache.commons.csv.Token token16 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type17 = org.apache.commons.csv.Token.Type.COMMENT;
        token16.type = type17;
        org.apache.commons.csv.Token.Type type19 = token16.type;
        org.apache.commons.csv.Token token20 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type21 = token20.type;
        token16.type = type21;
        org.apache.commons.csv.Token token23 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type24 = token23.type;
        java.lang.String str25 = token23.toString();
        boolean boolean26 = token23.isReady;
        java.lang.String str27 = token23.toString();
        org.apache.commons.csv.Token token28 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type29 = org.apache.commons.csv.Token.Type.COMMENT;
        token28.type = type29;
        token23.type = type29;
        token16.type = type29;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token33 = cSVLexer5.nextToken(token16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(extendedBufferedReader15);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type17.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type19.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type24.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "INVALID []" + "'", str25, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "INVALID []" + "'", str27, "INVALID []");
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type29.equals(org.apache.commons.csv.Token.Type.COMMENT));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = cSVLexer5.in;
        boolean boolean16 = cSVLexer5.isEndOfFile(10);
        boolean boolean18 = cSVLexer5.isWhitespace((int) (byte) 10);
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type20 = token19.type;
        java.lang.String str21 = token19.toString();
        token19.isReady = false;
        java.lang.String str24 = token19.toString();
        java.lang.String str25 = token19.toString();
        org.apache.commons.csv.Token token26 = new org.apache.commons.csv.Token();
        token26.isReady = false;
        token26.isReady = true;
        token26.isReady = true;
        boolean boolean33 = token26.isReady;
        token26.reset();
        org.apache.commons.csv.Token token35 = new org.apache.commons.csv.Token();
        token35.isReady = false;
        org.apache.commons.csv.Token.Type type38 = org.apache.commons.csv.Token.Type.INVALID;
        token35.type = type38;
        token26.type = type38;
        token26.isReady = false;
        org.apache.commons.csv.Token token43 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type44 = token43.type;
        java.lang.String str45 = token43.toString();
        org.apache.commons.csv.Token.Type type46 = org.apache.commons.csv.Token.Type.EORECORD;
        token43.type = type46;
        org.apache.commons.csv.Token.Type type48 = token43.type;
        token26.type = type48;
        java.lang.String str50 = token26.toString();
        org.apache.commons.csv.Token token51 = new org.apache.commons.csv.Token();
        token51.isReady = false;
        token51.isReady = true;
        token51.isReady = true;
        boolean boolean58 = token51.isReady;
        token51.reset();
        org.apache.commons.csv.Token token60 = new org.apache.commons.csv.Token();
        token60.isReady = false;
        org.apache.commons.csv.Token.Type type63 = org.apache.commons.csv.Token.Type.INVALID;
        token60.type = type63;
        token51.type = type63;
        token51.isReady = false;
        org.apache.commons.csv.Token token68 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type69 = token68.type;
        java.lang.String str70 = token68.toString();
        org.apache.commons.csv.Token.Type type71 = org.apache.commons.csv.Token.Type.EORECORD;
        token68.type = type71;
        org.apache.commons.csv.Token.Type type73 = token68.type;
        token51.type = type73;
        token26.type = type73;
        token19.type = type73;
        token19.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token78 = cSVLexer5.nextToken(token19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(extendedBufferedReader13);
        org.junit.Assert.assertNull(extendedBufferedReader14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type20.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "INVALID []" + "'", str21, "INVALID []");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "INVALID []" + "'", str24, "INVALID []");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "INVALID []" + "'", str25, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type38.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type44.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "INVALID []" + "'", str45, "INVALID []");
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type46.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type48.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "EORECORD []" + "'", str50, "EORECORD []");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + type63 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type63.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type69 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type69.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "INVALID []" + "'", str70, "INVALID []");
        org.junit.Assert.assertTrue("'" + type71 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type71.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type73 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type73.equals(org.apache.commons.csv.Token.Type.EORECORD));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isEndOfFile((int) ',');
        boolean boolean17 = cSVLexer5.isEndOfFile((int) (byte) 0);
        boolean boolean19 = cSVLexer5.isCommentStart((int) '\t');
        org.apache.commons.csv.Token token20 = new org.apache.commons.csv.Token();
        token20.isReady = false;
        org.apache.commons.csv.Token.Type type23 = org.apache.commons.csv.Token.Type.INVALID;
        token20.type = type23;
        org.apache.commons.csv.Token.Type type25 = org.apache.commons.csv.Token.Type.INVALID;
        token20.type = type25;
        java.lang.StringBuilder stringBuilder27 = token20.content;
        java.lang.StringBuilder stringBuilder28 = token20.content;
        boolean boolean29 = token20.isReady;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token30 = cSVLexer5.nextToken(token20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type23.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type25.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder27);
        org.junit.Assert.assertEquals(stringBuilder27.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder28);
        org.junit.Assert.assertEquals(stringBuilder28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.StringBuilder stringBuilder9 = token7.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder9);
        boolean boolean12 = cSVLexer3.isEndOfFile((int) (byte) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer3.format;
        boolean boolean14 = cSVLexer3.ignoreEmptyLines;
        boolean boolean15 = cSVLexer3.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        boolean boolean8 = cSVLexer5.isEndOfFile((-1));
        boolean boolean10 = cSVLexer5.isCommentStart(0);
        org.apache.commons.csv.Token token11 = new org.apache.commons.csv.Token();
        token11.isReady = false;
        token11.isReady = true;
        token11.isReady = true;
        boolean boolean18 = token11.isReady;
        token11.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token20 = cSVLexer5.nextToken(token11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader12 = cSVLexer5.in;
        boolean boolean14 = cSVLexer5.isStartOfLine((int) '\f');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(extendedBufferedReader12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat0.getNullToString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat0.toBuilder();
        java.io.Reader reader17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable18 = cSVFormat0.parse(reader17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isWhitespace((int) (short) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isWhitespace((int) ' ');
        boolean boolean17 = cSVLexer5.readEndOfLine((int) '#');
        org.apache.commons.csv.Token token18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token19 = cSVLexer5.nextToken(token18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        boolean boolean13 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type15 = token14.type;
        java.lang.String str16 = token14.toString();
        org.apache.commons.csv.Token.Type type17 = token14.type;
        boolean boolean18 = token14.isReady;
        boolean boolean19 = token14.isReady;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token20 = cSVLexer5.nextToken(token14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type15.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "INVALID []" + "'", str16, "INVALID []");
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type17.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader32 = cSVLexer19.in;
        boolean boolean34 = cSVLexer19.isCommentStart((int) (short) 0);
        boolean boolean36 = cSVLexer19.isEndOfFile((int) '\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(extendedBufferedReader32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        boolean boolean18 = cSVLexer5.readEndOfLine((int) '\"');
        // The following exception was thrown during execution in test generation
        try {
            long long19 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isCommentStart(1);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) ',');
        boolean boolean14 = cSVLexer5.isStartOfLine(0);
        boolean boolean16 = cSVLexer5.isDelimiter((int) '\n');
        org.apache.commons.csv.Token token17 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type18 = token17.type;
        java.lang.StringBuilder stringBuilder19 = token17.content;
        org.apache.commons.csv.Token token20 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type21 = token20.type;
        java.lang.String str22 = token20.toString();
        token20.isReady = false;
        java.lang.String str25 = token20.toString();
        java.lang.String str26 = token20.toString();
        org.apache.commons.csv.Token token27 = new org.apache.commons.csv.Token();
        token27.isReady = false;
        token27.isReady = true;
        token27.isReady = true;
        boolean boolean34 = token27.isReady;
        token27.reset();
        org.apache.commons.csv.Token token36 = new org.apache.commons.csv.Token();
        token36.isReady = false;
        org.apache.commons.csv.Token.Type type39 = org.apache.commons.csv.Token.Type.INVALID;
        token36.type = type39;
        token27.type = type39;
        token27.isReady = false;
        org.apache.commons.csv.Token token44 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type45 = token44.type;
        java.lang.String str46 = token44.toString();
        org.apache.commons.csv.Token.Type type47 = org.apache.commons.csv.Token.Type.EORECORD;
        token44.type = type47;
        org.apache.commons.csv.Token.Type type49 = token44.type;
        token27.type = type49;
        java.lang.String str51 = token27.toString();
        org.apache.commons.csv.Token token52 = new org.apache.commons.csv.Token();
        token52.isReady = false;
        token52.isReady = true;
        token52.isReady = true;
        boolean boolean59 = token52.isReady;
        token52.reset();
        org.apache.commons.csv.Token token61 = new org.apache.commons.csv.Token();
        token61.isReady = false;
        org.apache.commons.csv.Token.Type type64 = org.apache.commons.csv.Token.Type.INVALID;
        token61.type = type64;
        token52.type = type64;
        token52.isReady = false;
        org.apache.commons.csv.Token token69 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type70 = token69.type;
        java.lang.String str71 = token69.toString();
        org.apache.commons.csv.Token.Type type72 = org.apache.commons.csv.Token.Type.EORECORD;
        token69.type = type72;
        org.apache.commons.csv.Token.Type type74 = token69.type;
        token52.type = type74;
        token27.type = type74;
        token20.type = type74;
        token17.type = type74;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token79 = cSVLexer5.nextToken(token17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type18.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder19);
        org.junit.Assert.assertEquals(stringBuilder19.toString(), "");
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "INVALID []" + "'", str22, "INVALID []");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "INVALID []" + "'", str25, "INVALID []");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "INVALID []" + "'", str26, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type39.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type45.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "INVALID []" + "'", str46, "INVALID []");
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type47.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type49.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "EORECORD []" + "'", str51, "EORECORD []");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type64.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type70 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type70.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "INVALID []" + "'", str71, "INVALID []");
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type72.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type74 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type74.equals(org.apache.commons.csv.Token.Type.EORECORD));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVLexer5.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean18 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean20 = cSVLexer5.readEndOfLine(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        token19.isReady = false;
        token19.isReady = true;
        token19.reset();
        java.lang.StringBuilder stringBuilder25 = token19.content;
        cSVLexer18.trimTrailingSpaces(stringBuilder25);
        boolean boolean28 = cSVLexer18.isEndOfFile((int) (short) 100);
        boolean boolean29 = cSVLexer18.ignoreSurroundingSpaces;
        // The following exception was thrown during execution in test generation
        try {
            int int30 = cSVLexer18.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(stringBuilder25);
        org.junit.Assert.assertEquals(stringBuilder25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean10 = cSVLexer5.ignoreEmptyLines;
        boolean boolean11 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean13 = cSVLexer5.readEndOfLine(0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(extendedBufferedReader14);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getNullToString();
        java.lang.String[] strArray15 = null;
        java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null;
        org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) (byte) 100);
        boolean boolean20 = cSVRecord19.isConsistent();
        java.util.Spliterator<java.lang.String> strSpliterator21 = cSVRecord19.spliterator();
        boolean boolean22 = cSVRecord19.isConsistent();
        boolean boolean23 = cSVRecord19.isConsistent();
        long long24 = cSVRecord19.getRecordNumber();
        long long25 = cSVRecord19.getRecordNumber();
        boolean boolean26 = cSVFormat13.equals((java.lang.Object) cSVRecord19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = cSVRecord19.get((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean7 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.Token token8 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type9 = token8.type;
        java.lang.String str10 = token8.toString();
        org.apache.commons.csv.Token.Type type11 = org.apache.commons.csv.Token.Type.EORECORD;
        token8.type = type11;
        org.apache.commons.csv.Token.Type type13 = token8.type;
        token8.reset();
        org.apache.commons.csv.Token.Type type15 = token8.type;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token16 = cSVLexer5.nextToken(token8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type9.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "INVALID []" + "'", str10, "INVALID []");
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type11.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type13.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type15.equals(org.apache.commons.csv.Token.Type.INVALID));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.Token token6 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type7 = token6.type;
        java.lang.String str8 = token6.toString();
        org.apache.commons.csv.Token.Type type9 = org.apache.commons.csv.Token.Type.EORECORD;
        token6.type = type9;
        java.lang.StringBuilder stringBuilder11 = token6.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder11);
        boolean boolean13 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type15 = token14.type;
        java.lang.String str16 = token14.toString();
        org.apache.commons.csv.Token.Type type17 = token14.type;
        java.lang.StringBuilder stringBuilder18 = token14.content;
        java.lang.StringBuilder stringBuilder19 = token14.content;
        token14.reset();
        java.lang.String str21 = token14.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token22 = cSVLexer5.nextToken(token14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type7.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INVALID []" + "'", str8, "INVALID []");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type9.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type15.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "INVALID []" + "'", str16, "INVALID []");
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type17.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder18);
        org.junit.Assert.assertEquals(stringBuilder18.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder19);
        org.junit.Assert.assertEquals(stringBuilder19.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "INVALID []" + "'", str21, "INVALID []");
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        boolean boolean13 = cSVLexer5.isQuoteChar((int) '\"');
        // The following exception was thrown during execution in test generation
        try {
            int int14 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.isEscape((int) (short) 10);
        boolean boolean15 = cSVLexer5.isStartOfLine(100);
        boolean boolean17 = cSVLexer5.isCommentStart(0);
        org.apache.commons.csv.Token token18 = new org.apache.commons.csv.Token();
        token18.isReady = false;
        org.apache.commons.csv.Token.Type type21 = org.apache.commons.csv.Token.Type.INVALID;
        token18.type = type21;
        org.apache.commons.csv.Token.Type type23 = org.apache.commons.csv.Token.Type.INVALID;
        token18.type = type23;
        java.lang.StringBuilder stringBuilder25 = token18.content;
        java.lang.String str26 = token18.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token27 = cSVLexer5.nextToken(token18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type23.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder25);
        org.junit.Assert.assertEquals(stringBuilder25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "INVALID []" + "'", str26, "INVALID []");
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        boolean boolean14 = cSVLexer5.readEndOfLine((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVParser cSVParser3 = new org.apache.commons.csv.CSVParser("Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored", cSVFormat1);
        org.apache.commons.csv.Quote quote6 = null;
        org.apache.commons.csv.Quote quote15 = null;
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat29 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote15, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray28);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder30 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote6, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray28);
        org.apache.commons.csv.Quote quote33 = null;
        org.apache.commons.csv.Quote quote42 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote42, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote33, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder58 = cSVFormatBuilder30.withHeader(strArray55);
        java.util.Map<java.lang.String, java.lang.Integer> strMap59 = null;
        org.apache.commons.csv.CSVRecord cSVRecord62 = new org.apache.commons.csv.CSVRecord(strArray55, strMap59, "Delimiter=< > Escape=<#> QuoteChar=<#> CommentStart=<\r> EmptyLines:ignored", 0L);
        java.lang.String str63 = cSVFormat1.format((java.lang.Object[]) strArray55);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(cSVFormatBuilder58);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str63, "hi!,,hi!,,hi!,hi!");
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(' ');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = cSVFormatBuilder2.withQuoteChar((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = cSVFormatBuilder2.withCommentStart('\t');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder10 = cSVFormatBuilder8.withEscape('\b');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder12 = cSVFormatBuilder10.withNullToString("hi!");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder14 = cSVFormatBuilder12.withEscape('\f');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormatBuilder14.withRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder14.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormatBuilder18.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader20 = null;
        org.apache.commons.csv.CSVLexer cSVLexer21 = new org.apache.commons.csv.CSVLexer(cSVFormat19, extendedBufferedReader20);
        org.apache.commons.csv.CSVParser cSVParser22 = new org.apache.commons.csv.CSVParser(",", cSVFormat19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap23 = cSVParser22.getHeaderMap();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
        org.junit.Assert.assertNotNull(cSVFormatBuilder8);
        org.junit.Assert.assertNotNull(cSVFormatBuilder10);
        org.junit.Assert.assertNotNull(cSVFormatBuilder12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean16 = cSVLexer5.ignoreEmptyLines;
        boolean boolean18 = cSVLexer5.isStartOfLine((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean15 = cSVLexer5.isStartOfLine((int) (short) 10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isDelimiter((int) (short) -1);
        java.lang.Class<?> wildcardClass16 = cSVLexer5.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVFormat12.isCommentingEnabled();
        java.lang.String[] strArray14 = cSVFormat12.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strArray14);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat1, extendedBufferedReader3);
        java.lang.String str5 = cSVFormat1.getNullToString();
        java.lang.String str6 = cSVFormat1.toString();
        org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser("hi!,,hi!,,hi!,hi!", cSVFormat1);
        org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord();
        java.lang.String str9 = cSVRecord8.toString();
        int int10 = cSVRecord8.size();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str6, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVRecord8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[hi!, , hi!, , hi!, hi!]" + "'", str9, "[hi!, , hi!, , hi!, hi!]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine(0);
        boolean boolean8 = cSVLexer4.isEndOfFile((int) (byte) 1);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVLexer4.format;
        boolean boolean10 = cSVLexer4.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        boolean boolean33 = cSVLexer19.isEndOfFile(6);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        org.apache.commons.csv.Quote quote3 = null;
        org.apache.commons.csv.Quote quote12 = null;
        org.apache.commons.csv.Quote quote21 = null;
        org.apache.commons.csv.Quote quote30 = null;
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote30, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray43);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder45 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote21, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray43);
        org.apache.commons.csv.Quote quote48 = null;
        org.apache.commons.csv.Quote quote57 = null;
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat71 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote57, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray70);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder72 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote48, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray70);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder73 = cSVFormatBuilder45.withHeader(strArray70);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder74 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote12, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat75 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote3, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray70);
        java.lang.String str76 = cSVFormat75.getNullToString();
        boolean boolean77 = cSVFormat75.isCommentingEnabled();
        org.apache.commons.csv.CSVParser cSVParser78 = new org.apache.commons.csv.CSVParser("", cSVFormat75);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor79 = cSVParser78.iterator();
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(cSVFormatBuilder73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\r\n" + "'", str76, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(cSVRecordItor79);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVLexer4.format;
        org.apache.commons.csv.Token token8 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type9 = token8.type;
        token8.isReady = false;
        boolean boolean12 = token8.isReady;
        java.lang.StringBuilder stringBuilder13 = token8.content;
        org.apache.commons.csv.Token.Type type14 = org.apache.commons.csv.Token.Type.TOKEN;
        token8.type = type14;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token16 = cSVLexer4.nextToken(token8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type9.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(stringBuilder13);
        org.junit.Assert.assertEquals(stringBuilder13.toString(), "");
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type14.equals(org.apache.commons.csv.Token.Type.TOKEN));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isQuoteChar((int) '4');
        boolean boolean19 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean21 = cSVLexer15.isWhitespace((int) '4');
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVLexer15.format;
        org.apache.commons.csv.Quote quote25 = null;
        org.apache.commons.csv.Quote quote34 = null;
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat48 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote34, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray47);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder49 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote25, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray47);
        org.apache.commons.csv.Quote quote52 = null;
        org.apache.commons.csv.Quote quote61 = null;
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat75 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote61, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray74);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder76 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote52, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray74);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder77 = cSVFormatBuilder49.withHeader(strArray74);
        java.lang.String str78 = cSVFormat22.format((java.lang.Object[]) strArray74);
        java.lang.String str79 = cSVFormat22.getNullToString();
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(cSVFormatBuilder77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!\\\\hi!\\\\hi!\\hi!" + "'", str78, "hi!\\\\hi!\\\\hi!\\hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        java.io.Reader reader17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable18 = cSVFormat13.parse(reader17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        boolean boolean4 = cSVFormat1.isCommentingEnabled();
        org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser("[]", cSVFormat1);
        java.lang.String[] strArray6 = null;
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        org.apache.commons.csv.CSVRecord cSVRecord10 = new org.apache.commons.csv.CSVRecord(strArray6, strMap7, "", (long) (byte) 100);
        boolean boolean11 = cSVRecord10.isConsistent();
        int int12 = cSVRecord10.size();
        java.util.Spliterator<java.lang.String> strSpliterator13 = cSVRecord10.spliterator();
        boolean boolean15 = cSVRecord10.isSet("");
        java.lang.String str16 = cSVRecord10.getComment();
        java.util.Iterator<java.lang.String> strItor17 = cSVRecord10.iterator();
        int int18 = cSVRecord10.size();
        boolean boolean20 = cSVRecord10.isSet("Delimiter=< > Escape=<\b> QuoteChar=<a> CommentStart=<\t>");
        boolean boolean21 = cSVFormat1.equals((java.lang.Object) cSVRecord10);
        java.util.Iterator<java.lang.String> strItor22 = cSVRecord10.iterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strItor22);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.apache.commons.csv.Quote quote2 = null;
        org.apache.commons.csv.Quote quote11 = null;
        org.apache.commons.csv.Quote quote20 = null;
        org.apache.commons.csv.Quote quote29 = null;
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote29, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray42);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder44 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote20, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray42);
        org.apache.commons.csv.Quote quote47 = null;
        org.apache.commons.csv.Quote quote56 = null;
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat70 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote56, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder71 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote47, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder72 = cSVFormatBuilder44.withHeader(strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder73 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote11, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat74 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray69);
        org.apache.commons.csv.Quote quote75 = cSVFormat74.getQuotePolicy();
        java.lang.String[] strArray76 = cSVFormat74.getHeader();
        java.lang.String[] strArray77 = cSVFormat74.getHeader();
        boolean boolean78 = cSVFormat74.isQuoting();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader79 = null;
        org.apache.commons.csv.CSVLexer cSVLexer80 = new org.apache.commons.csv.CSVLexer(cSVFormat74, extendedBufferedReader79);
        boolean boolean81 = cSVFormat74.getIgnoreEmptyLines();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader82 = null;
        org.apache.commons.csv.CSVLexer cSVLexer83 = new org.apache.commons.csv.CSVLexer(cSVFormat74, extendedBufferedReader82);
        boolean boolean85 = cSVLexer83.isDelimiter((int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(cSVFormatBuilder72);
        org.junit.Assert.assertNull(quote75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("", cSVFormat13);
        org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser16.nextRecord();
        long long18 = cSVParser16.getRecordNumber();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(cSVRecord17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        boolean boolean8 = cSVLexer3.isQuoteChar((int) '4');
        org.apache.commons.csv.Token token9 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type10 = token9.type;
        java.lang.String str11 = token9.toString();
        org.apache.commons.csv.Token.Type type12 = org.apache.commons.csv.Token.Type.COMMENT;
        token9.type = type12;
        token9.reset();
        boolean boolean15 = token9.isReady;
        token9.reset();
        boolean boolean17 = token9.isReady;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token18 = cSVLexer3.nextToken(token9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type10.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "INVALID []" + "'", str11, "INVALID []");
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type12.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        java.lang.String str19 = cSVFormat13.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\r\n" + "'", str19, "\r\n");
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(' ');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = cSVFormatBuilder2.withQuoteChar((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = cSVFormatBuilder2.withCommentStart('\t');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder10 = cSVFormatBuilder8.withEscape('\b');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder12 = cSVFormatBuilder10.withNullToString("hi!");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder14 = cSVFormatBuilder12.withEscape('\f');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormatBuilder14.withRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder14.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormatBuilder18.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader20 = null;
        org.apache.commons.csv.CSVLexer cSVLexer21 = new org.apache.commons.csv.CSVLexer(cSVFormat19, extendedBufferedReader20);
        org.apache.commons.csv.CSVParser cSVParser22 = new org.apache.commons.csv.CSVParser(",", cSVFormat19);
        long long23 = cSVParser22.getLineNumber();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap24 = cSVParser22.getHeaderMap();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
        org.junit.Assert.assertNotNull(cSVFormatBuilder8);
        org.junit.Assert.assertNotNull(cSVFormatBuilder10);
        org.junit.Assert.assertNotNull(cSVFormatBuilder12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.apache.commons.csv.Quote quote3 = null;
        org.apache.commons.csv.Quote quote12 = null;
        org.apache.commons.csv.Quote quote21 = null;
        org.apache.commons.csv.Quote quote30 = null;
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote30, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray43);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder45 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote21, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray43);
        org.apache.commons.csv.Quote quote48 = null;
        org.apache.commons.csv.Quote quote57 = null;
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat71 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote57, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray70);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder72 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote48, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray70);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder73 = cSVFormatBuilder45.withHeader(strArray70);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder74 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote12, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat75 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote3, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray70);
        java.lang.String str76 = cSVFormat75.getNullToString();
        boolean boolean77 = cSVFormat75.isCommentingEnabled();
        org.apache.commons.csv.CSVParser cSVParser78 = new org.apache.commons.csv.CSVParser("", cSVFormat75);
        long long79 = cSVParser78.getLineNumber();
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(cSVFormatBuilder73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\r\n" + "'", str76, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type14 = token13.type;
        java.lang.String str15 = token13.toString();
        org.apache.commons.csv.Token.Type type16 = token13.type;
        java.lang.StringBuilder stringBuilder17 = token13.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder17);
        boolean boolean20 = cSVLexer5.isWhitespace((int) ' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type14.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "INVALID []" + "'", str15, "INVALID []");
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type16.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder17);
        org.junit.Assert.assertEquals(stringBuilder17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("", cSVFormat13);
        boolean boolean17 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.Quote quote18 = cSVFormat13.getQuotePolicy();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(quote18);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        boolean boolean13 = cSVLexer6.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer6.format;
        java.lang.String str15 = cSVFormat14.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser17 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\r\n" + "'", str15, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.Token token6 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type7 = token6.type;
        java.lang.String str8 = token6.toString();
        org.apache.commons.csv.Token.Type type9 = org.apache.commons.csv.Token.Type.EORECORD;
        token6.type = type9;
        java.lang.StringBuilder stringBuilder11 = token6.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder11);
        boolean boolean13 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer5.format;
        boolean boolean16 = cSVLexer5.isEscape((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            long long17 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type7.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INVALID []" + "'", str8, "INVALID []");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type9.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        java.lang.String str12 = cSVFormat11.toString();
        java.lang.String[] strArray13 = cSVFormat11.getHeader();
        boolean boolean14 = cSVFormat11.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str12, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        boolean boolean4 = cSVFormat1.isCommentingEnabled();
        org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser("[]", cSVFormat1);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser5.getRecords();
        long long8 = cSVParser5.getLineNumber();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator6);
        org.junit.Assert.assertNotNull(cSVRecordList7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.isEscape((int) (byte) 100);
        boolean boolean16 = cSVLexer5.isWhitespace((int) (short) 100);
        boolean boolean18 = cSVLexer5.isCommentStart((int) (byte) 100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.isQuoteChar(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.isEscape((int) (short) 10);
        boolean boolean15 = cSVLexer5.isStartOfLine(100);
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer5.isStartOfLine((int) (short) 0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        boolean boolean9 = cSVLexer5.isEndOfFile((int) (byte) 100);
        boolean boolean11 = cSVLexer5.isStartOfLine((int) '\r');
        // The following exception was thrown during execution in test generation
        try {
            long long12 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart(0);
        boolean boolean18 = cSVLexer5.readEndOfLine((int) (short) 100);
        boolean boolean20 = cSVLexer5.isDelimiter(10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        java.lang.String str4 = cSVFormat0.getNullToString();
        java.lang.String str5 = cSVFormat0.toString();
        org.apache.commons.csv.Quote quote6 = cSVFormat0.getQuotePolicy();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder7 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str5, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNull(quote6);
        org.junit.Assert.assertNotNull(cSVFormatBuilder7);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        boolean boolean14 = cSVLexer5.readEndOfLine((int) (byte) 1);
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        boolean boolean17 = cSVLexer5.isStartOfLine(10);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder19 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat18);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = cSVFormat18.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormatBuilder20.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader22 = null;
        org.apache.commons.csv.CSVLexer cSVLexer23 = new org.apache.commons.csv.CSVLexer(cSVFormat21, extendedBufferedReader22);
        boolean boolean25 = cSVLexer23.isEscape(0);
        boolean boolean27 = cSVLexer23.isEscape((int) '#');
        boolean boolean28 = cSVLexer23.ignoreEmptyLines;
        boolean boolean29 = cSVLexer23.ignoreSurroundingSpaces;
        org.apache.commons.csv.Token token30 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type31 = token30.type;
        java.lang.StringBuilder stringBuilder32 = token30.content;
        cSVLexer23.trimTrailingSpaces(stringBuilder32);
        cSVLexer5.trimTrailingSpaces(stringBuilder32);
        boolean boolean36 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean38 = cSVLexer5.isEndOfFile((int) (byte) 0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormatBuilder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type31.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder32);
        org.junit.Assert.assertEquals(stringBuilder32.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        boolean boolean18 = cSVLexer5.isWhitespace((int) '\n');
        boolean boolean20 = cSVLexer5.isQuoteChar((int) (byte) -1);
        org.apache.commons.csv.Token token21 = new org.apache.commons.csv.Token();
        token21.isReady = false;
        org.apache.commons.csv.Token.Type type24 = org.apache.commons.csv.Token.Type.INVALID;
        token21.type = type24;
        org.apache.commons.csv.Token.Type type26 = org.apache.commons.csv.Token.Type.INVALID;
        token21.type = type26;
        java.lang.StringBuilder stringBuilder28 = token21.content;
        java.lang.StringBuilder stringBuilder29 = token21.content;
        boolean boolean30 = token21.isReady;
        token21.isReady = false;
        org.apache.commons.csv.Token.Type type33 = token21.type;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token34 = cSVLexer5.nextToken(token21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type24.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type26.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder28);
        org.junit.Assert.assertEquals(stringBuilder28.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder29);
        org.junit.Assert.assertEquals(stringBuilder29.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type33.equals(org.apache.commons.csv.Token.Type.INVALID));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getNullToString();
        java.lang.Character char15 = cSVFormat13.getEscape();
        java.io.Reader reader16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable17 = cSVFormat13.parse(reader16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(char15);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.StringBuilder stringBuilder9 = token7.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder9);
        boolean boolean12 = cSVLexer3.readEndOfLine((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = cSVLexer3.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isCommentStart(1);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) ',');
        boolean boolean13 = cSVLexer5.ignoreEmptyLines;
        boolean boolean15 = cSVLexer5.isQuoteChar((int) (short) 0);
        org.apache.commons.csv.Token token16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token17 = cSVLexer5.nextToken(token16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean18 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean20 = cSVLexer5.isDelimiter((int) (byte) 10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        java.lang.String str5 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.Quote quote6 = cSVFormat0.getQuotePolicy();
        org.apache.commons.csv.Quote quote7 = cSVFormat0.getQuotePolicy();
        java.io.Reader reader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable9 = cSVFormat0.parse(reader8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\r\n" + "'", str5, "\r\n");
        org.junit.Assert.assertNull(quote6);
        org.junit.Assert.assertNull(quote7);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat1);
        org.apache.commons.csv.CSVParser cSVParser3 = new org.apache.commons.csv.CSVParser("Delimiter=< > Escape=<\f> QuoteChar=<a> CommentStart=<4>", cSVFormat1);
        long long4 = cSVParser3.getRecordNumber();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser3.getRecords();
        long long6 = cSVParser3.getRecordNumber();
        long long7 = cSVParser3.getLineNumber();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordList5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        boolean boolean18 = cSVLexer5.isWhitespace((int) '\n');
        boolean boolean20 = cSVLexer5.isQuoteChar((int) (byte) -1);
        boolean boolean22 = cSVLexer5.isEndOfFile((int) (short) 100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isCommentStart(1);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) ',');
        boolean boolean14 = cSVLexer5.isStartOfLine(0);
        org.apache.commons.csv.Token token15 = new org.apache.commons.csv.Token();
        token15.isReady = false;
        token15.isReady = true;
        token15.isReady = true;
        java.lang.String str22 = token15.toString();
        java.lang.String str23 = token15.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token24 = cSVLexer5.nextToken(token15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "INVALID []" + "'", str22, "INVALID []");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "INVALID []" + "'", str23, "INVALID []");
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        boolean boolean4 = cSVFormat1.isCommentingEnabled();
        org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser("[]", cSVFormat1);
        java.io.Reader reader6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable7 = cSVFormat1.parse(reader6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote15 = null;
        org.apache.commons.csv.Quote quote24 = null;
        org.apache.commons.csv.Quote quote33 = null;
        org.apache.commons.csv.Quote quote42 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote42, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote33, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray55);
        org.apache.commons.csv.Quote quote60 = null;
        org.apache.commons.csv.Quote quote69 = null;
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat83 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote69, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder84 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote60, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder85 = cSVFormatBuilder57.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder86 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote24, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray82);
        org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote15, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray82);
        java.lang.String str88 = cSVFormat12.format((java.lang.Object[]) strArray82);
        java.lang.String str89 = cSVFormat12.toString();
        java.lang.Character char90 = cSVFormat12.getCommentStart();
        boolean boolean91 = cSVFormat12.getIgnoreEmptyLines();
        java.io.Reader reader92 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable93 = cSVFormat12.parse(reader92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(cSVFormatBuilder85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str89, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNull(char90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer18.in;
        boolean boolean21 = cSVLexer18.isEndOfFile((int) (byte) 100);
        boolean boolean23 = cSVLexer18.isQuoteChar((int) (byte) 10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isDelimiter((int) (short) -1);
        boolean boolean17 = cSVLexer5.isEscape((int) (byte) 10);
        java.lang.StringBuilder stringBuilder18 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVLexer5.trimTrailingSpaces(stringBuilder18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        boolean boolean17 = cSVLexer5.readEndOfLine(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader12 = cSVLexer5.in;
        boolean boolean14 = cSVLexer5.isCommentStart((int) (short) 1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(extendedBufferedReader12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat2);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormat2.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormatBuilder4.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = null;
        org.apache.commons.csv.CSVLexer cSVLexer7 = new org.apache.commons.csv.CSVLexer(cSVFormat5, extendedBufferedReader6);
        boolean boolean9 = cSVLexer7.isEscape(0);
        boolean boolean11 = cSVLexer7.isEscape(0);
        boolean boolean13 = cSVLexer7.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer7.format;
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) cSVFormat14);
        java.lang.String str16 = cSVFormat14.toString();
        boolean boolean17 = cSVFormat14.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVParser cSVParser18 = new org.apache.commons.csv.CSVParser("a", cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str16, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat1);
        boolean boolean3 = cSVFormat1.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat1, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVLexer5.format;
        java.lang.String str9 = cSVFormat8.getNullToString();
        org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser("", cSVFormat8);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor11 = cSVParser10.iterator();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor12 = cSVParser10.iterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(cSVRecordItor11);
        org.junit.Assert.assertNotNull(cSVRecordItor12);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean15 = cSVLexer5.readEndOfLine((int) (byte) 0);
        boolean boolean17 = cSVLexer5.isCommentStart((int) '\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isQuoteChar(0);
        boolean boolean16 = cSVLexer5.ignoreEmptyLines;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        java.lang.String str1 = cSVFormat0.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean5 = cSVFormat0.isCommentingEnabled();
        java.lang.Class<?> wildcardClass6 = cSVFormat0.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored" + "'", str1, "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored");
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat1);
        boolean boolean3 = cSVFormat1.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat1, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVLexer5.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader9 = null;
        org.apache.commons.csv.CSVLexer cSVLexer10 = new org.apache.commons.csv.CSVLexer(cSVFormat8, extendedBufferedReader9);
        boolean boolean11 = cSVFormat8.isEscaping();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser12 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isQuoteChar((int) '4');
        boolean boolean19 = cSVLexer15.ignoreSurroundingSpaces;
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVLexer15.format;
        boolean boolean21 = cSVLexer15.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVLexer4.format;
        boolean boolean8 = cSVLexer4.ignoreEmptyLines;
        boolean boolean10 = cSVLexer4.isEscape(0);
        org.apache.commons.csv.Token token11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token12 = cSVLexer4.nextToken(token11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVFormat12.isCommentingEnabled();
        java.lang.Character char14 = cSVFormat12.getEscape();
        boolean boolean15 = cSVFormat12.isQuoting();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        boolean boolean14 = cSVLexer5.isDelimiter((int) (byte) -1);
        org.apache.commons.csv.Token token15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token16 = cSVLexer5.nextToken(token15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        boolean boolean8 = cSVLexer5.isWhitespace((int) '\\');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVLexer5.format;
        boolean boolean10 = cSVFormat9.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder11 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormatBuilder11);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.isWhitespace((int) (short) -1);
        boolean boolean18 = cSVLexer5.isStartOfLine((-1));
        // The following exception was thrown during execution in test generation
        try {
            int int19 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVLexer5.format;
        boolean boolean11 = cSVLexer5.isWhitespace((int) (short) 10);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = token12.type;
        java.lang.String str14 = token12.toString();
        org.apache.commons.csv.Token.Type type15 = org.apache.commons.csv.Token.Type.COMMENT;
        token12.type = type15;
        token12.reset();
        java.lang.String str18 = token12.toString();
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        token19.isReady = false;
        token19.isReady = true;
        token19.isReady = true;
        boolean boolean26 = token19.isReady;
        token19.reset();
        org.apache.commons.csv.Token token28 = new org.apache.commons.csv.Token();
        token28.isReady = false;
        org.apache.commons.csv.Token.Type type31 = org.apache.commons.csv.Token.Type.INVALID;
        token28.type = type31;
        token19.type = type31;
        token12.type = type31;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token35 = cSVLexer5.nextToken(token12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type13.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "INVALID []" + "'", str14, "INVALID []");
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type15.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "INVALID []" + "'", str18, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type31.equals(org.apache.commons.csv.Token.Type.INVALID));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isEscaping();
        org.apache.commons.csv.Quote quote2 = cSVFormat0.getQuotePolicy();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        org.apache.commons.csv.Token token5 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type6 = token5.type;
        java.lang.String str7 = token5.toString();
        org.apache.commons.csv.Token.Type type8 = org.apache.commons.csv.Token.Type.COMMENT;
        token5.type = type8;
        token5.reset();
        boolean boolean11 = token5.isReady;
        org.apache.commons.csv.Token.Type type12 = token5.type;
        java.lang.String str13 = token5.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token14 = cSVLexer4.nextToken(token5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(quote2);
        org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type6.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "INVALID []" + "'", str7, "INVALID []");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type8.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type12.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "INVALID []" + "'", str13, "INVALID []");
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        java.lang.String str19 = cSVFormat13.getNullToString();
        boolean boolean20 = cSVFormat13.isQuoting();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat1, extendedBufferedReader3);
        java.lang.String str5 = cSVFormat1.getNullToString();
        java.lang.String str6 = cSVFormat1.toString();
        org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser("hi!,,hi!,,hi!,hi!", cSVFormat1);
        org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord();
        java.lang.String str9 = cSVRecord8.getComment();
        java.util.Iterator<java.lang.String> strItor10 = cSVRecord8.iterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str6, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVRecord8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strItor10);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer18.in;
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder21 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat20);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder22 = cSVFormat20.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormatBuilder22.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader24 = null;
        org.apache.commons.csv.CSVLexer cSVLexer25 = new org.apache.commons.csv.CSVLexer(cSVFormat23, extendedBufferedReader24);
        boolean boolean26 = cSVLexer25.ignoreEmptyLines;
        boolean boolean28 = cSVLexer25.isEndOfFile((int) (short) 10);
        boolean boolean30 = cSVLexer25.isEndOfFile(0);
        boolean boolean32 = cSVLexer25.isQuoteChar((int) '\r');
        org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type34 = token33.type;
        java.lang.String str35 = token33.toString();
        org.apache.commons.csv.Token.Type type36 = token33.type;
        java.lang.StringBuilder stringBuilder37 = token33.content;
        cSVLexer25.trimTrailingSpaces(stringBuilder37);
        cSVLexer18.trimTrailingSpaces(stringBuilder37);
        boolean boolean41 = cSVLexer18.isCommentStart((int) (byte) -1);
        boolean boolean43 = cSVLexer18.isStartOfLine(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormatBuilder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type34.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "INVALID []" + "'", str35, "INVALID []");
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type36.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder37);
        org.junit.Assert.assertEquals(stringBuilder37.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        java.lang.String[] strArray13 = cSVFormat12.getHeader();
        boolean boolean14 = cSVFormat12.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder17 = cSVFormatBuilder15.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder19 = cSVFormatBuilder15.withRecordSeparator("Delimiter=< > Escape=<#> QuoteChar=<#> CommentStart=<\r> EmptyLines:ignored");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\r\n" + "'", str14, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormatBuilder17);
        org.junit.Assert.assertNotNull(cSVFormatBuilder19);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        boolean boolean13 = cSVLexer5.isWhitespace(10);
        boolean boolean15 = cSVLexer5.readEndOfLine((int) (short) 100);
        org.apache.commons.csv.Token token16 = new org.apache.commons.csv.Token();
        token16.isReady = false;
        token16.isReady = true;
        token16.isReady = true;
        boolean boolean23 = token16.isReady;
        token16.reset();
        org.apache.commons.csv.Token token25 = new org.apache.commons.csv.Token();
        token25.isReady = false;
        org.apache.commons.csv.Token.Type type28 = org.apache.commons.csv.Token.Type.INVALID;
        token25.type = type28;
        token16.type = type28;
        token16.isReady = false;
        org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type34 = token33.type;
        java.lang.String str35 = token33.toString();
        org.apache.commons.csv.Token.Type type36 = org.apache.commons.csv.Token.Type.EORECORD;
        token33.type = type36;
        org.apache.commons.csv.Token.Type type38 = token33.type;
        token16.type = type38;
        java.lang.String str40 = token16.toString();
        boolean boolean41 = token16.isReady;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token42 = cSVLexer5.nextToken(token16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type28.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type34.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "INVALID []" + "'", str35, "INVALID []");
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type36.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type38.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "EORECORD []" + "'", str40, "EORECORD []");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isQuoteChar(0);
        boolean boolean16 = cSVLexer5.ignoreEmptyLines;
        boolean boolean17 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart(0);
        boolean boolean18 = cSVLexer5.isCommentStart((int) '\\');
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        token19.isReady = false;
        token19.isReady = true;
        java.lang.String str24 = token19.toString();
        org.apache.commons.csv.Token token25 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type26 = org.apache.commons.csv.Token.Type.COMMENT;
        token25.type = type26;
        token19.type = type26;
        org.apache.commons.csv.Token.Type type29 = token19.type;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token30 = cSVLexer5.nextToken(token19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "INVALID []" + "'", str24, "INVALID []");
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type26.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type29.equals(org.apache.commons.csv.Token.Type.COMMENT));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote15 = null;
        org.apache.commons.csv.Quote quote24 = null;
        org.apache.commons.csv.Quote quote33 = null;
        org.apache.commons.csv.Quote quote42 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote42, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote33, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray55);
        org.apache.commons.csv.Quote quote60 = null;
        org.apache.commons.csv.Quote quote69 = null;
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat83 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote69, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder84 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote60, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder85 = cSVFormatBuilder57.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder86 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote24, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray82);
        org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote15, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray82);
        java.lang.String str88 = cSVFormat12.format((java.lang.Object[]) strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder89 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat12);
        boolean boolean90 = cSVFormat12.getIgnoreSurroundingSpaces();
        java.lang.Character char91 = cSVFormat12.getEscape();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(cSVFormatBuilder85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertNotNull(cSVFormatBuilder89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(char91);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(' ');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = cSVFormatBuilder2.withQuoteChar((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = cSVFormatBuilder2.withCommentStart('\t');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder10 = cSVFormatBuilder8.withEscape('\b');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder12 = cSVFormatBuilder10.withNullToString("hi!");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder14 = cSVFormatBuilder12.withEscape('\f');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormatBuilder14.withRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder14.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormatBuilder18.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader20 = null;
        org.apache.commons.csv.CSVLexer cSVLexer21 = new org.apache.commons.csv.CSVLexer(cSVFormat19, extendedBufferedReader20);
        org.apache.commons.csv.CSVParser cSVParser22 = new org.apache.commons.csv.CSVParser(",", cSVFormat19);
        long long23 = cSVParser22.getLineNumber();
        long long24 = cSVParser22.getRecordNumber();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap25 = cSVParser22.getHeaderMap();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
        org.junit.Assert.assertNotNull(cSVFormatBuilder8);
        org.junit.Assert.assertNotNull(cSVFormatBuilder10);
        org.junit.Assert.assertNotNull(cSVFormatBuilder12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) 'a');
        boolean boolean13 = cSVLexer5.readEndOfLine(3);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        boolean boolean15 = cSVLexer5.ignoreSurroundingSpaces;
        // The following exception was thrown during execution in test generation
        try {
            int int16 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat1);
        boolean boolean3 = cSVFormat1.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat1, extendedBufferedReader4);
        java.lang.String str6 = cSVFormat1.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder7 = cSVFormat1.toBuilder();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\r\n" + "'", str6, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormatBuilder7);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVFormat12.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat12, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isQuoteChar((int) '4');
        boolean boolean19 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean21 = cSVLexer15.isEscape((int) '#');
        boolean boolean23 = cSVLexer15.isWhitespace((int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.StringBuilder stringBuilder9 = token7.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder9);
        boolean boolean12 = cSVLexer3.isEndOfFile((int) (byte) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer3.format;
        java.lang.String str14 = cSVFormat13.getNullToString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        boolean boolean8 = cSVLexer5.isWhitespace((int) '\\');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVLexer5.format;
        org.apache.commons.csv.Token token10 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type11 = token10.type;
        java.lang.String str12 = token10.toString();
        org.apache.commons.csv.Token.Type type13 = token10.type;
        java.lang.StringBuilder stringBuilder14 = token10.content;
        token10.isReady = true;
        token10.isReady = true;
        org.apache.commons.csv.Token.Type type19 = token10.type;
        org.apache.commons.csv.Token.Type type20 = null;
        token10.type = type20;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token22 = cSVLexer5.nextToken(token10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type11.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "INVALID []" + "'", str12, "INVALID []");
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type13.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder14);
        org.junit.Assert.assertEquals(stringBuilder14.toString(), "");
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type19.equals(org.apache.commons.csv.Token.Type.INVALID));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        boolean boolean14 = cSVLexer5.readEndOfLine((int) (byte) 1);
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.Token token16 = new org.apache.commons.csv.Token();
        token16.isReady = false;
        token16.isReady = true;
        java.lang.String str21 = token16.toString();
        token16.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token23 = cSVLexer5.nextToken(token16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "INVALID []" + "'", str21, "INVALID []");
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isCommentStart((int) (short) -1);
        org.apache.commons.csv.Token token16 = new org.apache.commons.csv.Token();
        token16.isReady = false;
        token16.isReady = true;
        java.lang.String str21 = token16.toString();
        org.apache.commons.csv.Token token22 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type23 = org.apache.commons.csv.Token.Type.COMMENT;
        token22.type = type23;
        token16.type = type23;
        org.apache.commons.csv.Token.Type type26 = token16.type;
        java.lang.StringBuilder stringBuilder27 = token16.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder27);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "INVALID []" + "'", str21, "INVALID []");
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type23.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type26.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertNotNull(stringBuilder27);
        org.junit.Assert.assertEquals(stringBuilder27.toString(), "");
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) 'a');
        boolean boolean13 = cSVLexer5.isQuoteChar(3);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        boolean boolean16 = cSVLexer5.isStartOfLine((int) (short) -1);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat17);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder19 = cSVFormat17.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormatBuilder19.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null;
        org.apache.commons.csv.CSVLexer cSVLexer22 = new org.apache.commons.csv.CSVLexer(cSVFormat20, extendedBufferedReader21);
        boolean boolean24 = cSVLexer22.isEscape(0);
        boolean boolean26 = cSVLexer22.isEscape(0);
        boolean boolean28 = cSVLexer22.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVLexer22.format;
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder31 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat30);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder32 = cSVFormat30.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormatBuilder32.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader34 = null;
        org.apache.commons.csv.CSVLexer cSVLexer35 = new org.apache.commons.csv.CSVLexer(cSVFormat33, extendedBufferedReader34);
        boolean boolean37 = cSVLexer35.isEscape(0);
        boolean boolean39 = cSVLexer35.isEscape(0);
        boolean boolean41 = cSVLexer35.isQuoteChar(1);
        org.apache.commons.csv.Token token42 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type43 = org.apache.commons.csv.Token.Type.TOKEN;
        token42.type = type43;
        java.lang.StringBuilder stringBuilder45 = token42.content;
        cSVLexer35.trimTrailingSpaces(stringBuilder45);
        cSVLexer22.trimTrailingSpaces(stringBuilder45);
        cSVLexer5.trimTrailingSpaces(stringBuilder45);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormatBuilder19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormatBuilder32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type43.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder45);
        org.junit.Assert.assertEquals(stringBuilder45.toString(), "");
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean12 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isCommentStart(1);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) ',');
        boolean boolean13 = cSVLexer5.ignoreEmptyLines;
        boolean boolean15 = cSVLexer5.isCommentStart((int) '\r');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVLexer5.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader9 = cSVLexer5.in;
        boolean boolean11 = cSVLexer5.isStartOfLine((int) (short) 1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(extendedBufferedReader9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        boolean boolean8 = cSVLexer3.isDelimiter((int) '#');
        boolean boolean9 = cSVLexer3.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.isWhitespace((int) (short) 0);
        boolean boolean18 = cSVLexer5.isQuoteChar(10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean17 = cSVLexer5.isStartOfLine((-2));
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        token19.isReady = false;
        token19.isReady = true;
        token19.reset();
        java.lang.StringBuilder stringBuilder25 = token19.content;
        cSVLexer18.trimTrailingSpaces(stringBuilder25);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = cSVLexer18.readEndOfLine((int) '\r');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(stringBuilder25);
        org.junit.Assert.assertEquals(stringBuilder25.toString(), "");
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        java.lang.String str12 = cSVFormat11.toString();
        java.lang.String[] strArray13 = cSVFormat11.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.Quote quote20 = null;
        org.apache.commons.csv.Quote quote29 = null;
        org.apache.commons.csv.Quote quote38 = null;
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat52 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote38, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray51);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder53 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote29, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray51);
        org.apache.commons.csv.Quote quote56 = null;
        org.apache.commons.csv.Quote quote65 = null;
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat79 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote65, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray78);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder80 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote56, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray78);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder81 = cSVFormatBuilder53.withHeader(strArray78);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder82 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote20, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray78);
        java.lang.String str83 = cSVFormat17.format((java.lang.Object[]) strArray78);
        java.util.Map<java.lang.String, java.lang.Integer> strMap84 = null;
        org.apache.commons.csv.CSVRecord cSVRecord87 = new org.apache.commons.csv.CSVRecord(strArray78, strMap84, "Delimiter=<,> QuoteChar=<\">", 0L);
        java.lang.String str88 = cSVFormat11.format((java.lang.Object[]) strArray78);
        boolean boolean89 = cSVFormat11.isCommentingEnabled();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str12, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(cSVFormatBuilder81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str83, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer18.in;
        boolean boolean21 = cSVLexer18.isStartOfLine((int) '4');
        boolean boolean23 = cSVLexer18.isStartOfLine(10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type14 = token13.type;
        java.lang.String str15 = token13.toString();
        org.apache.commons.csv.Token.Type type16 = org.apache.commons.csv.Token.Type.COMMENT;
        token13.type = type16;
        token13.reset();
        boolean boolean19 = token13.isReady;
        org.apache.commons.csv.Token.Type type20 = token13.type;
        java.lang.String str21 = token13.toString();
        token13.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token23 = cSVLexer5.nextToken(token13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type14.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "INVALID []" + "'", str15, "INVALID []");
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type16.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type20.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "INVALID []" + "'", str21, "INVALID []");
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = new org.apache.commons.csv.CSVParser("Delimiter=<\"> Escape=<#> QuoteChar=<\n> CommentStart=<\t> EmptyLines:ignored", cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean16 = cSVLexer5.ignoreEmptyLines;
        boolean boolean18 = cSVLexer5.isDelimiter((int) '\t');
        boolean boolean20 = cSVLexer5.isStartOfLine((int) '\b');
        org.apache.commons.csv.Token token21 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type22 = token21.type;
        java.lang.String str23 = token21.toString();
        org.apache.commons.csv.Token.Type type24 = token21.type;
        java.lang.StringBuilder stringBuilder25 = token21.content;
        token21.isReady = true;
        token21.isReady = true;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token30 = cSVLexer5.nextToken(token21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type22.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "INVALID []" + "'", str23, "INVALID []");
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type24.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder25);
        org.junit.Assert.assertEquals(stringBuilder25.toString(), "");
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isQuoteChar((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            long long19 = cSVLexer15.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.isStartOfLine((int) (short) 100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getNullToString();
        java.lang.Character char15 = cSVFormat13.getEscape();
        char char16 = cSVFormat13.getDelimiter();
        java.lang.Character char17 = cSVFormat13.getEscape();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + ',' + "'", char16 == ',');
        org.junit.Assert.assertNull(char17);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        boolean boolean18 = cSVLexer5.isWhitespace((int) '\n');
        boolean boolean20 = cSVLexer5.isQuoteChar((int) (byte) -1);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVLexer5.format;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        boolean boolean13 = cSVLexer6.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer6.format;
        boolean boolean15 = cSVFormat14.isQuoting();
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("[hi!]", cSVFormat14);
        org.apache.commons.csv.Quote quote19 = null;
        org.apache.commons.csv.Quote quote28 = null;
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote28, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray41);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder43 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote19, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray41);
        java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null;
        org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray41, strMap44, "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored", (long) 1);
        java.util.Spliterator<java.lang.String> strSpliterator48 = cSVRecord47.spliterator();
        boolean boolean49 = cSVFormat14.equals((java.lang.Object) cSVRecord47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = cSVRecord47.get("hi!\\\\hi!\\\\hi!\\hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No header mapping was specified, the record values can't be accessed by name");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strSpliterator48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("", cSVFormat13);
        org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser16.nextRecord();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap18 = cSVParser16.getHeaderMap();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(cSVRecord17);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.ignoreEmptyLines;
        boolean boolean15 = cSVLexer5.isStartOfLine((int) '\b');
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        java.lang.String str1 = cSVFormat0.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean5 = cSVFormat0.isCommentingEnabled();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored" + "'", str1, "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored");
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        java.lang.String[] strArray2 = cSVFormat1.getHeader();
        java.lang.String[] strArray3 = cSVFormat1.getHeader();
        char char4 = cSVFormat1.getDelimiter();
        org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser("[hi!, , hi!, , hi!, hi!]", cSVFormat1);
        long long6 = cSVParser5.getRecordNumber();
        long long7 = cSVParser5.getRecordNumber();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + ',' + "'", char4 == ',');
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = cSVFormatBuilder2.withEscape('\\');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = cSVFormatBuilder6.withQuoteChar('\b');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormatBuilder8.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader10 = null;
        org.apache.commons.csv.CSVLexer cSVLexer11 = new org.apache.commons.csv.CSVLexer(cSVFormat9, extendedBufferedReader10);
        org.apache.commons.csv.Quote quote12 = cSVFormat9.getQuotePolicy();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
        org.junit.Assert.assertNotNull(cSVFormatBuilder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(quote12);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        char char16 = cSVFormat13.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\r\n" + "'", str14, "\r\n");
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + ',' + "'", char16 == ',');
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        java.lang.Character char17 = cSVFormat13.getEscape();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(char17);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isWhitespace((int) (short) 10);
        boolean boolean14 = cSVLexer5.isEscape((int) (short) 100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean11 = cSVLexer5.isWhitespace(6);
        boolean boolean13 = cSVLexer5.isEndOfFile(0);
        boolean boolean15 = cSVLexer5.isWhitespace((int) 'a');
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer5.isWhitespace((int) '\\');
        boolean boolean20 = cSVLexer5.isQuoteChar((int) '\\');
        boolean boolean22 = cSVLexer5.isQuoteChar((int) ',');
        boolean boolean24 = cSVLexer5.isEndOfFile((int) (short) 1);
        boolean boolean26 = cSVLexer5.isEscape((int) '\t');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        org.apache.commons.csv.Quote quote3 = null;
        org.apache.commons.csv.Quote quote12 = null;
        org.apache.commons.csv.Quote quote21 = null;
        org.apache.commons.csv.Quote quote30 = null;
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote30, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray43);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder45 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote21, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray43);
        org.apache.commons.csv.Quote quote48 = null;
        org.apache.commons.csv.Quote quote57 = null;
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat71 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote57, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray70);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder72 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote48, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray70);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder73 = cSVFormatBuilder45.withHeader(strArray70);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder74 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote12, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat75 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote3, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray70);
        java.lang.String str76 = cSVFormat75.getNullToString();
        boolean boolean77 = cSVFormat75.isCommentingEnabled();
        org.apache.commons.csv.CSVParser cSVParser78 = new org.apache.commons.csv.CSVParser("", cSVFormat75);
        org.apache.commons.csv.CSVRecord cSVRecord79 = cSVParser78.nextRecord();
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(cSVFormatBuilder73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\r\n" + "'", str76, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(cSVRecord79);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isCommentStart((int) '4');
        boolean boolean17 = cSVLexer5.isEndOfFile((int) '4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean7 = cSVLexer3.isEscape((int) (byte) 1);
        boolean boolean9 = cSVLexer3.readEndOfLine(0);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = cSVLexer3.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isEndOfFile((int) ',');
        boolean boolean17 = cSVLexer5.isEndOfFile((int) (byte) 0);
        boolean boolean19 = cSVLexer5.isWhitespace((int) (byte) 10);
        org.apache.commons.csv.Token token20 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type21 = token20.type;
        java.lang.String str22 = token20.toString();
        org.apache.commons.csv.Token.Type type23 = org.apache.commons.csv.Token.Type.COMMENT;
        token20.type = type23;
        token20.reset();
        java.lang.String str26 = token20.toString();
        org.apache.commons.csv.Token token27 = new org.apache.commons.csv.Token();
        token27.isReady = false;
        token27.isReady = true;
        token27.isReady = true;
        boolean boolean34 = token27.isReady;
        token27.reset();
        org.apache.commons.csv.Token token36 = new org.apache.commons.csv.Token();
        token36.isReady = false;
        org.apache.commons.csv.Token.Type type39 = org.apache.commons.csv.Token.Type.INVALID;
        token36.type = type39;
        token27.type = type39;
        token20.type = type39;
        org.apache.commons.csv.Token token43 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type44 = token43.type;
        java.lang.String str45 = token43.toString();
        org.apache.commons.csv.Token.Type type46 = org.apache.commons.csv.Token.Type.COMMENT;
        token43.type = type46;
        token43.reset();
        boolean boolean49 = token43.isReady;
        org.apache.commons.csv.Token.Type type50 = token43.type;
        token20.type = type50;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token52 = cSVLexer5.nextToken(token20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "INVALID []" + "'", str22, "INVALID []");
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type23.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "INVALID []" + "'", str26, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type39.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type44.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "INVALID []" + "'", str45, "INVALID []");
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type46.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type50.equals(org.apache.commons.csv.Token.Type.INVALID));
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isEndOfFile((int) ',');
        boolean boolean17 = cSVLexer5.isQuoteChar(10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = cSVLexer5.in;
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(extendedBufferedReader13);
        org.junit.Assert.assertNull(extendedBufferedReader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) (short) 1);
        boolean boolean12 = cSVLexer5.ignoreEmptyLines;
        boolean boolean14 = cSVLexer5.isEndOfFile((int) (short) 0);
        org.apache.commons.csv.Token token15 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type16 = token15.type;
        java.lang.String str17 = token15.toString();
        org.apache.commons.csv.Token.Type type18 = org.apache.commons.csv.Token.Type.COMMENT;
        token15.type = type18;
        token15.reset();
        boolean boolean21 = token15.isReady;
        org.apache.commons.csv.Token.Type type22 = token15.type;
        java.lang.StringBuilder stringBuilder23 = token15.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder23);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type16.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "INVALID []" + "'", str17, "INVALID []");
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type18.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type22.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        boolean boolean14 = cSVLexer5.isQuoteChar((int) (byte) 0);
        boolean boolean16 = cSVLexer5.isEndOfFile((-1));
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote15 = null;
        org.apache.commons.csv.Quote quote24 = null;
        org.apache.commons.csv.Quote quote33 = null;
        org.apache.commons.csv.Quote quote42 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote42, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote33, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray55);
        org.apache.commons.csv.Quote quote60 = null;
        org.apache.commons.csv.Quote quote69 = null;
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat83 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote69, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder84 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote60, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder85 = cSVFormatBuilder57.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder86 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote24, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray82);
        org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote15, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray82);
        java.lang.String str88 = cSVFormat12.format((java.lang.Object[]) strArray82);
        java.lang.String str89 = cSVFormat12.toString();
        java.lang.Character char90 = cSVFormat12.getCommentStart();
        boolean boolean91 = cSVFormat12.getIgnoreEmptyLines();
        java.lang.Character char92 = cSVFormat12.getCommentStart();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(cSVFormatBuilder85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str89, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNull(char90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(char92);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder13 = cSVFormat12.toBuilder();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder13);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean15 = cSVLexer5.readEndOfLine((int) (byte) 0);
        boolean boolean17 = cSVLexer5.isEndOfFile(100);
        org.apache.commons.csv.Token token18 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type19 = token18.type;
        java.lang.String str20 = token18.toString();
        org.apache.commons.csv.Token.Type type21 = token18.type;
        java.lang.StringBuilder stringBuilder22 = token18.content;
        java.lang.StringBuilder stringBuilder23 = token18.content;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token24 = cSVLexer5.nextToken(token18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type19.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "INVALID []" + "'", str20, "INVALID []");
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder22);
        org.junit.Assert.assertEquals(stringBuilder22.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        java.lang.String str19 = cSVFormat13.getNullToString();
        org.apache.commons.csv.Quote quote20 = cSVFormat13.getQuotePolicy();
        boolean boolean21 = cSVFormat13.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(quote20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        boolean boolean18 = cSVLexer5.readEndOfLine((int) '\"');
        boolean boolean20 = cSVLexer5.isQuoteChar((int) '4');
        boolean boolean21 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean23 = cSVLexer5.isDelimiter(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote15 = null;
        org.apache.commons.csv.Quote quote24 = null;
        org.apache.commons.csv.Quote quote33 = null;
        org.apache.commons.csv.Quote quote42 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote42, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote33, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray55);
        org.apache.commons.csv.Quote quote60 = null;
        org.apache.commons.csv.Quote quote69 = null;
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat83 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote69, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder84 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote60, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder85 = cSVFormatBuilder57.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder86 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote24, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray82);
        org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote15, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray82);
        java.lang.String str88 = cSVFormat12.format((java.lang.Object[]) strArray82);
        java.lang.String str89 = cSVFormat12.toString();
        java.lang.Character char90 = cSVFormat12.getEscape();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(cSVFormatBuilder85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str89, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNull(char90);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        boolean boolean16 = cSVLexer5.isStartOfLine((int) '\"');
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVLexer5.format;
        boolean boolean19 = cSVLexer5.isEndOfFile(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean18 = cSVLexer5.isEndOfFile((int) (short) 10);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer5.in;
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVLexer5.format;
        boolean boolean21 = cSVFormat20.isQuoting();
        java.lang.String str22 = cSVFormat20.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str22, "Delimiter=<,> QuoteChar=<\">");
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isEndOfFile((int) ',');
        boolean boolean17 = cSVLexer5.isEndOfFile((int) (byte) 0);
        boolean boolean19 = cSVLexer5.isWhitespace((int) (byte) 10);
        boolean boolean21 = cSVLexer5.isStartOfLine(0);
        boolean boolean23 = cSVLexer5.isWhitespace((int) ' ');
        org.apache.commons.csv.Token token24 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type25 = token24.type;
        java.lang.String str26 = token24.toString();
        org.apache.commons.csv.Token.Type type27 = org.apache.commons.csv.Token.Type.COMMENT;
        token24.type = type27;
        token24.reset();
        boolean boolean30 = token24.isReady;
        java.lang.String str31 = token24.toString();
        org.apache.commons.csv.Token token32 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type33 = org.apache.commons.csv.Token.Type.COMMENT;
        token32.type = type33;
        org.apache.commons.csv.Token.Type type35 = token32.type;
        org.apache.commons.csv.Token token36 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type37 = token36.type;
        token32.type = type37;
        token24.type = type37;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token40 = cSVLexer5.nextToken(token24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type25.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "INVALID []" + "'", str26, "INVALID []");
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type27.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "INVALID []" + "'", str31, "INVALID []");
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type33.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type35.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type37.equals(org.apache.commons.csv.Token.Type.INVALID));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        boolean boolean13 = cSVLexer5.readEndOfLine(10);
        boolean boolean15 = cSVLexer5.isEscape((int) '\r');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("", cSVFormat13);
        boolean boolean17 = cSVFormat13.isCommentingEnabled();
        java.io.Reader reader18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable19 = cSVFormat13.parse(reader18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        boolean boolean13 = cSVLexer6.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer6.format;
        boolean boolean15 = cSVFormat14.isQuoting();
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("[hi!]", cSVFormat14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap17 = cSVParser16.getHeaderMap();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        boolean boolean8 = cSVLexer5.isEndOfFile((-1));
        boolean boolean10 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.readEndOfLine((int) (byte) 1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean11 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean13 = cSVLexer5.isDelimiter(0);
        boolean boolean15 = cSVLexer5.isEscape((int) (short) 1);
        boolean boolean17 = cSVLexer5.readEndOfLine(0);
        org.apache.commons.csv.Token token18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token19 = cSVLexer5.nextToken(token18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean18 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean20 = cSVLexer5.isCommentStart(100);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(extendedBufferedReader21);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.isEndOfFile(100);
        boolean boolean19 = cSVLexer15.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVLexer15.format;
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat2);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormat2.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormatBuilder4.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = null;
        org.apache.commons.csv.CSVLexer cSVLexer7 = new org.apache.commons.csv.CSVLexer(cSVFormat5, extendedBufferedReader6);
        boolean boolean8 = cSVLexer7.ignoreEmptyLines;
        boolean boolean10 = cSVLexer7.isEndOfFile((int) (short) 10);
        boolean boolean12 = cSVLexer7.isEndOfFile(0);
        boolean boolean14 = cSVLexer7.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVLexer7.format;
        boolean boolean16 = cSVFormat15.isQuoting();
        org.apache.commons.csv.CSVParser cSVParser17 = new org.apache.commons.csv.CSVParser("[hi!]", cSVFormat15);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser19 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVFormat12.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat12, extendedBufferedReader14);
        org.apache.commons.csv.Token token16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token17 = cSVLexer15.nextToken(token16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart(0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = cSVLexer5.in;
        org.apache.commons.csv.Token token18 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type19 = token18.type;
        java.lang.String str20 = token18.toString();
        org.apache.commons.csv.Token.Type type21 = token18.type;
        java.lang.StringBuilder stringBuilder22 = token18.content;
        token18.isReady = true;
        token18.isReady = true;
        boolean boolean27 = token18.isReady;
        org.apache.commons.csv.Token.Type type28 = token18.type;
        java.lang.String str29 = token18.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token30 = cSVLexer5.nextToken(token18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader17);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type19.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "INVALID []" + "'", str20, "INVALID []");
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder22);
        org.junit.Assert.assertEquals(stringBuilder22.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type28.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "INVALID []" + "'", str29, "INVALID []");
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat0.getNullToString();
        boolean boolean16 = cSVFormat0.isCommentingEnabled();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = cSVLexer5.in;
        boolean boolean16 = cSVLexer5.isEndOfFile(10);
        boolean boolean18 = cSVLexer5.isWhitespace((int) (byte) 10);
        boolean boolean20 = cSVLexer5.isStartOfLine(6);
        boolean boolean22 = cSVLexer5.isEscape((int) '\r');
        boolean boolean24 = cSVLexer5.isQuoteChar((int) '\b');
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder26 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat25);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader27 = null;
        org.apache.commons.csv.CSVLexer cSVLexer28 = new org.apache.commons.csv.CSVLexer(cSVFormat25, extendedBufferedReader27);
        boolean boolean30 = cSVLexer28.isWhitespace(6);
        org.apache.commons.csv.Token token31 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type32 = org.apache.commons.csv.Token.Type.EOF;
        token31.type = type32;
        token31.reset();
        java.lang.StringBuilder stringBuilder35 = token31.content;
        cSVLexer28.trimTrailingSpaces(stringBuilder35);
        cSVLexer5.trimTrailingSpaces(stringBuilder35);
        org.apache.commons.csv.CSVFormat cSVFormat38 = cSVLexer5.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(extendedBufferedReader13);
        org.junit.Assert.assertNull(extendedBufferedReader14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.apache.commons.csv.Token.Type.EOF + "'", type32.equals(org.apache.commons.csv.Token.Type.EOF));
        org.junit.Assert.assertNotNull(stringBuilder35);
        org.junit.Assert.assertEquals(stringBuilder35.toString(), "");
        org.junit.Assert.assertNotNull(cSVFormat38);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean17 = cSVLexer5.isQuoteChar(6);
        boolean boolean18 = cSVLexer5.ignoreEmptyLines;
        boolean boolean20 = cSVLexer5.isEscape((int) '\b');
        boolean boolean22 = cSVLexer5.isStartOfLine(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean11 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean13 = cSVLexer5.isDelimiter(0);
        boolean boolean15 = cSVLexer5.isQuoteChar((int) (short) 100);
        boolean boolean17 = cSVLexer5.isCommentStart(1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.isEndOfFile(100);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = cSVLexer15.in;
        boolean boolean20 = cSVLexer15.isEscape((int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(extendedBufferedReader18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat1);
        org.apache.commons.csv.CSVParser cSVParser3 = new org.apache.commons.csv.CSVParser("Delimiter=< > Escape=<\f> QuoteChar=<a> CommentStart=<4>", cSVFormat1);
        long long4 = cSVParser3.getRecordNumber();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser3.getRecords();
        long long6 = cSVParser3.getRecordNumber();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser3.getRecords();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordList5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(cSVRecordList7);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart(0);
        boolean boolean18 = cSVLexer5.isCommentStart((int) '\\');
        boolean boolean20 = cSVLexer5.isEscape((int) ' ');
        boolean boolean22 = cSVLexer5.isCommentStart((int) '#');
        org.apache.commons.csv.Token token23 = new org.apache.commons.csv.Token();
        token23.isReady = false;
        token23.isReady = true;
        token23.isReady = true;
        token23.isReady = true;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token32 = cSVLexer5.nextToken(token23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        java.lang.String[] strArray16 = cSVFormat13.getHeader();
        java.lang.Character char17 = cSVFormat13.getCommentStart();
        java.io.Reader reader18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable19 = cSVFormat13.parse(reader18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(char17);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.isDelimiter((-2));
        // The following exception was thrown during execution in test generation
        try {
            long long15 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean8 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder10 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat9);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder11 = cSVFormat9.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormatBuilder11.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = null;
        org.apache.commons.csv.CSVLexer cSVLexer14 = new org.apache.commons.csv.CSVLexer(cSVFormat12, extendedBufferedReader13);
        boolean boolean15 = cSVLexer14.ignoreEmptyLines;
        boolean boolean17 = cSVLexer14.isEndOfFile((int) (short) 10);
        boolean boolean19 = cSVLexer14.isEndOfFile(0);
        boolean boolean21 = cSVLexer14.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVLexer14.format;
        boolean boolean23 = cSVLexer14.ignoreEmptyLines;
        boolean boolean25 = cSVLexer14.isWhitespace((int) (short) -1);
        org.apache.commons.csv.Token token26 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type27 = token26.type;
        java.lang.String str28 = token26.toString();
        org.apache.commons.csv.Token.Type type29 = org.apache.commons.csv.Token.Type.EORECORD;
        token26.type = type29;
        java.lang.StringBuilder stringBuilder31 = token26.content;
        cSVLexer14.trimTrailingSpaces(stringBuilder31);
        cSVLexer5.trimTrailingSpaces(stringBuilder31);
        boolean boolean35 = cSVLexer5.isQuoteChar(10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormatBuilder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type27.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "INVALID []" + "'", str28, "INVALID []");
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type29.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder31);
        org.junit.Assert.assertEquals(stringBuilder31.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.Token token17 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type18 = token17.type;
        java.lang.String str19 = token17.toString();
        org.apache.commons.csv.Token.Type type20 = token17.type;
        java.lang.StringBuilder stringBuilder21 = token17.content;
        token17.isReady = true;
        token17.isReady = true;
        boolean boolean26 = token17.isReady;
        token17.reset();
        java.lang.StringBuilder stringBuilder28 = token17.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder28);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type18.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "INVALID []" + "'", str19, "INVALID []");
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type20.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder21);
        org.junit.Assert.assertEquals(stringBuilder21.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(stringBuilder28);
        org.junit.Assert.assertEquals(stringBuilder28.toString(), "");
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote15 = null;
        org.apache.commons.csv.Quote quote24 = null;
        org.apache.commons.csv.Quote quote33 = null;
        org.apache.commons.csv.Quote quote42 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote42, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote33, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray55);
        org.apache.commons.csv.Quote quote60 = null;
        org.apache.commons.csv.Quote quote69 = null;
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat83 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote69, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder84 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote60, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder85 = cSVFormatBuilder57.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder86 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote24, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray82);
        org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote15, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray82);
        java.lang.String str88 = cSVFormat12.format((java.lang.Object[]) strArray82);
        java.lang.String str89 = cSVFormat12.toString();
        char char90 = cSVFormat12.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(cSVFormatBuilder85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str89, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertTrue("'" + char90 + "' != '" + ',' + "'", char90 == ',');
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        boolean boolean18 = cSVLexer5.isWhitespace((int) '\n');
        boolean boolean20 = cSVLexer5.isQuoteChar((int) (byte) -1);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVLexer5.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader22 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(extendedBufferedReader22);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.isDelimiter((int) (byte) -1);
        org.apache.commons.csv.Token token15 = new org.apache.commons.csv.Token();
        token15.isReady = false;
        token15.isReady = true;
        token15.isReady = true;
        boolean boolean22 = token15.isReady;
        org.apache.commons.csv.Token token23 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type24 = org.apache.commons.csv.Token.Type.COMMENT;
        token23.type = type24;
        token15.type = type24;
        java.lang.StringBuilder stringBuilder27 = token15.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder27);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type24.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertNotNull(stringBuilder27);
        org.junit.Assert.assertEquals(stringBuilder27.toString(), "");
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        boolean boolean13 = cSVLexer6.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer6.format;
        boolean boolean15 = cSVFormat14.isQuoting();
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("[hi!]", cSVFormat14);
        org.apache.commons.csv.Quote quote19 = null;
        org.apache.commons.csv.Quote quote28 = null;
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote28, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray41);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder43 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote19, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray41);
        java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null;
        org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray41, strMap44, "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored", (long) 1);
        java.util.Spliterator<java.lang.String> strSpliterator48 = cSVRecord47.spliterator();
        boolean boolean49 = cSVFormat14.equals((java.lang.Object) cSVRecord47);
        java.lang.String str50 = cSVFormat14.toString();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strSpliterator48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str50, "Delimiter=<,> QuoteChar=<\">");
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        boolean boolean18 = cSVLexer5.readEndOfLine((int) (short) 0);
        boolean boolean20 = cSVLexer5.isDelimiter((int) (short) 10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.Token token6 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type7 = token6.type;
        java.lang.String str8 = token6.toString();
        org.apache.commons.csv.Token.Type type9 = org.apache.commons.csv.Token.Type.EORECORD;
        token6.type = type9;
        java.lang.StringBuilder stringBuilder11 = token6.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder11);
        boolean boolean13 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder17 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat16);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormat16.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormatBuilder18.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader20 = null;
        org.apache.commons.csv.CSVLexer cSVLexer21 = new org.apache.commons.csv.CSVLexer(cSVFormat19, extendedBufferedReader20);
        boolean boolean23 = cSVLexer21.isEscape(0);
        boolean boolean25 = cSVLexer21.isEscape(0);
        boolean boolean27 = cSVLexer21.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat28 = cSVLexer21.format;
        boolean boolean29 = cSVFormat15.equals((java.lang.Object) cSVFormat28);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder30 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat28);
        boolean boolean31 = cSVFormat28.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader32 = null;
        org.apache.commons.csv.CSVLexer cSVLexer33 = new org.apache.commons.csv.CSVLexer(cSVFormat28, extendedBufferedReader32);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader34 = cSVLexer33.in;
        org.apache.commons.csv.Token token35 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type36 = token35.type;
        java.lang.String str37 = token35.toString();
        org.apache.commons.csv.Token.Type type38 = org.apache.commons.csv.Token.Type.EORECORD;
        token35.type = type38;
        java.lang.StringBuilder stringBuilder40 = token35.content;
        token35.reset();
        java.lang.StringBuilder stringBuilder42 = token35.content;
        cSVLexer33.trimTrailingSpaces(stringBuilder42);
        cSVLexer5.trimTrailingSpaces(stringBuilder42);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type7.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INVALID []" + "'", str8, "INVALID []");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type9.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(extendedBufferedReader34);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type36.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "INVALID []" + "'", str37, "INVALID []");
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type38.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder40);
        org.junit.Assert.assertEquals(stringBuilder40.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder42);
        org.junit.Assert.assertEquals(stringBuilder42.toString(), "");
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart(0);
        boolean boolean18 = cSVLexer5.readEndOfLine((int) (short) 100);
        boolean boolean20 = cSVLexer5.isStartOfLine((int) '\f');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(extendedBufferedReader21);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.Token token6 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type7 = token6.type;
        java.lang.String str8 = token6.toString();
        org.apache.commons.csv.Token.Type type9 = org.apache.commons.csv.Token.Type.EORECORD;
        token6.type = type9;
        java.lang.StringBuilder stringBuilder11 = token6.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean16 = cSVLexer5.isWhitespace(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type7.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INVALID []" + "'", str8, "INVALID []");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type9.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.readEndOfLine((int) 'a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote15 = null;
        org.apache.commons.csv.Quote quote24 = null;
        org.apache.commons.csv.Quote quote33 = null;
        org.apache.commons.csv.Quote quote42 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote42, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote33, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray55);
        org.apache.commons.csv.Quote quote60 = null;
        org.apache.commons.csv.Quote quote69 = null;
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat83 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote69, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder84 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote60, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder85 = cSVFormatBuilder57.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder86 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote24, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray82);
        org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote15, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray82);
        java.lang.String str88 = cSVFormat12.format((java.lang.Object[]) strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder89 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat12);
        java.lang.String[] strArray90 = cSVFormat12.getHeader();
        java.io.Reader reader91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable92 = cSVFormat12.parse(reader91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(cSVFormatBuilder85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertNull(strArray90);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getNullToString();
        java.lang.String[] strArray15 = null;
        java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null;
        org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) (byte) 100);
        boolean boolean20 = cSVRecord19.isConsistent();
        java.util.Spliterator<java.lang.String> strSpliterator21 = cSVRecord19.spliterator();
        boolean boolean22 = cSVRecord19.isConsistent();
        boolean boolean23 = cSVRecord19.isConsistent();
        long long24 = cSVRecord19.getRecordNumber();
        long long25 = cSVRecord19.getRecordNumber();
        boolean boolean26 = cSVFormat13.equals((java.lang.Object) cSVRecord19);
        boolean boolean27 = cSVRecord19.isConsistent();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = cSVLexer5.in;
        boolean boolean16 = cSVLexer5.isEndOfFile(10);
        boolean boolean18 = cSVLexer5.isWhitespace((int) (byte) 10);
        boolean boolean20 = cSVLexer5.isStartOfLine(6);
        boolean boolean22 = cSVLexer5.isEscape((int) '\r');
        org.apache.commons.csv.Token token23 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type24 = token23.type;
        java.lang.String str25 = token23.toString();
        org.apache.commons.csv.Token token26 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type27 = org.apache.commons.csv.Token.Type.TOKEN;
        token26.type = type27;
        token23.type = type27;
        java.lang.StringBuilder stringBuilder30 = token23.content;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token31 = cSVLexer5.nextToken(token23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(extendedBufferedReader13);
        org.junit.Assert.assertNull(extendedBufferedReader14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type24.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "INVALID []" + "'", str25, "INVALID []");
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type27.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder30);
        org.junit.Assert.assertEquals(stringBuilder30.toString(), "");
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        char char5 = cSVFormat0.getDelimiter();
        boolean boolean6 = cSVFormat0.isCommentingEnabled();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + ',' + "'", char5 == ',');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder14 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = cSVFormat13.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormatBuilder15.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat16, extendedBufferedReader17);
        boolean boolean20 = cSVLexer18.isEscape(0);
        boolean boolean22 = cSVLexer18.isEscape(0);
        boolean boolean24 = cSVLexer18.isQuoteChar(1);
        org.apache.commons.csv.Token token25 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type26 = org.apache.commons.csv.Token.Type.TOKEN;
        token25.type = type26;
        java.lang.StringBuilder stringBuilder28 = token25.content;
        cSVLexer18.trimTrailingSpaces(stringBuilder28);
        cSVLexer5.trimTrailingSpaces(stringBuilder28);
        boolean boolean32 = cSVLexer5.isWhitespace((int) '\\');
        boolean boolean34 = cSVLexer5.isStartOfLine(3);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormatBuilder15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type26.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder28);
        org.junit.Assert.assertEquals(stringBuilder28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        boolean boolean13 = cSVLexer5.readEndOfLine(10);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer5.format;
        boolean boolean16 = cSVLexer5.isStartOfLine((int) '\f');
        boolean boolean18 = cSVLexer5.isEscape((int) (byte) 0);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat19);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder21 = cSVFormat19.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormatBuilder21.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader23 = null;
        org.apache.commons.csv.CSVLexer cSVLexer24 = new org.apache.commons.csv.CSVLexer(cSVFormat22, extendedBufferedReader23);
        boolean boolean25 = cSVLexer24.ignoreEmptyLines;
        boolean boolean27 = cSVLexer24.isEndOfFile((int) (short) 10);
        boolean boolean29 = cSVLexer24.isEndOfFile(0);
        boolean boolean31 = cSVLexer24.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVLexer24.format;
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder34 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat33);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder35 = cSVFormat33.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormatBuilder35.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader37 = null;
        org.apache.commons.csv.CSVLexer cSVLexer38 = new org.apache.commons.csv.CSVLexer(cSVFormat36, extendedBufferedReader37);
        org.apache.commons.csv.Token token39 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type40 = token39.type;
        java.lang.String str41 = token39.toString();
        org.apache.commons.csv.Token.Type type42 = org.apache.commons.csv.Token.Type.EORECORD;
        token39.type = type42;
        java.lang.StringBuilder stringBuilder44 = token39.content;
        cSVLexer38.trimTrailingSpaces(stringBuilder44);
        cSVLexer24.trimTrailingSpaces(stringBuilder44);
        cSVLexer5.trimTrailingSpaces(stringBuilder44);
        boolean boolean49 = cSVLexer5.isStartOfLine((int) '4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormatBuilder21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVFormatBuilder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type40.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "INVALID []" + "'", str41, "INVALID []");
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type42.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder44);
        org.junit.Assert.assertEquals(stringBuilder44.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.StringBuilder stringBuilder9 = token7.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder9);
        boolean boolean12 = cSVLexer3.isEndOfFile((int) (byte) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer3.format;
        boolean boolean14 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVLexer3.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("", cSVFormat13);
        boolean boolean17 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder19 = cSVFormat13.toBuilder();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormatBuilder19);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        java.lang.String str12 = cSVFormat11.toString();
        java.lang.String[] strArray13 = cSVFormat11.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.Quote quote20 = null;
        org.apache.commons.csv.Quote quote29 = null;
        org.apache.commons.csv.Quote quote38 = null;
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat52 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote38, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray51);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder53 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote29, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray51);
        org.apache.commons.csv.Quote quote56 = null;
        org.apache.commons.csv.Quote quote65 = null;
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat79 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote65, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray78);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder80 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote56, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray78);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder81 = cSVFormatBuilder53.withHeader(strArray78);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder82 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote20, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray78);
        java.lang.String str83 = cSVFormat17.format((java.lang.Object[]) strArray78);
        java.util.Map<java.lang.String, java.lang.Integer> strMap84 = null;
        org.apache.commons.csv.CSVRecord cSVRecord87 = new org.apache.commons.csv.CSVRecord(strArray78, strMap84, "Delimiter=<,> QuoteChar=<\">", 0L);
        java.lang.String str88 = cSVFormat11.format((java.lang.Object[]) strArray78);
        boolean boolean89 = cSVFormat11.isEscaping();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str12, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(cSVFormatBuilder81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str83, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isEndOfFile((int) ',');
        boolean boolean17 = cSVLexer5.isEndOfFile((int) (byte) 0);
        boolean boolean19 = cSVLexer5.isCommentStart((int) '\t');
        boolean boolean20 = cSVLexer5.ignoreSurroundingSpaces;
        // The following exception was thrown during execution in test generation
        try {
            long long21 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader16 = null;
        org.apache.commons.csv.CSVLexer cSVLexer17 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader16);
        java.lang.String str18 = cSVFormat13.getNullToString();
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart(0);
        boolean boolean18 = cSVLexer5.isCommentStart((int) '\\');
        boolean boolean20 = cSVLexer5.isEscape((int) ' ');
        boolean boolean22 = cSVLexer5.isEscape((-1));
        org.apache.commons.csv.Token token23 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type24 = token23.type;
        java.lang.String str25 = token23.toString();
        org.apache.commons.csv.Token.Type type26 = org.apache.commons.csv.Token.Type.COMMENT;
        token23.type = type26;
        token23.reset();
        boolean boolean29 = token23.isReady;
        java.lang.String str30 = token23.toString();
        org.apache.commons.csv.Token token31 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type32 = org.apache.commons.csv.Token.Type.COMMENT;
        token31.type = type32;
        org.apache.commons.csv.Token.Type type34 = token31.type;
        org.apache.commons.csv.Token token35 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type36 = token35.type;
        token31.type = type36;
        token23.type = type36;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token39 = cSVLexer5.nextToken(token23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type24.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "INVALID []" + "'", str25, "INVALID []");
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type26.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "INVALID []" + "'", str30, "INVALID []");
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type32.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type34.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type36.equals(org.apache.commons.csv.Token.Type.INVALID));
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        java.lang.String str1 = cSVFormat0.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean5 = cSVFormat0.isCommentingEnabled();
        java.lang.String[] strArray6 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder7 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder9 = cSVFormatBuilder7.withRecordSeparator("hi!");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored" + "'", str1, "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored");
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strArray6);
        org.junit.Assert.assertNotNull(cSVFormatBuilder9);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.StringBuilder stringBuilder9 = token7.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder9);
        boolean boolean12 = cSVLexer3.isEndOfFile((int) (byte) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer3.format;
        boolean boolean14 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token15 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type16 = token15.type;
        token15.isReady = false;
        boolean boolean19 = token15.isReady;
        token15.isReady = false;
        token15.isReady = false;
        java.lang.String str24 = token15.toString();
        org.apache.commons.csv.Token.Type type25 = token15.type;
        boolean boolean26 = token15.isReady;
        org.apache.commons.csv.Token.Type type27 = token15.type;
        org.apache.commons.csv.Token token28 = new org.apache.commons.csv.Token();
        token28.isReady = false;
        token28.isReady = true;
        token28.isReady = true;
        boolean boolean35 = token28.isReady;
        org.apache.commons.csv.Token token36 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type37 = org.apache.commons.csv.Token.Type.COMMENT;
        token36.type = type37;
        token28.type = type37;
        org.apache.commons.csv.Token token40 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type41 = token40.type;
        java.lang.String str42 = token40.toString();
        org.apache.commons.csv.Token.Type type43 = org.apache.commons.csv.Token.Type.EORECORD;
        token40.type = type43;
        token28.type = type43;
        token15.type = type43;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token47 = cSVLexer3.nextToken(token15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type16.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "INVALID []" + "'", str24, "INVALID []");
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type25.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type27.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type37.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type41.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "INVALID []" + "'", str42, "INVALID []");
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type43.equals(org.apache.commons.csv.Token.Type.EORECORD));
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader32 = cSVLexer19.in;
        boolean boolean34 = cSVLexer19.isCommentStart((int) (short) 0);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder36 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat35);
        boolean boolean37 = cSVFormat35.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader38 = null;
        org.apache.commons.csv.CSVLexer cSVLexer39 = new org.apache.commons.csv.CSVLexer(cSVFormat35, extendedBufferedReader38);
        boolean boolean41 = cSVLexer39.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder43 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat42);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader44 = null;
        org.apache.commons.csv.CSVLexer cSVLexer45 = new org.apache.commons.csv.CSVLexer(cSVFormat42, extendedBufferedReader44);
        boolean boolean47 = cSVLexer45.isEndOfFile((int) '\n');
        boolean boolean48 = cSVLexer45.ignoreEmptyLines;
        org.apache.commons.csv.Token token49 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type50 = token49.type;
        java.lang.StringBuilder stringBuilder51 = token49.content;
        cSVLexer45.trimTrailingSpaces(stringBuilder51);
        cSVLexer39.trimTrailingSpaces(stringBuilder51);
        cSVLexer19.trimTrailingSpaces(stringBuilder51);
        boolean boolean56 = cSVLexer19.isQuoteChar(0);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = cSVLexer19.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(extendedBufferedReader32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormatBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type50.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder51);
        org.junit.Assert.assertEquals(stringBuilder51.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote15 = null;
        org.apache.commons.csv.Quote quote24 = null;
        org.apache.commons.csv.Quote quote33 = null;
        org.apache.commons.csv.Quote quote42 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote42, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote33, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray55);
        org.apache.commons.csv.Quote quote60 = null;
        org.apache.commons.csv.Quote quote69 = null;
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat83 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote69, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder84 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote60, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder85 = cSVFormatBuilder57.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder86 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote24, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray82);
        org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote15, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray82);
        java.lang.String str88 = cSVFormat12.format((java.lang.Object[]) strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder89 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat12);
        java.lang.String[] strArray90 = cSVFormat12.getHeader();
        java.lang.Character char91 = cSVFormat12.getEscape();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(cSVFormatBuilder85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertNull(char91);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        boolean boolean8 = cSVLexer3.isQuoteChar((int) '4');
        boolean boolean10 = cSVLexer3.isQuoteChar((int) (byte) 100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine(0);
        boolean boolean8 = cSVLexer4.isEndOfFile((int) (byte) 1);
        boolean boolean10 = cSVLexer4.isEscape((int) '4');
        boolean boolean12 = cSVLexer4.isEndOfFile((-1));
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart(0);
        boolean boolean18 = cSVLexer5.readEndOfLine((int) (short) 100);
        boolean boolean20 = cSVLexer5.isStartOfLine((int) '\f');
        boolean boolean21 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        java.lang.String str4 = cSVFormat0.getNullToString();
        java.lang.String str5 = cSVFormat0.toString();
        java.lang.String str6 = cSVFormat0.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str5, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\r\n" + "'", str6, "\r\n");
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean11 = cSVLexer5.isWhitespace(6);
        boolean boolean13 = cSVLexer5.isEndOfFile(0);
        boolean boolean15 = cSVLexer5.isWhitespace(0);
        boolean boolean17 = cSVLexer5.readEndOfLine((int) (short) 100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.StringBuilder stringBuilder9 = token7.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder9);
        boolean boolean12 = cSVLexer3.isEndOfFile((int) (byte) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer3.format;
        boolean boolean14 = cSVFormat13.isEscaping();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isEndOfFile((int) ',');
        boolean boolean17 = cSVLexer5.readEndOfLine((-2));
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVFormat12.isCommentingEnabled();
        boolean boolean14 = cSVFormat12.getIgnoreSurroundingSpaces();
        java.lang.String str15 = cSVFormat12.toString();
        org.apache.commons.csv.Quote quote16 = cSVFormat12.getQuotePolicy();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str15, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNull(quote16);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        boolean boolean8 = cSVLexer3.isQuoteChar((int) '4');
        boolean boolean9 = cSVLexer3.ignoreEmptyLines;
        boolean boolean11 = cSVLexer3.isCommentStart(1);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader12 = cSVLexer3.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(extendedBufferedReader12);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        boolean boolean33 = cSVLexer19.isStartOfLine(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = cSVLexer5.in;
        boolean boolean16 = cSVLexer5.isEndOfFile(10);
        org.apache.commons.csv.Token token17 = new org.apache.commons.csv.Token();
        token17.isReady = false;
        token17.isReady = true;
        token17.isReady = true;
        boolean boolean24 = token17.isReady;
        token17.reset();
        org.apache.commons.csv.Token token26 = new org.apache.commons.csv.Token();
        token26.isReady = false;
        org.apache.commons.csv.Token.Type type29 = org.apache.commons.csv.Token.Type.INVALID;
        token26.type = type29;
        token17.type = type29;
        token17.isReady = false;
        org.apache.commons.csv.Token token34 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type35 = token34.type;
        java.lang.String str36 = token34.toString();
        org.apache.commons.csv.Token.Type type37 = org.apache.commons.csv.Token.Type.EORECORD;
        token34.type = type37;
        org.apache.commons.csv.Token.Type type39 = token34.type;
        token17.type = type39;
        token17.isReady = false;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token43 = cSVLexer5.nextToken(token17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(extendedBufferedReader13);
        org.junit.Assert.assertNull(extendedBufferedReader14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type29.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type35.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "INVALID []" + "'", str36, "INVALID []");
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type37.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type39.equals(org.apache.commons.csv.Token.Type.EORECORD));
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        boolean boolean4 = cSVFormat1.isCommentingEnabled();
        org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser("[]", cSVFormat1);
        java.lang.String[] strArray6 = null;
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        org.apache.commons.csv.CSVRecord cSVRecord10 = new org.apache.commons.csv.CSVRecord(strArray6, strMap7, "", (long) (byte) 100);
        boolean boolean11 = cSVRecord10.isConsistent();
        int int12 = cSVRecord10.size();
        java.util.Spliterator<java.lang.String> strSpliterator13 = cSVRecord10.spliterator();
        boolean boolean15 = cSVRecord10.isSet("");
        java.lang.String str16 = cSVRecord10.getComment();
        java.util.Iterator<java.lang.String> strItor17 = cSVRecord10.iterator();
        int int18 = cSVRecord10.size();
        boolean boolean20 = cSVRecord10.isSet("Delimiter=< > Escape=<\b> QuoteChar=<a> CommentStart=<\t>");
        boolean boolean21 = cSVFormat1.equals((java.lang.Object) cSVRecord10);
        boolean boolean23 = cSVRecord10.isSet("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = cSVRecord10.get((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean7 = cSVLexer3.isEscape((int) (byte) 1);
        boolean boolean9 = cSVLexer3.readEndOfLine(0);
        boolean boolean11 = cSVLexer3.isCommentStart((int) '\f');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.isWhitespace((int) (short) -1);
        boolean boolean18 = cSVLexer5.isStartOfLine((-1));
        boolean boolean20 = cSVLexer5.readEndOfLine((int) (byte) 0);
        boolean boolean21 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.isEscape((int) (short) 10);
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.isStartOfLine((int) (short) 1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        boolean boolean1 = cSVFormat0.getIgnoreEmptyLines();
        org.apache.commons.csv.Quote quote4 = null;
        org.apache.commons.csv.Quote quote13 = null;
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat27 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote13, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray26);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder28 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote4, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray26);
        org.apache.commons.csv.Quote quote31 = null;
        org.apache.commons.csv.Quote quote40 = null;
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat54 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote40, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray53);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder55 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote31, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray53);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder56 = cSVFormatBuilder28.withHeader(strArray53);
        java.lang.String str57 = cSVFormat0.format((java.lang.Object[]) strArray53);
        boolean boolean58 = cSVFormat0.isCommentingEnabled();
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder61 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat60);
        org.apache.commons.csv.CSVParser cSVParser62 = new org.apache.commons.csv.CSVParser("Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored", cSVFormat60);
        boolean boolean63 = cSVFormat0.equals((java.lang.Object) cSVParser62);
        long long64 = cSVParser62.getLineNumber();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(cSVFormatBuilder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str57, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        org.apache.commons.csv.Quote quote2 = null;
        org.apache.commons.csv.Quote quote11 = null;
        org.apache.commons.csv.Quote quote20 = null;
        org.apache.commons.csv.Quote quote29 = null;
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote29, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray42);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder44 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote20, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray42);
        org.apache.commons.csv.Quote quote47 = null;
        org.apache.commons.csv.Quote quote56 = null;
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat70 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote56, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder71 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote47, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder72 = cSVFormatBuilder44.withHeader(strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder73 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote11, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat74 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray69);
        org.apache.commons.csv.Quote quote75 = cSVFormat74.getQuotePolicy();
        java.lang.String[] strArray76 = cSVFormat74.getHeader();
        java.lang.String[] strArray77 = cSVFormat74.getHeader();
        boolean boolean78 = cSVFormat74.isQuoting();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader79 = null;
        org.apache.commons.csv.CSVLexer cSVLexer80 = new org.apache.commons.csv.CSVLexer(cSVFormat74, extendedBufferedReader79);
        boolean boolean81 = cSVFormat74.getIgnoreEmptyLines();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader82 = null;
        org.apache.commons.csv.CSVLexer cSVLexer83 = new org.apache.commons.csv.CSVLexer(cSVFormat74, extendedBufferedReader82);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = cSVLexer83.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(cSVFormatBuilder72);
        org.junit.Assert.assertNull(quote75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        java.lang.Character char19 = cSVFormat13.getCommentStart();
        boolean boolean20 = cSVFormat13.isQuoting();
        java.lang.Class<?> wildcardClass21 = cSVFormat13.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine(0);
        boolean boolean8 = cSVLexer4.isEndOfFile((int) (byte) 1);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVLexer4.format;
        boolean boolean11 = cSVLexer4.isWhitespace((int) (byte) -1);
        boolean boolean13 = cSVLexer4.isDelimiter((int) '#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        boolean boolean9 = cSVLexer5.isEndOfFile((int) (byte) 100);
        boolean boolean11 = cSVLexer5.isStartOfLine((int) '\r');
        boolean boolean13 = cSVLexer5.isDelimiter((int) (byte) 1);
        boolean boolean15 = cSVLexer5.isStartOfLine((int) '\t');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        boolean boolean13 = cSVLexer5.isQuoteChar((int) '\"');
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVLexer5.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        boolean boolean8 = cSVLexer3.isDelimiter((int) '#');
        boolean boolean10 = cSVLexer3.isCommentStart(100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isCommentStart((int) ',');
        boolean boolean19 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean21 = cSVLexer15.isCommentStart(6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isWhitespace((int) (short) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isWhitespace((int) ' ');
        boolean boolean17 = cSVLexer5.readEndOfLine((int) '#');
        boolean boolean19 = cSVLexer5.isQuoteChar((int) 'a');
        boolean boolean21 = cSVLexer5.isCommentStart(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.StringBuilder stringBuilder9 = token7.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder9);
        boolean boolean12 = cSVLexer3.isEndOfFile((int) (byte) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer3.format;
        boolean boolean14 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token15 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type16 = token15.type;
        java.lang.String str17 = token15.toString();
        boolean boolean18 = token15.isReady;
        java.lang.String str19 = token15.toString();
        java.lang.StringBuilder stringBuilder20 = token15.content;
        java.lang.String str21 = token15.toString();
        boolean boolean22 = token15.isReady;
        org.apache.commons.csv.Token.Type type23 = token15.type;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token24 = cSVLexer3.nextToken(token15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type16.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "INVALID []" + "'", str17, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "INVALID []" + "'", str19, "INVALID []");
        org.junit.Assert.assertNotNull(stringBuilder20);
        org.junit.Assert.assertEquals(stringBuilder20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "INVALID []" + "'", str21, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type23.equals(org.apache.commons.csv.Token.Type.INVALID));
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        boolean boolean13 = cSVLexer6.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer6.format;
        boolean boolean15 = cSVFormat14.isQuoting();
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("[hi!]", cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder17 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder19 = cSVFormatBuilder17.withQuoteChar(' ');
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(cSVFormatBuilder17);
        org.junit.Assert.assertNotNull(cSVFormatBuilder19);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        boolean boolean8 = cSVLexer5.ignoreEmptyLines;
        boolean boolean10 = cSVLexer5.isCommentStart((int) ',');
        boolean boolean12 = cSVLexer5.isQuoteChar(0);
        org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token();
        token13.isReady = false;
        token13.isReady = true;
        token13.isReady = true;
        java.lang.String str20 = token13.toString();
        token13.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token22 = cSVLexer5.nextToken(token13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "INVALID []" + "'", str20, "INVALID []");
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getNullToString();
        java.lang.Character char15 = cSVFormat13.getEscape();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat13.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder16.withRecordSeparator('\t');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat13.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder16.withEscape((java.lang.Character) '\\');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = cSVFormatBuilder16.withCommentStart((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder22 = cSVFormatBuilder20.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder24 = cSVFormatBuilder20.withNullToString("Delimiter=<\t> Escape=<\\>");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder26 = cSVFormatBuilder24.withQuoteChar('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str15, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormatBuilder20);
        org.junit.Assert.assertNotNull(cSVFormatBuilder22);
        org.junit.Assert.assertNotNull(cSVFormatBuilder24);
        org.junit.Assert.assertNotNull(cSVFormatBuilder26);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isCommentStart(1);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) ',');
        boolean boolean14 = cSVLexer5.isDelimiter(3);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        boolean boolean8 = cSVLexer3.isQuoteChar((int) '4');
        boolean boolean9 = cSVLexer3.ignoreEmptyLines;
        boolean boolean11 = cSVLexer3.isStartOfLine((-1));
        boolean boolean12 = cSVLexer3.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isWhitespace((int) (short) 10);
        boolean boolean13 = cSVLexer5.ignoreEmptyLines;
        boolean boolean15 = cSVLexer5.readEndOfLine((int) (short) 10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        org.apache.commons.csv.Quote quote2 = null;
        org.apache.commons.csv.Quote quote11 = null;
        org.apache.commons.csv.Quote quote20 = null;
        org.apache.commons.csv.Quote quote29 = null;
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote29, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray42);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder44 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote20, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray42);
        org.apache.commons.csv.Quote quote47 = null;
        org.apache.commons.csv.Quote quote56 = null;
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat70 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote56, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder71 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote47, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder72 = cSVFormatBuilder44.withHeader(strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder73 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote11, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat74 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray69);
        org.apache.commons.csv.Quote quote75 = cSVFormat74.getQuotePolicy();
        java.lang.String[] strArray76 = cSVFormat74.getHeader();
        java.lang.String[] strArray77 = cSVFormat74.getHeader();
        boolean boolean78 = cSVFormat74.isQuoting();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader79 = null;
        org.apache.commons.csv.CSVLexer cSVLexer80 = new org.apache.commons.csv.CSVLexer(cSVFormat74, extendedBufferedReader79);
        boolean boolean81 = cSVFormat74.getIgnoreEmptyLines();
        org.apache.commons.csv.Quote quote82 = cSVFormat74.getQuotePolicy();
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(cSVFormatBuilder72);
        org.junit.Assert.assertNull(quote75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(quote82);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormatBuilder4.build();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormatBuilder4.build();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        java.lang.String[] strArray8 = cSVFormat6.getHeader();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader9 = null;
        org.apache.commons.csv.CSVLexer cSVLexer10 = new org.apache.commons.csv.CSVLexer(cSVFormat6, extendedBufferedReader9);
        java.lang.Character char11 = cSVFormat6.getEscape();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader12 = null;
        org.apache.commons.csv.CSVLexer cSVLexer13 = new org.apache.commons.csv.CSVLexer(cSVFormat6, extendedBufferedReader12);
        java.lang.String str14 = cSVFormat6.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray8);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str14, "Delimiter=<,> QuoteChar=<\">");
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader15 = cSVLexer5.in;
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVLexer5.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(extendedBufferedReader15);
        org.junit.Assert.assertNotNull(cSVFormat16);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        java.lang.String str4 = cSVFormat3.getNullToString();
        java.lang.String[] strArray5 = cSVFormat3.getHeader();
        java.lang.Character char6 = cSVFormat3.getCommentStart();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = null;
        org.apache.commons.csv.CSVLexer cSVLexer8 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader7);
        boolean boolean9 = cSVFormat3.isQuoting();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        org.apache.commons.csv.Quote quote2 = null;
        org.apache.commons.csv.Quote quote11 = null;
        org.apache.commons.csv.Quote quote20 = null;
        org.apache.commons.csv.Quote quote29 = null;
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote29, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray42);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder44 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote20, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray42);
        org.apache.commons.csv.Quote quote47 = null;
        org.apache.commons.csv.Quote quote56 = null;
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat70 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote56, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder71 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote47, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder72 = cSVFormatBuilder44.withHeader(strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder73 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote11, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat74 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray69);
        org.apache.commons.csv.Quote quote75 = cSVFormat74.getQuotePolicy();
        java.lang.String[] strArray76 = cSVFormat74.getHeader();
        java.lang.String[] strArray77 = cSVFormat74.getHeader();
        boolean boolean78 = cSVFormat74.isQuoting();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader79 = null;
        org.apache.commons.csv.CSVLexer cSVLexer80 = new org.apache.commons.csv.CSVLexer(cSVFormat74, extendedBufferedReader79);
        boolean boolean81 = cSVFormat74.getIgnoreEmptyLines();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader82 = null;
        org.apache.commons.csv.CSVLexer cSVLexer83 = new org.apache.commons.csv.CSVLexer(cSVFormat74, extendedBufferedReader82);
        boolean boolean84 = cSVLexer83.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(cSVFormatBuilder72);
        org.junit.Assert.assertNull(quote75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.StringBuilder stringBuilder9 = token7.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder9);
        boolean boolean12 = cSVLexer3.isEndOfFile((int) (byte) 10);
        boolean boolean13 = cSVLexer3.ignoreEmptyLines;
        boolean boolean15 = cSVLexer3.isDelimiter(0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader16 = cSVLexer3.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(extendedBufferedReader16);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        boolean boolean7 = cSVLexer3.ignoreSurroundingSpaces;
        org.apache.commons.csv.Token token8 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type9 = org.apache.commons.csv.Token.Type.TOKEN;
        token8.type = type9;
        java.lang.StringBuilder stringBuilder11 = token8.content;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token12 = cSVLexer3.nextToken(token8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type9.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean12 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.Object obj14 = null;
        boolean boolean15 = cSVFormat13.equals(obj14);
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder17 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat16);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormat16.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = cSVFormatBuilder18.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormatBuilder20.build();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormatBuilder20.build();
        boolean boolean23 = cSVFormat22.isQuoting();
        org.apache.commons.csv.Quote quote26 = null;
        org.apache.commons.csv.Quote quote35 = null;
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat49 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote35, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray48);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder50 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote26, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray48);
        java.util.Map<java.lang.String, java.lang.Integer> strMap51 = null;
        org.apache.commons.csv.CSVRecord cSVRecord54 = new org.apache.commons.csv.CSVRecord(strArray48, strMap51, "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored", (long) 1);
        java.lang.String[] strArray55 = cSVRecord54.values();
        java.lang.String str56 = cSVFormat22.format((java.lang.Object[]) strArray55);
        java.lang.String str57 = cSVFormat13.format((java.lang.Object[]) strArray55);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormatBuilder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str56, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str57, "hi!,,hi!,,hi!,hi!");
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) (short) 1);
        boolean boolean12 = cSVLexer5.ignoreEmptyLines;
        boolean boolean14 = cSVLexer5.isEndOfFile((int) (short) 0);
        boolean boolean16 = cSVLexer5.isDelimiter((int) '4');
        boolean boolean18 = cSVLexer5.isEscape((int) (byte) -1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.isQuoteChar((int) (short) 10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isDelimiter((int) (short) -1);
        boolean boolean17 = cSVLexer5.readEndOfLine((-1));
        boolean boolean19 = cSVLexer5.readEndOfLine((-2));
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.isEscape((int) (short) 10);
        org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token();
        java.lang.StringBuilder stringBuilder15 = token14.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.CSVParser cSVParser14 = new org.apache.commons.csv.CSVParser("Delimiter=<,> QuoteChar=<\">", cSVFormat13);
        java.lang.Character char15 = cSVFormat13.getCommentStart();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader8 = cSVLexer5.in;
        boolean boolean10 = cSVLexer5.isCommentStart(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertNull(extendedBufferedReader8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean11 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean13 = cSVLexer5.readEndOfLine(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean16 = cSVLexer5.ignoreEmptyLines;
        boolean boolean18 = cSVLexer5.isCommentStart((int) ',');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        boolean boolean16 = cSVLexer5.isStartOfLine((int) '\"');
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVLexer5.format;
        boolean boolean19 = cSVLexer5.readEndOfLine(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isCommentStart(1);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) ',');
        boolean boolean14 = cSVLexer5.isQuoteChar((int) (byte) -1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVLexer4.format;
        java.lang.Character char8 = cSVFormat7.getCommentStart();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean7 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean8 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat13.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        java.lang.String[] strArray17 = null;
        java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null;
        org.apache.commons.csv.CSVRecord cSVRecord21 = new org.apache.commons.csv.CSVRecord(strArray17, strMap18, "", (long) (byte) 100);
        boolean boolean22 = cSVRecord21.isConsistent();
        java.lang.String[] strArray23 = cSVRecord21.values();
        java.lang.String str24 = cSVFormat13.format((java.lang.Object[]) strArray23);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str15, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.CSVParser cSVParser14 = new org.apache.commons.csv.CSVParser("Delimiter=<,> QuoteChar=<\">", cSVFormat13);
        long long15 = cSVParser14.getLineNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator16 = cSVParser14.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator16);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine(0);
        boolean boolean8 = cSVLexer4.readEndOfLine((int) ' ');
        boolean boolean10 = cSVLexer4.isEscape((int) '\f');
        boolean boolean12 = cSVLexer4.isEndOfFile(3);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVFormat12.isCommentingEnabled();
        java.lang.Character char14 = cSVFormat12.getCommentStart();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(char14);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart(0);
        boolean boolean18 = cSVLexer5.isCommentStart((int) '\\');
        boolean boolean20 = cSVLexer5.isEscape((int) ' ');
        boolean boolean22 = cSVLexer5.isEscape((-1));
        boolean boolean24 = cSVLexer5.isStartOfLine(1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder5 = cSVFormatBuilder3.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormatBuilder5.build();
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormatBuilder5.build();
        boolean boolean8 = cSVFormat7.isQuoting();
        org.apache.commons.csv.CSVParser cSVParser9 = new org.apache.commons.csv.CSVParser("Delimiter=< > Escape=<\b> QuoteChar=<a> CommentStart=<\t>", cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormatBuilder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        boolean boolean20 = cSVLexer18.isEscape((int) (byte) 0);
        org.apache.commons.csv.Token token21 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type22 = token21.type;
        java.lang.String str23 = token21.toString();
        org.apache.commons.csv.Token.Type type24 = token21.type;
        java.lang.StringBuilder stringBuilder25 = token21.content;
        token21.isReady = true;
        token21.isReady = true;
        boolean boolean30 = token21.isReady;
        org.apache.commons.csv.Token.Type type31 = token21.type;
        token21.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token33 = cSVLexer18.nextToken(token21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type22.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "INVALID []" + "'", str23, "INVALID []");
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type24.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder25);
        org.junit.Assert.assertEquals(stringBuilder25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type31.equals(org.apache.commons.csv.Token.Type.INVALID));
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart(0);
        boolean boolean18 = cSVLexer5.isCommentStart((int) '\\');
        boolean boolean20 = cSVLexer5.isEscape((int) ' ');
        boolean boolean22 = cSVLexer5.isCommentStart((int) (byte) 1);
        boolean boolean24 = cSVLexer5.isEndOfFile((-1));
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getNullToString();
        java.lang.Character char15 = cSVFormat13.getEscape();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat13.toBuilder();
        java.io.Reader reader17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable18 = cSVFormat13.parse(reader17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat1, extendedBufferedReader3);
        java.lang.String str5 = cSVFormat1.getNullToString();
        java.lang.String str6 = cSVFormat1.toString();
        org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser("hi!,,hi!,,hi!,hi!", cSVFormat1);
        boolean boolean8 = cSVFormat1.isEscaping();
        char char9 = cSVFormat1.getDelimiter();
        java.lang.String str10 = cSVFormat1.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str6, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ',');
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\r\n" + "'", str10, "\r\n");
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean16 = cSVLexer5.ignoreEmptyLines;
        boolean boolean18 = cSVLexer5.isDelimiter((int) '\t');
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder21 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat20);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder22 = cSVFormat20.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormatBuilder22.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader24 = null;
        org.apache.commons.csv.CSVLexer cSVLexer25 = new org.apache.commons.csv.CSVLexer(cSVFormat23, extendedBufferedReader24);
        boolean boolean27 = cSVLexer25.isEscape(0);
        boolean boolean29 = cSVLexer25.isEscape(0);
        boolean boolean31 = cSVLexer25.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVLexer25.format;
        boolean boolean33 = cSVFormat19.equals((java.lang.Object) cSVFormat32);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder34 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat32);
        boolean boolean35 = cSVFormat32.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader36 = null;
        org.apache.commons.csv.CSVLexer cSVLexer37 = new org.apache.commons.csv.CSVLexer(cSVFormat32, extendedBufferedReader36);
        org.apache.commons.csv.Token token38 = new org.apache.commons.csv.Token();
        token38.isReady = false;
        token38.isReady = true;
        token38.reset();
        java.lang.StringBuilder stringBuilder44 = token38.content;
        cSVLexer37.trimTrailingSpaces(stringBuilder44);
        cSVLexer5.trimTrailingSpaces(stringBuilder44);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormatBuilder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(stringBuilder44);
        org.junit.Assert.assertEquals(stringBuilder44.toString(), "");
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        token19.isReady = false;
        token19.isReady = true;
        token19.reset();
        java.lang.StringBuilder stringBuilder25 = token19.content;
        cSVLexer18.trimTrailingSpaces(stringBuilder25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVLexer18.format;
        boolean boolean28 = cSVFormat27.isCommentingEnabled();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(stringBuilder25);
        org.junit.Assert.assertEquals(stringBuilder25.toString(), "");
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        java.lang.String[] strArray2 = cSVFormat0.getHeader();
        boolean boolean3 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isCommentStart((int) (short) -1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean11 = cSVLexer5.isWhitespace(6);
        boolean boolean13 = cSVLexer5.isEndOfFile(0);
        boolean boolean15 = cSVLexer5.isWhitespace(0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader16 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(extendedBufferedReader16);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean10 = cSVLexer5.ignoreEmptyLines;
        boolean boolean11 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = token12.type;
        java.lang.StringBuilder stringBuilder14 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder14);
        boolean boolean17 = cSVLexer5.isEscape((int) '\t');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type13.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder14);
        org.junit.Assert.assertEquals(stringBuilder14.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.isEndOfFile(100);
        boolean boolean19 = cSVLexer15.isCommentStart(0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader20 = cSVLexer15.in;
        org.apache.commons.csv.Token token21 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type22 = token21.type;
        java.lang.String str23 = token21.toString();
        org.apache.commons.csv.Token.Type type24 = org.apache.commons.csv.Token.Type.EORECORD;
        token21.type = type24;
        org.apache.commons.csv.Token.Type type26 = token21.type;
        token21.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token28 = cSVLexer15.nextToken(token21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(extendedBufferedReader20);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type22.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "INVALID []" + "'", str23, "INVALID []");
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type24.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type26.equals(org.apache.commons.csv.Token.Type.EORECORD));
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        boolean boolean13 = cSVLexer5.readEndOfLine((int) '\"');
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("", cSVFormat13);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser16.getRecords();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVRecordList17);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader8 = cSVLexer5.in;
        boolean boolean9 = cSVLexer5.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertNull(extendedBufferedReader8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVLexer5.format;
        java.lang.String str9 = cSVFormat8.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str9, "Delimiter=<,> QuoteChar=<\">");
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        boolean boolean13 = cSVLexer6.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer6.format;
        boolean boolean15 = cSVFormat14.isQuoting();
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("[hi!]", cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder17 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat14);
        java.lang.String str18 = cSVFormat14.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(cSVFormatBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\r\n" + "'", str18, "\r\n");
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote15 = null;
        org.apache.commons.csv.Quote quote24 = null;
        org.apache.commons.csv.Quote quote33 = null;
        org.apache.commons.csv.Quote quote42 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote42, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote33, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray55);
        org.apache.commons.csv.Quote quote60 = null;
        org.apache.commons.csv.Quote quote69 = null;
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat83 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote69, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder84 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote60, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder85 = cSVFormatBuilder57.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder86 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote24, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray82);
        org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote15, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray82);
        java.lang.String str88 = cSVFormat12.format((java.lang.Object[]) strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder89 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat12);
        boolean boolean90 = cSVFormat12.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.Quote quote91 = cSVFormat12.getQuotePolicy();
        java.lang.String[] strArray92 = cSVFormat12.getHeader();
        java.io.Reader reader93 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable94 = cSVFormat12.parse(reader93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(cSVFormatBuilder85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertNotNull(cSVFormatBuilder89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(quote91);
        org.junit.Assert.assertNull(strArray92);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        java.lang.String[] strArray4 = cSVFormat0.getHeader();
        boolean boolean5 = cSVFormat0.isCommentingEnabled();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        boolean boolean13 = cSVLexer6.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer6.format;
        boolean boolean15 = cSVFormat14.isQuoting();
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("[hi!]", cSVFormat14);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser16.getRecords();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser16.iterator();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator19 = cSVParser16.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(cSVRecordList17);
        org.junit.Assert.assertNotNull(cSVRecordItor18);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator19);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getNullToString();
        java.lang.Character char15 = cSVFormat13.getEscape();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat13.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder16.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = cSVFormatBuilder16.withEscape('\b');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormatBuilder20);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean11 = cSVLexer5.isWhitespace(6);
        boolean boolean13 = cSVLexer5.isEndOfFile(0);
        boolean boolean15 = cSVLexer5.isWhitespace((int) 'a');
        boolean boolean17 = cSVLexer5.isWhitespace((int) '\t');
        boolean boolean18 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        token19.isReady = false;
        token19.isReady = true;
        token19.reset();
        java.lang.StringBuilder stringBuilder25 = token19.content;
        cSVLexer18.trimTrailingSpaces(stringBuilder25);
        // The following exception was thrown during execution in test generation
        try {
            long long27 = cSVLexer18.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(stringBuilder25);
        org.junit.Assert.assertEquals(stringBuilder25.toString(), "");
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat2);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormat2.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = cSVFormatBuilder4.withRecordSeparator('\b');
        org.apache.commons.csv.Quote quote7 = org.apache.commons.csv.Quote.MINIMAL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = cSVFormatBuilder6.withQuotePolicy(quote7);
        org.apache.commons.csv.Quote quote17 = null;
        org.apache.commons.csv.Quote quote26 = null;
        org.apache.commons.csv.Quote quote35 = null;
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat49 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote35, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray48);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder50 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote26, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray48);
        org.apache.commons.csv.CSVFormat cSVFormat51 = new org.apache.commons.csv.CSVFormat('\f', (java.lang.Character) '\\', quote17, (java.lang.Character) '\\', (java.lang.Character) '\f', true, true, "hi!,,hi!,,hi!,hi!", "Delimiter=<,> QuoteChar=<\">", strArray48);
        org.apache.commons.csv.CSVFormat cSVFormat52 = new org.apache.commons.csv.CSVFormat('4', (java.lang.Character) ',', quote7, (java.lang.Character) '\r', (java.lang.Character) ' ', false, true, "COMMENT []", "TOKEN []", strArray48);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader53 = null;
        org.apache.commons.csv.CSVLexer cSVLexer54 = new org.apache.commons.csv.CSVLexer(cSVFormat52, extendedBufferedReader53);
        boolean boolean55 = cSVFormat52.isQuoting();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
        org.junit.Assert.assertTrue("'" + quote7 + "' != '" + org.apache.commons.csv.Quote.MINIMAL + "'", quote7.equals(org.apache.commons.csv.Quote.MINIMAL));
        org.junit.Assert.assertNotNull(cSVFormatBuilder8);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) (short) 1);
        boolean boolean12 = cSVLexer5.ignoreEmptyLines;
        boolean boolean14 = cSVLexer5.isEndOfFile((int) (short) 0);
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) 100);
        boolean boolean18 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        token19.isReady = false;
        org.apache.commons.csv.Token.Type type22 = org.apache.commons.csv.Token.Type.INVALID;
        token19.type = type22;
        org.apache.commons.csv.Token token24 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type25 = token24.type;
        java.lang.String str26 = token24.toString();
        org.apache.commons.csv.Token.Type type27 = org.apache.commons.csv.Token.Type.EORECORD;
        token24.type = type27;
        token19.type = type27;
        boolean boolean30 = token19.isReady;
        java.lang.StringBuilder stringBuilder31 = token19.content;
        boolean boolean32 = token19.isReady;
        java.lang.String str33 = token19.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token34 = cSVLexer5.nextToken(token19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type22.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type25.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "INVALID []" + "'", str26, "INVALID []");
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type27.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(stringBuilder31);
        org.junit.Assert.assertEquals(stringBuilder31.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "EORECORD []" + "'", str33, "EORECORD []");
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("", cSVFormat13);
        boolean boolean17 = cSVFormat13.getIgnoreSurroundingSpaces();
        java.lang.String str18 = cSVFormat13.getRecordSeparator();
        boolean boolean19 = cSVFormat13.isCommentingEnabled();
        boolean boolean20 = cSVFormat13.isCommentingEnabled();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\r\n" + "'", str18, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEndOfFile(6);
        boolean boolean11 = cSVLexer5.isEndOfFile(3);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader12 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(extendedBufferedReader12);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean8 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder10 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat9);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder11 = cSVFormat9.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormatBuilder11.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = null;
        org.apache.commons.csv.CSVLexer cSVLexer14 = new org.apache.commons.csv.CSVLexer(cSVFormat12, extendedBufferedReader13);
        boolean boolean15 = cSVLexer14.ignoreEmptyLines;
        boolean boolean17 = cSVLexer14.isEndOfFile((int) (short) 10);
        boolean boolean19 = cSVLexer14.isEndOfFile(0);
        boolean boolean21 = cSVLexer14.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVLexer14.format;
        boolean boolean23 = cSVLexer14.ignoreEmptyLines;
        boolean boolean25 = cSVLexer14.isWhitespace((int) (short) -1);
        org.apache.commons.csv.Token token26 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type27 = token26.type;
        java.lang.String str28 = token26.toString();
        org.apache.commons.csv.Token.Type type29 = org.apache.commons.csv.Token.Type.EORECORD;
        token26.type = type29;
        java.lang.StringBuilder stringBuilder31 = token26.content;
        cSVLexer14.trimTrailingSpaces(stringBuilder31);
        cSVLexer5.trimTrailingSpaces(stringBuilder31);
        boolean boolean35 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean37 = cSVLexer5.isStartOfLine((-1));
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormatBuilder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type27.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "INVALID []" + "'", str28, "INVALID []");
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type29.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder31);
        org.junit.Assert.assertEquals(stringBuilder31.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        java.lang.String str1 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.Quote quote2 = cSVFormat0.getQuotePolicy();
        boolean boolean3 = cSVFormat0.isEscaping();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isQuoteChar((int) (short) 100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\r\n" + "'", str1, "\r\n");
        org.junit.Assert.assertNull(quote2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = cSVLexer19.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isCommentStart(1);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) ',');
        boolean boolean14 = cSVLexer5.isStartOfLine(0);
        boolean boolean16 = cSVLexer5.isDelimiter((int) '\n');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = cSVLexer5.in;
        boolean boolean19 = cSVLexer5.isStartOfLine((int) (short) 0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(' ');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = cSVFormatBuilder2.withQuoteChar((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = cSVFormatBuilder2.withCommentStart('\t');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder10 = cSVFormatBuilder8.withEscape('\b');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder12 = cSVFormatBuilder10.withNullToString("hi!");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder14 = cSVFormatBuilder12.withEscape('\f');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormatBuilder14.withRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder14.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormatBuilder18.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader20 = null;
        org.apache.commons.csv.CSVLexer cSVLexer21 = new org.apache.commons.csv.CSVLexer(cSVFormat19, extendedBufferedReader20);
        org.apache.commons.csv.CSVParser cSVParser22 = new org.apache.commons.csv.CSVParser(",", cSVFormat19);
        java.lang.String str23 = cSVFormat19.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
        org.junit.Assert.assertNotNull(cSVFormatBuilder8);
        org.junit.Assert.assertNotNull(cSVFormatBuilder10);
        org.junit.Assert.assertNotNull(cSVFormatBuilder12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "4" + "'", str23, "4");
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart(0);
        boolean boolean18 = cSVLexer5.readEndOfLine((int) (short) 100);
        boolean boolean20 = cSVLexer5.isStartOfLine((int) '\f');
        boolean boolean21 = cSVLexer5.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = cSVLexer5.in;
        org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type15 = token14.type;
        java.lang.String str16 = token14.toString();
        org.apache.commons.csv.Token.Type type17 = token14.type;
        boolean boolean18 = token14.isReady;
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type20 = token19.type;
        java.lang.String str21 = token19.toString();
        org.apache.commons.csv.Token.Type type22 = token19.type;
        java.lang.StringBuilder stringBuilder23 = token19.content;
        token19.isReady = true;
        token19.isReady = true;
        boolean boolean28 = token19.isReady;
        org.apache.commons.csv.Token.Type type29 = token19.type;
        token14.type = type29;
        boolean boolean31 = token14.isReady;
        boolean boolean32 = token14.isReady;
        java.lang.StringBuilder stringBuilder33 = token14.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder33);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(extendedBufferedReader13);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type15.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "INVALID []" + "'", str16, "INVALID []");
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type17.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type20.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "INVALID []" + "'", str21, "INVALID []");
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type22.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type29.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(stringBuilder33);
        org.junit.Assert.assertEquals(stringBuilder33.toString(), "");
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(' ');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = cSVFormatBuilder2.withQuoteChar((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = cSVFormatBuilder2.withCommentStart('a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder10 = cSVFormatBuilder8.withEscape((java.lang.Character) '\b');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder12 = cSVFormatBuilder8.withCommentStart('4');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder14 = cSVFormatBuilder12.withEscape((java.lang.Character) '\f');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormatBuilder14.withNullToString("hi!\t\thi!\t\thi!\thi!");
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder14.build();
        org.apache.commons.csv.CSVParser cSVParser18 = new org.apache.commons.csv.CSVParser("Delimiter=<,> QuoteChar=<\">", cSVFormat17);
        long long19 = cSVParser18.getLineNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator20 = cSVParser18.spliterator();
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
        org.junit.Assert.assertNotNull(cSVFormatBuilder8);
        org.junit.Assert.assertNotNull(cSVFormatBuilder10);
        org.junit.Assert.assertNotNull(cSVFormatBuilder12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator20);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader32 = cSVLexer19.in;
        boolean boolean34 = cSVLexer19.isCommentStart((int) (short) 0);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder36 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat35);
        boolean boolean37 = cSVFormat35.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader38 = null;
        org.apache.commons.csv.CSVLexer cSVLexer39 = new org.apache.commons.csv.CSVLexer(cSVFormat35, extendedBufferedReader38);
        boolean boolean41 = cSVLexer39.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder43 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat42);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader44 = null;
        org.apache.commons.csv.CSVLexer cSVLexer45 = new org.apache.commons.csv.CSVLexer(cSVFormat42, extendedBufferedReader44);
        boolean boolean47 = cSVLexer45.isEndOfFile((int) '\n');
        boolean boolean48 = cSVLexer45.ignoreEmptyLines;
        org.apache.commons.csv.Token token49 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type50 = token49.type;
        java.lang.StringBuilder stringBuilder51 = token49.content;
        cSVLexer45.trimTrailingSpaces(stringBuilder51);
        cSVLexer39.trimTrailingSpaces(stringBuilder51);
        cSVLexer19.trimTrailingSpaces(stringBuilder51);
        boolean boolean55 = cSVLexer19.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(extendedBufferedReader32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormatBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type50.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder51);
        org.junit.Assert.assertEquals(stringBuilder51.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader32 = cSVLexer19.in;
        boolean boolean34 = cSVLexer19.readEndOfLine(6);
        boolean boolean35 = cSVLexer19.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(extendedBufferedReader32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isEndOfFile((int) ',');
        boolean boolean17 = cSVLexer5.isEndOfFile((int) (byte) 0);
        boolean boolean19 = cSVLexer5.isWhitespace((int) (byte) 10);
        org.apache.commons.csv.Token token20 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type21 = token20.type;
        java.lang.String str22 = token20.toString();
        org.apache.commons.csv.Token.Type type23 = org.apache.commons.csv.Token.Type.EORECORD;
        token20.type = type23;
        org.apache.commons.csv.Token.Type type25 = token20.type;
        java.lang.String str26 = token20.toString();
        token20.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token28 = cSVLexer5.nextToken(token20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "INVALID []" + "'", str22, "INVALID []");
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type23.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type25.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "EORECORD []" + "'", str26, "EORECORD []");
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        java.lang.String str19 = cSVFormat13.getNullToString();
        org.apache.commons.csv.Quote quote20 = cSVFormat13.getQuotePolicy();
        java.lang.String[] strArray21 = cSVFormat13.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(quote20);
        org.junit.Assert.assertNull(strArray21);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        org.apache.commons.csv.Quote quote6 = org.apache.commons.csv.Quote.ALL;
        java.lang.String[] strArray13 = null;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder14 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('a', (java.lang.Character) ' ', quote6, (java.lang.Character) '\"', (java.lang.Character) '\\', false, false, "Delimiter=<,> QuoteChar=<\">", "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored", strArray13);
        java.lang.String[] strArray21 = null;
        org.apache.commons.csv.CSVFormat cSVFormat22 = new org.apache.commons.csv.CSVFormat('\b', (java.lang.Character) '\"', quote6, (java.lang.Character) '4', (java.lang.Character) 'a', false, true, "\r\n", "INVALID []", strArray21);
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder31 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat30);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder32 = cSVFormat30.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormatBuilder32.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader34 = null;
        org.apache.commons.csv.CSVLexer cSVLexer35 = new org.apache.commons.csv.CSVLexer(cSVFormat33, extendedBufferedReader34);
        boolean boolean37 = cSVLexer35.isEscape(0);
        boolean boolean39 = cSVLexer35.isEscape(0);
        boolean boolean41 = cSVLexer35.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVLexer35.format;
        org.apache.commons.csv.CSVParser cSVParser43 = new org.apache.commons.csv.CSVParser("Delimiter=<,> QuoteChar=<\">", cSVFormat42);
        boolean boolean44 = cSVFormat42.isQuoting();
        java.lang.String[] strArray45 = null;
        java.util.Map<java.lang.String, java.lang.Integer> strMap46 = null;
        org.apache.commons.csv.CSVRecord cSVRecord49 = new org.apache.commons.csv.CSVRecord(strArray45, strMap46, "", (long) (byte) 100);
        boolean boolean50 = cSVRecord49.isConsistent();
        java.util.Spliterator<java.lang.String> strSpliterator51 = cSVRecord49.spliterator();
        boolean boolean52 = cSVRecord49.isConsistent();
        boolean boolean53 = cSVRecord49.isConsistent();
        long long54 = cSVRecord49.getRecordNumber();
        boolean boolean56 = cSVRecord49.isMapped("Delimiter=<\t> Escape=<\\>");
        java.lang.String[] strArray57 = cSVRecord49.values();
        java.lang.String str58 = cSVFormat42.format((java.lang.Object[]) strArray57);
        org.apache.commons.csv.CSVFormat cSVFormat59 = new org.apache.commons.csv.CSVFormat('\b', (java.lang.Character) '\b', quote6, (java.lang.Character) ' ', (java.lang.Character) 'a', false, true, "\r\n", "[]", strArray57);
        java.lang.String str60 = cSVFormat59.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder61 = cSVFormat59.toBuilder();
        org.junit.Assert.assertTrue("'" + quote6 + "' != '" + org.apache.commons.csv.Quote.ALL + "'", quote6.equals(org.apache.commons.csv.Quote.ALL));
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVFormatBuilder32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strSpliterator51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L + "'", long54 == 100L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\r\n" + "'", str60, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormatBuilder61);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("", cSVFormat13);
        org.apache.commons.csv.Quote quote17 = cSVFormat13.getQuotePolicy();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(quote17);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        boolean boolean14 = cSVLexer5.isQuoteChar((int) (byte) 0);
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVLexer5.format;
        boolean boolean17 = cSVLexer5.isEndOfFile(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVLexer4.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader8 = null;
        org.apache.commons.csv.CSVLexer cSVLexer9 = new org.apache.commons.csv.CSVLexer(cSVFormat7, extendedBufferedReader8);
        boolean boolean11 = cSVLexer9.isDelimiter((int) (byte) 10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean2 = cSVFormat1.isEscaping();
        org.apache.commons.csv.Quote quote3 = cSVFormat1.getQuotePolicy();
        java.lang.Character char4 = cSVFormat1.getCommentStart();
        org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser("Delimiter=< > Escape=<#> QuoteChar=<#> CommentStart=<\r> EmptyLines:ignored", cSVFormat1);
        java.lang.String str6 = cSVFormat1.getNullToString();
        java.lang.String str7 = cSVFormat1.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(quote3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\r\n" + "'", str7, "\r\n");
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        boolean boolean8 = cSVLexer5.isWhitespace((int) '\\');
        boolean boolean9 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder5 = cSVFormatBuilder3.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormatBuilder5.build();
        char char7 = cSVFormat6.getDelimiter();
        org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser("", cSVFormat6);
        char char9 = cSVFormat6.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormatBuilder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + ',' + "'", char7 == ',');
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ',');
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = cSVLexer5.in;
        org.apache.commons.csv.Token token15 = new org.apache.commons.csv.Token();
        token15.isReady = false;
        org.apache.commons.csv.Token.Type type18 = org.apache.commons.csv.Token.Type.INVALID;
        token15.type = type18;
        org.apache.commons.csv.Token token20 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type21 = token20.type;
        java.lang.String str22 = token20.toString();
        org.apache.commons.csv.Token.Type type23 = org.apache.commons.csv.Token.Type.EORECORD;
        token20.type = type23;
        token15.type = type23;
        token15.isReady = false;
        java.lang.StringBuilder stringBuilder28 = token15.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder28);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(extendedBufferedReader13);
        org.junit.Assert.assertNull(extendedBufferedReader14);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type18.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "INVALID []" + "'", str22, "INVALID []");
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type23.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder28);
        org.junit.Assert.assertEquals(stringBuilder28.toString(), "");
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader32 = cSVLexer19.in;
        boolean boolean34 = cSVLexer19.isCommentStart((int) (short) 0);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder36 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat35);
        boolean boolean37 = cSVFormat35.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader38 = null;
        org.apache.commons.csv.CSVLexer cSVLexer39 = new org.apache.commons.csv.CSVLexer(cSVFormat35, extendedBufferedReader38);
        boolean boolean41 = cSVLexer39.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder43 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat42);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader44 = null;
        org.apache.commons.csv.CSVLexer cSVLexer45 = new org.apache.commons.csv.CSVLexer(cSVFormat42, extendedBufferedReader44);
        boolean boolean47 = cSVLexer45.isEndOfFile((int) '\n');
        boolean boolean48 = cSVLexer45.ignoreEmptyLines;
        org.apache.commons.csv.Token token49 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type50 = token49.type;
        java.lang.StringBuilder stringBuilder51 = token49.content;
        cSVLexer45.trimTrailingSpaces(stringBuilder51);
        cSVLexer39.trimTrailingSpaces(stringBuilder51);
        cSVLexer19.trimTrailingSpaces(stringBuilder51);
        boolean boolean56 = cSVLexer19.isQuoteChar(0);
        boolean boolean58 = cSVLexer19.isDelimiter(1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(extendedBufferedReader32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormatBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type50.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder51);
        org.junit.Assert.assertEquals(stringBuilder51.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        boolean boolean18 = cSVLexer5.readEndOfLine((int) '\"');
        boolean boolean20 = cSVLexer5.isQuoteChar((int) '4');
        org.apache.commons.csv.Token token21 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type22 = org.apache.commons.csv.Token.Type.COMMENT;
        token21.type = type22;
        java.lang.String str24 = token21.toString();
        org.apache.commons.csv.Token token25 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type26 = token25.type;
        java.lang.String str27 = token25.toString();
        org.apache.commons.csv.Token.Type type28 = org.apache.commons.csv.Token.Type.EORECORD;
        token25.type = type28;
        java.lang.StringBuilder stringBuilder30 = token25.content;
        org.apache.commons.csv.Token.Type type31 = token25.type;
        token21.type = type31;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token33 = cSVLexer5.nextToken(token21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type22.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "COMMENT []" + "'", str24, "COMMENT []");
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type26.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "INVALID []" + "'", str27, "INVALID []");
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type28.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder30);
        org.junit.Assert.assertEquals(stringBuilder30.toString(), "");
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type31.equals(org.apache.commons.csv.Token.Type.EORECORD));
    }
}

