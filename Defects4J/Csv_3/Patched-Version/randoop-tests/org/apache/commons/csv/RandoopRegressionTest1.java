package org.apache.commons.csv;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RandoopRegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test501");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        boolean boolean8 = cSVLexer5.isWhitespace((int) '\\');
        boolean boolean9 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test502");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder5 = cSVFormatBuilder3.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormatBuilder5.build();
        char char7 = cSVFormat6.getDelimiter();
        org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser("", cSVFormat6);
        char char9 = cSVFormat6.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormatBuilder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + ',' + "'", char7 == ',');
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + ',' + "'", char9 == ',');
    }

    @Test
    public void test503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test503");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = cSVLexer5.in;
        org.apache.commons.csv.Token token15 = new org.apache.commons.csv.Token();
        token15.isReady = false;
        org.apache.commons.csv.Token.Type type18 = org.apache.commons.csv.Token.Type.INVALID;
        token15.type = type18;
        org.apache.commons.csv.Token token20 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type21 = token20.type;
        java.lang.String str22 = token20.toString();
        org.apache.commons.csv.Token.Type type23 = org.apache.commons.csv.Token.Type.EORECORD;
        token20.type = type23;
        token15.type = type23;
        token15.isReady = false;
        java.lang.StringBuilder stringBuilder28 = token15.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder28);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(extendedBufferedReader13);
        org.junit.Assert.assertNull(extendedBufferedReader14);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type18.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "INVALID []" + "'", str22, "INVALID []");
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type23.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder28);
        org.junit.Assert.assertEquals(stringBuilder28.toString(), "");
    }

    @Test
    public void test504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test504");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader32 = cSVLexer19.in;
        boolean boolean34 = cSVLexer19.isCommentStart((int) (short) 0);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder36 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat35);
        boolean boolean37 = cSVFormat35.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader38 = null;
        org.apache.commons.csv.CSVLexer cSVLexer39 = new org.apache.commons.csv.CSVLexer(cSVFormat35, extendedBufferedReader38);
        boolean boolean41 = cSVLexer39.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder43 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat42);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader44 = null;
        org.apache.commons.csv.CSVLexer cSVLexer45 = new org.apache.commons.csv.CSVLexer(cSVFormat42, extendedBufferedReader44);
        boolean boolean47 = cSVLexer45.isEndOfFile((int) '\n');
        boolean boolean48 = cSVLexer45.ignoreEmptyLines;
        org.apache.commons.csv.Token token49 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type50 = token49.type;
        java.lang.StringBuilder stringBuilder51 = token49.content;
        cSVLexer45.trimTrailingSpaces(stringBuilder51);
        cSVLexer39.trimTrailingSpaces(stringBuilder51);
        cSVLexer19.trimTrailingSpaces(stringBuilder51);
        boolean boolean56 = cSVLexer19.isQuoteChar(0);
        boolean boolean58 = cSVLexer19.isDelimiter(1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(extendedBufferedReader32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormatBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type50.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder51);
        org.junit.Assert.assertEquals(stringBuilder51.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test505");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        boolean boolean18 = cSVLexer5.readEndOfLine((int) '\"');
        boolean boolean20 = cSVLexer5.isQuoteChar((int) '4');
        org.apache.commons.csv.Token token21 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type22 = org.apache.commons.csv.Token.Type.COMMENT;
        token21.type = type22;
        java.lang.String str24 = token21.toString();
        org.apache.commons.csv.Token token25 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type26 = token25.type;
        java.lang.String str27 = token25.toString();
        org.apache.commons.csv.Token.Type type28 = org.apache.commons.csv.Token.Type.EORECORD;
        token25.type = type28;
        java.lang.StringBuilder stringBuilder30 = token25.content;
        org.apache.commons.csv.Token.Type type31 = token25.type;
        token21.type = type31;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token33 = cSVLexer5.nextToken(token21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type22.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "COMMENT []" + "'", str24, "COMMENT []");
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type26.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "INVALID []" + "'", str27, "INVALID []");
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type28.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder30);
        org.junit.Assert.assertEquals(stringBuilder30.toString(), "");
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type31.equals(org.apache.commons.csv.Token.Type.EORECORD));
    }

    @Test
    public void test506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test506");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder17 = cSVFormatBuilder15.withCommentStart((java.lang.Character) '\n');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The comment start character cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\r\n" + "'", str14, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormatBuilder15);
    }

    @Test
    public void test507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test507");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        java.lang.Character char13 = cSVFormat12.getCommentStart();
        java.io.Reader reader14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable15 = cSVFormat12.parse(reader14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
    }

    @Test
    public void test508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test508");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder13 = org.apache.commons.csv.CSVFormat.newBuilder('\f');
        boolean boolean14 = cSVFormat11.equals((java.lang.Object) '\f');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormatBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test509");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVParser cSVParser2 = new org.apache.commons.csv.CSVParser("[]", cSVFormat1);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList3 = cSVParser2.getRecords();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVRecordList3);
    }

    @Test
    public void test510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test510");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        boolean boolean13 = cSVLexer5.isWhitespace(10);
        boolean boolean15 = cSVLexer5.isStartOfLine((int) (byte) -1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test511");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEndOfFile((int) (short) 100);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader10 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(extendedBufferedReader10);
    }

    @Test
    public void test512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test512");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        boolean boolean18 = cSVLexer5.isWhitespace((int) '\n');
        boolean boolean20 = cSVLexer5.isQuoteChar((int) (byte) -1);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVLexer5.format;
        char char22 = cSVFormat21.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + char22 + "' != '" + ',' + "'", char22 == ',');
    }

    @Test
    public void test513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test513");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer18.in;
        boolean boolean21 = cSVLexer18.isEndOfFile((int) (byte) 100);
        boolean boolean23 = cSVLexer18.isEndOfFile((int) '\\');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test514");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isEndOfFile((int) ',');
        boolean boolean17 = cSVLexer5.isEndOfFile((int) (byte) 0);
        boolean boolean19 = cSVLexer5.isWhitespace((int) (byte) 10);
        boolean boolean21 = cSVLexer5.isStartOfLine(0);
        boolean boolean23 = cSVLexer5.isEndOfFile((int) '\"');
        boolean boolean25 = cSVLexer5.readEndOfLine((int) (short) 100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test515");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) (short) 1);
        boolean boolean12 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(extendedBufferedReader13);
    }

    @Test
    public void test516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test516");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote15 = null;
        org.apache.commons.csv.Quote quote24 = null;
        org.apache.commons.csv.Quote quote33 = null;
        org.apache.commons.csv.Quote quote42 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote42, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote33, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray55);
        org.apache.commons.csv.Quote quote60 = null;
        org.apache.commons.csv.Quote quote69 = null;
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat83 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote69, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder84 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote60, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder85 = cSVFormatBuilder57.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder86 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote24, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray82);
        org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote15, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray82);
        java.lang.String str88 = cSVFormat12.format((java.lang.Object[]) strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder89 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat12);
        java.lang.String[] strArray90 = cSVFormat12.getHeader();
        boolean boolean91 = cSVFormat12.isEscaping();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(cSVFormatBuilder85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test517");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = null;
        org.apache.commons.csv.CSVLexer cSVLexer14 = new org.apache.commons.csv.CSVLexer(cSVFormat12, extendedBufferedReader13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(' ');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder16.withRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = cSVFormatBuilder16.withQuoteChar((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder22 = cSVFormatBuilder16.withCommentStart('\\');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder24 = cSVFormatBuilder16.withRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder26 = cSVFormatBuilder24.withCommentStart('#');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder28 = cSVFormatBuilder24.withCommentStart((java.lang.Character) '\f');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder30 = cSVFormatBuilder28.withNullToString("TOKEN []");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder32 = cSVFormatBuilder30.withCommentStart((java.lang.Character) '\f');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder34 = cSVFormatBuilder30.withCommentStart((java.lang.Character) '#');
        boolean boolean35 = cSVFormat12.equals((java.lang.Object) '#');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder36 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormatBuilder20);
        org.junit.Assert.assertNotNull(cSVFormatBuilder22);
        org.junit.Assert.assertNotNull(cSVFormatBuilder24);
        org.junit.Assert.assertNotNull(cSVFormatBuilder26);
        org.junit.Assert.assertNotNull(cSVFormatBuilder28);
        org.junit.Assert.assertNotNull(cSVFormatBuilder30);
        org.junit.Assert.assertNotNull(cSVFormatBuilder32);
        org.junit.Assert.assertNotNull(cSVFormatBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test518");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.isEndOfFile(100);
        boolean boolean19 = cSVLexer15.isCommentStart(0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader20 = cSVLexer15.in;
        org.apache.commons.csv.Token token21 = new org.apache.commons.csv.Token();
        token21.isReady = false;
        token21.isReady = true;
        token21.isReady = true;
        boolean boolean28 = token21.isReady;
        token21.reset();
        org.apache.commons.csv.Token token30 = new org.apache.commons.csv.Token();
        token30.isReady = false;
        org.apache.commons.csv.Token.Type type33 = org.apache.commons.csv.Token.Type.INVALID;
        token30.type = type33;
        token21.type = type33;
        token21.isReady = false;
        org.apache.commons.csv.Token token38 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type39 = token38.type;
        java.lang.String str40 = token38.toString();
        org.apache.commons.csv.Token.Type type41 = org.apache.commons.csv.Token.Type.EORECORD;
        token38.type = type41;
        org.apache.commons.csv.Token.Type type43 = token38.type;
        token21.type = type43;
        java.lang.String str45 = token21.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token46 = cSVLexer15.nextToken(token21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(extendedBufferedReader20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type33.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type39.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "INVALID []" + "'", str40, "INVALID []");
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type41.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type43.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "EORECORD []" + "'", str45, "EORECORD []");
    }

    @Test
    public void test519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test519");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVLexer4.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader8 = null;
        org.apache.commons.csv.CSVLexer cSVLexer9 = new org.apache.commons.csv.CSVLexer(cSVFormat7, extendedBufferedReader8);
        boolean boolean11 = cSVLexer9.isQuoteChar((int) (byte) 1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        token12.isReady = false;
        org.apache.commons.csv.Token.Type type15 = org.apache.commons.csv.Token.Type.INVALID;
        token12.type = type15;
        org.apache.commons.csv.Token token17 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type18 = token17.type;
        java.lang.String str19 = token17.toString();
        org.apache.commons.csv.Token.Type type20 = org.apache.commons.csv.Token.Type.EORECORD;
        token17.type = type20;
        token12.type = type20;
        org.apache.commons.csv.Token.Type type23 = token12.type;
        token12.isReady = false;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token26 = cSVLexer9.nextToken(token12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type15.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type18.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "INVALID []" + "'", str19, "INVALID []");
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type20.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type23.equals(org.apache.commons.csv.Token.Type.EORECORD));
    }

    @Test
    public void test520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test520");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        boolean boolean8 = cSVLexer3.isQuoteChar((int) '4');
        org.apache.commons.csv.Token token9 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type10 = org.apache.commons.csv.Token.Type.TOKEN;
        token9.type = type10;
        java.lang.StringBuilder stringBuilder12 = token9.content;
        java.lang.StringBuilder stringBuilder13 = token9.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder13);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type10.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder12);
        org.junit.Assert.assertEquals(stringBuilder12.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder13);
        org.junit.Assert.assertEquals(stringBuilder13.toString(), "");
    }

    @Test
    public void test521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test521");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean18 = cSVLexer5.readEndOfLine(0);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test522");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean7 = cSVLexer3.isEscape((int) (byte) 1);
        boolean boolean9 = cSVLexer3.isEndOfFile((int) '\t');
        // The following exception was thrown during execution in test generation
        try {
            int int10 = cSVLexer3.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test523");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder13 = cSVFormat12.toBuilder();
        boolean boolean14 = cSVFormat12.isCommentingEnabled();
        java.lang.String str15 = cSVFormat12.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat12.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder17 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat12);
        java.io.Reader reader18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable19 = cSVFormat12.parse(reader18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str15, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormatBuilder17);
    }

    @Test
    public void test524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test524");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        boolean boolean13 = cSVLexer6.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer6.format;
        boolean boolean15 = cSVFormat14.isQuoting();
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("[hi!]", cSVFormat14);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser16.getRecords();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap18 = cSVParser16.getHeaderMap();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(cSVRecordList17);
    }

    @Test
    public void test525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test525");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        token19.isReady = false;
        token19.isReady = true;
        token19.reset();
        java.lang.StringBuilder stringBuilder25 = token19.content;
        cSVLexer18.trimTrailingSpaces(stringBuilder25);
        boolean boolean28 = cSVLexer18.isEndOfFile((int) (short) 100);
        boolean boolean29 = cSVLexer18.ignoreSurroundingSpaces;
        boolean boolean31 = cSVLexer18.readEndOfLine((int) '\n');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(stringBuilder25);
        org.junit.Assert.assertEquals(stringBuilder25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test526");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEndOfFile((int) (short) 100);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) '\"');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader12 = cSVLexer5.in;
        org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type14 = org.apache.commons.csv.Token.Type.TOKEN;
        token13.type = type14;
        java.lang.String str16 = token13.toString();
        java.lang.StringBuilder stringBuilder17 = token13.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder17);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(extendedBufferedReader12);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type14.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "TOKEN []" + "'", str16, "TOKEN []");
        org.junit.Assert.assertNotNull(stringBuilder17);
        org.junit.Assert.assertEquals(stringBuilder17.toString(), "");
    }

    @Test
    public void test527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test527");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        java.lang.Character char13 = cSVFormat12.getCommentStart();
        java.lang.String str14 = cSVFormat12.getNullToString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test528");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = cSVLexer5.in;
        boolean boolean16 = cSVLexer5.isEndOfFile((int) '#');
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat17);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder19 = cSVFormat17.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormatBuilder19.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null;
        org.apache.commons.csv.CSVLexer cSVLexer22 = new org.apache.commons.csv.CSVLexer(cSVFormat20, extendedBufferedReader21);
        boolean boolean24 = cSVLexer22.isEscape(0);
        boolean boolean26 = cSVLexer22.isEscape(0);
        boolean boolean28 = cSVLexer22.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVLexer22.format;
        boolean boolean31 = cSVLexer22.isEscape((int) (byte) 100);
        boolean boolean33 = cSVLexer22.isStartOfLine((int) (short) 10);
        org.apache.commons.csv.CSVFormat cSVFormat34 = cSVLexer22.format;
        org.apache.commons.csv.Token token35 = new org.apache.commons.csv.Token();
        token35.isReady = false;
        token35.isReady = true;
        java.lang.String str40 = token35.toString();
        org.apache.commons.csv.Token token41 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type42 = org.apache.commons.csv.Token.Type.COMMENT;
        token41.type = type42;
        token35.type = type42;
        org.apache.commons.csv.Token.Type type45 = token35.type;
        java.lang.StringBuilder stringBuilder46 = token35.content;
        cSVLexer22.trimTrailingSpaces(stringBuilder46);
        cSVLexer5.trimTrailingSpaces(stringBuilder46);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(extendedBufferedReader13);
        org.junit.Assert.assertNull(extendedBufferedReader14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormatBuilder19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "INVALID []" + "'", str40, "INVALID []");
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type42.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type45.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertNotNull(stringBuilder46);
        org.junit.Assert.assertEquals(stringBuilder46.toString(), "");
    }

    @Test
    public void test529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test529");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVLexer5.format;
        boolean boolean11 = cSVLexer5.isWhitespace((int) (short) 10);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader12 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(extendedBufferedReader12);
    }

    @Test
    public void test530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test530");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        java.lang.String[] strArray16 = cSVFormat13.getHeader();
        java.lang.Character char17 = cSVFormat13.getCommentStart();
        java.lang.String str18 = cSVFormat13.getRecordSeparator();
        boolean boolean19 = cSVFormat13.isEscaping();
        boolean boolean20 = cSVFormat13.isEscaping();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null;
        org.apache.commons.csv.CSVLexer cSVLexer22 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader21);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\r\n" + "'", str18, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test531");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean12 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean14 = cSVLexer5.isEscape((int) '\r');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test532");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) (short) 1);
        boolean boolean12 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type14 = token13.type;
        java.lang.String str15 = token13.toString();
        boolean boolean16 = token13.isReady;
        java.lang.String str17 = token13.toString();
        java.lang.StringBuilder stringBuilder18 = token13.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder18);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type14.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "INVALID []" + "'", str15, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "INVALID []" + "'", str17, "INVALID []");
        org.junit.Assert.assertNotNull(stringBuilder18);
        org.junit.Assert.assertEquals(stringBuilder18.toString(), "");
    }

    @Test
    public void test533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test533");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader32 = cSVLexer19.in;
        boolean boolean34 = cSVLexer19.isCommentStart((int) (short) 0);
        org.apache.commons.csv.Token token35 = new org.apache.commons.csv.Token();
        token35.isReady = false;
        token35.isReady = true;
        java.lang.String str40 = token35.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token41 = cSVLexer19.nextToken(token35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(extendedBufferedReader32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "INVALID []" + "'", str40, "INVALID []");
    }

    @Test
    public void test534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test534");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer18.in;
        boolean boolean21 = cSVLexer18.isStartOfLine((int) '4');
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVLexer18.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
    }

    @Test
    public void test535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test535");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean2 = cSVFormat1.isEscaping();
        org.apache.commons.csv.Quote quote3 = cSVFormat1.getQuotePolicy();
        java.lang.Character char4 = cSVFormat1.getCommentStart();
        org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser("Delimiter=< > Escape=<#> QuoteChar=<#> CommentStart=<\r> EmptyLines:ignored", cSVFormat1);
        java.lang.Character char6 = cSVFormat1.getEscape();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(quote3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNull(char6);
    }

    @Test
    public void test536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test536");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        java.lang.String str32 = cSVFormat12.getRecordSeparator();
        boolean boolean33 = cSVFormat12.isQuoting();
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder35 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat34);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder36 = cSVFormat34.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder38 = cSVFormatBuilder36.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormatBuilder38.build();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder41 = cSVFormatBuilder38.withRecordSeparator('\\');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder43 = cSVFormatBuilder41.withCommentStart('a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder45 = cSVFormatBuilder41.withIgnoreEmptyLines(true);
        java.lang.String[] strArray46 = null;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder47 = cSVFormatBuilder41.withHeader(strArray46);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder49 = cSVFormatBuilder47.withDelimiter('\f');
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormatBuilder47.build();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder51 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat50);
        java.lang.Object obj52 = null;
        boolean boolean53 = cSVFormat50.equals(obj52);
        boolean boolean54 = cSVFormat12.equals((java.lang.Object) boolean53);
        java.lang.String[] strArray55 = cSVFormat12.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\r\n" + "'", str32, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormatBuilder36);
        org.junit.Assert.assertNotNull(cSVFormatBuilder38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormatBuilder41);
        org.junit.Assert.assertNotNull(cSVFormatBuilder43);
        org.junit.Assert.assertNotNull(cSVFormatBuilder45);
        org.junit.Assert.assertNotNull(cSVFormatBuilder47);
        org.junit.Assert.assertNotNull(cSVFormatBuilder49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strArray55);
    }

    @Test
    public void test537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test537");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean10 = cSVLexer5.ignoreEmptyLines;
        boolean boolean11 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean13 = cSVLexer5.readEndOfLine((int) ' ');
        boolean boolean15 = cSVLexer5.isStartOfLine(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test538");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.StringBuilder stringBuilder9 = token7.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer3.format;
        boolean boolean13 = cSVLexer3.isEscape((int) '\b');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test539");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVFormat3.isCommentingEnabled();
        java.lang.String str7 = cSVFormat3.getNullToString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test540");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        java.lang.String[] strArray2 = cSVFormat1.getHeader();
        java.lang.String[] strArray3 = cSVFormat1.getHeader();
        char char4 = cSVFormat1.getDelimiter();
        org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser("[hi!, , hi!, , hi!, hi!]", cSVFormat1);
        long long6 = cSVParser5.getRecordNumber();
        org.apache.commons.csv.CSVRecord cSVRecord7 = cSVParser5.nextRecord();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + ',' + "'", char4 == ',');
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(cSVRecord7);
    }

    @Test
    public void test541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test541");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.Token token6 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type7 = token6.type;
        java.lang.String str8 = token6.toString();
        org.apache.commons.csv.Token.Type type9 = org.apache.commons.csv.Token.Type.EORECORD;
        token6.type = type9;
        java.lang.StringBuilder stringBuilder11 = token6.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isQuoteChar(100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type7.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INVALID []" + "'", str8, "INVALID []");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type9.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test542");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean8 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder10 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat9);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder11 = cSVFormat9.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormatBuilder11.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = null;
        org.apache.commons.csv.CSVLexer cSVLexer14 = new org.apache.commons.csv.CSVLexer(cSVFormat12, extendedBufferedReader13);
        boolean boolean15 = cSVLexer14.ignoreEmptyLines;
        boolean boolean17 = cSVLexer14.isEndOfFile((int) (short) 10);
        boolean boolean19 = cSVLexer14.isEndOfFile(0);
        boolean boolean21 = cSVLexer14.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVLexer14.format;
        boolean boolean23 = cSVLexer14.ignoreEmptyLines;
        boolean boolean25 = cSVLexer14.isWhitespace((int) (short) -1);
        org.apache.commons.csv.Token token26 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type27 = token26.type;
        java.lang.String str28 = token26.toString();
        org.apache.commons.csv.Token.Type type29 = org.apache.commons.csv.Token.Type.EORECORD;
        token26.type = type29;
        java.lang.StringBuilder stringBuilder31 = token26.content;
        cSVLexer14.trimTrailingSpaces(stringBuilder31);
        cSVLexer5.trimTrailingSpaces(stringBuilder31);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader34 = cSVLexer5.in;
        boolean boolean36 = cSVLexer5.readEndOfLine(6);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormatBuilder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type27.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "INVALID []" + "'", str28, "INVALID []");
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type29.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder31);
        org.junit.Assert.assertEquals(stringBuilder31.toString(), "");
        org.junit.Assert.assertNull(extendedBufferedReader34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test543");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean17 = cSVLexer5.isQuoteChar(6);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVLexer5.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
    }

    @Test
    public void test544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test544");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        boolean boolean16 = cSVLexer5.isQuoteChar((int) (short) 100);
        boolean boolean18 = cSVLexer5.isWhitespace((int) (byte) -1);
        boolean boolean20 = cSVLexer5.isEscape((int) '\b');
        org.apache.commons.csv.Token token21 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type22 = token21.type;
        java.lang.String str23 = token21.toString();
        org.apache.commons.csv.Token.Type type24 = org.apache.commons.csv.Token.Type.EORECORD;
        token21.type = type24;
        java.lang.StringBuilder stringBuilder26 = token21.content;
        java.lang.StringBuilder stringBuilder27 = token21.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder27);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type22.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "INVALID []" + "'", str23, "INVALID []");
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type24.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder26);
        org.junit.Assert.assertEquals(stringBuilder26.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder27);
        org.junit.Assert.assertEquals(stringBuilder27.toString(), "");
    }

    @Test
    public void test545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test545");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean11 = cSVLexer5.isWhitespace(6);
        boolean boolean13 = cSVLexer5.isEndOfFile(0);
        boolean boolean15 = cSVLexer5.isWhitespace((int) 'a');
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer5.isWhitespace((int) '\\');
        boolean boolean20 = cSVLexer5.isQuoteChar((int) '\\');
        boolean boolean22 = cSVLexer5.isQuoteChar((int) ',');
        boolean boolean24 = cSVLexer5.isEndOfFile((int) (short) 1);
        boolean boolean25 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.Token token26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token27 = cSVLexer5.nextToken(token26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test546");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat7);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader9 = null;
        org.apache.commons.csv.CSVLexer cSVLexer10 = new org.apache.commons.csv.CSVLexer(cSVFormat7, extendedBufferedReader9);
        boolean boolean12 = cSVLexer10.isEndOfFile((int) '\n');
        boolean boolean13 = cSVLexer10.ignoreEmptyLines;
        org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type15 = token14.type;
        java.lang.StringBuilder stringBuilder16 = token14.content;
        cSVLexer10.trimTrailingSpaces(stringBuilder16);
        cSVLexer4.trimTrailingSpaces(stringBuilder16);
        boolean boolean20 = cSVLexer4.isEndOfFile((int) (short) 1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type15.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder16);
        org.junit.Assert.assertEquals(stringBuilder16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test547");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        boolean boolean13 = cSVLexer6.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer6.format;
        org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser("hi!\t\thi!\t\thi!\thi!", cSVFormat14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap16 = cSVParser15.getHeaderMap();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test548");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        java.lang.String str1 = cSVFormat0.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean5 = cSVLexer4.ignoreSurroundingSpaces;
        boolean boolean7 = cSVLexer4.isDelimiter((int) (byte) -1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored" + "'", str1, "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored");
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test549");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.Token token6 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type7 = token6.type;
        java.lang.String str8 = token6.toString();
        org.apache.commons.csv.Token.Type type9 = org.apache.commons.csv.Token.Type.EORECORD;
        token6.type = type9;
        java.lang.StringBuilder stringBuilder11 = token6.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder11);
        boolean boolean13 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer5.format;
        // The following exception was thrown during execution in test generation
        try {
            int int15 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type7.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INVALID []" + "'", str8, "INVALID []");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type9.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test550");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar((int) (byte) 100);
        org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type15 = token14.type;
        java.lang.String str16 = token14.toString();
        boolean boolean17 = token14.isReady;
        java.lang.String str18 = token14.toString();
        java.lang.StringBuilder stringBuilder19 = token14.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder19);
        boolean boolean21 = cSVLexer5.ignoreEmptyLines;
        boolean boolean23 = cSVLexer5.isQuoteChar((int) (byte) -1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type15.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "INVALID []" + "'", str16, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "INVALID []" + "'", str18, "INVALID []");
        org.junit.Assert.assertNotNull(stringBuilder19);
        org.junit.Assert.assertEquals(stringBuilder19.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test551");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isWhitespace(6);
        boolean boolean7 = cSVLexer3.isCommentStart(0);
        boolean boolean8 = cSVLexer3.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test552");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.CSVParser cSVParser14 = new org.apache.commons.csv.CSVParser("Delimiter=<,> QuoteChar=<\">", cSVFormat13);
        boolean boolean15 = cSVFormat13.isQuoting();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder16.withNullToString("hi!\\\\hi!\\\\hi!\\hi!");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = cSVFormatBuilder18.withEscape((java.lang.Character) '\t');
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormatBuilder20);
    }

    @Test
    public void test553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test553");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader16 = null;
        org.apache.commons.csv.CSVLexer cSVLexer17 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader16);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat13);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = null;
        org.apache.commons.csv.CSVLexer cSVLexer20 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader19);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
    }

    @Test
    public void test554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test554");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isWhitespace((int) '\\');
        boolean boolean17 = cSVLexer5.isWhitespace((int) '\f');
        boolean boolean18 = cSVLexer5.ignoreEmptyLines;
        boolean boolean20 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(extendedBufferedReader21);
    }

    @Test
    public void test555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test555");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat1, extendedBufferedReader3);
        java.lang.String str5 = cSVFormat1.getNullToString();
        java.lang.String str6 = cSVFormat1.toString();
        org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser("hi!,,hi!,,hi!,hi!", cSVFormat1);
        boolean boolean8 = cSVFormat1.isEscaping();
        java.io.Reader reader9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable10 = cSVFormat1.parse(reader9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str6, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test556");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        boolean boolean9 = cSVLexer5.isEndOfFile((int) (byte) 100);
        boolean boolean11 = cSVLexer5.isEscape((int) (byte) -1);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader12 = cSVLexer5.in;
        boolean boolean13 = cSVLexer5.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(extendedBufferedReader12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test557");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean11 = cSVLexer5.isWhitespace(6);
        boolean boolean13 = cSVLexer5.isEndOfFile(0);
        boolean boolean15 = cSVLexer5.isWhitespace((int) 'a');
        org.apache.commons.csv.Token token16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token17 = cSVLexer5.nextToken(token16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test558");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader32 = cSVLexer19.in;
        boolean boolean34 = cSVLexer19.isCommentStart((int) (short) 0);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder36 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat35);
        boolean boolean37 = cSVFormat35.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader38 = null;
        org.apache.commons.csv.CSVLexer cSVLexer39 = new org.apache.commons.csv.CSVLexer(cSVFormat35, extendedBufferedReader38);
        boolean boolean41 = cSVLexer39.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder43 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat42);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader44 = null;
        org.apache.commons.csv.CSVLexer cSVLexer45 = new org.apache.commons.csv.CSVLexer(cSVFormat42, extendedBufferedReader44);
        boolean boolean47 = cSVLexer45.isEndOfFile((int) '\n');
        boolean boolean48 = cSVLexer45.ignoreEmptyLines;
        org.apache.commons.csv.Token token49 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type50 = token49.type;
        java.lang.StringBuilder stringBuilder51 = token49.content;
        cSVLexer45.trimTrailingSpaces(stringBuilder51);
        cSVLexer39.trimTrailingSpaces(stringBuilder51);
        cSVLexer19.trimTrailingSpaces(stringBuilder51);
        // The following exception was thrown during execution in test generation
        try {
            int int55 = cSVLexer19.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(extendedBufferedReader32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormatBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type50.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder51);
        org.junit.Assert.assertEquals(stringBuilder51.toString(), "");
    }

    @Test
    public void test559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test559");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) (short) 1);
        boolean boolean13 = cSVLexer5.isStartOfLine((int) ',');
        boolean boolean15 = cSVLexer5.readEndOfLine((int) (byte) 10);
        boolean boolean17 = cSVLexer5.isStartOfLine((int) ',');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test560");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isWhitespace((int) (short) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isWhitespace((int) ' ');
        boolean boolean17 = cSVLexer5.readEndOfLine((int) '#');
        boolean boolean19 = cSVLexer5.isQuoteChar((int) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVLexer5.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat20);
    }

    @Test
    public void test561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test561");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        java.lang.String[] strArray16 = cSVFormat13.getHeader();
        java.lang.Character char17 = cSVFormat13.getCommentStart();
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder19 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat18);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = cSVFormat18.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder22 = cSVFormatBuilder20.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder24 = cSVFormatBuilder20.withRecordSeparator("");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder26 = cSVFormatBuilder24.withNullToString("\n");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder28 = cSVFormatBuilder26.withNullToString("Delimiter=<\t> QuoteChar=<\"> EmptyLines:ignored SurroundingSpaces:ignored");
        org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormatBuilder26.build();
        java.lang.String str30 = cSVFormat29.toString();
        boolean boolean31 = cSVFormat29.isQuoting();
        org.apache.commons.csv.Quote quote34 = null;
        org.apache.commons.csv.Quote quote43 = null;
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat57 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote43, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray56);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder58 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote34, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray56);
        java.util.Map<java.lang.String, java.lang.Integer> strMap59 = null;
        org.apache.commons.csv.CSVRecord cSVRecord62 = new org.apache.commons.csv.CSVRecord(strArray56, strMap59, "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored", (long) 1);
        java.lang.String[] strArray63 = cSVRecord62.values();
        java.lang.String str64 = cSVFormat29.format((java.lang.Object[]) strArray63);
        java.lang.String str65 = cSVFormat13.format((java.lang.Object[]) strArray63);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormatBuilder20);
        org.junit.Assert.assertNotNull(cSVFormatBuilder22);
        org.junit.Assert.assertNotNull(cSVFormatBuilder24);
        org.junit.Assert.assertNotNull(cSVFormatBuilder26);
        org.junit.Assert.assertNotNull(cSVFormatBuilder28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str30, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str64, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str65, "hi!,,hi!,,hi!,hi!");
    }

    @Test
    public void test562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test562");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean17 = cSVLexer5.isQuoteChar(6);
        boolean boolean18 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        java.lang.String str20 = token19.toString();
        org.apache.commons.csv.Token.Type type21 = token19.type;
        boolean boolean22 = token19.isReady;
        java.lang.StringBuilder stringBuilder23 = token19.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder23);
        org.apache.commons.csv.Token token25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token26 = cSVLexer5.nextToken(token25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "INVALID []" + "'", str20, "INVALID []");
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
    }

    @Test
    public void test563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test563");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT;
        java.lang.String str2 = cSVFormat1.getRecordSeparator();
        org.apache.commons.csv.Quote quote3 = cSVFormat1.getQuotePolicy();
        boolean boolean4 = cSVFormat1.isEscaping();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder5 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        boolean boolean6 = cSVFormat1.isCommentingEnabled();
        org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser("\n", cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\r\n" + "'", str2, "\r\n");
        org.junit.Assert.assertNull(quote3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test564");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        boolean boolean13 = cSVLexer5.readEndOfLine(10);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer5.format;
        boolean boolean16 = cSVLexer5.isStartOfLine((int) '\f');
        boolean boolean18 = cSVLexer5.isEscape((int) (byte) 0);
        boolean boolean20 = cSVLexer5.isCommentStart(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test565");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVLexer5.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader9 = cSVLexer5.in;
        boolean boolean10 = cSVLexer5.ignoreEmptyLines;
        boolean boolean12 = cSVLexer5.readEndOfLine((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(extendedBufferedReader9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test566");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.isEndOfFile(100);
        boolean boolean19 = cSVLexer15.isEndOfFile(0);
        boolean boolean21 = cSVLexer15.readEndOfLine(0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test567");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        java.lang.String str16 = cSVFormat13.getRecordSeparator();
        java.lang.Object[] objArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = cSVFormat13.format(objArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\r\n" + "'", str14, "\r\n");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\r\n" + "'", str16, "\r\n");
    }

    @Test
    public void test568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test568");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        boolean boolean8 = cSVLexer5.isEndOfFile((-1));
        boolean boolean10 = cSVLexer5.isCommentStart(0);
        boolean boolean12 = cSVLexer5.isWhitespace(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test569");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getNullToString();
        java.lang.String[] strArray15 = null;
        java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null;
        org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) (byte) 100);
        boolean boolean20 = cSVRecord19.isConsistent();
        java.util.Spliterator<java.lang.String> strSpliterator21 = cSVRecord19.spliterator();
        boolean boolean22 = cSVRecord19.isConsistent();
        boolean boolean23 = cSVRecord19.isConsistent();
        long long24 = cSVRecord19.getRecordNumber();
        long long25 = cSVRecord19.getRecordNumber();
        boolean boolean26 = cSVFormat13.equals((java.lang.Object) cSVRecord19);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader27 = null;
        org.apache.commons.csv.CSVLexer cSVLexer28 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader27);
        boolean boolean30 = cSVLexer28.isStartOfLine((int) (byte) 0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test570");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder13 = cSVFormat12.toBuilder();
        boolean boolean14 = cSVFormat12.isCommentingEnabled();
        java.lang.String str15 = cSVFormat12.toString();
        org.apache.commons.csv.Quote quote16 = cSVFormat12.getQuotePolicy();
        boolean boolean17 = cSVFormat12.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str15, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNull(quote16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test571");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        java.lang.String str5 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = cSVFormatBuilder6.withEscape('4');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder10 = cSVFormatBuilder6.withIgnoreSurroundingSpaces(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\r\n" + "'", str5, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
        org.junit.Assert.assertNotNull(cSVFormatBuilder8);
        org.junit.Assert.assertNotNull(cSVFormatBuilder10);
    }

    @Test
    public void test572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test572");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean11 = cSVLexer5.isWhitespace(6);
        boolean boolean13 = cSVLexer5.isEndOfFile(0);
        boolean boolean15 = cSVLexer5.isWhitespace((int) 'a');
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer5.isStartOfLine(0);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test573");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.isEscape((int) (short) 10);
        boolean boolean15 = cSVLexer5.isStartOfLine(100);
        boolean boolean16 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test574");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean7 = cSVLexer3.isDelimiter(0);
        boolean boolean8 = cSVLexer3.ignoreEmptyLines;
        boolean boolean10 = cSVLexer3.isQuoteChar((int) '4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test575");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean18 = cSVLexer5.isEndOfFile((int) (short) 10);
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type20 = token19.type;
        java.lang.String str21 = token19.toString();
        org.apache.commons.csv.Token.Type type22 = token19.type;
        java.lang.StringBuilder stringBuilder23 = token19.content;
        java.lang.StringBuilder stringBuilder24 = token19.content;
        token19.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token26 = cSVLexer5.nextToken(token19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type20.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "INVALID []" + "'", str21, "INVALID []");
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type22.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder24);
        org.junit.Assert.assertEquals(stringBuilder24.toString(), "");
    }

    @Test
    public void test576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test576");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVFormat12.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat12, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.readEndOfLine((-1));
        boolean boolean18 = cSVLexer15.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test577");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isWhitespace((int) (short) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isWhitespace((int) ' ');
        boolean boolean17 = cSVLexer5.readEndOfLine((int) '#');
        boolean boolean19 = cSVLexer5.isQuoteChar((int) 'a');
        org.apache.commons.csv.Token token20 = new org.apache.commons.csv.Token();
        token20.isReady = false;
        token20.isReady = true;
        token20.isReady = true;
        boolean boolean27 = token20.isReady;
        token20.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token29 = cSVLexer5.nextToken(token20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test578");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat0.getNullToString();
        java.lang.Character char16 = cSVFormat0.getEscape();
        boolean boolean17 = cSVFormat0.isCommentingEnabled();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test579");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        java.lang.String str5 = cSVFormat0.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored" + "'", str5, "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored");
    }

    @Test
    public void test580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test580");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVLexer4.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader8 = null;
        org.apache.commons.csv.CSVLexer cSVLexer9 = new org.apache.commons.csv.CSVLexer(cSVFormat7, extendedBufferedReader8);
        boolean boolean11 = cSVLexer9.isWhitespace((int) (short) 1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test581");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        java.lang.String str32 = cSVFormat12.getRecordSeparator();
        boolean boolean33 = cSVFormat12.isQuoting();
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder35 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat34);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder36 = cSVFormat34.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder38 = cSVFormatBuilder36.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormatBuilder38.build();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder41 = cSVFormatBuilder38.withRecordSeparator('\\');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder43 = cSVFormatBuilder41.withCommentStart('a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder45 = cSVFormatBuilder41.withIgnoreEmptyLines(true);
        java.lang.String[] strArray46 = null;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder47 = cSVFormatBuilder41.withHeader(strArray46);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder49 = cSVFormatBuilder47.withDelimiter('\f');
        org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormatBuilder47.build();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder51 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat50);
        java.lang.Object obj52 = null;
        boolean boolean53 = cSVFormat50.equals(obj52);
        boolean boolean54 = cSVFormat12.equals((java.lang.Object) boolean53);
        java.lang.Character char55 = cSVFormat12.getEscape();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\r\n" + "'", str32, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVFormatBuilder36);
        org.junit.Assert.assertNotNull(cSVFormatBuilder38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVFormatBuilder41);
        org.junit.Assert.assertNotNull(cSVFormatBuilder43);
        org.junit.Assert.assertNotNull(cSVFormatBuilder45);
        org.junit.Assert.assertNotNull(cSVFormatBuilder47);
        org.junit.Assert.assertNotNull(cSVFormatBuilder49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(char55);
    }

    @Test
    public void test582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test582");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        boolean boolean13 = cSVLexer5.isWhitespace(10);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = cSVLexer5.in;
        org.apache.commons.csv.Token token15 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type16 = token15.type;
        java.lang.String str17 = token15.toString();
        org.apache.commons.csv.Token.Type type18 = org.apache.commons.csv.Token.Type.EORECORD;
        token15.type = type18;
        java.lang.StringBuilder stringBuilder20 = token15.content;
        token15.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token22 = cSVLexer5.nextToken(token15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(extendedBufferedReader14);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type16.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "INVALID []" + "'", str17, "INVALID []");
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type18.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder20);
        org.junit.Assert.assertEquals(stringBuilder20.toString(), "");
    }

    @Test
    public void test583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test583");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        java.lang.String str1 = cSVFormat0.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean5 = cSVLexer4.ignoreSurroundingSpaces;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer4.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored" + "'", str1, "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored");
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(extendedBufferedReader6);
    }

    @Test
    public void test584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test584");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormatBuilder4.build();
        char char6 = cSVFormat5.getDelimiter();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = null;
        org.apache.commons.csv.CSVLexer cSVLexer8 = new org.apache.commons.csv.CSVLexer(cSVFormat5, extendedBufferedReader7);
        java.lang.String str9 = cSVFormat5.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + ',' + "'", char6 == ',');
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str9, "Delimiter=<,> QuoteChar=<\">");
    }

    @Test
    public void test585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test585");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder13 = cSVFormat12.toBuilder();
        java.lang.String str14 = cSVFormat12.getRecordSeparator();
        boolean boolean15 = cSVFormat12.isQuoting();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\r\n" + "'", str14, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test586");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT;
        boolean boolean2 = cSVFormat1.getIgnoreEmptyLines();
        org.apache.commons.csv.Quote quote5 = null;
        org.apache.commons.csv.Quote quote14 = null;
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote14, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray27);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder29 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote5, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray27);
        org.apache.commons.csv.Quote quote32 = null;
        org.apache.commons.csv.Quote quote41 = null;
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat55 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote41, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray54);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder56 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote32, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray54);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = cSVFormatBuilder29.withHeader(strArray54);
        java.lang.String str58 = cSVFormat1.format((java.lang.Object[]) strArray54);
        boolean boolean59 = cSVFormat1.isCommentingEnabled();
        java.lang.String str60 = cSVFormat1.toString();
        org.apache.commons.csv.CSVParser cSVParser61 = new org.apache.commons.csv.CSVParser("", cSVFormat1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap62 = cSVParser61.getHeaderMap();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormatBuilder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str58, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored" + "'", str60, "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored");
    }

    @Test
    public void test587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test587");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF;
        char char1 = cSVFormat0.getDelimiter();
        java.lang.String str2 = cSVFormat0.getNullToString();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean5 = cSVFormat0.isQuoting();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + '\t' + "'", char1 == '\t');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test588");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        boolean boolean4 = cSVFormat1.isCommentingEnabled();
        org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser("[]", cSVFormat1);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator();
        long long7 = cSVParser5.getRecordNumber();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test589");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        boolean boolean13 = cSVLexer6.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer6.format;
        org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser("hi!\t\thi!\t\thi!\thi!", cSVFormat14);
        java.lang.String[] strArray16 = null;
        java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null;
        org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) (byte) 100);
        boolean boolean21 = cSVRecord20.isConsistent();
        java.util.Spliterator<java.lang.String> strSpliterator22 = cSVRecord20.spliterator();
        boolean boolean23 = cSVRecord20.isConsistent();
        boolean boolean25 = cSVRecord20.isMapped("\n");
        java.lang.String[] strArray26 = cSVRecord20.values();
        int int27 = cSVRecord20.size();
        java.util.Iterator<java.lang.String> strItor28 = cSVRecord20.iterator();
        boolean boolean29 = cSVFormat14.equals((java.lang.Object) cSVRecord20);
        boolean boolean30 = cSVFormat14.isQuoting();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test590");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.StringBuilder stringBuilder9 = token7.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder9);
        boolean boolean12 = cSVLexer3.readEndOfLine((int) (short) 0);
        org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type14 = token13.type;
        token13.isReady = false;
        boolean boolean17 = token13.isReady;
        token13.isReady = false;
        token13.isReady = false;
        java.lang.String str22 = token13.toString();
        org.apache.commons.csv.Token.Type type23 = token13.type;
        boolean boolean24 = token13.isReady;
        org.apache.commons.csv.Token.Type type25 = token13.type;
        org.apache.commons.csv.Token token26 = new org.apache.commons.csv.Token();
        token26.isReady = false;
        token26.isReady = true;
        token26.isReady = true;
        boolean boolean33 = token26.isReady;
        org.apache.commons.csv.Token token34 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type35 = org.apache.commons.csv.Token.Type.COMMENT;
        token34.type = type35;
        token26.type = type35;
        org.apache.commons.csv.Token token38 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type39 = token38.type;
        java.lang.String str40 = token38.toString();
        org.apache.commons.csv.Token.Type type41 = org.apache.commons.csv.Token.Type.EORECORD;
        token38.type = type41;
        token26.type = type41;
        token13.type = type41;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token45 = cSVLexer3.nextToken(token13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type14.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "INVALID []" + "'", str22, "INVALID []");
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type23.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type25.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type35.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type39.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "INVALID []" + "'", str40, "INVALID []");
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type41.equals(org.apache.commons.csv.Token.Type.EORECORD));
    }

    @Test
    public void test591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test591");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVLexer4.format;
        org.apache.commons.csv.CSVFormat cSVFormat8 = cSVLexer4.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
    }

    @Test
    public void test592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test592");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isWhitespace((int) (short) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isWhitespace((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            long long16 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test593");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean4 = cSVLexer3.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test594");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        boolean boolean16 = cSVLexer5.isStartOfLine((int) '\"');
        org.apache.commons.csv.Token token17 = new org.apache.commons.csv.Token();
        token17.isReady = false;
        org.apache.commons.csv.Token.Type type20 = org.apache.commons.csv.Token.Type.INVALID;
        token17.type = type20;
        org.apache.commons.csv.Token.Type type22 = org.apache.commons.csv.Token.Type.INVALID;
        token17.type = type22;
        java.lang.StringBuilder stringBuilder24 = token17.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder24);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type20.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type22.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder24);
        org.junit.Assert.assertEquals(stringBuilder24.toString(), "");
    }

    @Test
    public void test595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test595");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean18 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean20 = cSVLexer5.isCommentStart(100);
        boolean boolean22 = cSVLexer5.isCommentStart((int) (byte) 0);
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVLexer5.format;
        boolean boolean25 = cSVLexer5.isQuoteChar(10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test596");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean15 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean17 = cSVLexer5.isEndOfFile((int) (short) 100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test597");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.Token token6 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type7 = token6.type;
        java.lang.String str8 = token6.toString();
        org.apache.commons.csv.Token.Type type9 = org.apache.commons.csv.Token.Type.EORECORD;
        token6.type = type9;
        java.lang.StringBuilder stringBuilder11 = token6.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder11);
        boolean boolean14 = cSVLexer5.isWhitespace((int) (short) 0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type7.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INVALID []" + "'", str8, "INVALID []");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type9.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test598");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        java.lang.String[] strArray4 = cSVFormat0.getHeader();
        char char5 = cSVFormat0.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + ',' + "'", char5 == ',');
    }

    @Test
    public void test599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test599");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer18.in;
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder21 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat20);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder22 = cSVFormat20.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormatBuilder22.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader24 = null;
        org.apache.commons.csv.CSVLexer cSVLexer25 = new org.apache.commons.csv.CSVLexer(cSVFormat23, extendedBufferedReader24);
        boolean boolean26 = cSVLexer25.ignoreEmptyLines;
        boolean boolean28 = cSVLexer25.isEndOfFile((int) (short) 10);
        boolean boolean30 = cSVLexer25.isEndOfFile(0);
        boolean boolean32 = cSVLexer25.isQuoteChar((int) '\r');
        org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type34 = token33.type;
        java.lang.String str35 = token33.toString();
        org.apache.commons.csv.Token.Type type36 = token33.type;
        java.lang.StringBuilder stringBuilder37 = token33.content;
        cSVLexer25.trimTrailingSpaces(stringBuilder37);
        cSVLexer18.trimTrailingSpaces(stringBuilder37);
        boolean boolean41 = cSVLexer18.isCommentStart((int) (byte) -1);
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVLexer18.format;
        org.apache.commons.csv.Token token43 = new org.apache.commons.csv.Token();
        token43.isReady = false;
        token43.isReady = true;
        java.lang.String str48 = token43.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token49 = cSVLexer18.nextToken(token43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormatBuilder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type34.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "INVALID []" + "'", str35, "INVALID []");
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type36.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder37);
        org.junit.Assert.assertEquals(stringBuilder37.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "INVALID []" + "'", str48, "INVALID []");
    }

    @Test
    public void test600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test600");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        java.lang.String[] strArray2 = cSVFormat1.getHeader();
        java.lang.String[] strArray3 = cSVFormat1.getHeader();
        char char4 = cSVFormat1.getDelimiter();
        org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser("[hi!, , hi!, , hi!, hi!]", cSVFormat1);
        long long6 = cSVParser5.getRecordNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser5.iterator();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + ',' + "'", char4 == ',');
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor7);
        org.junit.Assert.assertNotNull(cSVRecordList8);
    }

    @Test
    public void test601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test601");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = cSVLexer5.in;
        boolean boolean16 = cSVLexer5.isEndOfFile(10);
        boolean boolean18 = cSVLexer5.isWhitespace((int) (byte) 10);
        boolean boolean20 = cSVLexer5.isStartOfLine(6);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(extendedBufferedReader13);
        org.junit.Assert.assertNull(extendedBufferedReader14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test602");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        boolean boolean4 = cSVFormat1.isCommentingEnabled();
        org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser("[]", cSVFormat1);
        java.lang.String[] strArray6 = null;
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        org.apache.commons.csv.CSVRecord cSVRecord10 = new org.apache.commons.csv.CSVRecord(strArray6, strMap7, "", (long) (byte) 100);
        boolean boolean11 = cSVRecord10.isConsistent();
        int int12 = cSVRecord10.size();
        java.util.Spliterator<java.lang.String> strSpliterator13 = cSVRecord10.spliterator();
        boolean boolean15 = cSVRecord10.isSet("");
        java.lang.String str16 = cSVRecord10.getComment();
        java.util.Iterator<java.lang.String> strItor17 = cSVRecord10.iterator();
        int int18 = cSVRecord10.size();
        boolean boolean20 = cSVRecord10.isSet("Delimiter=< > Escape=<\b> QuoteChar=<a> CommentStart=<\t>");
        boolean boolean21 = cSVFormat1.equals((java.lang.Object) cSVRecord10);
        java.lang.Character char22 = cSVFormat1.getEscape();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(char22);
    }

    @Test
    public void test603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test603");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        token19.isReady = false;
        token19.isReady = true;
        token19.reset();
        java.lang.StringBuilder stringBuilder25 = token19.content;
        cSVLexer18.trimTrailingSpaces(stringBuilder25);
        boolean boolean28 = cSVLexer18.isEndOfFile((int) (short) 100);
        boolean boolean30 = cSVLexer18.isEscape(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(stringBuilder25);
        org.junit.Assert.assertEquals(stringBuilder25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test604");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart(0);
        boolean boolean18 = cSVLexer5.isCommentStart((int) '\\');
        // The following exception was thrown during execution in test generation
        try {
            int int19 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test605");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart(0);
        boolean boolean18 = cSVLexer5.isCommentStart((int) '\\');
        boolean boolean20 = cSVLexer5.isDelimiter((int) '#');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(extendedBufferedReader21);
    }

    @Test
    public void test606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test606");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean7 = cSVLexer3.isEndOfFile(1);
        boolean boolean9 = cSVLexer3.isEscape(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test607");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean11 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean13 = cSVLexer5.isDelimiter(0);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test608");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder14 = cSVFormat13.toBuilder();
        boolean boolean15 = cSVFormat13.isCommentingEnabled();
        java.lang.String str16 = cSVFormat13.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder17 = cSVFormat13.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat13);
        boolean boolean19 = cSVFormat13.isQuoting();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser20 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormatBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str16, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVFormatBuilder17);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test609");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.isEscape((int) (short) 10);
        org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token();
        java.lang.StringBuilder stringBuilder15 = token14.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVLexer5.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertNotNull(cSVFormat17);
    }

    @Test
    public void test610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test610");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.isEscape((int) ',');
        org.apache.commons.csv.Token token17 = new org.apache.commons.csv.Token();
        token17.isReady = false;
        token17.isReady = true;
        token17.isReady = true;
        java.lang.String str24 = token17.toString();
        org.apache.commons.csv.Token.Type type25 = token17.type;
        boolean boolean26 = token17.isReady;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token27 = cSVLexer5.nextToken(token17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "INVALID []" + "'", str24, "INVALID []");
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type25.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test611");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        java.lang.String str19 = cSVFormat13.getNullToString();
        org.apache.commons.csv.Quote quote20 = cSVFormat13.getQuotePolicy();
        org.apache.commons.csv.Quote quote21 = cSVFormat13.getQuotePolicy();
        boolean boolean22 = cSVFormat13.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(quote20);
        org.junit.Assert.assertNull(quote21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test612");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVFormat12.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat12, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.isEscape((int) ',');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test613");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVLexer4.format;
        boolean boolean8 = cSVLexer4.ignoreEmptyLines;
        boolean boolean10 = cSVLexer4.isEscape(0);
        boolean boolean12 = cSVLexer4.isStartOfLine(0);
        boolean boolean14 = cSVLexer4.readEndOfLine((int) '#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test614");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder13 = cSVFormat12.toBuilder();
        java.lang.String str14 = cSVFormat12.getRecordSeparator();
        boolean boolean15 = cSVFormat12.isEscaping();
        boolean boolean16 = cSVFormat12.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\r\n" + "'", str14, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test615");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder14 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = cSVFormat13.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormatBuilder15.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat16, extendedBufferedReader17);
        boolean boolean20 = cSVLexer18.isEscape(0);
        boolean boolean22 = cSVLexer18.isEscape(0);
        boolean boolean24 = cSVLexer18.isQuoteChar(1);
        org.apache.commons.csv.Token token25 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type26 = org.apache.commons.csv.Token.Type.TOKEN;
        token25.type = type26;
        java.lang.StringBuilder stringBuilder28 = token25.content;
        cSVLexer18.trimTrailingSpaces(stringBuilder28);
        cSVLexer5.trimTrailingSpaces(stringBuilder28);
        boolean boolean32 = cSVLexer5.isWhitespace((int) '\\');
        boolean boolean34 = cSVLexer5.isDelimiter((int) (byte) 100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormatBuilder15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type26.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder28);
        org.junit.Assert.assertEquals(stringBuilder28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test616");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormatBuilder4.build();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormatBuilder4.build();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        java.lang.String[] strArray8 = cSVFormat6.getHeader();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader9 = null;
        org.apache.commons.csv.CSVLexer cSVLexer10 = new org.apache.commons.csv.CSVLexer(cSVFormat6, extendedBufferedReader9);
        org.apache.commons.csv.Token token11 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type12 = token11.type;
        java.lang.String str13 = token11.toString();
        org.apache.commons.csv.Token.Type type14 = token11.type;
        boolean boolean15 = token11.isReady;
        java.lang.String str16 = token11.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token17 = cSVLexer10.nextToken(token11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray8);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type12.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "INVALID []" + "'", str13, "INVALID []");
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type14.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "INVALID []" + "'", str16, "INVALID []");
    }

    @Test
    public void test617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test617");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isWhitespace((int) (short) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isWhitespace((int) ' ');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader16 = cSVLexer5.in;
        boolean boolean18 = cSVLexer5.isQuoteChar(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(extendedBufferedReader16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test618");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEndOfFile((int) (short) 100);
        boolean boolean11 = cSVLexer5.isCommentStart(100);
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder13 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat12);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder14 = cSVFormat12.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormatBuilder14.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader16 = null;
        org.apache.commons.csv.CSVLexer cSVLexer17 = new org.apache.commons.csv.CSVLexer(cSVFormat15, extendedBufferedReader16);
        boolean boolean18 = cSVLexer17.ignoreEmptyLines;
        boolean boolean20 = cSVLexer17.isEndOfFile((int) (short) 10);
        boolean boolean22 = cSVLexer17.isEndOfFile(0);
        boolean boolean24 = cSVLexer17.isStartOfLine((int) '\r');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader25 = cSVLexer17.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader26 = cSVLexer17.in;
        boolean boolean28 = cSVLexer17.isEndOfFile(10);
        boolean boolean30 = cSVLexer17.isWhitespace((int) (byte) 10);
        boolean boolean32 = cSVLexer17.isStartOfLine(6);
        boolean boolean34 = cSVLexer17.isEscape((int) '\r');
        boolean boolean36 = cSVLexer17.isQuoteChar((int) '\b');
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder38 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat37);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader39 = null;
        org.apache.commons.csv.CSVLexer cSVLexer40 = new org.apache.commons.csv.CSVLexer(cSVFormat37, extendedBufferedReader39);
        boolean boolean42 = cSVLexer40.isWhitespace(6);
        org.apache.commons.csv.Token token43 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type44 = org.apache.commons.csv.Token.Type.EOF;
        token43.type = type44;
        token43.reset();
        java.lang.StringBuilder stringBuilder47 = token43.content;
        cSVLexer40.trimTrailingSpaces(stringBuilder47);
        cSVLexer17.trimTrailingSpaces(stringBuilder47);
        cSVLexer5.trimTrailingSpaces(stringBuilder47);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(extendedBufferedReader25);
        org.junit.Assert.assertNull(extendedBufferedReader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.apache.commons.csv.Token.Type.EOF + "'", type44.equals(org.apache.commons.csv.Token.Type.EOF));
        org.junit.Assert.assertNotNull(stringBuilder47);
        org.junit.Assert.assertEquals(stringBuilder47.toString(), "");
    }

    @Test
    public void test619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test619");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        org.apache.commons.csv.Token token20 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type21 = token20.type;
        java.lang.String str22 = token20.toString();
        org.apache.commons.csv.Token.Type type23 = org.apache.commons.csv.Token.Type.EORECORD;
        token20.type = type23;
        java.lang.StringBuilder stringBuilder25 = token20.content;
        cSVLexer19.trimTrailingSpaces(stringBuilder25);
        cSVLexer5.trimTrailingSpaces(stringBuilder25);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "INVALID []" + "'", str22, "INVALID []");
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type23.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder25);
        org.junit.Assert.assertEquals(stringBuilder25.toString(), "");
    }

    @Test
    public void test620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test620");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.isDelimiter((int) '\\');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test621");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean11 = cSVLexer5.isWhitespace(6);
        boolean boolean13 = cSVLexer5.isEndOfFile(0);
        boolean boolean15 = cSVLexer5.isWhitespace((int) 'a');
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer5.isStartOfLine(0);
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type20 = token19.type;
        java.lang.String str21 = token19.toString();
        boolean boolean22 = token19.isReady;
        java.lang.String str23 = token19.toString();
        java.lang.StringBuilder stringBuilder24 = token19.content;
        java.lang.String str25 = token19.toString();
        boolean boolean26 = token19.isReady;
        org.apache.commons.csv.Token.Type type27 = token19.type;
        token19.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token29 = cSVLexer5.nextToken(token19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type20.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "INVALID []" + "'", str21, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "INVALID []" + "'", str23, "INVALID []");
        org.junit.Assert.assertNotNull(stringBuilder24);
        org.junit.Assert.assertEquals(stringBuilder24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "INVALID []" + "'", str25, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type27.equals(org.apache.commons.csv.Token.Type.INVALID));
    }

    @Test
    public void test622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test622");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        boolean boolean14 = cSVLexer5.readEndOfLine((int) (byte) 1);
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        boolean boolean17 = cSVLexer5.isStartOfLine(10);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder19 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat18);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = cSVFormat18.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormatBuilder20.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader22 = null;
        org.apache.commons.csv.CSVLexer cSVLexer23 = new org.apache.commons.csv.CSVLexer(cSVFormat21, extendedBufferedReader22);
        boolean boolean25 = cSVLexer23.isEscape(0);
        boolean boolean27 = cSVLexer23.isEscape((int) '#');
        boolean boolean28 = cSVLexer23.ignoreEmptyLines;
        boolean boolean29 = cSVLexer23.ignoreSurroundingSpaces;
        org.apache.commons.csv.Token token30 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type31 = token30.type;
        java.lang.StringBuilder stringBuilder32 = token30.content;
        cSVLexer23.trimTrailingSpaces(stringBuilder32);
        cSVLexer5.trimTrailingSpaces(stringBuilder32);
        boolean boolean36 = cSVLexer5.isQuoteChar((int) (short) 1);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader37 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormatBuilder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type31.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder32);
        org.junit.Assert.assertEquals(stringBuilder32.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(extendedBufferedReader37);
    }

    @Test
    public void test623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test623");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVFormat12.isQuoting();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test624");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.StringBuilder stringBuilder9 = token7.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder9);
        boolean boolean12 = cSVLexer3.isEndOfFile((int) (byte) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer3.format;
        org.apache.commons.csv.Quote quote16 = org.apache.commons.csv.Quote.ALL;
        java.lang.String[] strArray23 = null;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder24 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('a', (java.lang.Character) ' ', quote16, (java.lang.Character) '\"', (java.lang.Character) '\\', false, false, "Delimiter=<,> QuoteChar=<\">", "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored", strArray23);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder26 = cSVFormatBuilder24.withRecordSeparator("Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored");
        boolean boolean27 = cSVFormat13.equals((java.lang.Object) cSVFormatBuilder24);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader28 = null;
        org.apache.commons.csv.CSVLexer cSVLexer29 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader28);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + quote16 + "' != '" + org.apache.commons.csv.Quote.ALL + "'", quote16.equals(org.apache.commons.csv.Quote.ALL));
        org.junit.Assert.assertNotNull(cSVFormatBuilder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test625");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        java.lang.String[] strArray2 = cSVFormat0.getHeader();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.isDelimiter((int) ' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test626");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        java.lang.String str12 = cSVFormat11.toString();
        java.lang.String[] strArray13 = cSVFormat11.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.Quote quote20 = null;
        org.apache.commons.csv.Quote quote29 = null;
        org.apache.commons.csv.Quote quote38 = null;
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat52 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote38, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray51);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder53 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote29, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray51);
        org.apache.commons.csv.Quote quote56 = null;
        org.apache.commons.csv.Quote quote65 = null;
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat79 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote65, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray78);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder80 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote56, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray78);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder81 = cSVFormatBuilder53.withHeader(strArray78);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder82 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote20, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray78);
        java.lang.String str83 = cSVFormat17.format((java.lang.Object[]) strArray78);
        java.util.Map<java.lang.String, java.lang.Integer> strMap84 = null;
        org.apache.commons.csv.CSVRecord cSVRecord87 = new org.apache.commons.csv.CSVRecord(strArray78, strMap84, "Delimiter=<,> QuoteChar=<\">", 0L);
        java.lang.String str88 = cSVFormat11.format((java.lang.Object[]) strArray78);
        boolean boolean89 = cSVFormat11.isQuoting();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str12, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(cSVFormatBuilder81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str83, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test627");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.isEndOfFile(100);
        boolean boolean19 = cSVLexer15.isCommentStart(0);
        boolean boolean21 = cSVLexer15.readEndOfLine(1);
        org.apache.commons.csv.Token token22 = new org.apache.commons.csv.Token();
        java.lang.String str23 = token22.toString();
        org.apache.commons.csv.Token.Type type24 = token22.type;
        org.apache.commons.csv.Token token25 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type26 = token25.type;
        java.lang.String str27 = token25.toString();
        org.apache.commons.csv.Token.Type type28 = org.apache.commons.csv.Token.Type.EORECORD;
        token25.type = type28;
        java.lang.StringBuilder stringBuilder30 = token25.content;
        org.apache.commons.csv.Token.Type type31 = token25.type;
        token22.type = type31;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token33 = cSVLexer15.nextToken(token22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "INVALID []" + "'", str23, "INVALID []");
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type24.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type26.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "INVALID []" + "'", str27, "INVALID []");
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type28.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder30);
        org.junit.Assert.assertEquals(stringBuilder30.toString(), "");
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type31.equals(org.apache.commons.csv.Token.Type.EORECORD));
    }

    @Test
    public void test628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test628");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat3);
        java.io.Reader reader7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable8 = cSVFormat3.parse(reader7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
    }

    @Test
    public void test629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test629");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.isEscape((int) (short) 10);
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        // The following exception was thrown during execution in test generation
        try {
            int int16 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test630");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isCommentStart(1);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) ',');
        boolean boolean13 = cSVLexer5.ignoreEmptyLines;
        boolean boolean15 = cSVLexer5.isCommentStart(10);
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVLexer5.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(extendedBufferedReader18);
    }

    @Test
    public void test631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test631");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat1, extendedBufferedReader3);
        java.lang.String str5 = cSVFormat1.getNullToString();
        java.lang.String str6 = cSVFormat1.toString();
        org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser("hi!,,hi!,,hi!,hi!", cSVFormat1);
        org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord();
        java.lang.String str9 = cSVRecord8.getComment();
        java.lang.String str10 = cSVRecord8.getComment();
        long long11 = cSVRecord8.getRecordNumber();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str6, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVRecord8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test632");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        boolean boolean13 = cSVLexer5.isEscape(10);
        boolean boolean15 = cSVLexer5.isEscape((int) (short) 100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test633");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean7 = cSVLexer3.isDelimiter(0);
        boolean boolean8 = cSVLexer3.ignoreEmptyLines;
        // The following exception was thrown during execution in test generation
        try {
            int int9 = cSVLexer3.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test634");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        java.lang.String[] strArray16 = cSVFormat13.getHeader();
        java.lang.Character char17 = cSVFormat13.getCommentStart();
        java.lang.String str18 = cSVFormat13.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat19);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder21 = cSVFormat19.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder23 = cSVFormatBuilder21.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormatBuilder23.build();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder26 = cSVFormatBuilder23.withDelimiter('4');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder28 = cSVFormatBuilder26.withCommentStart('a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder30 = cSVFormatBuilder28.withRecordSeparator("Delimiter=<\t> Escape=<\\>");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder32 = cSVFormatBuilder28.withNullToString("Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored");
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder34 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat33);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder35 = cSVFormat33.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder37 = cSVFormatBuilder35.withIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.Quote quote40 = null;
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat54 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote40, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray53);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder55 = cSVFormatBuilder37.withHeader(strArray53);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder56 = cSVFormatBuilder28.withHeader(strArray53);
        java.lang.String str57 = cSVFormat13.format((java.lang.Object[]) strArray53);
        char char58 = cSVFormat13.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\r\n" + "'", str18, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormatBuilder21);
        org.junit.Assert.assertNotNull(cSVFormatBuilder23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormatBuilder26);
        org.junit.Assert.assertNotNull(cSVFormatBuilder28);
        org.junit.Assert.assertNotNull(cSVFormatBuilder30);
        org.junit.Assert.assertNotNull(cSVFormatBuilder32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVFormatBuilder35);
        org.junit.Assert.assertNotNull(cSVFormatBuilder37);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(cSVFormatBuilder55);
        org.junit.Assert.assertNotNull(cSVFormatBuilder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str57, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertTrue("'" + char58 + "' != '" + ',' + "'", char58 == ',');
    }

    @Test
    public void test635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test635");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean18 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean20 = cSVLexer5.isCommentStart(100);
        boolean boolean22 = cSVLexer5.isCommentStart((int) (byte) 0);
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVLexer5.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader24 = null;
        org.apache.commons.csv.CSVLexer cSVLexer25 = new org.apache.commons.csv.CSVLexer(cSVFormat23, extendedBufferedReader24);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cSVFormat23);
    }

    @Test
    public void test636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test636");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        java.lang.String str5 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder7 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\r\n" + "'", str5, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
    }

    @Test
    public void test637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test637");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean10 = cSVLexer5.ignoreEmptyLines;
        boolean boolean11 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        token12.isReady = false;
        token12.isReady = true;
        token12.isReady = true;
        boolean boolean19 = token12.isReady;
        token12.reset();
        org.apache.commons.csv.Token token21 = new org.apache.commons.csv.Token();
        token21.isReady = false;
        org.apache.commons.csv.Token.Type type24 = org.apache.commons.csv.Token.Type.INVALID;
        token21.type = type24;
        token12.type = type24;
        token12.isReady = false;
        org.apache.commons.csv.Token token29 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type30 = token29.type;
        java.lang.String str31 = token29.toString();
        org.apache.commons.csv.Token.Type type32 = org.apache.commons.csv.Token.Type.EORECORD;
        token29.type = type32;
        org.apache.commons.csv.Token.Type type34 = token29.type;
        token12.type = type34;
        java.lang.String str36 = token12.toString();
        org.apache.commons.csv.Token token37 = new org.apache.commons.csv.Token();
        token37.isReady = false;
        token37.isReady = true;
        token37.isReady = true;
        boolean boolean44 = token37.isReady;
        token37.reset();
        org.apache.commons.csv.Token token46 = new org.apache.commons.csv.Token();
        token46.isReady = false;
        org.apache.commons.csv.Token.Type type49 = org.apache.commons.csv.Token.Type.INVALID;
        token46.type = type49;
        token37.type = type49;
        token37.isReady = false;
        org.apache.commons.csv.Token token54 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type55 = token54.type;
        java.lang.String str56 = token54.toString();
        org.apache.commons.csv.Token.Type type57 = org.apache.commons.csv.Token.Type.EORECORD;
        token54.type = type57;
        org.apache.commons.csv.Token.Type type59 = token54.type;
        token37.type = type59;
        token12.type = type59;
        org.apache.commons.csv.Token.Type type62 = token12.type;
        token12.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token64 = cSVLexer5.nextToken(token12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type24.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type30.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "INVALID []" + "'", str31, "INVALID []");
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type32.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type34.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "EORECORD []" + "'", str36, "EORECORD []");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type49.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type55.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "INVALID []" + "'", str56, "INVALID []");
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type57.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type59.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type62 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type62.equals(org.apache.commons.csv.Token.Type.EORECORD));
    }

    @Test
    public void test638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test638");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.isEscape((int) (short) 10);
        boolean boolean15 = cSVLexer5.isStartOfLine(100);
        org.apache.commons.csv.Token token16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token17 = cSVLexer5.nextToken(token16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test639");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        java.lang.String[] strArray2 = cSVFormat0.getHeader();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder5 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNull(strArray2);
    }

    @Test
    public void test640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test640");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        boolean boolean9 = cSVLexer5.isEndOfFile((int) (byte) 100);
        boolean boolean11 = cSVLexer5.isEscape((int) (byte) -1);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader12 = cSVLexer5.in;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(extendedBufferedReader12);
    }

    @Test
    public void test641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test641");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isWhitespace((int) '\\');
        boolean boolean17 = cSVLexer5.isWhitespace((-2));
        boolean boolean19 = cSVLexer5.isDelimiter(10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test642");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVParser cSVParser2 = new org.apache.commons.csv.CSVParser("[]", cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
    }

    @Test
    public void test643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test643");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean18 = cSVLexer5.isEndOfFile((int) (short) 10);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer5.in;
        boolean boolean21 = cSVLexer5.isWhitespace((-2));
        boolean boolean23 = cSVLexer5.isQuoteChar(100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test644");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat0.getNullToString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat0.toBuilder();
        java.lang.String str17 = cSVFormat0.getNullToString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test645");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer18.in;
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder21 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat20);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder22 = cSVFormat20.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormatBuilder22.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader24 = null;
        org.apache.commons.csv.CSVLexer cSVLexer25 = new org.apache.commons.csv.CSVLexer(cSVFormat23, extendedBufferedReader24);
        boolean boolean26 = cSVLexer25.ignoreEmptyLines;
        boolean boolean28 = cSVLexer25.isEndOfFile((int) (short) 10);
        boolean boolean30 = cSVLexer25.isEndOfFile(0);
        boolean boolean32 = cSVLexer25.isQuoteChar((int) '\r');
        org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type34 = token33.type;
        java.lang.String str35 = token33.toString();
        org.apache.commons.csv.Token.Type type36 = token33.type;
        java.lang.StringBuilder stringBuilder37 = token33.content;
        cSVLexer25.trimTrailingSpaces(stringBuilder37);
        cSVLexer18.trimTrailingSpaces(stringBuilder37);
        boolean boolean41 = cSVLexer18.isCommentStart((int) (byte) -1);
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVLexer18.format;
        org.apache.commons.csv.Token token43 = new org.apache.commons.csv.Token();
        token43.isReady = false;
        org.apache.commons.csv.Token.Type type46 = org.apache.commons.csv.Token.Type.INVALID;
        token43.type = type46;
        token43.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token49 = cSVLexer18.nextToken(token43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormatBuilder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type34.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "INVALID []" + "'", str35, "INVALID []");
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type36.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder37);
        org.junit.Assert.assertEquals(stringBuilder37.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type46.equals(org.apache.commons.csv.Token.Type.INVALID));
    }

    @Test
    public void test646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test646");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        boolean boolean14 = cSVLexer5.isQuoteChar((int) ' ');
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) 10);
        java.lang.StringBuilder stringBuilder17 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVLexer5.trimTrailingSpaces(stringBuilder17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test647");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isStartOfLine((int) (byte) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test648");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        boolean boolean14 = cSVLexer5.isCommentStart((int) ',');
        boolean boolean16 = cSVLexer5.isCommentStart(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test649");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        java.lang.Character char32 = cSVFormat12.getCommentStart();
        boolean boolean33 = cSVFormat12.isCommentingEnabled();
        boolean boolean34 = cSVFormat12.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(char32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test650");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean17 = cSVLexer5.isQuoteChar(6);
        boolean boolean18 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        java.lang.String str20 = token19.toString();
        org.apache.commons.csv.Token.Type type21 = token19.type;
        boolean boolean22 = token19.isReady;
        java.lang.StringBuilder stringBuilder23 = token19.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder23);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader25 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "INVALID []" + "'", str20, "INVALID []");
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
        org.junit.Assert.assertNull(extendedBufferedReader25);
    }

    @Test
    public void test651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test651");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isWhitespace((int) '\\');
        java.lang.StringBuilder stringBuilder16 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVLexer5.trimTrailingSpaces(stringBuilder16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test652");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        boolean boolean17 = cSVLexer5.isWhitespace((int) '\r');
        boolean boolean18 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean20 = cSVLexer5.isWhitespace((int) '\t');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test653");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        boolean boolean13 = cSVLexer6.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer6.format;
        boolean boolean15 = cSVFormat14.isQuoting();
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("[hi!]", cSVFormat14);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser16.getRecords();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor18 = cSVParser16.iterator();
        org.apache.commons.csv.CSVRecord cSVRecord19 = cSVParser16.nextRecord();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(cSVRecordList17);
        org.junit.Assert.assertNotNull(cSVRecordItor18);
        org.junit.Assert.assertNull(cSVRecord19);
    }

    @Test
    public void test654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test654");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder13 = cSVFormat12.toBuilder();
        boolean boolean14 = cSVFormat12.isCommentingEnabled();
        java.lang.String str15 = cSVFormat12.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat12.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder17 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat12);
        java.lang.String[] strArray18 = cSVFormat12.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str15, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormatBuilder17);
        org.junit.Assert.assertNull(strArray18);
    }

    @Test
    public void test655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test655");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer18.in;
        boolean boolean21 = cSVLexer18.isCommentStart(0);
        boolean boolean23 = cSVLexer18.isEscape((int) (short) -1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test656");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat0.getNullToString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat0.toBuilder();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder16.withEscape((java.lang.Character) '\n');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The escape character cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
    }

    @Test
    public void test657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test657");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = null;
        org.apache.commons.csv.CSVLexer cSVLexer14 = new org.apache.commons.csv.CSVLexer(cSVFormat12, extendedBufferedReader13);
        boolean boolean16 = cSVLexer14.isEndOfFile(1);
        boolean boolean18 = cSVLexer14.isWhitespace((int) '\n');
        boolean boolean20 = cSVLexer14.isEndOfFile(10);
        boolean boolean22 = cSVLexer14.isStartOfLine(100);
        boolean boolean24 = cSVLexer14.isWhitespace((int) (short) 100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test658");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT;
        java.lang.String str2 = cSVFormat1.getRecordSeparator();
        org.apache.commons.csv.Quote quote3 = cSVFormat1.getQuotePolicy();
        boolean boolean4 = cSVFormat1.isEscaping();
        org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser("TOKEN []", cSVFormat1);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser5.spliterator();
        org.apache.commons.csv.CSVRecord cSVRecord7 = cSVParser5.nextRecord();
        java.lang.String str8 = cSVRecord7.getComment();
        boolean boolean9 = cSVRecord7.isConsistent();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\r\n" + "'", str2, "\r\n");
        org.junit.Assert.assertNull(quote3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator6);
        org.junit.Assert.assertNotNull(cSVRecord7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test659");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile((int) 'a');
        org.apache.commons.csv.Token token11 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type12 = token11.type;
        java.lang.String str13 = token11.toString();
        org.apache.commons.csv.Token.Type type14 = org.apache.commons.csv.Token.Type.COMMENT;
        token11.type = type14;
        token11.reset();
        boolean boolean17 = token11.isReady;
        token11.reset();
        boolean boolean19 = token11.isReady;
        org.apache.commons.csv.Token token20 = new org.apache.commons.csv.Token();
        token20.isReady = false;
        token20.isReady = true;
        token20.isReady = true;
        org.apache.commons.csv.Token.Type type27 = token20.type;
        token11.type = type27;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token29 = cSVLexer5.nextToken(token11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type12.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "INVALID []" + "'", str13, "INVALID []");
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type14.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type27.equals(org.apache.commons.csv.Token.Type.INVALID));
    }

    @Test
    public void test660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test660");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isQuoteChar((int) '4');
        boolean boolean19 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean21 = cSVLexer15.isWhitespace((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int22 = cSVLexer15.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test661");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isEscaping();
        java.lang.Character char2 = cSVFormat0.getEscape();
        java.lang.Character char3 = cSVFormat0.getCommentStart();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormat0.toBuilder();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isDelimiter((int) '\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test662");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean12 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean14 = cSVLexer5.isEscape((int) (byte) 0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test663");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        boolean boolean4 = cSVFormat1.isEscaping();
        org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser("Delimiter=< > Escape=<\f> QuoteChar=<a> CommentStart=<4>", cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test664");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        boolean boolean13 = cSVLexer5.readEndOfLine((int) '\"');
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.isCommentStart((int) ' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test665");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean17 = cSVLexer5.isQuoteChar(6);
        boolean boolean18 = cSVLexer5.ignoreEmptyLines;
        java.lang.Class<?> wildcardClass19 = cSVLexer5.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test666");
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = new org.apache.commons.csv.CSVParser("Delimiter=<\t> QuoteChar=<\"> EmptyLines:ignored SurroundingSpaces:ignored", cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test667");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = cSVLexer5.in;
        boolean boolean20 = cSVLexer5.isWhitespace((int) (byte) 0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader17);
        org.junit.Assert.assertNull(extendedBufferedReader18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test668");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isCommentStart(1);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) ',');
        boolean boolean13 = cSVLexer5.ignoreEmptyLines;
        boolean boolean15 = cSVLexer5.isCommentStart(10);
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVLexer5.format;
        boolean boolean19 = cSVLexer5.isStartOfLine((int) 'a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test669");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        boolean boolean16 = cSVLexer5.isStartOfLine(0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = cSVLexer5.in;
        boolean boolean20 = cSVLexer5.readEndOfLine(10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader17);
        org.junit.Assert.assertNull(extendedBufferedReader18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test670");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat1, extendedBufferedReader3);
        java.lang.String str5 = cSVFormat1.getNullToString();
        java.lang.String str6 = cSVFormat1.toString();
        org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser("hi!,,hi!,,hi!,hi!", cSVFormat1);
        org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord();
        long long9 = cSVParser7.getLineNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser7.spliterator();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator11 = cSVParser7.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str6, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVRecord8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator10);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator11);
    }

    @Test
    public void test671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test671");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        java.lang.String str19 = cSVFormat13.toString();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader20 = null;
        org.apache.commons.csv.CSVLexer cSVLexer21 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader20);
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder23 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat22);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder24 = cSVFormat22.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder26 = cSVFormatBuilder24.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormatBuilder24.build();
        boolean boolean28 = cSVFormat13.equals((java.lang.Object) cSVFormatBuilder24);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str19, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormatBuilder24);
        org.junit.Assert.assertNotNull(cSVFormatBuilder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test672");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.isEndOfFile(100);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = cSVLexer15.in;
        boolean boolean20 = cSVLexer15.isWhitespace(1);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(extendedBufferedReader18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test673");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        boolean boolean16 = cSVLexer5.isEscape((int) '#');
        boolean boolean18 = cSVLexer5.readEndOfLine((int) (short) 100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test674");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = cSVLexer5.in;
        boolean boolean16 = cSVLexer5.isEndOfFile((int) '#');
        boolean boolean18 = cSVLexer5.isEscape((int) (short) 1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(extendedBufferedReader13);
        org.junit.Assert.assertNull(extendedBufferedReader14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test675");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVLexer5.format;
        boolean boolean10 = cSVFormat9.isQuoting();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test676");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer18.in;
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder21 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat20);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder22 = cSVFormat20.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormatBuilder22.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader24 = null;
        org.apache.commons.csv.CSVLexer cSVLexer25 = new org.apache.commons.csv.CSVLexer(cSVFormat23, extendedBufferedReader24);
        boolean boolean26 = cSVLexer25.ignoreEmptyLines;
        boolean boolean28 = cSVLexer25.isEndOfFile((int) (short) 10);
        boolean boolean30 = cSVLexer25.isEndOfFile(0);
        boolean boolean32 = cSVLexer25.isQuoteChar((int) '\r');
        org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type34 = token33.type;
        java.lang.String str35 = token33.toString();
        org.apache.commons.csv.Token.Type type36 = token33.type;
        java.lang.StringBuilder stringBuilder37 = token33.content;
        cSVLexer25.trimTrailingSpaces(stringBuilder37);
        cSVLexer18.trimTrailingSpaces(stringBuilder37);
        boolean boolean41 = cSVLexer18.isWhitespace((int) (byte) 1);
        org.apache.commons.csv.CSVFormat cSVFormat42 = cSVLexer18.format;
        // The following exception was thrown during execution in test generation
        try {
            long long43 = cSVLexer18.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormatBuilder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type34.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "INVALID []" + "'", str35, "INVALID []");
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type36.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder37);
        org.junit.Assert.assertEquals(stringBuilder37.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(cSVFormat42);
    }

    @Test
    public void test677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test677");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine(0);
        boolean boolean8 = cSVLexer4.isEndOfFile((int) (byte) 1);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVLexer4.format;
        java.lang.String str10 = cSVFormat9.getRecordSeparator();
        boolean boolean11 = cSVFormat9.isEscaping();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\r\n" + "'", str10, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test678");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isQuoteChar((int) (short) 10);
        boolean boolean20 = cSVLexer15.readEndOfLine((int) ',');
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test679");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isDelimiter((int) (short) -1);
        boolean boolean17 = cSVLexer5.readEndOfLine((-1));
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVLexer5.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat18);
    }

    @Test
    public void test680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test680");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean3 = cSVFormat2.isEscaping();
        org.apache.commons.csv.Quote quote4 = cSVFormat2.getQuotePolicy();
        java.lang.Character char5 = cSVFormat2.getCommentStart();
        org.apache.commons.csv.CSVParser cSVParser6 = new org.apache.commons.csv.CSVParser("Delimiter=< > Escape=<#> QuoteChar=<#> CommentStart=<\r> EmptyLines:ignored", cSVFormat2);
        java.lang.String str7 = cSVFormat2.getNullToString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = cSVFormat2.toBuilder();
        org.apache.commons.csv.CSVParser cSVParser9 = new org.apache.commons.csv.CSVParser("TOKEN []", cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(quote4);
        org.junit.Assert.assertNull(char5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(cSVFormatBuilder8);
    }

    @Test
    public void test681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test681");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        boolean boolean16 = cSVLexer5.isStartOfLine((int) (short) -1);
        boolean boolean17 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean19 = cSVLexer5.isEscape((int) '\r');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test682");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEndOfFile(6);
        boolean boolean11 = cSVLexer5.isEndOfFile(3);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = token12.type;
        java.lang.String str14 = token12.toString();
        org.apache.commons.csv.Token.Type type15 = org.apache.commons.csv.Token.Type.COMMENT;
        token12.type = type15;
        token12.reset();
        java.lang.String str18 = token12.toString();
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        token19.isReady = false;
        token19.isReady = true;
        token19.isReady = true;
        boolean boolean26 = token19.isReady;
        token19.reset();
        org.apache.commons.csv.Token token28 = new org.apache.commons.csv.Token();
        token28.isReady = false;
        org.apache.commons.csv.Token.Type type31 = org.apache.commons.csv.Token.Type.INVALID;
        token28.type = type31;
        token19.type = type31;
        token12.type = type31;
        java.lang.StringBuilder stringBuilder35 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder35);
        boolean boolean38 = cSVLexer5.readEndOfLine((-2));
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type13.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "INVALID []" + "'", str14, "INVALID []");
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type15.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "INVALID []" + "'", str18, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type31.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder35);
        org.junit.Assert.assertEquals(stringBuilder35.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test683");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.CSVParser cSVParser14 = new org.apache.commons.csv.CSVParser("Delimiter=<,> QuoteChar=<\">", cSVFormat13);
        java.io.Reader reader15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable16 = cSVFormat13.parse(reader15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test684");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isCommentStart((int) (short) -1);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test685");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVLexer4.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader8 = null;
        org.apache.commons.csv.CSVLexer cSVLexer9 = new org.apache.commons.csv.CSVLexer(cSVFormat7, extendedBufferedReader8);
        boolean boolean11 = cSVLexer9.isQuoteChar((int) (byte) 1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer9.format;
        org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type14 = token13.type;
        java.lang.String str15 = token13.toString();
        org.apache.commons.csv.Token.Type type16 = org.apache.commons.csv.Token.Type.COMMENT;
        token13.type = type16;
        token13.reset();
        boolean boolean19 = token13.isReady;
        token13.reset();
        java.lang.String str21 = token13.toString();
        org.apache.commons.csv.Token token22 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type23 = org.apache.commons.csv.Token.Type.COMMENT;
        token22.type = type23;
        org.apache.commons.csv.Token.Type type25 = token22.type;
        org.apache.commons.csv.Token token26 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type27 = token26.type;
        token22.type = type27;
        org.apache.commons.csv.Token token29 = new org.apache.commons.csv.Token();
        token29.isReady = false;
        token29.isReady = true;
        java.lang.String str34 = token29.toString();
        org.apache.commons.csv.Token token35 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type36 = org.apache.commons.csv.Token.Type.COMMENT;
        token35.type = type36;
        token29.type = type36;
        org.apache.commons.csv.Token.Type type39 = token29.type;
        token22.type = type39;
        token13.type = type39;
        boolean boolean42 = token13.isReady;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token43 = cSVLexer9.nextToken(token13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type14.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "INVALID []" + "'", str15, "INVALID []");
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type16.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "INVALID []" + "'", str21, "INVALID []");
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type23.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type25.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type27.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "INVALID []" + "'", str34, "INVALID []");
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type36.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type39.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test686");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.StringBuilder stringBuilder9 = token7.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder9);
        boolean boolean12 = cSVLexer3.isCommentStart((int) '#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test687");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        boolean boolean14 = cSVLexer5.isQuoteChar((int) (byte) 0);
        boolean boolean16 = cSVLexer5.isDelimiter(0);
        boolean boolean18 = cSVLexer5.isDelimiter((int) (short) 0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test688");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isWhitespace(6);
        boolean boolean7 = cSVLexer3.isEndOfFile((int) (byte) 1);
        boolean boolean9 = cSVLexer3.readEndOfLine(10);
        org.apache.commons.csv.Token token10 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type11 = token10.type;
        java.lang.String str12 = token10.toString();
        org.apache.commons.csv.Token.Type type13 = token10.type;
        boolean boolean14 = token10.isReady;
        token10.isReady = false;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token17 = cSVLexer3.nextToken(token10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type11.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "INVALID []" + "'", str12, "INVALID []");
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type13.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test689");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        boolean boolean8 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder10 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat9);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder11 = cSVFormat9.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormatBuilder11.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = null;
        org.apache.commons.csv.CSVLexer cSVLexer14 = new org.apache.commons.csv.CSVLexer(cSVFormat12, extendedBufferedReader13);
        boolean boolean16 = cSVLexer14.isEscape(0);
        boolean boolean18 = cSVLexer14.isEscape(0);
        boolean boolean20 = cSVLexer14.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVLexer14.format;
        boolean boolean23 = cSVLexer14.isEscape((int) (byte) 100);
        boolean boolean25 = cSVLexer14.isStartOfLine((int) (short) 10);
        org.apache.commons.csv.CSVFormat cSVFormat26 = cSVLexer14.format;
        org.apache.commons.csv.Token token27 = new org.apache.commons.csv.Token();
        token27.isReady = false;
        token27.isReady = true;
        java.lang.String str32 = token27.toString();
        org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type34 = org.apache.commons.csv.Token.Type.COMMENT;
        token33.type = type34;
        token27.type = type34;
        org.apache.commons.csv.Token.Type type37 = token27.type;
        java.lang.StringBuilder stringBuilder38 = token27.content;
        cSVLexer14.trimTrailingSpaces(stringBuilder38);
        cSVLexer5.trimTrailingSpaces(stringBuilder38);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVFormatBuilder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "INVALID []" + "'", str32, "INVALID []");
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type34.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type37.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertNotNull(stringBuilder38);
        org.junit.Assert.assertEquals(stringBuilder38.toString(), "");
    }

    @Test
    public void test690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test690");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat1);
        org.apache.commons.csv.CSVParser cSVParser3 = new org.apache.commons.csv.CSVParser("Delimiter=< > Escape=<\f> QuoteChar=<a> CommentStart=<4>", cSVFormat1);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser3.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator4);
    }

    @Test
    public void test691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test691");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        boolean boolean20 = cSVLexer18.isEscape((int) (byte) 0);
        boolean boolean22 = cSVLexer18.isWhitespace(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test692");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean11 = cSVLexer5.isWhitespace(6);
        boolean boolean13 = cSVLexer5.isEndOfFile(0);
        boolean boolean15 = cSVLexer5.isWhitespace((int) 'a');
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer5.isWhitespace((int) '\\');
        boolean boolean20 = cSVLexer5.isQuoteChar((int) '\\');
        boolean boolean22 = cSVLexer5.readEndOfLine((int) (byte) 10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test693");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isCommentStart(1);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) ',');
        boolean boolean13 = cSVLexer5.ignoreEmptyLines;
        boolean boolean15 = cSVLexer5.isCommentStart(10);
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean17 = cSVLexer5.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test694");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        java.lang.Character char32 = cSVFormat12.getCommentStart();
        java.lang.String[] strArray33 = cSVFormat12.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(char32);
        org.junit.Assert.assertNull(strArray33);
    }

    @Test
    public void test695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test695");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer6.format;
        boolean boolean13 = cSVFormat12.isQuoting();
        boolean boolean14 = cSVFormat12.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser("hi!,,hi!,,hi!,hi!", cSVFormat12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader16 = null;
        org.apache.commons.csv.CSVLexer cSVLexer17 = new org.apache.commons.csv.CSVLexer(cSVFormat12, extendedBufferedReader16);
        java.lang.String str18 = cSVFormat12.getNullToString();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test696");
        org.apache.commons.csv.Quote quote2 = null;
        org.apache.commons.csv.Quote quote11 = null;
        org.apache.commons.csv.Quote quote20 = null;
        org.apache.commons.csv.Quote quote29 = null;
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote29, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray42);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder44 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote20, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray42);
        org.apache.commons.csv.Quote quote47 = null;
        org.apache.commons.csv.Quote quote56 = null;
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat70 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote56, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder71 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote47, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder72 = cSVFormatBuilder44.withHeader(strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder73 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote11, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat74 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray69);
        org.apache.commons.csv.Quote quote75 = cSVFormat74.getQuotePolicy();
        java.lang.String[] strArray76 = cSVFormat74.getHeader();
        java.lang.String[] strArray77 = cSVFormat74.getHeader();
        boolean boolean78 = cSVFormat74.isQuoting();
        org.apache.commons.csv.CSVFormat cSVFormat79 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder80 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat79);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder81 = cSVFormat79.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat82 = cSVFormatBuilder81.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader83 = null;
        org.apache.commons.csv.CSVLexer cSVLexer84 = new org.apache.commons.csv.CSVLexer(cSVFormat82, extendedBufferedReader83);
        boolean boolean85 = cSVLexer84.ignoreEmptyLines;
        boolean boolean87 = cSVLexer84.isEndOfFile((int) (short) 10);
        boolean boolean89 = cSVLexer84.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat90 = cSVLexer84.format;
        boolean boolean92 = cSVLexer84.isEscape((int) (short) 10);
        boolean boolean94 = cSVLexer84.isStartOfLine(100);
        boolean boolean95 = cSVLexer84.ignoreSurroundingSpaces;
        boolean boolean96 = cSVFormat74.equals((java.lang.Object) cSVLexer84);
        boolean boolean98 = cSVLexer84.isQuoteChar((-1));
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(cSVFormatBuilder72);
        org.junit.Assert.assertNull(quote75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNotNull(cSVFormatBuilder81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(cSVFormat90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test697");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        boolean boolean13 = cSVLexer5.readEndOfLine(10);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer5.format;
        boolean boolean16 = cSVLexer5.isStartOfLine((int) '\f');
        boolean boolean18 = cSVLexer5.isEscape((int) (byte) 0);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat19);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder21 = cSVFormat19.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormatBuilder21.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader23 = null;
        org.apache.commons.csv.CSVLexer cSVLexer24 = new org.apache.commons.csv.CSVLexer(cSVFormat22, extendedBufferedReader23);
        boolean boolean25 = cSVLexer24.ignoreEmptyLines;
        boolean boolean27 = cSVLexer24.isEndOfFile((int) (short) 10);
        boolean boolean29 = cSVLexer24.isEndOfFile(0);
        boolean boolean31 = cSVLexer24.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVLexer24.format;
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder34 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat33);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder35 = cSVFormat33.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormatBuilder35.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader37 = null;
        org.apache.commons.csv.CSVLexer cSVLexer38 = new org.apache.commons.csv.CSVLexer(cSVFormat36, extendedBufferedReader37);
        org.apache.commons.csv.Token token39 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type40 = token39.type;
        java.lang.String str41 = token39.toString();
        org.apache.commons.csv.Token.Type type42 = org.apache.commons.csv.Token.Type.EORECORD;
        token39.type = type42;
        java.lang.StringBuilder stringBuilder44 = token39.content;
        cSVLexer38.trimTrailingSpaces(stringBuilder44);
        cSVLexer24.trimTrailingSpaces(stringBuilder44);
        cSVLexer5.trimTrailingSpaces(stringBuilder44);
        org.apache.commons.csv.Token token48 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type49 = org.apache.commons.csv.Token.Type.TOKEN;
        token48.type = type49;
        java.lang.String str51 = token48.toString();
        boolean boolean52 = token48.isReady;
        java.lang.String str53 = token48.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token54 = cSVLexer5.nextToken(token48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormatBuilder21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVFormatBuilder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type40.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "INVALID []" + "'", str41, "INVALID []");
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type42.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder44);
        org.junit.Assert.assertEquals(stringBuilder44.toString(), "");
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type49.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "TOKEN []" + "'", str51, "TOKEN []");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "TOKEN []" + "'", str53, "TOKEN []");
    }

    @Test
    public void test698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test698");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.Token token6 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type7 = token6.type;
        java.lang.String str8 = token6.toString();
        org.apache.commons.csv.Token.Type type9 = org.apache.commons.csv.Token.Type.EORECORD;
        token6.type = type9;
        java.lang.StringBuilder stringBuilder11 = token6.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder11);
        boolean boolean13 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote15 = cSVFormat14.getQuotePolicy();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type7.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INVALID []" + "'", str8, "INVALID []");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type9.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(quote15);
    }

    @Test
    public void test699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test699");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        boolean boolean8 = cSVLexer3.isStartOfLine((int) (byte) 10);
        boolean boolean10 = cSVLexer3.isEscape((int) (byte) 10);
        boolean boolean12 = cSVLexer3.isWhitespace((int) '\\');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test700");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) (short) 1);
        boolean boolean12 = cSVLexer5.ignoreEmptyLines;
        boolean boolean14 = cSVLexer5.isEndOfFile((int) (short) 0);
        boolean boolean16 = cSVLexer5.isDelimiter((int) '4');
        boolean boolean18 = cSVLexer5.isCommentStart((int) '\b');
        boolean boolean19 = cSVLexer5.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test701");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        boolean boolean13 = cSVLexer6.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer6.format;
        boolean boolean15 = cSVFormat14.isQuoting();
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("[hi!]", cSVFormat14);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser16.getRecords();
        long long18 = cSVParser16.getLineNumber();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap19 = cSVParser16.getHeaderMap();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(cSVRecordList17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test702");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) (short) 1);
        boolean boolean13 = cSVLexer5.isWhitespace(0);
        boolean boolean15 = cSVLexer5.isCommentStart((int) (byte) 10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test703");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.StringBuilder stringBuilder9 = token7.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder9);
        boolean boolean12 = cSVLexer3.isEndOfFile((int) (byte) 10);
        boolean boolean14 = cSVLexer3.isQuoteChar((int) '\f');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test704");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat13.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder16.withEscape((java.lang.Character) '\\');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = cSVFormatBuilder18.withDelimiter('\t');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder22 = cSVFormatBuilder18.withDelimiter('\b');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder24 = cSVFormatBuilder22.withEscape('\b');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str15, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormatBuilder20);
        org.junit.Assert.assertNotNull(cSVFormatBuilder22);
        org.junit.Assert.assertNotNull(cSVFormatBuilder24);
    }

    @Test
    public void test705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test705");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        boolean boolean4 = cSVFormat1.isCommentingEnabled();
        org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser("[]", cSVFormat1);
        boolean boolean6 = cSVFormat1.getIgnoreEmptyLines();
        org.apache.commons.csv.Quote quote9 = null;
        java.lang.String[] strArray19 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat20 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote9, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray19);
        java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null;
        org.apache.commons.csv.CSVRecord cSVRecord24 = new org.apache.commons.csv.CSVRecord(strArray19, strMap21, "\r\n", (long) (short) 0);
        java.lang.String str25 = cSVFormat1.format((java.lang.Object[]) strArray19);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\"Delimiter=<,> QuoteChar=<\"\">\",hi!," + "'", str25, "\"Delimiter=<,> QuoteChar=<\"\">\",hi!,");
    }

    @Test
    public void test706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test706");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.isEndOfFile(100);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = cSVLexer15.in;
        boolean boolean20 = cSVLexer15.readEndOfLine(0);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = cSVLexer15.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(extendedBufferedReader18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test707");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        boolean boolean8 = cSVLexer3.isQuoteChar((int) '4');
        boolean boolean9 = cSVLexer3.ignoreEmptyLines;
        boolean boolean11 = cSVLexer3.isStartOfLine((-1));
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = token12.type;
        java.lang.String str14 = token12.toString();
        org.apache.commons.csv.Token.Type type15 = token12.type;
        java.lang.StringBuilder stringBuilder16 = token12.content;
        token12.isReady = true;
        token12.isReady = true;
        org.apache.commons.csv.Token token21 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type22 = org.apache.commons.csv.Token.Type.TOKEN;
        token21.type = type22;
        org.apache.commons.csv.Token.Type type24 = token21.type;
        token12.type = type24;
        java.lang.StringBuilder stringBuilder26 = token12.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder26);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type13.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "INVALID []" + "'", str14, "INVALID []");
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type15.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder16);
        org.junit.Assert.assertEquals(stringBuilder16.toString(), "");
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type22.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type24.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder26);
        org.junit.Assert.assertEquals(stringBuilder26.toString(), "");
    }

    @Test
    public void test708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test708");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        boolean boolean13 = cSVLexer5.readEndOfLine(10);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer5.format;
        boolean boolean16 = cSVLexer5.isStartOfLine((int) '\f');
        boolean boolean18 = cSVLexer5.isEscape((int) (byte) 0);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat19);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder21 = cSVFormat19.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormatBuilder21.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader23 = null;
        org.apache.commons.csv.CSVLexer cSVLexer24 = new org.apache.commons.csv.CSVLexer(cSVFormat22, extendedBufferedReader23);
        boolean boolean25 = cSVLexer24.ignoreEmptyLines;
        boolean boolean27 = cSVLexer24.isEndOfFile((int) (short) 10);
        boolean boolean29 = cSVLexer24.isEndOfFile(0);
        boolean boolean31 = cSVLexer24.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat32 = cSVLexer24.format;
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder34 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat33);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder35 = cSVFormat33.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormatBuilder35.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader37 = null;
        org.apache.commons.csv.CSVLexer cSVLexer38 = new org.apache.commons.csv.CSVLexer(cSVFormat36, extendedBufferedReader37);
        org.apache.commons.csv.Token token39 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type40 = token39.type;
        java.lang.String str41 = token39.toString();
        org.apache.commons.csv.Token.Type type42 = org.apache.commons.csv.Token.Type.EORECORD;
        token39.type = type42;
        java.lang.StringBuilder stringBuilder44 = token39.content;
        cSVLexer38.trimTrailingSpaces(stringBuilder44);
        cSVLexer24.trimTrailingSpaces(stringBuilder44);
        cSVLexer5.trimTrailingSpaces(stringBuilder44);
        // The following exception was thrown during execution in test generation
        try {
            long long48 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVFormatBuilder21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVFormatBuilder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type40.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "INVALID []" + "'", str41, "INVALID []");
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type42.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder44);
        org.junit.Assert.assertEquals(stringBuilder44.toString(), "");
    }

    @Test
    public void test709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test709");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart(0);
        boolean boolean18 = cSVLexer5.readEndOfLine((int) (short) 100);
        boolean boolean20 = cSVLexer5.isQuoteChar((int) '#');
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVLexer5.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
    }

    @Test
    public void test710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test710");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        boolean boolean14 = cSVLexer5.isQuoteChar((int) ' ');
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) 10);
        boolean boolean17 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test711");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        boolean boolean13 = cSVLexer5.readEndOfLine((int) '\"');
        boolean boolean15 = cSVLexer5.isStartOfLine((int) ' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test712");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader8 = cSVLexer5.in;
        boolean boolean10 = cSVLexer5.isCommentStart(0);
        boolean boolean12 = cSVLexer5.readEndOfLine((int) 'a');
        boolean boolean14 = cSVLexer5.isCommentStart((-1));
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertNull(extendedBufferedReader8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test713");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.isEscape((int) (short) 10);
        boolean boolean15 = cSVLexer5.isStartOfLine(100);
        boolean boolean17 = cSVLexer5.isCommentStart((int) '\t');
        boolean boolean18 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test714");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        java.lang.String str5 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.Quote quote6 = cSVFormat0.getQuotePolicy();
        org.apache.commons.csv.Quote quote7 = cSVFormat0.getQuotePolicy();
        java.lang.Character char8 = cSVFormat0.getEscape();
        boolean boolean9 = cSVFormat0.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\r\n" + "'", str5, "\r\n");
        org.junit.Assert.assertNull(quote6);
        org.junit.Assert.assertNull(quote7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test715");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT;
        boolean boolean2 = cSVFormat1.getIgnoreEmptyLines();
        org.apache.commons.csv.Quote quote5 = null;
        org.apache.commons.csv.Quote quote14 = null;
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat28 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote14, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray27);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder29 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote5, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray27);
        org.apache.commons.csv.Quote quote32 = null;
        org.apache.commons.csv.Quote quote41 = null;
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat55 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote41, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray54);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder56 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote32, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray54);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = cSVFormatBuilder29.withHeader(strArray54);
        java.lang.String str58 = cSVFormat1.format((java.lang.Object[]) strArray54);
        boolean boolean59 = cSVFormat1.isCommentingEnabled();
        java.lang.String str60 = cSVFormat1.toString();
        org.apache.commons.csv.CSVParser cSVParser61 = new org.apache.commons.csv.CSVParser("", cSVFormat1);
        org.apache.commons.csv.CSVRecord cSVRecord62 = cSVParser61.nextRecord();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(cSVFormatBuilder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str58, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored" + "'", str60, "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored");
        org.junit.Assert.assertNull(cSVRecord62);
    }

    @Test
    public void test716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test716");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isWhitespace((int) '\\');
        boolean boolean17 = cSVLexer5.isWhitespace((int) '\f');
        boolean boolean18 = cSVLexer5.ignoreEmptyLines;
        boolean boolean20 = cSVLexer5.isQuoteChar((int) '\n');
        boolean boolean22 = cSVLexer5.isQuoteChar(1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test717");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type14 = token13.type;
        java.lang.String str15 = token13.toString();
        org.apache.commons.csv.Token.Type type16 = token13.type;
        java.lang.StringBuilder stringBuilder17 = token13.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder17);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVLexer5.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader20 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type14.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "INVALID []" + "'", str15, "INVALID []");
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type16.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder17);
        org.junit.Assert.assertEquals(stringBuilder17.toString(), "");
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(extendedBufferedReader20);
    }

    @Test
    public void test718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test718");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVFormat12.isCommentingEnabled();
        boolean boolean14 = cSVFormat12.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat12);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder17 = cSVFormatBuilder15.withRecordSeparator('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormatBuilder15);
        org.junit.Assert.assertNotNull(cSVFormatBuilder17);
    }

    @Test
    public void test719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test719");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) (short) -1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test720");
        org.apache.commons.csv.Quote quote2 = null;
        org.apache.commons.csv.Quote quote11 = null;
        org.apache.commons.csv.Quote quote20 = null;
        org.apache.commons.csv.Quote quote29 = null;
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat43 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote29, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray42);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder44 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote20, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray42);
        org.apache.commons.csv.Quote quote47 = null;
        org.apache.commons.csv.Quote quote56 = null;
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat70 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote56, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder71 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote47, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder72 = cSVFormatBuilder44.withHeader(strArray69);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder73 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote11, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray69);
        org.apache.commons.csv.CSVFormat cSVFormat74 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray69);
        org.apache.commons.csv.Quote quote75 = cSVFormat74.getQuotePolicy();
        boolean boolean76 = cSVFormat74.getIgnoreEmptyLines();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader77 = null;
        org.apache.commons.csv.CSVLexer cSVLexer78 = new org.apache.commons.csv.CSVLexer(cSVFormat74, extendedBufferedReader77);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(cSVFormatBuilder72);
        org.junit.Assert.assertNull(quote75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test721");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        boolean boolean18 = cSVLexer5.readEndOfLine((int) '\"');
        boolean boolean20 = cSVLexer5.isQuoteChar((int) '4');
        boolean boolean22 = cSVLexer5.isDelimiter((int) (byte) 1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test722");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat16 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote2, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray15);
        boolean boolean17 = cSVFormat16.isQuoting();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat16, extendedBufferedReader18);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test723");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean12 = cSVFormat11.isQuoting();
        boolean boolean13 = cSVFormat11.getIgnoreSurroundingSpaces();
        boolean boolean14 = cSVFormat11.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test724");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        boolean boolean13 = cSVLexer6.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer6.format;
        boolean boolean15 = cSVFormat14.isQuoting();
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("[hi!]", cSVFormat14);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList17 = cSVParser16.getRecords();
        long long18 = cSVParser16.getLineNumber();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser16.getRecords();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(cSVRecordList17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordList19);
    }

    @Test
    public void test725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test725");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean8 = cSVLexer5.ignoreEmptyLines;
        boolean boolean10 = cSVLexer5.isStartOfLine(1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test726");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isEndOfFile((int) ',');
        boolean boolean17 = cSVLexer5.isEndOfFile((int) (byte) 0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = cSVLexer5.in;
        boolean boolean20 = cSVLexer5.isDelimiter(100);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = cSVLexer5.in;
        boolean boolean22 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(extendedBufferedReader18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(extendedBufferedReader21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test727");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) (short) 1);
        boolean boolean12 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type14 = token13.type;
        java.lang.String str15 = token13.toString();
        org.apache.commons.csv.Token.Type type16 = org.apache.commons.csv.Token.Type.EORECORD;
        token13.type = type16;
        org.apache.commons.csv.Token.Type type18 = token13.type;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token19 = cSVLexer5.nextToken(token13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type14.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "INVALID []" + "'", str15, "INVALID []");
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type16.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type18.equals(org.apache.commons.csv.Token.Type.EORECORD));
    }

    @Test
    public void test728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test728");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart(0);
        boolean boolean18 = cSVLexer5.readEndOfLine((int) '4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test729");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.Token token6 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type7 = token6.type;
        java.lang.String str8 = token6.toString();
        org.apache.commons.csv.Token.Type type9 = org.apache.commons.csv.Token.Type.EORECORD;
        token6.type = type9;
        java.lang.StringBuilder stringBuilder11 = token6.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder11);
        boolean boolean13 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer5.format;
        boolean boolean16 = cSVLexer5.isEscape((int) 'a');
        boolean boolean18 = cSVLexer5.isEndOfFile((int) (short) 10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type7.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INVALID []" + "'", str8, "INVALID []");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type9.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test730");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isDelimiter((int) (short) -1);
        boolean boolean17 = cSVLexer5.readEndOfLine((-1));
        boolean boolean19 = cSVLexer5.isEndOfFile((int) '\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test731");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer18.in;
        org.apache.commons.csv.Token token20 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type21 = token20.type;
        java.lang.String str22 = token20.toString();
        org.apache.commons.csv.Token.Type type23 = org.apache.commons.csv.Token.Type.EORECORD;
        token20.type = type23;
        java.lang.StringBuilder stringBuilder25 = token20.content;
        token20.reset();
        java.lang.StringBuilder stringBuilder27 = token20.content;
        cSVLexer18.trimTrailingSpaces(stringBuilder27);
        boolean boolean30 = cSVLexer18.isDelimiter(10);
        boolean boolean32 = cSVLexer18.isStartOfLine((int) '\t');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "INVALID []" + "'", str22, "INVALID []");
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type23.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder25);
        org.junit.Assert.assertEquals(stringBuilder25.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder27);
        org.junit.Assert.assertEquals(stringBuilder27.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test732");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean17 = cSVLexer5.isQuoteChar(6);
        org.apache.commons.csv.Token token18 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type19 = token18.type;
        java.lang.String str20 = token18.toString();
        org.apache.commons.csv.Token.Type type21 = token18.type;
        java.lang.StringBuilder stringBuilder22 = token18.content;
        java.lang.StringBuilder stringBuilder23 = token18.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder23);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type19.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "INVALID []" + "'", str20, "INVALID []");
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder22);
        org.junit.Assert.assertEquals(stringBuilder22.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
    }

    @Test
    public void test733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test733");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder17 = cSVFormatBuilder15.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder19 = cSVFormatBuilder17.withQuoteChar((java.lang.Character) '\t');
        java.io.Reader reader20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable21 = cSVFormatBuilder17.parse(reader20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\r\n" + "'", str14, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormatBuilder17);
        org.junit.Assert.assertNotNull(cSVFormatBuilder19);
    }

    @Test
    public void test734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test734");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat1, extendedBufferedReader3);
        java.lang.String str5 = cSVFormat1.getNullToString();
        java.lang.String str6 = cSVFormat1.toString();
        org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser("hi!,,hi!,,hi!,hi!", cSVFormat1);
        org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord();
        java.lang.String str9 = cSVRecord8.getComment();
        java.util.Spliterator<java.lang.String> strSpliterator10 = cSVRecord8.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str6, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVRecord8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSpliterator10);
    }

    @Test
    public void test735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test735");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder17 = cSVFormatBuilder15.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder19 = cSVFormatBuilder17.withEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder21 = cSVFormatBuilder19.withRecordSeparator("Delimiter=<,> Escape=<\b> QuoteChar=<\">");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder23 = cSVFormatBuilder19.withQuoteChar('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\r\n" + "'", str14, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormatBuilder17);
        org.junit.Assert.assertNotNull(cSVFormatBuilder19);
        org.junit.Assert.assertNotNull(cSVFormatBuilder21);
        org.junit.Assert.assertNotNull(cSVFormatBuilder23);
    }

    @Test
    public void test736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test736");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getNullToString();
        java.lang.Character char15 = cSVFormat13.getEscape();
        char char16 = cSVFormat13.getDelimiter();
        java.lang.String str17 = cSVFormat13.getRecordSeparator();
        java.lang.String[] strArray18 = cSVFormat13.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + ',' + "'", char16 == ',');
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\r\n" + "'", str17, "\r\n");
        org.junit.Assert.assertNull(strArray18);
    }

    @Test
    public void test737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test737");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray9 = null;
        org.apache.commons.csv.CSVFormat cSVFormat10 = new org.apache.commons.csv.CSVFormat('a', (java.lang.Character) '\"', quote2, (java.lang.Character) '#', (java.lang.Character) '\"', true, true, "Delimiter=< > Escape=<#> QuoteChar=<#> CommentStart=<\r> EmptyLines:ignored", "INVALID []", strArray9);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader11 = null;
        org.apache.commons.csv.CSVLexer cSVLexer12 = new org.apache.commons.csv.CSVLexer(cSVFormat10, extendedBufferedReader11);
    }

    @Test
    public void test738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test738");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL;
        java.lang.String[] strArray2 = null;
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        org.apache.commons.csv.CSVRecord cSVRecord6 = new org.apache.commons.csv.CSVRecord(strArray2, strMap3, "", (long) (byte) 100);
        boolean boolean7 = cSVRecord6.isConsistent();
        java.util.Spliterator<java.lang.String> strSpliterator8 = cSVRecord6.spliterator();
        boolean boolean10 = cSVRecord6.isSet("");
        java.util.Iterator<java.lang.String> strItor11 = cSVRecord6.iterator();
        int int12 = cSVRecord6.size();
        java.lang.String[] strArray13 = cSVRecord6.values();
        java.lang.String str14 = cSVFormat1.format((java.lang.Object[]) strArray13);
        org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser("TOKEN []", cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strSpliterator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test739");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        boolean boolean14 = cSVLexer5.isCommentStart((int) ',');
        boolean boolean15 = cSVLexer5.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test740");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat0.getNullToString();
        java.lang.Character char16 = cSVFormat0.getEscape();
        boolean boolean17 = cSVFormat0.getIgnoreEmptyLines();
        java.lang.String[] strArray18 = cSVFormat0.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strArray18);
    }

    @Test
    public void test741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test741");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean11 = cSVLexer5.isWhitespace(6);
        boolean boolean13 = cSVLexer5.isEndOfFile(0);
        boolean boolean15 = cSVLexer5.isWhitespace((int) 'a');
        boolean boolean17 = cSVLexer5.isWhitespace((int) '\t');
        boolean boolean19 = cSVLexer5.readEndOfLine((int) ',');
        // The following exception was thrown during execution in test generation
        try {
            int int20 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test742");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        boolean boolean4 = cSVFormat1.isEscaping();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder5 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        boolean boolean6 = cSVFormat1.getIgnoreSurroundingSpaces();
        boolean boolean7 = cSVFormat1.isCommentingEnabled();
        org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser("COMMENT []", cSVFormat1);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser8.getRecords();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVRecordList9);
    }

    @Test
    public void test743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test743");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.CSVParser cSVParser14 = new org.apache.commons.csv.CSVParser("Delimiter=<,> QuoteChar=<\">", cSVFormat13);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList15 = cSVParser14.getRecords();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVRecordList15);
    }

    @Test
    public void test744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test744");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) 10);
        boolean boolean18 = cSVLexer5.isEndOfFile((int) (short) 1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test745");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.Token token15 = new org.apache.commons.csv.Token();
        token15.isReady = false;
        token15.isReady = true;
        token15.isReady = true;
        boolean boolean22 = token15.isReady;
        token15.reset();
        org.apache.commons.csv.Token token24 = new org.apache.commons.csv.Token();
        token24.isReady = false;
        org.apache.commons.csv.Token.Type type27 = org.apache.commons.csv.Token.Type.INVALID;
        token24.type = type27;
        token15.type = type27;
        token15.isReady = false;
        java.lang.StringBuilder stringBuilder32 = token15.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder32);
        boolean boolean35 = cSVLexer5.isQuoteChar((int) ' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type27.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder32);
        org.junit.Assert.assertEquals(stringBuilder32.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test746");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.isEndOfFile(100);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = cSVLexer15.in;
        boolean boolean20 = cSVLexer15.readEndOfLine(0);
        boolean boolean22 = cSVLexer15.readEndOfLine(0);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = cSVLexer15.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(extendedBufferedReader18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test747");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isEscaping();
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test748");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        java.lang.String str1 = cSVFormat0.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean5 = cSVFormat0.isCommentingEnabled();
        java.lang.String[] strArray6 = cSVFormat0.getHeader();
        java.lang.Character char7 = cSVFormat0.getCommentStart();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored" + "'", str1, "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored");
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strArray6);
        org.junit.Assert.assertNull(char7);
    }

    @Test
    public void test749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test749");
        org.apache.commons.csv.Quote quote3 = null;
        org.apache.commons.csv.Quote quote12 = null;
        org.apache.commons.csv.Quote quote21 = null;
        org.apache.commons.csv.Quote quote30 = null;
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote30, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray43);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder45 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote21, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray43);
        org.apache.commons.csv.Quote quote48 = null;
        org.apache.commons.csv.Quote quote57 = null;
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat71 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote57, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray70);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder72 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote48, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray70);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder73 = cSVFormatBuilder45.withHeader(strArray70);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder74 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote12, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat75 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote3, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray70);
        java.lang.String str76 = cSVFormat75.getNullToString();
        boolean boolean77 = cSVFormat75.isCommentingEnabled();
        org.apache.commons.csv.CSVParser cSVParser78 = new org.apache.commons.csv.CSVParser("", cSVFormat75);
        java.lang.String str79 = cSVFormat75.getRecordSeparator();
        java.lang.Class<?> wildcardClass80 = cSVFormat75.getClass();
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(cSVFormatBuilder73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\r\n" + "'", str76, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test750");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine(0);
        boolean boolean8 = cSVLexer4.isEndOfFile((int) (byte) 1);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVLexer4.format;
        java.lang.String[] strArray10 = null;
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = null;
        org.apache.commons.csv.CSVRecord cSVRecord14 = new org.apache.commons.csv.CSVRecord(strArray10, strMap11, "", (long) (byte) 100);
        boolean boolean15 = cSVRecord14.isConsistent();
        java.util.Spliterator<java.lang.String> strSpliterator16 = cSVRecord14.spliterator();
        boolean boolean18 = cSVRecord14.isSet("");
        java.util.Iterator<java.lang.String> strItor19 = cSVRecord14.iterator();
        java.lang.String[] strArray20 = cSVRecord14.values();
        java.lang.String str21 = cSVFormat9.format((java.lang.Object[]) strArray20);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strSpliterator16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test751");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean16 = cSVLexer5.ignoreEmptyLines;
        boolean boolean18 = cSVLexer5.isDelimiter((int) '\t');
        boolean boolean20 = cSVLexer5.isEndOfFile((int) (short) 1);
        boolean boolean22 = cSVLexer5.isWhitespace((int) (byte) -1);
        boolean boolean24 = cSVLexer5.isDelimiter((int) (byte) 10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test752");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer6.format;
        boolean boolean13 = cSVFormat12.isQuoting();
        boolean boolean14 = cSVFormat12.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser("hi!,,hi!,,hi!,hi!", cSVFormat12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader16 = null;
        org.apache.commons.csv.CSVLexer cSVLexer17 = new org.apache.commons.csv.CSVLexer(cSVFormat12, extendedBufferedReader16);
        boolean boolean18 = cSVFormat12.isCommentingEnabled();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder19 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(cSVFormatBuilder19);
    }

    @Test
    public void test753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test753");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isWhitespace((int) '\\');
        boolean boolean17 = cSVLexer5.isWhitespace((int) '\f');
        org.apache.commons.csv.Token token18 = new org.apache.commons.csv.Token();
        token18.isReady = false;
        token18.isReady = true;
        token18.isReady = true;
        token18.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token26 = cSVLexer5.nextToken(token18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test754");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        boolean boolean13 = cSVLexer6.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer6.format;
        boolean boolean15 = cSVFormat14.isQuoting();
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("[hi!]", cSVFormat14);
        org.apache.commons.csv.Quote quote19 = null;
        org.apache.commons.csv.Quote quote28 = null;
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote28, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray41);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder43 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote19, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray41);
        java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null;
        org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray41, strMap44, "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored", (long) 1);
        java.util.Spliterator<java.lang.String> strSpliterator48 = cSVRecord47.spliterator();
        boolean boolean49 = cSVFormat14.equals((java.lang.Object) cSVRecord47);
        org.apache.commons.csv.Quote quote50 = cSVFormat14.getQuotePolicy();
        java.lang.String str51 = cSVFormat14.getRecordSeparator();
        java.lang.Character char52 = cSVFormat14.getCommentStart();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strSpliterator48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(quote50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\r\n" + "'", str51, "\r\n");
        org.junit.Assert.assertNull(char52);
    }

    @Test
    public void test755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test755");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isWhitespace((int) (short) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isEndOfFile((int) 'a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test756");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        boolean boolean8 = cSVLexer5.ignoreEmptyLines;
        boolean boolean10 = cSVLexer5.isCommentStart((int) ',');
        boolean boolean12 = cSVLexer5.isQuoteChar(0);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test757");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isWhitespace((int) (short) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isWhitespace((int) ' ');
        boolean boolean17 = cSVLexer5.isStartOfLine(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test758");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer18.in;
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder21 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat20);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder22 = cSVFormat20.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormatBuilder22.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader24 = null;
        org.apache.commons.csv.CSVLexer cSVLexer25 = new org.apache.commons.csv.CSVLexer(cSVFormat23, extendedBufferedReader24);
        boolean boolean26 = cSVLexer25.ignoreEmptyLines;
        boolean boolean28 = cSVLexer25.isEndOfFile((int) (short) 10);
        boolean boolean30 = cSVLexer25.isEndOfFile(0);
        boolean boolean32 = cSVLexer25.isQuoteChar((int) '\r');
        org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type34 = token33.type;
        java.lang.String str35 = token33.toString();
        org.apache.commons.csv.Token.Type type36 = token33.type;
        java.lang.StringBuilder stringBuilder37 = token33.content;
        cSVLexer25.trimTrailingSpaces(stringBuilder37);
        cSVLexer18.trimTrailingSpaces(stringBuilder37);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = cSVLexer18.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormatBuilder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type34.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "INVALID []" + "'", str35, "INVALID []");
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type36.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder37);
        org.junit.Assert.assertEquals(stringBuilder37.toString(), "");
    }

    @Test
    public void test759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test759");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        boolean boolean18 = cSVLexer5.isWhitespace((int) '\n');
        boolean boolean20 = cSVLexer5.isQuoteChar((int) (byte) -1);
        boolean boolean21 = cSVLexer5.ignoreEmptyLines;
        boolean boolean22 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean24 = cSVLexer5.isCommentStart(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test760");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat13.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder16.withCommentStart((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = cSVFormatBuilder16.withRecordSeparator("INVALID []");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str15, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormatBuilder20);
    }

    @Test
    public void test761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test761");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote15 = null;
        org.apache.commons.csv.Quote quote24 = null;
        org.apache.commons.csv.Quote quote33 = null;
        org.apache.commons.csv.Quote quote42 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote42, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote33, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray55);
        org.apache.commons.csv.Quote quote60 = null;
        org.apache.commons.csv.Quote quote69 = null;
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat83 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote69, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder84 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote60, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder85 = cSVFormatBuilder57.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder86 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote24, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray82);
        org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote15, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray82);
        java.lang.String str88 = cSVFormat12.format((java.lang.Object[]) strArray82);
        boolean boolean89 = cSVFormat12.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(cSVFormatBuilder85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test762");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(' ');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormatBuilder1.withRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder5 = cSVFormatBuilder1.withQuoteChar((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder7 = cSVFormatBuilder1.withCommentStart('\t');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder9 = cSVFormatBuilder7.withEscape('\b');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder11 = cSVFormatBuilder9.withNullToString("hi!");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder13 = cSVFormatBuilder11.withEscape('\f');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = cSVFormatBuilder13.withRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder17 = cSVFormatBuilder13.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormatBuilder17.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = null;
        org.apache.commons.csv.CSVLexer cSVLexer20 = new org.apache.commons.csv.CSVLexer(cSVFormat18, extendedBufferedReader19);
        boolean boolean22 = cSVLexer20.isEndOfFile(100);
        boolean boolean23 = cSVLexer20.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormatBuilder5);
        org.junit.Assert.assertNotNull(cSVFormatBuilder7);
        org.junit.Assert.assertNotNull(cSVFormatBuilder9);
        org.junit.Assert.assertNotNull(cSVFormatBuilder11);
        org.junit.Assert.assertNotNull(cSVFormatBuilder13);
        org.junit.Assert.assertNotNull(cSVFormatBuilder15);
        org.junit.Assert.assertNotNull(cSVFormatBuilder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test763");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart(0);
        boolean boolean18 = cSVLexer5.isCommentStart((int) '\\');
        boolean boolean20 = cSVLexer5.isEscape((int) ' ');
        boolean boolean22 = cSVLexer5.isEscape((-1));
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader23 = cSVLexer5.in;
        boolean boolean25 = cSVLexer5.isEndOfFile(100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(extendedBufferedReader23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test764");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        java.lang.String[] strArray2 = cSVFormat0.getHeader();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean5 = cSVLexer4.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test765");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean11 = cSVLexer5.isWhitespace(6);
        boolean boolean12 = cSVLexer5.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test766");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar((int) (byte) 100);
        boolean boolean15 = cSVLexer5.isQuoteChar((int) '\t');
        boolean boolean17 = cSVLexer5.isCommentStart(0);
        boolean boolean19 = cSVLexer5.readEndOfLine(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test767");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine(0);
        boolean boolean8 = cSVLexer4.readEndOfLine((int) ' ');
        boolean boolean10 = cSVLexer4.isEscape((int) '\f');
        org.apache.commons.csv.Token token11 = new org.apache.commons.csv.Token();
        token11.isReady = false;
        token11.isReady = true;
        token11.isReady = true;
        java.lang.String str18 = token11.toString();
        org.apache.commons.csv.Token token19 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type20 = token19.type;
        java.lang.String str21 = token19.toString();
        boolean boolean22 = token19.isReady;
        java.lang.String str23 = token19.toString();
        org.apache.commons.csv.Token token24 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type25 = org.apache.commons.csv.Token.Type.COMMENT;
        token24.type = type25;
        token19.type = type25;
        token11.type = type25;
        boolean boolean29 = token11.isReady;
        org.apache.commons.csv.Token.Type type30 = token11.type;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token31 = cSVLexer4.nextToken(token11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "INVALID []" + "'", str18, "INVALID []");
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type20.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "INVALID []" + "'", str21, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "INVALID []" + "'", str23, "INVALID []");
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type25.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type30.equals(org.apache.commons.csv.Token.Type.COMMENT));
    }

    @Test
    public void test768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test768");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote15 = null;
        org.apache.commons.csv.Quote quote24 = null;
        org.apache.commons.csv.Quote quote33 = null;
        org.apache.commons.csv.Quote quote42 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote42, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote33, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray55);
        org.apache.commons.csv.Quote quote60 = null;
        org.apache.commons.csv.Quote quote69 = null;
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat83 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote69, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder84 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote60, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder85 = cSVFormatBuilder57.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder86 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote24, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray82);
        org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote15, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray82);
        java.lang.String str88 = cSVFormat12.format((java.lang.Object[]) strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder89 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat12);
        java.lang.String[] strArray90 = cSVFormat12.getHeader();
        java.lang.Character char91 = cSVFormat12.getCommentStart();
        java.lang.Character char92 = cSVFormat12.getCommentStart();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(cSVFormatBuilder85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertNull(char91);
        org.junit.Assert.assertNull(char92);
    }

    @Test
    public void test769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test769");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote13 = cSVFormat12.getQuotePolicy();
        java.lang.String[] strArray14 = cSVFormat12.getHeader();
        java.lang.String[] strArray15 = cSVFormat12.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(quote13);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNull(strArray15);
    }

    @Test
    public void test770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test770");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        boolean boolean32 = cSVFormat12.getIgnoreEmptyLines();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader33 = null;
        org.apache.commons.csv.CSVLexer cSVLexer34 = new org.apache.commons.csv.CSVLexer(cSVFormat12, extendedBufferedReader33);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test771");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        java.lang.String str12 = cSVFormat11.toString();
        java.lang.String[] strArray13 = cSVFormat11.getHeader();
        boolean boolean14 = cSVFormat11.isEscaping();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str12, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test772");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isQuoteChar((int) '4');
        boolean boolean19 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean21 = cSVLexer15.isWhitespace((int) '4');
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVLexer15.format;
        boolean boolean24 = cSVLexer15.readEndOfLine((int) 'a');
        boolean boolean26 = cSVLexer15.isStartOfLine(3);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test773");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote15 = null;
        org.apache.commons.csv.Quote quote24 = null;
        org.apache.commons.csv.Quote quote33 = null;
        org.apache.commons.csv.Quote quote42 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote42, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote33, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray55);
        org.apache.commons.csv.Quote quote60 = null;
        org.apache.commons.csv.Quote quote69 = null;
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat83 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote69, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder84 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote60, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder85 = cSVFormatBuilder57.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder86 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote24, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray82);
        org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote15, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray82);
        java.lang.String str88 = cSVFormat12.format((java.lang.Object[]) strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder89 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat12);
        java.lang.String[] strArray90 = cSVFormat12.getHeader();
        java.lang.String str91 = cSVFormat12.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(cSVFormatBuilder85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str91, "Delimiter=<,> QuoteChar=<\">");
    }

    @Test
    public void test774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test774");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        boolean boolean13 = cSVLexer6.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer6.format;
        org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser("hi!\t\thi!\t\thi!\thi!", cSVFormat14);
        char char16 = cSVFormat14.getDelimiter();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder17 = cSVFormat14.toBuilder();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + ',' + "'", char16 == ',');
        org.junit.Assert.assertNotNull(cSVFormatBuilder17);
    }

    @Test
    public void test775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test775");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.Token token6 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type7 = token6.type;
        java.lang.String str8 = token6.toString();
        org.apache.commons.csv.Token.Type type9 = org.apache.commons.csv.Token.Type.EORECORD;
        token6.type = type9;
        java.lang.StringBuilder stringBuilder11 = token6.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder11);
        org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token();
        java.lang.StringBuilder stringBuilder14 = token13.content;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token15 = cSVLexer5.nextToken(token13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type7.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INVALID []" + "'", str8, "INVALID []");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type9.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder14);
        org.junit.Assert.assertEquals(stringBuilder14.toString(), "");
    }

    @Test
    public void test776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test776");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader15 = cSVLexer5.in;
        boolean boolean17 = cSVLexer5.isDelimiter((-2));
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(extendedBufferedReader15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test777");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.isDelimiter((-2));
        boolean boolean16 = cSVLexer5.isCommentStart(3);
        boolean boolean18 = cSVLexer5.isStartOfLine(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test778");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormatBuilder4.build();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormatBuilder4.build();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        java.lang.String[] strArray8 = cSVFormat6.getHeader();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader9 = null;
        org.apache.commons.csv.CSVLexer cSVLexer10 = new org.apache.commons.csv.CSVLexer(cSVFormat6, extendedBufferedReader9);
        boolean boolean12 = cSVLexer10.isEscape((int) '\"');
        boolean boolean13 = cSVLexer10.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test779");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormatBuilder4.build();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormatBuilder4.build();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        java.lang.String[] strArray8 = cSVFormat6.getHeader();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader9 = null;
        org.apache.commons.csv.CSVLexer cSVLexer10 = new org.apache.commons.csv.CSVLexer(cSVFormat6, extendedBufferedReader9);
        java.lang.Character char11 = cSVFormat6.getEscape();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader12 = null;
        org.apache.commons.csv.CSVLexer cSVLexer13 = new org.apache.commons.csv.CSVLexer(cSVFormat6, extendedBufferedReader12);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer13.format;
        boolean boolean16 = cSVLexer13.isDelimiter((int) ' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray8);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test780");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.isEscape((int) (byte) 100);
        boolean boolean16 = cSVLexer5.isWhitespace((int) (short) 100);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat cSVFormat18 = cSVLexer5.format;
        boolean boolean19 = cSVFormat18.isEscaping();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test781");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVLexer15.format;
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat16);
    }

    @Test
    public void test782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test782");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.String str9 = token7.toString();
        org.apache.commons.csv.Token.Type type10 = org.apache.commons.csv.Token.Type.EORECORD;
        token7.type = type10;
        java.lang.StringBuilder stringBuilder12 = token7.content;
        cSVLexer6.trimTrailingSpaces(stringBuilder12);
        boolean boolean14 = cSVLexer6.ignoreEmptyLines;
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVLexer6.format;
        java.lang.String[] strArray16 = cSVFormat15.getHeader();
        org.apache.commons.csv.CSVParser cSVParser17 = new org.apache.commons.csv.CSVParser("Delimiter=< > Escape=<\b> QuoteChar=<a> CommentStart=<\t>", cSVFormat15);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat15);
        boolean boolean19 = cSVFormat15.getIgnoreSurroundingSpaces();
        boolean boolean20 = cSVFormat15.isCommentingEnabled();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "INVALID []" + "'", str9, "INVALID []");
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type10.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder12);
        org.junit.Assert.assertEquals(stringBuilder12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test783");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote15 = null;
        org.apache.commons.csv.Quote quote24 = null;
        org.apache.commons.csv.Quote quote33 = null;
        org.apache.commons.csv.Quote quote42 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote42, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote33, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray55);
        org.apache.commons.csv.Quote quote60 = null;
        org.apache.commons.csv.Quote quote69 = null;
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat83 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote69, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder84 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote60, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder85 = cSVFormatBuilder57.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder86 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote24, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray82);
        org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote15, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray82);
        java.lang.String str88 = cSVFormat12.format((java.lang.Object[]) strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder89 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat12);
        java.lang.String str90 = cSVFormat12.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(cSVFormatBuilder85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str90, "Delimiter=<,> QuoteChar=<\">");
    }

    @Test
    public void test784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test784");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormatBuilder4.build();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormatBuilder4.build();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        java.lang.String[] strArray8 = cSVFormat6.getHeader();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader9 = null;
        org.apache.commons.csv.CSVLexer cSVLexer10 = new org.apache.commons.csv.CSVLexer(cSVFormat6, extendedBufferedReader9);
        boolean boolean11 = cSVFormat6.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test785");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer18.in;
        org.apache.commons.csv.Token token20 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type21 = token20.type;
        java.lang.String str22 = token20.toString();
        org.apache.commons.csv.Token.Type type23 = org.apache.commons.csv.Token.Type.EORECORD;
        token20.type = type23;
        java.lang.StringBuilder stringBuilder25 = token20.content;
        token20.reset();
        java.lang.StringBuilder stringBuilder27 = token20.content;
        cSVLexer18.trimTrailingSpaces(stringBuilder27);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader29 = cSVLexer18.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "INVALID []" + "'", str22, "INVALID []");
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type23.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder25);
        org.junit.Assert.assertEquals(stringBuilder25.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder27);
        org.junit.Assert.assertEquals(stringBuilder27.toString(), "");
        org.junit.Assert.assertNull(extendedBufferedReader29);
    }

    @Test
    public void test786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test786");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) (short) 1);
        boolean boolean12 = cSVLexer5.ignoreEmptyLines;
        boolean boolean14 = cSVLexer5.isEndOfFile((int) (short) 0);
        boolean boolean16 = cSVLexer5.isDelimiter((int) '4');
        org.apache.commons.csv.Token token17 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type18 = token17.type;
        java.lang.String str19 = token17.toString();
        org.apache.commons.csv.Token.Type type20 = token17.type;
        java.lang.StringBuilder stringBuilder21 = token17.content;
        org.apache.commons.csv.Token token22 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type23 = token22.type;
        java.lang.String str24 = token22.toString();
        org.apache.commons.csv.Token.Type type25 = token22.type;
        token17.type = type25;
        token17.isReady = true;
        org.apache.commons.csv.Token token29 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type30 = token29.type;
        java.lang.String str31 = token29.toString();
        org.apache.commons.csv.Token.Type type32 = org.apache.commons.csv.Token.Type.EORECORD;
        token29.type = type32;
        org.apache.commons.csv.Token.Type type34 = token29.type;
        token29.reset();
        org.apache.commons.csv.Token.Type type36 = token29.type;
        org.apache.commons.csv.Token.Type type37 = token29.type;
        token17.type = type37;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token39 = cSVLexer5.nextToken(token17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type18.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "INVALID []" + "'", str19, "INVALID []");
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type20.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder21);
        org.junit.Assert.assertEquals(stringBuilder21.toString(), "");
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type23.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "INVALID []" + "'", str24, "INVALID []");
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type25.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type30.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "INVALID []" + "'", str31, "INVALID []");
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type32.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type34.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type36.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type37.equals(org.apache.commons.csv.Token.Type.INVALID));
    }

    @Test
    public void test787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test787");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        boolean boolean13 = cSVLexer5.ignoreEmptyLines;
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.isWhitespace(0);
        boolean boolean18 = cSVLexer5.readEndOfLine((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test788");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.ignoreEmptyLines;
        boolean boolean15 = cSVLexer5.isStartOfLine((int) '\b');
        boolean boolean17 = cSVLexer5.isEscape((int) (short) 0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test789");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder13 = cSVFormat12.toBuilder();
        boolean boolean14 = cSVFormat12.isCommentingEnabled();
        java.lang.String str15 = cSVFormat12.toString();
        java.io.Reader reader16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable17 = cSVFormat12.parse(reader16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str15, "Delimiter=<,> QuoteChar=<\">");
    }

    @Test
    public void test790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test790");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder13 = cSVFormat12.toBuilder();
        boolean boolean14 = cSVFormat12.isCommentingEnabled();
        java.lang.String str15 = cSVFormat12.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat12.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder17 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat12);
        boolean boolean18 = cSVFormat12.isEscaping();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str15, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormatBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test791");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean2 = cSVFormat1.isEscaping();
        org.apache.commons.csv.Quote quote3 = cSVFormat1.getQuotePolicy();
        java.lang.Character char4 = cSVFormat1.getCommentStart();
        org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser("Delimiter=< > Escape=<#> QuoteChar=<#> CommentStart=<\r> EmptyLines:ignored", cSVFormat1);
        java.lang.String str6 = cSVFormat1.getNullToString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder7 = cSVFormat1.toBuilder();
        boolean boolean8 = cSVFormat1.isQuoting();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(quote3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(cSVFormatBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test792");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.String str9 = token7.toString();
        org.apache.commons.csv.Token.Type type10 = org.apache.commons.csv.Token.Type.EORECORD;
        token7.type = type10;
        java.lang.StringBuilder stringBuilder12 = token7.content;
        cSVLexer6.trimTrailingSpaces(stringBuilder12);
        boolean boolean14 = cSVLexer6.ignoreEmptyLines;
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVLexer6.format;
        java.lang.String[] strArray16 = cSVFormat15.getHeader();
        org.apache.commons.csv.CSVParser cSVParser17 = new org.apache.commons.csv.CSVParser("Delimiter=< > Escape=<\b> QuoteChar=<a> CommentStart=<\t>", cSVFormat15);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator18 = cSVParser17.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "INVALID []" + "'", str9, "INVALID []");
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type10.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder12);
        org.junit.Assert.assertEquals(stringBuilder12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator18);
    }

    @Test
    public void test793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test793");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat13.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder16.withEscape((java.lang.Character) '\\');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = cSVFormatBuilder16.withCommentStart((java.lang.Character) ',');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder22 = cSVFormatBuilder16.withIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder24 = cSVFormatBuilder16.withQuoteChar('\\');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str15, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormatBuilder20);
        org.junit.Assert.assertNotNull(cSVFormatBuilder22);
        org.junit.Assert.assertNotNull(cSVFormatBuilder24);
    }

    @Test
    public void test794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test794");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Quote quote15 = null;
        org.apache.commons.csv.Quote quote24 = null;
        org.apache.commons.csv.Quote quote33 = null;
        org.apache.commons.csv.Quote quote42 = null;
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat56 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote42, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray55);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder57 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote33, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray55);
        org.apache.commons.csv.Quote quote60 = null;
        org.apache.commons.csv.Quote quote69 = null;
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat83 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote69, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder84 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote60, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder85 = cSVFormatBuilder57.withHeader(strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder86 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote24, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray82);
        org.apache.commons.csv.CSVFormat cSVFormat87 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote15, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray82);
        java.lang.String str88 = cSVFormat12.format((java.lang.Object[]) strArray82);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder89 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat12);
        boolean boolean90 = cSVFormat12.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder91 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(cSVFormatBuilder85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertNotNull(cSVFormatBuilder89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(cSVFormatBuilder91);
    }

    @Test
    public void test795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test795");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        boolean boolean13 = cSVLexer6.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer6.format;
        boolean boolean15 = cSVFormat14.isQuoting();
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("[hi!]", cSVFormat14);
        org.apache.commons.csv.Quote quote19 = null;
        org.apache.commons.csv.Quote quote28 = null;
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat42 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote28, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray41);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder43 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote19, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray41);
        java.util.Map<java.lang.String, java.lang.Integer> strMap44 = null;
        org.apache.commons.csv.CSVRecord cSVRecord47 = new org.apache.commons.csv.CSVRecord(strArray41, strMap44, "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored", (long) 1);
        java.util.Spliterator<java.lang.String> strSpliterator48 = cSVRecord47.spliterator();
        boolean boolean49 = cSVFormat14.equals((java.lang.Object) cSVRecord47);
        org.apache.commons.csv.Quote quote50 = cSVFormat14.getQuotePolicy();
        java.lang.String str51 = cSVFormat14.getRecordSeparator();
        boolean boolean52 = cSVFormat14.isEscaping();
        char char53 = cSVFormat14.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strSpliterator48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(quote50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\r\n" + "'", str51, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + char53 + "' != '" + ',' + "'", char53 == ',');
    }

    @Test
    public void test796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test796");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean12 = cSVFormat11.isQuoting();
        boolean boolean13 = cSVFormat11.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.Quote quote16 = null;
        org.apache.commons.csv.Quote quote25 = null;
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat39 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote25, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray38);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder40 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote16, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray38);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder42 = cSVFormatBuilder40.withNullToString("Delimiter=< > Escape=<\b> QuoteChar=<a> CommentStart=<\t>");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder44 = cSVFormatBuilder40.withDelimiter('\"');
        boolean boolean45 = cSVFormat11.equals((java.lang.Object) cSVFormatBuilder40);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder47 = cSVFormatBuilder40.withQuoteChar((java.lang.Character) '\n');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The quoteChar cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(cSVFormatBuilder42);
        org.junit.Assert.assertNotNull(cSVFormatBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test797");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = cSVFormatBuilder2.withEscape('\\');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = cSVFormatBuilder6.withQuoteChar('\b');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormatBuilder8.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader10 = null;
        org.apache.commons.csv.CSVLexer cSVLexer11 = new org.apache.commons.csv.CSVLexer(cSVFormat9, extendedBufferedReader10);
        boolean boolean12 = cSVFormat9.isCommentingEnabled();
        char char13 = cSVFormat9.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
        org.junit.Assert.assertNotNull(cSVFormatBuilder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
    }

    @Test
    public void test798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test798");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormatBuilder4.build();
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormatBuilder4.build();
        boolean boolean7 = cSVFormat6.getIgnoreSurroundingSpaces();
        java.lang.String[] strArray8 = cSVFormat6.getHeader();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader9 = null;
        org.apache.commons.csv.CSVLexer cSVLexer10 = new org.apache.commons.csv.CSVLexer(cSVFormat6, extendedBufferedReader9);
        java.lang.Character char11 = cSVFormat6.getEscape();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader12 = null;
        org.apache.commons.csv.CSVLexer cSVLexer13 = new org.apache.commons.csv.CSVLexer(cSVFormat6, extendedBufferedReader12);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder14 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat6);
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.MYSQL;
        java.lang.String[] strArray16 = null;
        java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null;
        org.apache.commons.csv.CSVRecord cSVRecord20 = new org.apache.commons.csv.CSVRecord(strArray16, strMap17, "", (long) (byte) 100);
        boolean boolean21 = cSVRecord20.isConsistent();
        java.util.Spliterator<java.lang.String> strSpliterator22 = cSVRecord20.spliterator();
        boolean boolean24 = cSVRecord20.isSet("");
        java.util.Iterator<java.lang.String> strItor25 = cSVRecord20.iterator();
        int int26 = cSVRecord20.size();
        java.lang.String[] strArray27 = cSVRecord20.values();
        java.lang.String str28 = cSVFormat15.format((java.lang.Object[]) strArray27);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder29 = cSVFormatBuilder14.withHeader(strArray27);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray8);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormatBuilder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(cSVFormatBuilder29);
    }

    @Test
    public void test799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test799");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.String str9 = token7.toString();
        org.apache.commons.csv.Token.Type type10 = org.apache.commons.csv.Token.Type.EORECORD;
        token7.type = type10;
        java.lang.StringBuilder stringBuilder12 = token7.content;
        cSVLexer6.trimTrailingSpaces(stringBuilder12);
        boolean boolean14 = cSVLexer6.ignoreEmptyLines;
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVLexer6.format;
        java.lang.String[] strArray16 = cSVFormat15.getHeader();
        org.apache.commons.csv.CSVParser cSVParser17 = new org.apache.commons.csv.CSVParser("Delimiter=< > Escape=<\b> QuoteChar=<a> CommentStart=<\t>", cSVFormat15);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat15);
        char char19 = cSVFormat15.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "INVALID []" + "'", str9, "INVALID []");
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type10.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder12);
        org.junit.Assert.assertEquals(stringBuilder12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertTrue("'" + char19 + "' != '" + ',' + "'", char19 == ',');
    }

    @Test
    public void test800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test800");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer18.in;
        boolean boolean21 = cSVLexer18.isCommentStart(0);
        boolean boolean23 = cSVLexer18.isCommentStart((int) (byte) 10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test801");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVFormat4.isCommentingEnabled();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder9 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(' ');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder11 = cSVFormatBuilder9.withEscape('\b');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder13 = cSVFormatBuilder9.withQuoteChar((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = cSVFormatBuilder9.withIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.DEFAULT;
        java.lang.String str17 = cSVFormat16.getRecordSeparator();
        org.apache.commons.csv.Quote quote18 = cSVFormat16.getQuotePolicy();
        org.apache.commons.csv.Quote quote21 = null;
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat35 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote21, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray34);
        java.lang.String str36 = cSVFormat16.format((java.lang.Object[]) strArray34);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder37 = cSVFormatBuilder15.withHeader(strArray34);
        boolean boolean38 = cSVFormat4.equals((java.lang.Object) cSVFormatBuilder15);
        org.apache.commons.csv.CSVParser cSVParser39 = new org.apache.commons.csv.CSVParser("Delimiter=<,> QuoteChar=<\">", cSVFormat4);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormatBuilder11);
        org.junit.Assert.assertNotNull(cSVFormatBuilder13);
        org.junit.Assert.assertNotNull(cSVFormatBuilder15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\r\n" + "'", str17, "\r\n");
        org.junit.Assert.assertNull(quote18);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str36, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertNotNull(cSVFormatBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test802");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer18.in;
        org.apache.commons.csv.Token token20 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type21 = token20.type;
        java.lang.String str22 = token20.toString();
        org.apache.commons.csv.Token.Type type23 = org.apache.commons.csv.Token.Type.EORECORD;
        token20.type = type23;
        java.lang.StringBuilder stringBuilder25 = token20.content;
        token20.reset();
        java.lang.StringBuilder stringBuilder27 = token20.content;
        cSVLexer18.trimTrailingSpaces(stringBuilder27);
        boolean boolean30 = cSVLexer18.isDelimiter(10);
        boolean boolean31 = cSVLexer18.ignoreSurroundingSpaces;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader32 = cSVLexer18.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "INVALID []" + "'", str22, "INVALID []");
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type23.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder25);
        org.junit.Assert.assertEquals(stringBuilder25.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder27);
        org.junit.Assert.assertEquals(stringBuilder27.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(extendedBufferedReader32);
    }

    @Test
    public void test803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test803");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(' ');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = cSVFormatBuilder2.withQuoteChar((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = cSVFormatBuilder2.withCommentStart('\t');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder10 = cSVFormatBuilder8.withEscape('\b');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder12 = cSVFormatBuilder10.withNullToString("hi!");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder14 = cSVFormatBuilder12.withEscape('\f');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormatBuilder14.withRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder14.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormatBuilder18.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader20 = null;
        org.apache.commons.csv.CSVLexer cSVLexer21 = new org.apache.commons.csv.CSVLexer(cSVFormat19, extendedBufferedReader20);
        org.apache.commons.csv.CSVParser cSVParser22 = new org.apache.commons.csv.CSVParser(",", cSVFormat19);
        long long23 = cSVParser22.getLineNumber();
        long long24 = cSVParser22.getRecordNumber();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList25 = cSVParser22.getRecords();
        org.apache.commons.csv.CSVRecord cSVRecord26 = cSVParser22.nextRecord();
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
        org.junit.Assert.assertNotNull(cSVFormatBuilder8);
        org.junit.Assert.assertNotNull(cSVFormatBuilder10);
        org.junit.Assert.assertNotNull(cSVFormatBuilder12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordList25);
        org.junit.Assert.assertNull(cSVRecord26);
    }

    @Test
    public void test804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test804");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormatBuilder4.build();
        char char6 = cSVFormat5.getDelimiter();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = null;
        org.apache.commons.csv.CSVLexer cSVLexer8 = new org.apache.commons.csv.CSVLexer(cSVFormat5, extendedBufferedReader7);
        boolean boolean10 = cSVLexer8.isCommentStart((int) '\b');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + ',' + "'", char6 == ',');
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test805");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = null;
        org.apache.commons.csv.CSVLexer cSVLexer14 = new org.apache.commons.csv.CSVLexer(cSVFormat12, extendedBufferedReader13);
        boolean boolean15 = cSVFormat12.isEscaping();
        org.apache.commons.csv.Quote quote16 = cSVFormat12.getQuotePolicy();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(quote16);
    }

    @Test
    public void test806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test806");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader16 = null;
        org.apache.commons.csv.CSVLexer cSVLexer17 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader16);
        char char18 = cSVFormat13.getDelimiter();
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + char18 + "' != '" + '\\' + "'", char18 == '\\');
    }

    @Test
    public void test807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test807");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.Token token6 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type7 = token6.type;
        java.lang.String str8 = token6.toString();
        org.apache.commons.csv.Token.Type type9 = org.apache.commons.csv.Token.Type.EORECORD;
        token6.type = type9;
        java.lang.StringBuilder stringBuilder11 = token6.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder11);
        boolean boolean14 = cSVLexer5.isCommentStart((int) ' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type7.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INVALID []" + "'", str8, "INVALID []");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type9.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test808");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat1, extendedBufferedReader3);
        java.lang.String str5 = cSVFormat1.getNullToString();
        java.lang.String str6 = cSVFormat1.toString();
        org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser("hi!,,hi!,,hi!,hi!", cSVFormat1);
        org.apache.commons.csv.CSVRecord cSVRecord8 = cSVParser7.nextRecord();
        java.util.Iterator<java.lang.String> strItor9 = cSVRecord8.iterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str6, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVRecord8);
        org.junit.Assert.assertNotNull(strItor9);
    }

    @Test
    public void test809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test809");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type13 = org.apache.commons.csv.Token.Type.TOKEN;
        token12.type = type13;
        java.lang.StringBuilder stringBuilder15 = token12.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder15);
        boolean boolean18 = cSVLexer5.readEndOfLine((int) '\"');
        boolean boolean20 = cSVLexer5.isQuoteChar((int) '4');
        boolean boolean21 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder23 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat22);
        boolean boolean24 = cSVFormat22.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader25 = null;
        org.apache.commons.csv.CSVLexer cSVLexer26 = new org.apache.commons.csv.CSVLexer(cSVFormat22, extendedBufferedReader25);
        boolean boolean28 = cSVLexer26.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder30 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat29);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader31 = null;
        org.apache.commons.csv.CSVLexer cSVLexer32 = new org.apache.commons.csv.CSVLexer(cSVFormat29, extendedBufferedReader31);
        boolean boolean34 = cSVLexer32.isEndOfFile((int) '\n');
        boolean boolean35 = cSVLexer32.ignoreEmptyLines;
        org.apache.commons.csv.Token token36 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type37 = token36.type;
        java.lang.StringBuilder stringBuilder38 = token36.content;
        cSVLexer32.trimTrailingSpaces(stringBuilder38);
        cSVLexer26.trimTrailingSpaces(stringBuilder38);
        cSVLexer5.trimTrailingSpaces(stringBuilder38);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type13.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder15);
        org.junit.Assert.assertEquals(stringBuilder15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(cSVFormatBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type37.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder38);
        org.junit.Assert.assertEquals(stringBuilder38.toString(), "");
    }

    @Test
    public void test810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test810");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean11 = cSVLexer5.isWhitespace(6);
        boolean boolean13 = cSVLexer5.isEndOfFile(0);
        boolean boolean15 = cSVLexer5.isWhitespace((int) 'a');
        boolean boolean17 = cSVLexer5.isCommentStart(0);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test811");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar(0);
        boolean boolean15 = cSVLexer5.isEndOfFile((int) ',');
        boolean boolean17 = cSVLexer5.isEndOfFile((int) (byte) 0);
        boolean boolean19 = cSVLexer5.isWhitespace((int) (byte) 10);
        boolean boolean21 = cSVLexer5.isStartOfLine(0);
        boolean boolean23 = cSVLexer5.isWhitespace((int) ' ');
        boolean boolean25 = cSVLexer5.isWhitespace((int) (byte) 100);
        boolean boolean27 = cSVLexer5.isEndOfFile((int) ' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test812");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        boolean boolean16 = cSVLexer5.isQuoteChar((int) (short) 100);
        boolean boolean18 = cSVLexer5.isWhitespace((int) (byte) -1);
        java.lang.Class<?> wildcardClass19 = cSVLexer5.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test813");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader6 = cSVLexer5.in;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader7 = cSVLexer5.in;
        boolean boolean8 = cSVLexer5.ignoreEmptyLines;
        boolean boolean10 = cSVLexer5.isCommentStart((int) ',');
        boolean boolean12 = cSVLexer5.isQuoteChar(0);
        boolean boolean14 = cSVLexer5.isEndOfFile((int) ' ');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader15 = cSVLexer5.in;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(extendedBufferedReader6);
        org.junit.Assert.assertNull(extendedBufferedReader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(extendedBufferedReader15);
    }

    @Test
    public void test814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test814");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.String str9 = token7.toString();
        org.apache.commons.csv.Token.Type type10 = org.apache.commons.csv.Token.Type.EORECORD;
        token7.type = type10;
        java.lang.StringBuilder stringBuilder12 = token7.content;
        cSVLexer6.trimTrailingSpaces(stringBuilder12);
        boolean boolean14 = cSVLexer6.ignoreEmptyLines;
        org.apache.commons.csv.CSVFormat cSVFormat15 = cSVLexer6.format;
        java.lang.String[] strArray16 = cSVFormat15.getHeader();
        org.apache.commons.csv.CSVParser cSVParser17 = new org.apache.commons.csv.CSVParser("Delimiter=< > Escape=<\b> QuoteChar=<a> CommentStart=<\t>", cSVFormat15);
        long long18 = cSVParser17.getLineNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator19 = cSVParser17.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "INVALID []" + "'", str9, "INVALID []");
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type10.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder12);
        org.junit.Assert.assertEquals(stringBuilder12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator19);
    }

    @Test
    public void test815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test815");
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = new org.apache.commons.csv.CSVParser(",", cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test816");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart(0);
        boolean boolean18 = cSVLexer5.isCommentStart((int) '\\');
        boolean boolean20 = cSVLexer5.isEscape((int) ' ');
        boolean boolean22 = cSVLexer5.isCommentStart((int) '#');
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader23 = cSVLexer5.in;
        boolean boolean24 = cSVLexer5.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(extendedBufferedReader23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test817");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("", cSVFormat13);
        boolean boolean17 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat13);
        java.lang.String[] strArray19 = cSVFormat13.getHeader();
        java.lang.String[] strArray20 = cSVFormat13.getHeader();
        boolean boolean21 = cSVFormat13.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test818");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.isEndOfFile(100);
        boolean boolean19 = cSVLexer15.readEndOfLine(0);
        org.apache.commons.csv.Token token20 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type21 = org.apache.commons.csv.Token.Type.TOKEN;
        token20.type = type21;
        java.lang.StringBuilder stringBuilder23 = token20.content;
        token20.isReady = false;
        token20.reset();
        token20.reset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token28 = cSVLexer15.nextToken(token20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type21.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder23);
        org.junit.Assert.assertEquals(stringBuilder23.toString(), "");
    }

    @Test
    public void test819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test819");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.isEscape((int) (short) 10);
        boolean boolean15 = cSVLexer5.isStartOfLine(100);
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer5.readEndOfLine((int) (byte) 10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test820");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        boolean boolean17 = cSVLexer5.isEndOfFile(3);
        boolean boolean19 = cSVLexer5.isWhitespace((int) '\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test821");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isCommentStart(1);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) (short) -1);
        boolean boolean14 = cSVLexer5.isQuoteChar(0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader15 = cSVLexer5.in;
        boolean boolean17 = cSVLexer5.isWhitespace((int) (short) 100);
        boolean boolean19 = cSVLexer5.isEndOfFile(6);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(extendedBufferedReader15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test822");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder5 = cSVFormatBuilder3.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVFormatBuilder5.build();
        java.lang.String str7 = cSVFormat6.getNullToString();
        java.lang.String str8 = cSVFormat6.getNullToString();
        boolean boolean9 = cSVFormat6.isCommentingEnabled();
        org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser(",", cSVFormat6);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormatBuilder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test823");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.isEndOfFile(100);
        boolean boolean19 = cSVLexer15.isCommentStart(0);
        boolean boolean20 = cSVLexer15.ignoreEmptyLines;
        boolean boolean21 = cSVLexer15.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test824");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        java.lang.String str19 = cSVFormat13.toString();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader20 = null;
        org.apache.commons.csv.CSVLexer cSVLexer21 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader20);
        boolean boolean22 = cSVLexer21.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str19, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test825");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer18.in;
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder21 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat20);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder22 = cSVFormat20.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormatBuilder22.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader24 = null;
        org.apache.commons.csv.CSVLexer cSVLexer25 = new org.apache.commons.csv.CSVLexer(cSVFormat23, extendedBufferedReader24);
        boolean boolean26 = cSVLexer25.ignoreEmptyLines;
        boolean boolean28 = cSVLexer25.isEndOfFile((int) (short) 10);
        boolean boolean30 = cSVLexer25.isEndOfFile(0);
        boolean boolean32 = cSVLexer25.isQuoteChar((int) '\r');
        org.apache.commons.csv.Token token33 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type34 = token33.type;
        java.lang.String str35 = token33.toString();
        org.apache.commons.csv.Token.Type type36 = token33.type;
        java.lang.StringBuilder stringBuilder37 = token33.content;
        cSVLexer25.trimTrailingSpaces(stringBuilder37);
        cSVLexer18.trimTrailingSpaces(stringBuilder37);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = cSVLexer18.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormatBuilder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type34.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "INVALID []" + "'", str35, "INVALID []");
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type36.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder37);
        org.junit.Assert.assertEquals(stringBuilder37.toString(), "");
    }

    @Test
    public void test826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test826");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.Quote quote19 = cSVFormat13.getQuotePolicy();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(quote19);
    }

    @Test
    public void test827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test827");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.Token token6 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type7 = token6.type;
        java.lang.String str8 = token6.toString();
        org.apache.commons.csv.Token.Type type9 = org.apache.commons.csv.Token.Type.EORECORD;
        token6.type = type9;
        java.lang.StringBuilder stringBuilder11 = token6.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder11);
        boolean boolean14 = cSVLexer5.isQuoteChar((int) ' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type7.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INVALID []" + "'", str8, "INVALID []");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type9.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test828");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        java.lang.String str19 = cSVFormat13.toString();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader20 = null;
        org.apache.commons.csv.CSVLexer cSVLexer21 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader20);
        java.io.Reader reader22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable23 = cSVFormat13.parse(reader22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str19, "Delimiter=<,> QuoteChar=<\">");
    }

    @Test
    public void test829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test829");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) (short) 1);
        boolean boolean13 = cSVLexer5.isQuoteChar((int) (byte) 100);
        org.apache.commons.csv.Token token14 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type15 = token14.type;
        java.lang.String str16 = token14.toString();
        boolean boolean17 = token14.isReady;
        java.lang.String str18 = token14.toString();
        java.lang.StringBuilder stringBuilder19 = token14.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder19);
        boolean boolean21 = cSVLexer5.ignoreEmptyLines;
        org.apache.commons.csv.CSVFormat cSVFormat22 = cSVLexer5.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type15.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "INVALID []" + "'", str16, "INVALID []");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "INVALID []" + "'", str18, "INVALID []");
        org.junit.Assert.assertNotNull(stringBuilder19);
        org.junit.Assert.assertEquals(stringBuilder19.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVFormat22);
    }

    @Test
    public void test830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test830");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isQuoteChar((int) '4');
        boolean boolean19 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean21 = cSVLexer15.isWhitespace((int) '4');
        boolean boolean23 = cSVLexer15.isDelimiter((int) 'a');
        boolean boolean25 = cSVLexer15.isStartOfLine((int) '4');
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test831");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isEscaping();
        java.lang.Character char2 = cSVFormat0.getEscape();
        java.lang.Character char3 = cSVFormat0.getCommentStart();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormat0.toBuilder();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader5);
        // The following exception was thrown during execution in test generation
        try {
            long long7 = cSVLexer6.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
    }

    @Test
    public void test832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test832");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.ignoreSurroundingSpaces;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test833");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isQuoteChar((int) '4');
        boolean boolean19 = cSVLexer15.ignoreSurroundingSpaces;
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVLexer15.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = cSVLexer15.in;
        org.apache.commons.csv.Token token22 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type23 = token22.type;
        java.lang.String str24 = token22.toString();
        org.apache.commons.csv.Token.Type type25 = org.apache.commons.csv.Token.Type.COMMENT;
        token22.type = type25;
        token22.reset();
        boolean boolean28 = token22.isReady;
        token22.reset();
        boolean boolean30 = token22.isReady;
        org.apache.commons.csv.Token token31 = new org.apache.commons.csv.Token();
        token31.isReady = false;
        token31.isReady = true;
        token31.isReady = true;
        org.apache.commons.csv.Token.Type type38 = token31.type;
        token22.type = type38;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token40 = cSVLexer15.nextToken(token22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(extendedBufferedReader21);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type23.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "INVALID []" + "'", str24, "INVALID []");
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type25.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type38.equals(org.apache.commons.csv.Token.Type.INVALID));
    }

    @Test
    public void test834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test834");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.isEndOfFile(100);
        boolean boolean19 = cSVLexer15.isCommentStart(0);
        boolean boolean21 = cSVLexer15.readEndOfLine(1);
        boolean boolean23 = cSVLexer15.isWhitespace((int) '\b');
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test835");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.isEndOfFile(100);
        boolean boolean19 = cSVLexer15.isCommentStart(0);
        java.lang.Class<?> wildcardClass20 = cSVLexer15.getClass();
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test836");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.Token token6 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type7 = token6.type;
        java.lang.String str8 = token6.toString();
        org.apache.commons.csv.Token.Type type9 = org.apache.commons.csv.Token.Type.EORECORD;
        token6.type = type9;
        java.lang.StringBuilder stringBuilder11 = token6.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        char char14 = cSVFormat13.getDelimiter();
        boolean boolean15 = cSVFormat13.isQuoting();
        org.apache.commons.csv.Quote quote16 = cSVFormat13.getQuotePolicy();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type7.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INVALID []" + "'", str8, "INVALID []");
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type9.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder11);
        org.junit.Assert.assertEquals(stringBuilder11.toString(), "");
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + ',' + "'", char14 == ',');
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(quote16);
    }

    @Test
    public void test837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test837");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader19 = cSVLexer18.in;
        org.apache.commons.csv.Token token20 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type21 = token20.type;
        java.lang.String str22 = token20.toString();
        org.apache.commons.csv.Token.Type type23 = org.apache.commons.csv.Token.Type.EORECORD;
        token20.type = type23;
        java.lang.StringBuilder stringBuilder25 = token20.content;
        token20.reset();
        java.lang.StringBuilder stringBuilder27 = token20.content;
        cSVLexer18.trimTrailingSpaces(stringBuilder27);
        boolean boolean30 = cSVLexer18.isDelimiter(10);
        boolean boolean31 = cSVLexer18.ignoreSurroundingSpaces;
        org.apache.commons.csv.Token token32 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type33 = org.apache.commons.csv.Token.Type.COMMENT;
        token32.type = type33;
        org.apache.commons.csv.Token.Type type35 = token32.type;
        java.lang.String str36 = token32.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token37 = cSVLexer18.nextToken(token32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(extendedBufferedReader19);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type21.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "INVALID []" + "'", str22, "INVALID []");
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type23.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertNotNull(stringBuilder25);
        org.junit.Assert.assertEquals(stringBuilder25.toString(), "");
        org.junit.Assert.assertNotNull(stringBuilder27);
        org.junit.Assert.assertEquals(stringBuilder27.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type33.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type35.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "COMMENT []" + "'", str36, "COMMENT []");
    }

    @Test
    public void test838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test838");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        org.apache.commons.csv.Token token7 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type8 = token7.type;
        java.lang.StringBuilder stringBuilder9 = token7.content;
        cSVLexer3.trimTrailingSpaces(stringBuilder9);
        boolean boolean12 = cSVLexer3.isEndOfFile((int) (byte) 10);
        boolean boolean14 = cSVLexer3.isDelimiter(0);
        boolean boolean16 = cSVLexer3.isCommentStart((int) (byte) -1);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type8.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder9);
        org.junit.Assert.assertEquals(stringBuilder9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test839");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        boolean boolean13 = cSVLexer5.ignoreEmptyLines;
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.isStartOfLine((int) ',');
        org.apache.commons.csv.Token token17 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type18 = token17.type;
        java.lang.String str19 = token17.toString();
        org.apache.commons.csv.Token.Type type20 = token17.type;
        java.lang.StringBuilder stringBuilder21 = token17.content;
        token17.isReady = true;
        token17.isReady = true;
        boolean boolean26 = token17.isReady;
        token17.reset();
        java.lang.StringBuilder stringBuilder28 = token17.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder28);
        boolean boolean31 = cSVLexer5.isEscape(10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type18.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "INVALID []" + "'", str19, "INVALID []");
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type20.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder21);
        org.junit.Assert.assertEquals(stringBuilder21.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(stringBuilder28);
        org.junit.Assert.assertEquals(stringBuilder28.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test840");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) -1);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat17);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder19 = cSVFormat17.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormatBuilder19.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader21 = null;
        org.apache.commons.csv.CSVLexer cSVLexer22 = new org.apache.commons.csv.CSVLexer(cSVFormat20, extendedBufferedReader21);
        boolean boolean24 = cSVLexer22.isEscape(0);
        boolean boolean26 = cSVLexer22.isEscape(0);
        boolean boolean28 = cSVLexer22.isQuoteChar(1);
        org.apache.commons.csv.Token token29 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type30 = org.apache.commons.csv.Token.Type.TOKEN;
        token29.type = type30;
        java.lang.StringBuilder stringBuilder32 = token29.content;
        cSVLexer22.trimTrailingSpaces(stringBuilder32);
        cSVLexer5.trimTrailingSpaces(stringBuilder32);
        boolean boolean36 = cSVLexer5.readEndOfLine((int) (byte) -1);
        boolean boolean38 = cSVLexer5.readEndOfLine((int) '\b');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormatBuilder19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.apache.commons.csv.Token.Type.TOKEN + "'", type30.equals(org.apache.commons.csv.Token.Type.TOKEN));
        org.junit.Assert.assertNotNull(stringBuilder32);
        org.junit.Assert.assertEquals(stringBuilder32.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test841");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean18 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean20 = cSVLexer5.isCommentStart(100);
        boolean boolean21 = cSVLexer5.ignoreSurroundingSpaces;
        java.lang.StringBuilder stringBuilder22 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVLexer5.trimTrailingSpaces(stringBuilder22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test842");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        java.lang.String str5 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.Quote quote6 = cSVFormat0.getQuotePolicy();
        char char7 = cSVFormat0.getDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\r\n" + "'", str5, "\r\n");
        org.junit.Assert.assertNull(quote6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + ',' + "'", char7 == ',');
    }

    @Test
    public void test843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test843");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isCommentStart(1);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) ',');
        boolean boolean14 = cSVLexer5.isStartOfLine(0);
        boolean boolean15 = cSVLexer5.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test844");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean11 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean13 = cSVLexer5.isDelimiter(3);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test845");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        boolean boolean16 = cSVLexer5.isQuoteChar((int) (short) 100);
        boolean boolean18 = cSVLexer5.isWhitespace((int) (byte) -1);
        boolean boolean20 = cSVLexer5.isEscape((int) '\b');
        boolean boolean22 = cSVLexer5.isDelimiter((int) '\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test846");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVFormat12.isCommentingEnabled();
        boolean boolean14 = cSVFormat12.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test847");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean7 = cSVLexer6.ignoreEmptyLines;
        boolean boolean9 = cSVLexer6.isEndOfFile((int) (short) 10);
        boolean boolean11 = cSVLexer6.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer6.format;
        boolean boolean13 = cSVFormat12.isQuoting();
        boolean boolean14 = cSVFormat12.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser("hi!,,hi!,,hi!,hi!", cSVFormat12);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor16 = cSVParser15.iterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor16);
    }

    @Test
    public void test848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test848");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(' ');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = cSVFormatBuilder2.withQuoteChar((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = cSVFormatBuilder2.withCommentStart('\t');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder10 = cSVFormatBuilder8.withEscape('\b');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder12 = cSVFormatBuilder10.withNullToString("hi!");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder14 = cSVFormatBuilder12.withEscape('\f');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormatBuilder14.withRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder14.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormatBuilder18.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader20 = null;
        org.apache.commons.csv.CSVLexer cSVLexer21 = new org.apache.commons.csv.CSVLexer(cSVFormat19, extendedBufferedReader20);
        org.apache.commons.csv.CSVParser cSVParser22 = new org.apache.commons.csv.CSVParser(",", cSVFormat19);
        long long23 = cSVParser22.getLineNumber();
        long long24 = cSVParser22.getLineNumber();
        org.apache.commons.csv.CSVRecord cSVRecord25 = cSVParser22.nextRecord();
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
        org.junit.Assert.assertNotNull(cSVFormatBuilder8);
        org.junit.Assert.assertNotNull(cSVFormatBuilder10);
        org.junit.Assert.assertNotNull(cSVFormatBuilder12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(cSVRecord25);
    }

    @Test
    public void test849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test849");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.CSVParser cSVParser14 = new org.apache.commons.csv.CSVParser("Delimiter=<,> QuoteChar=<\">", cSVFormat13);
        java.lang.Character char15 = cSVFormat13.getCommentStart();
        java.io.Reader reader16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable17 = cSVFormat13.parse(reader16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char15);
    }

    @Test
    public void test850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test850");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        java.lang.String str14 = cSVFormat13.getNullToString();
        java.lang.String[] strArray15 = null;
        java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null;
        org.apache.commons.csv.CSVRecord cSVRecord19 = new org.apache.commons.csv.CSVRecord(strArray15, strMap16, "", (long) (byte) 100);
        boolean boolean20 = cSVRecord19.isConsistent();
        java.util.Spliterator<java.lang.String> strSpliterator21 = cSVRecord19.spliterator();
        boolean boolean22 = cSVRecord19.isConsistent();
        boolean boolean23 = cSVRecord19.isConsistent();
        long long24 = cSVRecord19.getRecordNumber();
        long long25 = cSVRecord19.getRecordNumber();
        boolean boolean26 = cSVFormat13.equals((java.lang.Object) cSVRecord19);
        boolean boolean28 = cSVRecord19.isMapped("Delimiter=<,> QuoteChar=<\">");
        boolean boolean30 = cSVRecord19.isSet("Delimiter=<\t> Escape=<\\>");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test851");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        java.lang.String[] strArray18 = null;
        java.util.Map<java.lang.String, java.lang.Integer> strMap19 = null;
        org.apache.commons.csv.CSVRecord cSVRecord22 = new org.apache.commons.csv.CSVRecord(strArray18, strMap19, "", (long) (byte) 100);
        boolean boolean23 = cSVRecord22.isConsistent();
        int int24 = cSVRecord22.size();
        java.util.Spliterator<java.lang.String> strSpliterator25 = cSVRecord22.spliterator();
        boolean boolean27 = cSVRecord22.isSet("");
        java.util.Spliterator<java.lang.String> strSpliterator28 = cSVRecord22.spliterator();
        java.lang.String str29 = cSVRecord22.toString();
        long long30 = cSVRecord22.getRecordNumber();
        java.util.Spliterator<java.lang.String> strSpliterator31 = cSVRecord22.spliterator();
        long long32 = cSVRecord22.getRecordNumber();
        java.lang.String[] strArray33 = cSVRecord22.values();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder34 = cSVFormatBuilder16.withHeader(strArray33);
        java.io.Reader reader35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable36 = cSVFormatBuilder16.parse(reader35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSpliterator28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(strSpliterator31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L + "'", long32 == 100L);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(cSVFormatBuilder34);
    }

    @Test
    public void test852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test852");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVLexer4.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader8 = null;
        org.apache.commons.csv.CSVLexer cSVLexer9 = new org.apache.commons.csv.CSVLexer(cSVFormat7, extendedBufferedReader8);
        java.lang.Character char10 = cSVFormat7.getEscape();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char10);
    }

    @Test
    public void test853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test853");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVLexer4.format;
        boolean boolean8 = cSVLexer4.ignoreEmptyLines;
        boolean boolean10 = cSVLexer4.isEscape(0);
        boolean boolean12 = cSVLexer4.isStartOfLine(0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader13 = cSVLexer4.in;
        boolean boolean15 = cSVLexer4.isStartOfLine((int) (short) 10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(extendedBufferedReader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test854");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVFormat12.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat12, extendedBufferedReader14);
        boolean boolean17 = cSVLexer15.isDelimiter(0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test855");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        boolean boolean13 = cSVLexer5.isEscape((int) (short) 10);
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        boolean boolean17 = cSVLexer5.isStartOfLine((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test856");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        boolean boolean16 = cSVFormat13.isCommentingEnabled();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader17 = null;
        org.apache.commons.csv.CSVLexer cSVLexer18 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader17);
        java.lang.Character char19 = cSVFormat13.getCommentStart();
        boolean boolean20 = cSVFormat13.isQuoting();
        java.io.Reader reader21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable22 = cSVFormat13.parse(reader21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test857");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean16 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean18 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean20 = cSVLexer5.isCommentStart(100);
        boolean boolean22 = cSVLexer5.isCommentStart((int) (byte) 0);
        boolean boolean24 = cSVLexer5.isDelimiter(100);
        org.apache.commons.csv.CSVFormat cSVFormat25 = cSVLexer5.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat25);
    }

    @Test
    public void test858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test858");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        boolean boolean14 = cSVLexer5.readEndOfLine((int) (byte) 1);
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        boolean boolean17 = cSVLexer5.isStartOfLine(10);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder19 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat18);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = cSVFormat18.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormatBuilder20.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader22 = null;
        org.apache.commons.csv.CSVLexer cSVLexer23 = new org.apache.commons.csv.CSVLexer(cSVFormat21, extendedBufferedReader22);
        boolean boolean25 = cSVLexer23.isEscape(0);
        boolean boolean27 = cSVLexer23.isEscape((int) '#');
        boolean boolean28 = cSVLexer23.ignoreEmptyLines;
        boolean boolean29 = cSVLexer23.ignoreSurroundingSpaces;
        org.apache.commons.csv.Token token30 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type31 = token30.type;
        java.lang.StringBuilder stringBuilder32 = token30.content;
        cSVLexer23.trimTrailingSpaces(stringBuilder32);
        cSVLexer5.trimTrailingSpaces(stringBuilder32);
        org.apache.commons.csv.Token token35 = new org.apache.commons.csv.Token();
        token35.isReady = false;
        token35.isReady = true;
        token35.isReady = true;
        boolean boolean42 = token35.isReady;
        org.apache.commons.csv.Token token43 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type44 = org.apache.commons.csv.Token.Type.COMMENT;
        token43.type = type44;
        token35.type = type44;
        org.apache.commons.csv.Token.Type type47 = token35.type;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token48 = cSVLexer5.nextToken(token35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVFormatBuilder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type31.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder32);
        org.junit.Assert.assertEquals(stringBuilder32.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type44.equals(org.apache.commons.csv.Token.Type.COMMENT));
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.apache.commons.csv.Token.Type.COMMENT + "'", type47.equals(org.apache.commons.csv.Token.Type.COMMENT));
    }

    @Test
    public void test859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test859");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormatBuilder4.build();
        java.lang.String str6 = cSVFormat5.getNullToString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder7 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat5);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader8 = null;
        org.apache.commons.csv.CSVLexer cSVLexer9 = new org.apache.commons.csv.CSVLexer(cSVFormat5, extendedBufferedReader8);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test860");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder13 = cSVFormat12.toBuilder();
        boolean boolean14 = cSVFormat12.isCommentingEnabled();
        java.lang.String str15 = cSVFormat12.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat12.toBuilder();
        boolean boolean17 = cSVFormat12.isCommentingEnabled();
        boolean boolean18 = cSVFormat12.isQuoting();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str15, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test861");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader2 = null;
        org.apache.commons.csv.CSVLexer cSVLexer3 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader2);
        boolean boolean5 = cSVLexer3.isEndOfFile((int) '\n');
        boolean boolean6 = cSVLexer3.ignoreEmptyLines;
        boolean boolean8 = cSVLexer3.isQuoteChar((int) '4');
        boolean boolean9 = cSVLexer3.ignoreEmptyLines;
        boolean boolean11 = cSVLexer3.isStartOfLine((-1));
        boolean boolean13 = cSVLexer3.isEndOfFile((int) (short) 10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test862");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.isDelimiter((int) (byte) -1);
        boolean boolean16 = cSVLexer5.isDelimiter(100);
        boolean boolean18 = cSVLexer5.isStartOfLine((int) 'a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test863");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isWhitespace((int) '\\');
        boolean boolean17 = cSVLexer5.isWhitespace((-2));
        // The following exception was thrown during execution in test generation
        try {
            int int18 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test864");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVFormat12.isCommentingEnabled();
        java.lang.String str14 = cSVFormat12.toString();
        java.lang.Character char15 = cSVFormat12.getCommentStart();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str14, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNull(char15);
    }

    @Test
    public void test865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test865");
        org.apache.commons.csv.Quote quote3 = null;
        org.apache.commons.csv.Quote quote12 = null;
        org.apache.commons.csv.Quote quote21 = null;
        org.apache.commons.csv.Quote quote30 = null;
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat44 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote30, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray43);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder45 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote21, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray43);
        org.apache.commons.csv.Quote quote48 = null;
        org.apache.commons.csv.Quote quote57 = null;
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat71 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote57, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray70);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder72 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote48, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray70);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder73 = cSVFormatBuilder45.withHeader(strArray70);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder74 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote12, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat75 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote3, (java.lang.Character) '#', (java.lang.Character) 'a', false, false, "", "\r\n", strArray70);
        org.apache.commons.csv.Quote quote76 = cSVFormat75.getQuotePolicy();
        java.lang.String str77 = cSVFormat75.getNullToString();
        org.apache.commons.csv.CSVParser cSVParser78 = new org.apache.commons.csv.CSVParser("", cSVFormat75);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(cSVFormatBuilder73);
        org.junit.Assert.assertNull(quote76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\r\n" + "'", str77, "\r\n");
    }

    @Test
    public void test866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test866");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isWhitespace((int) (short) 10);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
    }

    @Test
    public void test867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test867");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer5.isQuoteChar((int) (short) 0);
        boolean boolean20 = cSVLexer5.isWhitespace((int) (short) 10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test868");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean13 = cSVFormat12.isCommentingEnabled();
        java.lang.Character char14 = cSVFormat12.getEscape();
        java.lang.String[] strArray15 = cSVFormat12.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNull(strArray15);
    }

    @Test
    public void test869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test869");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean16 = cSVLexer5.ignoreEmptyLines;
        boolean boolean18 = cSVLexer5.isDelimiter((int) '\t');
        boolean boolean20 = cSVLexer5.isStartOfLine((int) '\b');
        boolean boolean21 = cSVLexer5.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test870");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat13.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder16.withCommentStart((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = cSVFormatBuilder18.withIgnoreEmptyLines(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str15, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormatBuilder20);
    }

    @Test
    public void test871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test871");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.readEndOfLine((int) (short) 1);
        boolean boolean12 = cSVLexer5.ignoreEmptyLines;
        boolean boolean14 = cSVLexer5.isEndOfFile((int) (short) 0);
        boolean boolean16 = cSVLexer5.isDelimiter((int) '4');
        boolean boolean18 = cSVLexer5.isStartOfLine((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = cSVLexer5.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test872");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine(0);
        boolean boolean8 = cSVLexer4.isEndOfFile((int) (byte) 1);
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVLexer4.format;
        boolean boolean11 = cSVLexer4.isWhitespace((int) '\\');
        boolean boolean13 = cSVLexer4.isEndOfFile((int) (short) -1);
        org.apache.commons.csv.CSVFormat cSVFormat14 = cSVLexer4.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test873");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat3);
        char char7 = cSVFormat3.getDelimiter();
        java.lang.String str8 = cSVFormat3.getNullToString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + ',' + "'", char7 == ',');
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test874");
        org.apache.commons.csv.Quote quote2 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\">", "hi!", "" };
        org.apache.commons.csv.CSVFormat cSVFormat13 = new org.apache.commons.csv.CSVFormat('\\', (java.lang.Character) '4', quote2, (java.lang.Character) 'a', (java.lang.Character) '4', false, true, "", "hi!", strArray12);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        boolean boolean16 = cSVLexer15.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer15.isQuoteChar((int) '4');
        boolean boolean20 = cSVLexer15.isEscape(0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test875");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean11 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean13 = cSVLexer5.isQuoteChar((int) '\\');
        boolean boolean15 = cSVLexer5.isEscape(100);
        boolean boolean17 = cSVLexer5.isEndOfFile((int) '\n');
        boolean boolean19 = cSVLexer5.isStartOfLine(10);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test876");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean11 = cSVLexer5.ignoreSurroundingSpaces;
        org.apache.commons.csv.Token token12 = new org.apache.commons.csv.Token();
        token12.isReady = false;
        token12.isReady = true;
        token12.isReady = true;
        boolean boolean19 = token12.isReady;
        token12.reset();
        org.apache.commons.csv.Token token21 = new org.apache.commons.csv.Token();
        token21.isReady = false;
        org.apache.commons.csv.Token.Type type24 = org.apache.commons.csv.Token.Type.INVALID;
        token21.type = type24;
        token12.type = type24;
        token12.isReady = false;
        org.apache.commons.csv.Token token29 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type30 = token29.type;
        java.lang.String str31 = token29.toString();
        org.apache.commons.csv.Token.Type type32 = org.apache.commons.csv.Token.Type.EORECORD;
        token29.type = type32;
        org.apache.commons.csv.Token.Type type34 = token29.type;
        token12.type = type34;
        token12.isReady = false;
        org.apache.commons.csv.Token token38 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type39 = token38.type;
        token38.isReady = false;
        boolean boolean42 = token38.isReady;
        token38.isReady = false;
        token38.isReady = false;
        java.lang.String str47 = token38.toString();
        org.apache.commons.csv.Token.Type type48 = token38.type;
        token12.type = type48;
        java.lang.String str50 = token12.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token51 = cSVLexer5.nextToken(token12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type24.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type30.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "INVALID []" + "'", str31, "INVALID []");
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type32.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type34.equals(org.apache.commons.csv.Token.Type.EORECORD));
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type39.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "INVALID []" + "'", str47, "INVALID []");
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type48.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "INVALID []" + "'", str50, "INVALID []");
    }

    @Test
    public void test877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test877");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean3 = cSVFormat2.isEscaping();
        java.lang.Character char4 = cSVFormat2.getEscape();
        java.lang.Character char5 = cSVFormat2.getCommentStart();
        java.lang.String str6 = cSVFormat2.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder7 = cSVFormat2.toBuilder();
        java.lang.String str8 = cSVFormat2.toString();
        org.apache.commons.csv.CSVParser cSVParser9 = new org.apache.commons.csv.CSVParser("", cSVFormat2);
        org.apache.commons.csv.CSVParser cSVParser10 = new org.apache.commons.csv.CSVParser("\b", cSVFormat2);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader11 = null;
        org.apache.commons.csv.CSVLexer cSVLexer12 = new org.apache.commons.csv.CSVLexer(cSVFormat2, extendedBufferedReader11);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNull(char5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\r\n" + "'", str6, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormatBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str8, "Delimiter=<,> QuoteChar=<\">");
    }

    @Test
    public void test878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test878");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape((int) '#');
        boolean boolean11 = cSVLexer5.isWhitespace(6);
        boolean boolean13 = cSVLexer5.isEndOfFile(0);
        boolean boolean15 = cSVLexer5.isWhitespace((int) 'a');
        boolean boolean16 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean18 = cSVLexer5.isStartOfLine(0);
        boolean boolean20 = cSVLexer5.isCommentStart((int) '\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test879");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) cSVFormat13);
        java.lang.String str15 = cSVFormat13.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat13);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder16.withEscape((java.lang.Character) '\\');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder20 = cSVFormatBuilder18.withNullToString("[hi!, , hi!, , hi!, hi!]");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder22 = cSVFormatBuilder20.withQuoteChar('a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder24 = cSVFormatBuilder20.withIgnoreEmptyLines(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str15, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormatBuilder20);
        org.junit.Assert.assertNotNull(cSVFormatBuilder22);
        org.junit.Assert.assertNotNull(cSVFormatBuilder24);
    }

    @Test
    public void test880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test880");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isEscape((int) '\f');
        boolean boolean15 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean17 = cSVLexer5.isQuoteChar(6);
        boolean boolean18 = cSVLexer5.ignoreEmptyLines;
        boolean boolean20 = cSVLexer5.isEscape((int) '\b');
        boolean boolean22 = cSVLexer5.isEscape((int) '\f');
        boolean boolean24 = cSVLexer5.isCommentStart((int) (short) 100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test881");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type14 = token13.type;
        java.lang.String str15 = token13.toString();
        org.apache.commons.csv.Token.Type type16 = token13.type;
        java.lang.StringBuilder stringBuilder17 = token13.content;
        cSVLexer5.trimTrailingSpaces(stringBuilder17);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVLexer5.format;
        boolean boolean21 = cSVLexer5.isStartOfLine(3);
        boolean boolean23 = cSVLexer5.isCommentStart(6);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type14.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "INVALID []" + "'", str15, "INVALID []");
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type16.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertNotNull(stringBuilder17);
        org.junit.Assert.assertEquals(stringBuilder17.toString(), "");
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test882");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEndOfFile((int) (short) 100);
        boolean boolean11 = cSVLexer5.isCommentStart(100);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = cSVLexer5.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test883");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isQuoteChar(0);
        boolean boolean16 = cSVLexer5.ignoreEmptyLines;
        boolean boolean18 = cSVLexer5.isCommentStart((int) '\t');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test884");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        char char13 = cSVFormat12.getDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader18 = null;
        org.apache.commons.csv.CSVLexer cSVLexer19 = new org.apache.commons.csv.CSVLexer(cSVFormat17, extendedBufferedReader18);
        boolean boolean20 = cSVLexer19.ignoreEmptyLines;
        boolean boolean22 = cSVLexer19.isEndOfFile((int) (short) 10);
        boolean boolean24 = cSVLexer19.isEndOfFile(0);
        boolean boolean26 = cSVLexer19.isQuoteChar((int) '\r');
        boolean boolean28 = cSVLexer19.isDelimiter((int) (short) 0);
        boolean boolean30 = cSVLexer19.isCommentStart((int) (short) 10);
        boolean boolean31 = cSVFormat12.equals((java.lang.Object) cSVLexer19);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader32 = cSVLexer19.in;
        boolean boolean34 = cSVLexer19.isCommentStart((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = cSVLexer19.readEscape();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + ',' + "'", char13 == ',');
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(extendedBufferedReader32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test885");
        org.apache.commons.csv.Quote quote3 = org.apache.commons.csv.Quote.ALL;
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder11 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat10);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder12 = cSVFormat10.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormatBuilder12.build();
        org.apache.commons.csv.Quote quote16 = null;
        org.apache.commons.csv.Quote quote25 = null;
        org.apache.commons.csv.Quote quote34 = null;
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat48 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote34, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray47);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder49 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote25, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray47);
        org.apache.commons.csv.Quote quote52 = null;
        org.apache.commons.csv.Quote quote61 = null;
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat75 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote61, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray74);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder76 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote52, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray74);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder77 = cSVFormatBuilder49.withHeader(strArray74);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder78 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote16, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray74);
        java.lang.String str79 = cSVFormat13.format((java.lang.Object[]) strArray74);
        org.apache.commons.csv.CSVFormat cSVFormat80 = new org.apache.commons.csv.CSVFormat('\"', (java.lang.Character) '\n', quote3, (java.lang.Character) '\t', (java.lang.Character) '#', false, true, "hi!", "", strArray74);
        java.lang.String str81 = cSVFormat80.toString();
        boolean boolean82 = cSVFormat80.isEscaping();
        org.apache.commons.csv.CSVParser cSVParser83 = new org.apache.commons.csv.CSVParser("", cSVFormat80);
        org.junit.Assert.assertTrue("'" + quote3 + "' != '" + org.apache.commons.csv.Quote.ALL + "'", quote3.equals(org.apache.commons.csv.Quote.ALL));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormatBuilder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(cSVFormatBuilder77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str79, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Delimiter=<\"> Escape=<#> QuoteChar=<\n> CommentStart=<\t> EmptyLines:ignored" + "'", str81, "Delimiter=<\"> Escape=<#> QuoteChar=<\n> CommentStart=<\t> EmptyLines:ignored");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test886");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isCommentStart((int) (short) -1);
        boolean boolean16 = cSVLexer5.ignoreEmptyLines;
        boolean boolean18 = cSVLexer5.isDelimiter((int) '\t');
        boolean boolean20 = cSVLexer5.isStartOfLine((int) '\b');
        boolean boolean22 = cSVLexer5.readEndOfLine((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = cSVLexer5.readEndOfLine((int) '\r');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test887");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.ignoreEmptyLines;
        boolean boolean16 = cSVLexer5.isWhitespace((int) (short) -1);
        boolean boolean18 = cSVLexer5.isWhitespace(6);
        boolean boolean19 = cSVLexer5.ignoreSurroundingSpaces;
        boolean boolean20 = cSVLexer5.ignoreSurroundingSpaces;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test888");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isEscape(0);
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isCommentStart((int) '4');
        boolean boolean17 = cSVLexer5.isEndOfFile((int) (short) -1);
        boolean boolean18 = cSVLexer5.ignoreEmptyLines;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test889");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat1);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder3 = cSVFormat1.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormatBuilder3.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader5 = null;
        org.apache.commons.csv.CSVLexer cSVLexer6 = new org.apache.commons.csv.CSVLexer(cSVFormat4, extendedBufferedReader5);
        boolean boolean8 = cSVLexer6.isEscape(0);
        boolean boolean10 = cSVLexer6.isEscape(0);
        boolean boolean12 = cSVLexer6.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer6.format;
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader14 = null;
        org.apache.commons.csv.CSVLexer cSVLexer15 = new org.apache.commons.csv.CSVLexer(cSVFormat13, extendedBufferedReader14);
        org.apache.commons.csv.CSVParser cSVParser16 = new org.apache.commons.csv.CSVParser("", cSVFormat13);
        org.apache.commons.csv.CSVRecord cSVRecord17 = cSVParser16.nextRecord();
        long long18 = cSVParser16.getLineNumber();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormatBuilder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(cSVRecord17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test890");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isStartOfLine((int) '\r');
        org.apache.commons.csv.CSVFormat cSVFormat13 = cSVLexer5.format;
        boolean boolean15 = cSVLexer5.isCommentStart((int) (short) -1);
        org.apache.commons.csv.CSVFormat cSVFormat16 = cSVLexer5.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat16);
    }

    @Test
    public void test891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test891");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isEscaping();
        org.apache.commons.csv.Quote quote2 = cSVFormat0.getQuotePolicy();
        char char3 = cSVFormat0.getDelimiter();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = cSVLexer5.format;
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(quote2);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + ',' + "'", char3 == ',');
        org.junit.Assert.assertNotNull(cSVFormat6);
    }

    @Test
    public void test892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test892");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        org.apache.commons.csv.CSVFormat cSVFormat11 = cSVLexer5.format;
        java.lang.String str12 = cSVFormat11.toString();
        java.lang.String[] strArray13 = cSVFormat11.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder15 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat14);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormat14.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormatBuilder16.build();
        org.apache.commons.csv.Quote quote20 = null;
        org.apache.commons.csv.Quote quote29 = null;
        org.apache.commons.csv.Quote quote38 = null;
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat52 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote38, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray51);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder53 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote29, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray51);
        org.apache.commons.csv.Quote quote56 = null;
        org.apache.commons.csv.Quote quote65 = null;
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        org.apache.commons.csv.CSVFormat cSVFormat79 = new org.apache.commons.csv.CSVFormat(' ', (java.lang.Character) '#', quote65, (java.lang.Character) '\r', (java.lang.Character) '#', false, true, "hi!", "", strArray78);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder80 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('\"', (java.lang.Character) ',', quote56, (java.lang.Character) '\r', (java.lang.Character) '\\', true, true, "", "", strArray78);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder81 = cSVFormatBuilder53.withHeader(strArray78);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder82 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder('#', (java.lang.Character) '\b', quote20, (java.lang.Character) ',', (java.lang.Character) 'a', true, false, "\r\n", "", strArray78);
        java.lang.String str83 = cSVFormat17.format((java.lang.Object[]) strArray78);
        java.util.Map<java.lang.String, java.lang.Integer> strMap84 = null;
        org.apache.commons.csv.CSVRecord cSVRecord87 = new org.apache.commons.csv.CSVRecord(strArray78, strMap84, "Delimiter=<,> QuoteChar=<\">", 0L);
        java.lang.String str88 = cSVFormat11.format((java.lang.Object[]) strArray78);
        java.lang.Character char89 = cSVFormat11.getEscape();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Delimiter=<,> QuoteChar=<\">" + "'", str12, "Delimiter=<,> QuoteChar=<\">");
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(cSVFormatBuilder81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str83, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!,,hi!,,hi!,hi!" + "'", str88, "hi!,,hi!,,hi!,hi!");
        org.junit.Assert.assertNull(char89);
    }

    @Test
    public void test893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test893");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        boolean boolean2 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean6 = cSVLexer4.readEndOfLine((int) (byte) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = cSVLexer4.format;
        boolean boolean8 = cSVLexer4.ignoreEmptyLines;
        boolean boolean10 = cSVLexer4.isEscape(0);
        boolean boolean11 = cSVLexer4.ignoreSurroundingSpaces;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = cSVLexer4.getLineNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test894");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('\b');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = cSVFormatBuilder2.withEscape('\\');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = cSVFormatBuilder6.withQuoteChar('\b');
        org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormatBuilder8.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader10 = null;
        org.apache.commons.csv.CSVLexer cSVLexer11 = new org.apache.commons.csv.CSVLexer(cSVFormat9, extendedBufferedReader10);
        boolean boolean12 = cSVFormat9.isCommentingEnabled();
        java.lang.String[] strArray13 = cSVFormat9.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
        org.junit.Assert.assertNotNull(cSVFormatBuilder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strArray13);
    }

    @Test
    public void test895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test895");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(' ');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder4 = cSVFormatBuilder2.withRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder6 = cSVFormatBuilder2.withQuoteChar((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder8 = cSVFormatBuilder2.withCommentStart('\t');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder10 = cSVFormatBuilder8.withEscape('\b');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder12 = cSVFormatBuilder10.withNullToString("hi!");
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder14 = cSVFormatBuilder12.withEscape('\f');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder16 = cSVFormatBuilder14.withRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormatBuilder14.withIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormatBuilder18.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader20 = null;
        org.apache.commons.csv.CSVLexer cSVLexer21 = new org.apache.commons.csv.CSVLexer(cSVFormat19, extendedBufferedReader20);
        org.apache.commons.csv.CSVParser cSVParser22 = new org.apache.commons.csv.CSVParser(",", cSVFormat19);
        long long23 = cSVParser22.getRecordNumber();
        org.junit.Assert.assertNotNull(cSVFormatBuilder4);
        org.junit.Assert.assertNotNull(cSVFormatBuilder6);
        org.junit.Assert.assertNotNull(cSVFormatBuilder8);
        org.junit.Assert.assertNotNull(cSVFormatBuilder10);
        org.junit.Assert.assertNotNull(cSVFormatBuilder12);
        org.junit.Assert.assertNotNull(cSVFormatBuilder14);
        org.junit.Assert.assertNotNull(cSVFormatBuilder16);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test896");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        java.lang.String str1 = cSVFormat0.toString();
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = org.apache.commons.csv.CSVFormat.newBuilder(cSVFormat0);
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader3 = null;
        org.apache.commons.csv.CSVLexer cSVLexer4 = new org.apache.commons.csv.CSVLexer(cSVFormat0, extendedBufferedReader3);
        boolean boolean5 = cSVLexer4.ignoreSurroundingSpaces;
        boolean boolean7 = cSVLexer4.isEscape((int) (byte) 100);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored" + "'", str1, "Delimiter=<,> QuoteChar=<\"> EmptyLines:ignored");
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test897");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean6 = cSVLexer5.ignoreEmptyLines;
        boolean boolean8 = cSVLexer5.isEndOfFile((int) (short) 10);
        boolean boolean10 = cSVLexer5.isEndOfFile(0);
        boolean boolean12 = cSVLexer5.isQuoteChar((int) '\r');
        boolean boolean14 = cSVLexer5.isDelimiter((int) (short) 0);
        boolean boolean16 = cSVLexer5.isStartOfLine((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = cSVLexer5.readEndOfLine((int) '\r');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test898");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar(1);
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        boolean boolean14 = cSVLexer5.isEscape((int) (byte) 100);
        boolean boolean16 = cSVLexer5.isStartOfLine((int) (short) 10);
        org.apache.commons.csv.CSVFormat cSVFormat17 = cSVLexer5.format;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder18 = cSVFormat17.toBuilder();
        java.lang.Character char19 = cSVFormat17.getEscape();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormatBuilder18);
        org.junit.Assert.assertNull(char19);
    }

    @Test
    public void test899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test899");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder1 = new org.apache.commons.csv.CSVFormat.CSVFormatBuilder(cSVFormat0);
        org.apache.commons.csv.CSVFormat.CSVFormatBuilder cSVFormatBuilder2 = cSVFormat0.toBuilder();
        org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormatBuilder2.build();
        org.apache.commons.csv.ExtendedBufferedReader extendedBufferedReader4 = null;
        org.apache.commons.csv.CSVLexer cSVLexer5 = new org.apache.commons.csv.CSVLexer(cSVFormat3, extendedBufferedReader4);
        boolean boolean7 = cSVLexer5.isEscape(0);
        boolean boolean9 = cSVLexer5.isEscape(0);
        boolean boolean11 = cSVLexer5.isQuoteChar((int) '\n');
        org.apache.commons.csv.CSVFormat cSVFormat12 = cSVLexer5.format;
        org.apache.commons.csv.Token token13 = new org.apache.commons.csv.Token();
        token13.isReady = false;
        org.apache.commons.csv.Token.Type type16 = org.apache.commons.csv.Token.Type.INVALID;
        token13.type = type16;
        org.apache.commons.csv.Token token18 = new org.apache.commons.csv.Token();
        org.apache.commons.csv.Token.Type type19 = token18.type;
        java.lang.String str20 = token18.toString();
        org.apache.commons.csv.Token.Type type21 = org.apache.commons.csv.Token.Type.EORECORD;
        token18.type = type21;
        token13.type = type21;
        token13.isReady = false;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.Token token26 = cSVLexer5.nextToken(token13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormatBuilder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type16.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.apache.commons.csv.Token.Type.INVALID + "'", type19.equals(org.apache.commons.csv.Token.Type.INVALID));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "INVALID []" + "'", str20, "INVALID []");
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.apache.commons.csv.Token.Type.EORECORD + "'", type21.equals(org.apache.commons.csv.Token.Type.EORECORD));
    }
}

