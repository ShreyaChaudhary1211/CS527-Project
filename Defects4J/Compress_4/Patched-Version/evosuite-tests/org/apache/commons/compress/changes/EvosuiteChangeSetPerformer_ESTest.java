/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 30 00:24:52 GMT 2024
 */

package org.apache.commons.compress.changes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuiteChangeSetPerformer_ESTest extends EvosuiteChangeSetPerformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("}]p!I");
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      changeSet0.add((ArchiveEntry) cpioArchiveEntry0, (InputStream) zipArchiveInputStream0, true);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}]p!I", true);
      CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(mockFileOutputStream0);
      ChangeSetResults changeSetResults0 = changeSetPerformer0.perform(zipArchiveInputStream0, cpioArchiveOutputStream0);
      assertNotNull(changeSetResults0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, (byte)0, (byte) (-1));
      File file0 = MockFile.createTempFile("d>fgH", "d>fgH");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform(tarArchiveInputStream0, zipArchiveOutputStream0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, 0, 86);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform(tarArchiveInputStream0, (ArchiveOutputStream) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(byteArrayInputStream0);
      try { 
        changeSetPerformer0.perform(cpioArchiveInputStream0, (ArchiveOutputStream) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChangeSetPerformer changeSetPerformer0 = null;
      try {
        changeSetPerformer0 = new ChangeSetPerformer((ChangeSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.ChangeSetPerformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      byte[] byteArray0 = new byte[13];
      byteArray0[6] = (byte) (-28);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("org.apache.commons.compress.changes.ChangeSetPerformer", 1793L);
      changeSet0.add((ArchiveEntry) arArchiveEntry0, (InputStream) byteArrayInputStream0, false);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform(tarArchiveInputStream0, (ArchiveOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.ChangeSetPerformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-28);
      changeSet0.delete("\uFFE4");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform(tarArchiveInputStream0, (ArchiveOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.ChangeSetPerformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      byte[] byteArray0 = new byte[1];
      changeSet0.deleteDir("Pvxdg$N");
      byteArray0[0] = (byte) (-28);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform(tarArchiveInputStream0, (ArchiveOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.ChangeSetPerformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      byte[] byteArray0 = new byte[1];
      changeSet0.delete("}vC)[");
      byteArray0[0] = (byte) (-28);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);
      JarArchiveOutputStream jarArchiveOutputStream0 = new JarArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform(tarArchiveInputStream0, jarArchiveOutputStream0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry
         //
         verifyException("org.apache.commons.compress.archivers.jar.JarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      byte[] byteArray0 = new byte[13];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("org.apache.commons.compress.changes.ChangeSetPerformer", 1793L);
      changeSet0.add((ArchiveEntry) arArchiveEntry0, (InputStream) byteArrayInputStream0, false);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform(tarArchiveInputStream0, (ArchiveOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.ChangeSetPerformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      byte[] byteArray0 = new byte[1];
      changeSet0.delete("}vC)[");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);
      JarArchiveOutputStream jarArchiveOutputStream0 = new JarArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform(tarArchiveInputStream0, jarArchiveOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);
      JarArchiveOutputStream jarArchiveOutputStream0 = new JarArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform(tarArchiveInputStream0, jarArchiveOutputStream0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry
         //
         verifyException("org.apache.commons.compress.archivers.jar.JarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ArArchiveInputStream arArchiveInputStream0 = new ArArchiveInputStream(byteArrayInputStream0);
      try { 
        changeSetPerformer0.perform(arArchiveInputStream0, (ArchiveOutputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // failed to read header. Occured at byte: 0
         //
         verifyException("org.apache.commons.compress.archivers.ar.ArArchiveInputStream", e);
      }
  }
}
