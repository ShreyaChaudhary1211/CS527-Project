/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 30 00:18:34 GMT 2024
 */

package org.apache.commons.compress.changes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuiteChangeSetPerformer_ESTest extends EvosuiteChangeSetPerformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 4);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pushbackInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      ChangeSetResults changeSetResults0 = changeSetPerformer0.perform(tarArchiveInputStream0, tarArchiveOutputStream0);
      assertNotNull(changeSetResults0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      changeSet0.add((ArchiveEntry) tarArchiveEntry0, (InputStream) pipedInputStream0);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(pipedInputStream0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform(jarArchiveInputStream0, zipArchiveOutputStream0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pipedInputStream0, 0, 2601);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform(tarArchiveInputStream0, (ArchiveOutputStream) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(pipedInputStream0);
      try { 
        changeSetPerformer0.perform(jarArchiveInputStream0, (ArchiveOutputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ChangeSetPerformer changeSetPerformer0 = null;
      try {
        changeSetPerformer0 = new ChangeSetPerformer((ChangeSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.ChangeSetPerformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      changeSet0.delete("");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      ChangeSetResults changeSetResults0 = changeSetPerformer0.perform(tarArchiveInputStream0, (ArchiveOutputStream) null);
      assertNotNull(changeSetResults0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      changeSet0.deleteDir("");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pushbackInputStream0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform(tarArchiveInputStream0, (ArchiveOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.ChangeSetPerformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      changeSet0.delete("");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pushbackInputStream0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform(tarArchiveInputStream0, (ArchiveOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.ChangeSetPerformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      byte[] byteArray0 = new byte[7];
      changeSet0.delete("");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pushbackInputStream0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      ChangeSetResults changeSetResults0 = changeSetPerformer0.perform(tarArchiveInputStream0, (ArchiveOutputStream) null);
      assertNotNull(changeSetResults0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, 1019, 8993);
      CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(tarArchiveInputStream0);
      try { 
        changeSetPerformer0.perform(cpioArchiveInputStream0, (ArchiveOutputStream) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream", e);
      }
  }
}
